
003_Single_Module_ADC_Implementation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb74  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c8c  0800ed48  0800ed48  0001ed48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9d4  0800f9d4  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9d4  0800f9d4  0001f9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9dc  0800f9dc  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9dc  0800f9dc  0001f9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9e0  0800f9e0  0001f9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800f9e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eb8  20000200  0800fbe4  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200050b8  0800fbe4  000250b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a537  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039c5  00000000  00000000  0003a767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0003e130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003f3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266db  00000000  00000000  000404f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b1b  00000000  00000000  00066bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcf5c  00000000  00000000  000806e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d642  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f0  00000000  00000000  0015d698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ed2c 	.word	0x0800ed2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800ed2c 	.word	0x0800ed2c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <ESP_Send_Server_Multi>:




void ESP_Send_Server_Multi (char *APIkey, int numberoffileds, float value[])
{
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	f2ad 4dfc 	subw	sp, sp, #1276	; 0x4fc
 8001032:	af02      	add	r7, sp, #8
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	6018      	str	r0, [r3, #0]
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	6019      	str	r1, [r3, #0]
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	601a      	str	r2, [r3, #0]
	char local_buf[1000] = {0};
 8001044:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	3304      	adds	r3, #4
 800104e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f009 f805 	bl	800a064 <memset>
	char local_buf2[30] = {0};
 800105a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	3304      	adds	r3, #4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	615a      	str	r2, [r3, #20]
 8001072:	831a      	strh	r2, [r3, #24]
	char field_buf[200] = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	3304      	adds	r3, #4
 800107e:	22c4      	movs	r2, #196	; 0xc4
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f008 ffee 	bl	800a064 <memset>
	uint8_t Sendservercase=0;
 8001088:	2300      	movs	r3, #0
 800108a:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef

	while(Sendservercase==0)
 800108e:	e041      	b.n	8001114 <ESP_Send_Server_Multi+0xe8>
	{
		USART_puts("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n",wifi_uart);//ip adresimi yazdım
 8001090:	4995      	ldr	r1, [pc, #596]	; (80012e8 <ESP_Send_Server_Multi+0x2bc>)
 8001092:	4896      	ldr	r0, [pc, #600]	; (80012ec <ESP_Send_Server_Multi+0x2c0>)
 8001094:	f000 fa68 	bl	8001568 <USART_puts>
		HAL_Delay(1000);
 8001098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109c:	f002 faa6 	bl	80035ec <HAL_Delay>
		USART_puts("TCP Baglanti istegi gonderildi\n\n", pc_uart);
 80010a0:	4993      	ldr	r1, [pc, #588]	; (80012f0 <ESP_Send_Server_Multi+0x2c4>)
 80010a2:	4894      	ldr	r0, [pc, #592]	; (80012f4 <ESP_Send_Server_Multi+0x2c8>)
 80010a4:	f000 fa60 	bl	8001568 <USART_puts>
		HAL_Delay(200);
 80010a8:	20c8      	movs	r0, #200	; 0xc8
 80010aa:	f002 fa9f 	bl	80035ec <HAL_Delay>
		if (strstr(wifi_rx_buffer,"OK") != NULL)//veya connect yazılabilir
 80010ae:	4992      	ldr	r1, [pc, #584]	; (80012f8 <ESP_Send_Server_Multi+0x2cc>)
 80010b0:	4892      	ldr	r0, [pc, #584]	; (80012fc <ESP_Send_Server_Multi+0x2d0>)
 80010b2:	f009 fe9b 	bl	800adec <strstr>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00b      	beq.n	80010d4 <ESP_Send_Server_Multi+0xa8>
		{

			USART_puts("Site ile baglanti kuruldu\n\n", pc_uart);
 80010bc:	498c      	ldr	r1, [pc, #560]	; (80012f0 <ESP_Send_Server_Multi+0x2c4>)
 80010be:	4890      	ldr	r0, [pc, #576]	; (8001300 <ESP_Send_Server_Multi+0x2d4>)
 80010c0:	f000 fa52 	bl	8001568 <USART_puts>
			HAL_Delay(500);
 80010c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010c8:	f002 fa90 	bl	80035ec <HAL_Delay>
			Sendservercase = 1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
 80010d2:	e01d      	b.n	8001110 <ESP_Send_Server_Multi+0xe4>
//			Clear_ESPBuffer();
		}

		else if (strstr(wifi_rx_buffer,"ALREAY CONNECT") != NULL)//veya connect yazılabilir
 80010d4:	498b      	ldr	r1, [pc, #556]	; (8001304 <ESP_Send_Server_Multi+0x2d8>)
 80010d6:	4889      	ldr	r0, [pc, #548]	; (80012fc <ESP_Send_Server_Multi+0x2d0>)
 80010d8:	f009 fe88 	bl	800adec <strstr>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00b      	beq.n	80010fa <ESP_Send_Server_Multi+0xce>
		{

			USART_puts("Site ile baglanti kuruldu\n\n", pc_uart);
 80010e2:	4983      	ldr	r1, [pc, #524]	; (80012f0 <ESP_Send_Server_Multi+0x2c4>)
 80010e4:	4886      	ldr	r0, [pc, #536]	; (8001300 <ESP_Send_Server_Multi+0x2d4>)
 80010e6:	f000 fa3f 	bl	8001568 <USART_puts>
			HAL_Delay(500);
 80010ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ee:	f002 fa7d 	bl	80035ec <HAL_Delay>
			Sendservercase = 1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
 80010f8:	e00a      	b.n	8001110 <ESP_Send_Server_Multi+0xe4>
		}


		else
		{
			USART_puts("Site baglantisi olmadi.Tekrar Dene.\n",pc_uart);
 80010fa:	497d      	ldr	r1, [pc, #500]	; (80012f0 <ESP_Send_Server_Multi+0x2c4>)
 80010fc:	4882      	ldr	r0, [pc, #520]	; (8001308 <ESP_Send_Server_Multi+0x2dc>)
 80010fe:	f000 fa33 	bl	8001568 <USART_puts>
			HAL_Delay(500);
 8001102:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001106:	f002 fa71 	bl	80035ec <HAL_Delay>
			Sendservercase = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
		}
		Clear_ESPBuffer();
 8001110:	f000 fa0c 	bl	800152c <Clear_ESPBuffer>
	while(Sendservercase==0)
 8001114:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0b9      	beq.n	8001090 <ESP_Send_Server_Multi+0x64>
	}

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);//GET /update?api_key=%s in arkasına 4 veriyi
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4979      	ldr	r1, [pc, #484]	; (800130c <ESP_Send_Server_Multi+0x2e0>)
 8001128:	f009 fe24 	bl	800ad74 <siprintf>
	for (int i=0; i<numberoffileds; i++)                  // ekliyoruz.
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8001132:	e023      	b.n	800117c <ESP_Send_Server_Multi+0x150>
	{
		sprintf(field_buf, "&field%d=%.3f",i+1, value[i]);
 8001134:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 8001138:	1c5c      	adds	r4, r3, #1
 800113a:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	1d3a      	adds	r2, r7, #4
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	4413      	add	r3, r2
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa1d 	bl	8000588 <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	f107 0014 	add.w	r0, r7, #20
 8001156:	e9cd 2300 	strd	r2, r3, [sp]
 800115a:	4622      	mov	r2, r4
 800115c:	496c      	ldr	r1, [pc, #432]	; (8001310 <ESP_Send_Server_Multi+0x2e4>)
 800115e:	f009 fe09 	bl	800ad74 <siprintf>
		strcat (local_buf, field_buf);
 8001162:	f107 0214 	add.w	r2, r7, #20
 8001166:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f009 fe21 	bl	800adb4 <strcat>
	for (int i=0; i<numberoffileds; i++)                  // ekliyoruz.
 8001172:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 8001176:	3301      	adds	r3, #1
 8001178:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	; 0x4e8
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	dbd4      	blt.n	8001134 <ESP_Send_Server_Multi+0x108>
	}

	strcat(local_buf, "\r\n");
 800118a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f83e 	bl	8000210 <strlen>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800119c:	4413      	add	r3, r2
 800119e:	4a5d      	ldr	r2, [pc, #372]	; (8001314 <ESP_Send_Server_Multi+0x2e8>)
 80011a0:	8811      	ldrh	r1, [r2, #0]
 80011a2:	7892      	ldrb	r2, [r2, #2]
 80011a4:	8019      	strh	r1, [r3, #0]
 80011a6:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 80011a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f82f 	bl	8000210 <strlen>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4

	while(Sendservercase==1)// veri gönderiliyor
 80011b8:	e031      	b.n	800121e <ESP_Send_Server_Multi+0x1f2>
	{
		sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);// verinin boyutunu gönderiyoruz
 80011ba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011be:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 80011c2:	4955      	ldr	r1, [pc, #340]	; (8001318 <ESP_Send_Server_Multi+0x2ec>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f009 fdd5 	bl	800ad74 <siprintf>
		USART_puts(local_buf2,wifi_uart);
 80011ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011ce:	4946      	ldr	r1, [pc, #280]	; (80012e8 <ESP_Send_Server_Multi+0x2bc>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f9c9 	bl	8001568 <USART_puts>
		HAL_Delay(1000);
 80011d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011da:	f002 fa07 	bl	80035ec <HAL_Delay>
		if (strstr(wifi_rx_buffer,">") != NULL)
 80011de:	213e      	movs	r1, #62	; 0x3e
 80011e0:	4846      	ldr	r0, [pc, #280]	; (80012fc <ESP_Send_Server_Multi+0x2d0>)
 80011e2:	f009 fdf6 	bl	800add2 <strchr>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00d      	beq.n	8001208 <ESP_Send_Server_Multi+0x1dc>
		{

			USART_puts("Veri boyutu kabul edildi\n\n", pc_uart);
 80011ec:	4940      	ldr	r1, [pc, #256]	; (80012f0 <ESP_Send_Server_Multi+0x2c4>)
 80011ee:	484b      	ldr	r0, [pc, #300]	; (800131c <ESP_Send_Server_Multi+0x2f0>)
 80011f0:	f000 f9ba 	bl	8001568 <USART_puts>
			HAL_Delay(500);
 80011f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f8:	f002 f9f8 	bl	80035ec <HAL_Delay>
			Sendservercase = 2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
			Clear_ESPBuffer();
 8001202:	f000 f993 	bl	800152c <Clear_ESPBuffer>
 8001206:	e00a      	b.n	800121e <ESP_Send_Server_Multi+0x1f2>
		}
		else
		{
			USART_puts("Veri boyutu kabul edilmedi\n\n",pc_uart);
 8001208:	4939      	ldr	r1, [pc, #228]	; (80012f0 <ESP_Send_Server_Multi+0x2c4>)
 800120a:	4845      	ldr	r0, [pc, #276]	; (8001320 <ESP_Send_Server_Multi+0x2f4>)
 800120c:	f000 f9ac 	bl	8001568 <USART_puts>
			HAL_Delay(500);
 8001210:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001214:	f002 f9ea 	bl	80035ec <HAL_Delay>
			Sendservercase = 1;
 8001218:	2301      	movs	r3, #1
 800121a:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
	while(Sendservercase==1)// veri gönderiliyor
 800121e:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 8001222:	2b01      	cmp	r3, #1
 8001224:	d0c9      	beq.n	80011ba <ESP_Send_Server_Multi+0x18e>
		}
	}
	while(Sendservercase==2)//veriyi gönderiyoruz
 8001226:	e027      	b.n	8001278 <ESP_Send_Server_Multi+0x24c>
	{
		USART_puts(local_buf,wifi_uart);
 8001228:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800122c:	492e      	ldr	r1, [pc, #184]	; (80012e8 <ESP_Send_Server_Multi+0x2bc>)
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f99a 	bl	8001568 <USART_puts>
		HAL_Delay(500);
 8001234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001238:	f002 f9d8 	bl	80035ec <HAL_Delay>
		if (strstr(wifi_rx_buffer,"SEND OK\r\n") != NULL)
 800123c:	4939      	ldr	r1, [pc, #228]	; (8001324 <ESP_Send_Server_Multi+0x2f8>)
 800123e:	482f      	ldr	r0, [pc, #188]	; (80012fc <ESP_Send_Server_Multi+0x2d0>)
 8001240:	f009 fdd4 	bl	800adec <strstr>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <ESP_Send_Server_Multi+0x236>
		{

			USART_puts("Veri kabul edildi\n\n", pc_uart);
 800124a:	4929      	ldr	r1, [pc, #164]	; (80012f0 <ESP_Send_Server_Multi+0x2c4>)
 800124c:	4836      	ldr	r0, [pc, #216]	; (8001328 <ESP_Send_Server_Multi+0x2fc>)
 800124e:	f000 f98b 	bl	8001568 <USART_puts>
			HAL_Delay(500);
 8001252:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001256:	f002 f9c9 	bl	80035ec <HAL_Delay>
			Sendservercase = 3;
 800125a:	2303      	movs	r3, #3
 800125c:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
 8001260:	e00a      	b.n	8001278 <ESP_Send_Server_Multi+0x24c>
			//Clear_ESPBuffer();
		}
		else
		{
			USART_puts("Veri kabul edilmedi\n\n",pc_uart);
 8001262:	4923      	ldr	r1, [pc, #140]	; (80012f0 <ESP_Send_Server_Multi+0x2c4>)
 8001264:	4831      	ldr	r0, [pc, #196]	; (800132c <ESP_Send_Server_Multi+0x300>)
 8001266:	f000 f97f 	bl	8001568 <USART_puts>
			HAL_Delay(500);
 800126a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800126e:	f002 f9bd 	bl	80035ec <HAL_Delay>
			Sendservercase = 2;
 8001272:	2302      	movs	r3, #2
 8001274:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
	while(Sendservercase==2)//veriyi gönderiyoruz
 8001278:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 800127c:	2b02      	cmp	r3, #2
 800127e:	d0d3      	beq.n	8001228 <ESP_Send_Server_Multi+0x1fc>
		}
	}
	while(Sendservercase==3)
 8001280:	e01f      	b.n	80012c2 <ESP_Send_Server_Multi+0x296>
	{
		if (strstr(wifi_rx_buffer,"OK") != NULL)
 8001282:	491d      	ldr	r1, [pc, #116]	; (80012f8 <ESP_Send_Server_Multi+0x2cc>)
 8001284:	481d      	ldr	r0, [pc, #116]	; (80012fc <ESP_Send_Server_Multi+0x2d0>)
 8001286:	f009 fdb1 	bl	800adec <strstr>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00d      	beq.n	80012ac <ESP_Send_Server_Multi+0x280>
		{

			USART_puts("veri akisi kapandi\n\n", pc_uart);
 8001290:	4917      	ldr	r1, [pc, #92]	; (80012f0 <ESP_Send_Server_Multi+0x2c4>)
 8001292:	4827      	ldr	r0, [pc, #156]	; (8001330 <ESP_Send_Server_Multi+0x304>)
 8001294:	f000 f968 	bl	8001568 <USART_puts>
			HAL_Delay(500);
 8001298:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800129c:	f002 f9a6 	bl	80035ec <HAL_Delay>
			Sendservercase = 4;
 80012a0:	2304      	movs	r3, #4
 80012a2:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
			Clear_ESPBuffer();
 80012a6:	f000 f941 	bl	800152c <Clear_ESPBuffer>
 80012aa:	e00a      	b.n	80012c2 <ESP_Send_Server_Multi+0x296>
		}
		else
		{
			USART_puts("Veri akisi kapanmadi\n\n",pc_uart);
 80012ac:	4910      	ldr	r1, [pc, #64]	; (80012f0 <ESP_Send_Server_Multi+0x2c4>)
 80012ae:	4821      	ldr	r0, [pc, #132]	; (8001334 <ESP_Send_Server_Multi+0x308>)
 80012b0:	f000 f95a 	bl	8001568 <USART_puts>
			HAL_Delay(5000);
 80012b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80012b8:	f002 f998 	bl	80035ec <HAL_Delay>
			Sendservercase = 3;
 80012bc:	2303      	movs	r3, #3
 80012be:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
	while(Sendservercase==3)
 80012c2:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d0db      	beq.n	8001282 <ESP_Send_Server_Multi+0x256>
		}
	}
	bufclr(local_buf);
 80012ca:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f90e 	bl	80014f0 <bufclr>
	bufclr(local_buf2);
 80012d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f909 	bl	80014f0 <bufclr>

}
 80012de:	bf00      	nop
 80012e0:	f207 47f4 	addw	r7, r7, #1268	; 0x4f4
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd90      	pop	{r4, r7, pc}
 80012e8:	200008c4 	.word	0x200008c4
 80012ec:	0800ed48 	.word	0x0800ed48
 80012f0:	20002f80 	.word	0x20002f80
 80012f4:	0800ed74 	.word	0x0800ed74
 80012f8:	0800ed98 	.word	0x0800ed98
 80012fc:	20000410 	.word	0x20000410
 8001300:	0800ed9c 	.word	0x0800ed9c
 8001304:	0800edb8 	.word	0x0800edb8
 8001308:	0800edc8 	.word	0x0800edc8
 800130c:	0800edf0 	.word	0x0800edf0
 8001310:	0800ee08 	.word	0x0800ee08
 8001314:	0800ee18 	.word	0x0800ee18
 8001318:	0800ee1c 	.word	0x0800ee1c
 800131c:	0800ee2c 	.word	0x0800ee2c
 8001320:	0800ee48 	.word	0x0800ee48
 8001324:	0800ee68 	.word	0x0800ee68
 8001328:	0800ee74 	.word	0x0800ee74
 800132c:	0800ee88 	.word	0x0800ee88
 8001330:	0800eea0 	.word	0x0800eea0
 8001334:	0800eeb8 	.word	0x0800eeb8

08001338 <ESP8266_Init>:

void ESP8266_Init(char *ag_adi,char *parola)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
	uint8_t ESPEventCase=0;
 8001342:	2300      	movs	r3, #0
 8001344:	73fb      	strb	r3, [r7, #15]
	//		{
	//			USART_puts(".", pc_uart);
	//			HAL_Delay(1000);
	//		}

	while(ESPEventCase==0)/*********  AT **********/
 8001346:	e025      	b.n	8001394 <ESP8266_Init+0x5c>
	{
		USART_puts("AT\r\n",wifi_uart);
 8001348:	4955      	ldr	r1, [pc, #340]	; (80014a0 <ESP8266_Init+0x168>)
 800134a:	4856      	ldr	r0, [pc, #344]	; (80014a4 <ESP8266_Init+0x16c>)
 800134c:	f000 f90c 	bl	8001568 <USART_puts>
		HAL_Delay(500);
 8001350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001354:	f002 f94a 	bl	80035ec <HAL_Delay>
		USART_puts("\nAT atildi\r\n",pc_uart);
 8001358:	4953      	ldr	r1, [pc, #332]	; (80014a8 <ESP8266_Init+0x170>)
 800135a:	4854      	ldr	r0, [pc, #336]	; (80014ac <ESP8266_Init+0x174>)
 800135c:	f000 f904 	bl	8001568 <USART_puts>
		HAL_Delay(500);
 8001360:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001364:	f002 f942 	bl	80035ec <HAL_Delay>

		if (strstr(wifi_rx_buffer,"OK") != NULL)
 8001368:	4951      	ldr	r1, [pc, #324]	; (80014b0 <ESP8266_Init+0x178>)
 800136a:	4852      	ldr	r0, [pc, #328]	; (80014b4 <ESP8266_Init+0x17c>)
 800136c:	f009 fd3e 	bl	800adec <strstr>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d006      	beq.n	8001384 <ESP8266_Init+0x4c>
		{

			USART_puts("Module Erisildi\n",pc_uart);
 8001376:	494c      	ldr	r1, [pc, #304]	; (80014a8 <ESP8266_Init+0x170>)
 8001378:	484f      	ldr	r0, [pc, #316]	; (80014b8 <ESP8266_Init+0x180>)
 800137a:	f000 f8f5 	bl	8001568 <USART_puts>
			ESPEventCase = 1;
 800137e:	2301      	movs	r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	e005      	b.n	8001390 <ESP8266_Init+0x58>

		}
		else
		{
			USART_puts("Modul Bulunamadi, Tekrar Deneniyor\n",pc_uart);
 8001384:	4948      	ldr	r1, [pc, #288]	; (80014a8 <ESP8266_Init+0x170>)
 8001386:	484d      	ldr	r0, [pc, #308]	; (80014bc <ESP8266_Init+0x184>)
 8001388:	f000 f8ee 	bl	8001568 <USART_puts>
			ESPEventCase =0 ;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
		}
		Clear_ESPBuffer();
 8001390:	f000 f8cc 	bl	800152c <Clear_ESPBuffer>
	while(ESPEventCase==0)/*********  AT **********/
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0d6      	beq.n	8001348 <ESP8266_Init+0x10>
	}
	while(ESPEventCase==1) /********* AT+CWMODE=1 **********/
 800139a:	e025      	b.n	80013e8 <ESP8266_Init+0xb0>
	{
		USART_puts("AT+CWMODE?\r\n",wifi_uart);//hangi modda diye sorduk	                                         // 1 saniye gecikme koyuyoruz.
 800139c:	4940      	ldr	r1, [pc, #256]	; (80014a0 <ESP8266_Init+0x168>)
 800139e:	4848      	ldr	r0, [pc, #288]	; (80014c0 <ESP8266_Init+0x188>)
 80013a0:	f000 f8e2 	bl	8001568 <USART_puts>
		HAL_Delay(1000);
 80013a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a8:	f002 f920 	bl	80035ec <HAL_Delay>

		if (strstr(wifi_rx_buffer,"+CWMODE:1") != NULL)
 80013ac:	4945      	ldr	r1, [pc, #276]	; (80014c4 <ESP8266_Init+0x18c>)
 80013ae:	4841      	ldr	r0, [pc, #260]	; (80014b4 <ESP8266_Init+0x17c>)
 80013b0:	f009 fd1c 	bl	800adec <strstr>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <ESP8266_Init+0x90>
		{

			USART_puts("MODE Ayar Dogru\n",pc_uart); //1 'se application modda old. öğrendik
 80013ba:	493b      	ldr	r1, [pc, #236]	; (80014a8 <ESP8266_Init+0x170>)
 80013bc:	4842      	ldr	r0, [pc, #264]	; (80014c8 <ESP8266_Init+0x190>)
 80013be:	f000 f8d3 	bl	8001568 <USART_puts>
			ESPEventCase=2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	e00d      	b.n	80013e4 <ESP8266_Init+0xac>
		}
		else
		{
			// Fabrika ayarlari olarak 2 geliyor biz onu 1 yapip reset komutu ile tamamlariz.
			USART_puts("AT+CWMODE=1\r\n",wifi_uart);
 80013c8:	4935      	ldr	r1, [pc, #212]	; (80014a0 <ESP8266_Init+0x168>)
 80013ca:	4840      	ldr	r0, [pc, #256]	; (80014cc <ESP8266_Init+0x194>)
 80013cc:	f000 f8cc 	bl	8001568 <USART_puts>
			HAL_Delay(1000);
 80013d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d4:	f002 f90a 	bl	80035ec <HAL_Delay>
			USART_puts("MOD Degistirildi.\n",pc_uart);
 80013d8:	4933      	ldr	r1, [pc, #204]	; (80014a8 <ESP8266_Init+0x170>)
 80013da:	483d      	ldr	r0, [pc, #244]	; (80014d0 <ESP8266_Init+0x198>)
 80013dc:	f000 f8c4 	bl	8001568 <USART_puts>
			ESPEventCase = 1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
		}
		Clear_ESPBuffer();
 80013e4:	f000 f8a2 	bl	800152c <Clear_ESPBuffer>
	while(ESPEventCase==1) /********* AT+CWMODE=1 **********/
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d0d6      	beq.n	800139c <ESP8266_Init+0x64>
	}
	while(ESPEventCase==2) /********* AT+CWJAP="SSID","PASSWD" **********/
 80013ee:	e027      	b.n	8001440 <ESP8266_Init+0x108>
	{
		sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", ag_adi, parola);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	4937      	ldr	r1, [pc, #220]	; (80014d4 <ESP8266_Init+0x19c>)
 80013f6:	4838      	ldr	r0, [pc, #224]	; (80014d8 <ESP8266_Init+0x1a0>)
 80013f8:	f009 fcbc 	bl	800ad74 <siprintf>
		USART_puts(data, wifi_uart);
 80013fc:	4928      	ldr	r1, [pc, #160]	; (80014a0 <ESP8266_Init+0x168>)
 80013fe:	4836      	ldr	r0, [pc, #216]	; (80014d8 <ESP8266_Init+0x1a0>)
 8001400:	f000 f8b2 	bl	8001568 <USART_puts>
		HAL_Delay(2000);
 8001404:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001408:	f002 f8f0 	bl	80035ec <HAL_Delay>

		if (strstr(wifi_rx_buffer,"OK") != NULL)
 800140c:	4928      	ldr	r1, [pc, #160]	; (80014b0 <ESP8266_Init+0x178>)
 800140e:	4829      	ldr	r0, [pc, #164]	; (80014b4 <ESP8266_Init+0x17c>)
 8001410:	f009 fcec 	bl	800adec <strstr>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d008      	beq.n	800142c <ESP8266_Init+0xf4>
		{
			USART_puts("Modeme Baglanti yapildi\n",pc_uart);
 800141a:	4923      	ldr	r1, [pc, #140]	; (80014a8 <ESP8266_Init+0x170>)
 800141c:	482f      	ldr	r0, [pc, #188]	; (80014dc <ESP8266_Init+0x1a4>)
 800141e:	f000 f8a3 	bl	8001568 <USART_puts>
			ESPEventCase = 3;
 8001422:	2303      	movs	r3, #3
 8001424:	73fb      	strb	r3, [r7, #15]
			Clear_ESPBuffer();
 8001426:	f000 f881 	bl	800152c <Clear_ESPBuffer>
 800142a:	e009      	b.n	8001440 <ESP8266_Init+0x108>
		}
		else
		{
			USART_puts("Modeme Baglanti Bekleniyor\n",pc_uart);
 800142c:	491e      	ldr	r1, [pc, #120]	; (80014a8 <ESP8266_Init+0x170>)
 800142e:	482c      	ldr	r0, [pc, #176]	; (80014e0 <ESP8266_Init+0x1a8>)
 8001430:	f000 f89a 	bl	8001568 <USART_puts>
			HAL_Delay(2000);
 8001434:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001438:	f002 f8d8 	bl	80035ec <HAL_Delay>
			ESPEventCase=2;
 800143c:	2302      	movs	r3, #2
 800143e:	73fb      	strb	r3, [r7, #15]
	while(ESPEventCase==2) /********* AT+CWJAP="SSID","PASSWD" **********/
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d0d4      	beq.n	80013f0 <ESP8266_Init+0xb8>
	//			USART_puts("Tekrar Dene.\n",pc_uart);
	//			ESPEventCase=3;
	//		}
	//		Clear_ESPBuffer();
	//	}
	while(ESPEventCase==3)/********* AT+CIPMUX=0 **********/// 0=tekil bağ,1=çoğ bağlantı
 8001446:	e023      	b.n	8001490 <ESP8266_Init+0x158>
	{
		USART_puts("AT+CIPMUX=0\r\n",wifi_uart);
 8001448:	4915      	ldr	r1, [pc, #84]	; (80014a0 <ESP8266_Init+0x168>)
 800144a:	4826      	ldr	r0, [pc, #152]	; (80014e4 <ESP8266_Init+0x1ac>)
 800144c:	f000 f88c 	bl	8001568 <USART_puts>
		HAL_Delay(1000);
 8001450:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001454:	f002 f8ca 	bl	80035ec <HAL_Delay>
		if (strstr(wifi_rx_buffer,"OK") != NULL)
 8001458:	4915      	ldr	r1, [pc, #84]	; (80014b0 <ESP8266_Init+0x178>)
 800145a:	4816      	ldr	r0, [pc, #88]	; (80014b4 <ESP8266_Init+0x17c>)
 800145c:	f009 fcc6 	bl	800adec <strstr>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d008      	beq.n	8001478 <ESP8266_Init+0x140>
		{
			USART_puts("Tekil Baglanti yapildi\n",pc_uart);
 8001466:	4910      	ldr	r1, [pc, #64]	; (80014a8 <ESP8266_Init+0x170>)
 8001468:	481f      	ldr	r0, [pc, #124]	; (80014e8 <ESP8266_Init+0x1b0>)
 800146a:	f000 f87d 	bl	8001568 <USART_puts>
			ESPEventCase = 4;
 800146e:	2304      	movs	r3, #4
 8001470:	73fb      	strb	r3, [r7, #15]
			Clear_ESPBuffer();
 8001472:	f000 f85b 	bl	800152c <Clear_ESPBuffer>
 8001476:	e009      	b.n	800148c <ESP8266_Init+0x154>
		}
		else
		{
			USART_puts("Tekil baglanti yapilamadi\n",pc_uart);
 8001478:	490b      	ldr	r1, [pc, #44]	; (80014a8 <ESP8266_Init+0x170>)
 800147a:	481c      	ldr	r0, [pc, #112]	; (80014ec <ESP8266_Init+0x1b4>)
 800147c:	f000 f874 	bl	8001568 <USART_puts>
			HAL_Delay(2000);
 8001480:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001484:	f002 f8b2 	bl	80035ec <HAL_Delay>
			ESPEventCase=3;
 8001488:	2303      	movs	r3, #3
 800148a:	73fb      	strb	r3, [r7, #15]
			//	Clear_ESPBuffer();
		}
		Clear_ESPBuffer();
 800148c:	f000 f84e 	bl	800152c <Clear_ESPBuffer>
	while(ESPEventCase==3)/********* AT+CIPMUX=0 **********/// 0=tekil bağ,1=çoğ bağlantı
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d0d8      	beq.n	8001448 <ESP8266_Init+0x110>
	}
}
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200008c4 	.word	0x200008c4
 80014a4:	0800eed0 	.word	0x0800eed0
 80014a8:	20002f80 	.word	0x20002f80
 80014ac:	0800eed8 	.word	0x0800eed8
 80014b0:	0800ed98 	.word	0x0800ed98
 80014b4:	20000410 	.word	0x20000410
 80014b8:	0800eee8 	.word	0x0800eee8
 80014bc:	0800eefc 	.word	0x0800eefc
 80014c0:	0800ef20 	.word	0x0800ef20
 80014c4:	0800ef30 	.word	0x0800ef30
 80014c8:	0800ef3c 	.word	0x0800ef3c
 80014cc:	0800ef50 	.word	0x0800ef50
 80014d0:	0800ef60 	.word	0x0800ef60
 80014d4:	0800ef74 	.word	0x0800ef74
 80014d8:	20000608 	.word	0x20000608
 80014dc:	0800ef8c 	.word	0x0800ef8c
 80014e0:	0800efa8 	.word	0x0800efa8
 80014e4:	0800efc4 	.word	0x0800efc4
 80014e8:	0800efd4 	.word	0x0800efd4
 80014ec:	0800efec 	.word	0x0800efec

080014f0 <bufclr>:

void bufclr (char *buf)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7fe fe89 	bl	8000210 <strlen>
 80014fe:	4603      	mov	r3, r0
 8001500:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e007      	b.n	8001518 <bufclr+0x28>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3301      	adds	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf3      	blt.n	8001508 <bufclr+0x18>
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <Clear_ESPBuffer>:
{
//		__HAL_UART_CLEAR_FLAG(pc_uart,UART_FLAG_TC);
//		__HAL_UART_CLEAR_FLAG(wifi_uart,UART_FLAG_TC);
}
void Clear_ESPBuffer(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
	for(uint16_t clean_counter=0;clean_counter<ESP8266BUFFER_LENGHT;clean_counter++)
 8001532:	2300      	movs	r3, #0
 8001534:	80fb      	strh	r3, [r7, #6]
 8001536:	e006      	b.n	8001546 <Clear_ESPBuffer+0x1a>
	{
		wifi_rx_buffer[clean_counter]=0;
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	4a09      	ldr	r2, [pc, #36]	; (8001560 <Clear_ESPBuffer+0x34>)
 800153c:	2100      	movs	r1, #0
 800153e:	54d1      	strb	r1, [r2, r3]
	for(uint16_t clean_counter=0;clean_counter<ESP8266BUFFER_LENGHT;clean_counter++)
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	3301      	adds	r3, #1
 8001544:	80fb      	strh	r3, [r7, #6]
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800154c:	d3f4      	bcc.n	8001538 <Clear_ESPBuffer+0xc>

	}
	wifi_buffer_counter=0;
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <Clear_ESPBuffer+0x38>)
 8001550:	2200      	movs	r2, #0
 8001552:	801a      	strh	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	20000410 	.word	0x20000410
 8001564:	20000606 	.word	0x20000606

08001568 <USART_puts>:

void USART_puts(const char *s, UART_HandleTypeDef *uart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	while(*s!='\0')
 8001572:	e007      	b.n	8001584 <USART_puts+0x1c>
	{
		Uart_write_kod(*s++, uart);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	6839      	ldr	r1, [r7, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f80a 	bl	8001598 <Uart_write_kod>
	while(*s!='\0')
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f3      	bne.n	8001574 <USART_puts+0xc>

	}
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <Uart_write_kod>:

void Uart_write_kod(int c, UART_HandleTypeDef *uart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
//	if(wifi_buffer_counter != 0)
//	{
//		wifi_buffer_counter=0;
//	}
	tx_gecici_ortak_buffer=c;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <Uart_write_kod+0x44>)
 80015a8:	701a      	strb	r2, [r3, #0]
	if(wifi_uart== uart)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <Uart_write_kod+0x48>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d106      	bne.n	80015c0 <Uart_write_kod+0x28>
	{
		HAL_UART_Transmit(wifi_uart,&tx_gecici_ortak_buffer,1,10);
 80015b2:	230a      	movs	r3, #10
 80015b4:	2201      	movs	r2, #1
 80015b6:	4909      	ldr	r1, [pc, #36]	; (80015dc <Uart_write_kod+0x44>)
 80015b8:	4809      	ldr	r0, [pc, #36]	; (80015e0 <Uart_write_kod+0x48>)
 80015ba:	f005 f8d0 	bl	800675e <HAL_UART_Transmit>
	else if(pc_uart== uart)
	{
		HAL_UART_Transmit(pc_uart,&tx_gecici_ortak_buffer,1,10);

	}
}
 80015be:	e009      	b.n	80015d4 <Uart_write_kod+0x3c>
	else if(pc_uart== uart)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <Uart_write_kod+0x4c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d105      	bne.n	80015d4 <Uart_write_kod+0x3c>
		HAL_UART_Transmit(pc_uart,&tx_gecici_ortak_buffer,1,10);
 80015c8:	230a      	movs	r3, #10
 80015ca:	2201      	movs	r2, #1
 80015cc:	4903      	ldr	r1, [pc, #12]	; (80015dc <Uart_write_kod+0x44>)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <Uart_write_kod+0x4c>)
 80015d0:	f005 f8c5 	bl	800675e <HAL_UART_Transmit>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000604 	.word	0x20000604
 80015e0:	200008c4 	.word	0x200008c4
 80015e4:	20002f80 	.word	0x20002f80

080015e8 <Uart_isr>:
void Uart_isr (UART_HandleTypeDef *uart)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

	if(wifi_uart== uart)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a16      	ldr	r2, [pc, #88]	; (800164c <Uart_isr+0x64>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d110      	bne.n	800161a <Uart_isr+0x32>
	{

			HAL_UART_Receive(wifi_uart,&wifi_rx_buffer[wifi_buffer_counter],1,10);
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <Uart_isr+0x68>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <Uart_isr+0x6c>)
 8001600:	18d1      	adds	r1, r2, r3
 8001602:	230a      	movs	r3, #10
 8001604:	2201      	movs	r2, #1
 8001606:	4811      	ldr	r0, [pc, #68]	; (800164c <Uart_isr+0x64>)
 8001608:	f005 f93b 	bl	8006882 <HAL_UART_Receive>
			wifi_buffer_counter++;
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <Uart_isr+0x68>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	3301      	adds	r3, #1
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <Uart_isr+0x68>)
 8001616:	801a      	strh	r2, [r3, #0]
	{
			HAL_UART_Receive(pc_uart,&pc_rx_buffer[k_counter],1,100);
//			pc_rx_buffer[k_counter]=USART2->DR;
			k_counter++;
	}
}
 8001618:	e013      	b.n	8001642 <Uart_isr+0x5a>
	else if(pc_uart== uart)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <Uart_isr+0x70>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d10f      	bne.n	8001642 <Uart_isr+0x5a>
			HAL_UART_Receive(pc_uart,&pc_rx_buffer[k_counter],1,100);
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <Uart_isr+0x74>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <Uart_isr+0x78>)
 800162a:	18d1      	adds	r1, r2, r3
 800162c:	2364      	movs	r3, #100	; 0x64
 800162e:	2201      	movs	r2, #1
 8001630:	4809      	ldr	r0, [pc, #36]	; (8001658 <Uart_isr+0x70>)
 8001632:	f005 f926 	bl	8006882 <HAL_UART_Receive>
			k_counter++;
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <Uart_isr+0x74>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <Uart_isr+0x74>)
 8001640:	701a      	strb	r2, [r3, #0]
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200008c4 	.word	0x200008c4
 8001650:	20000606 	.word	0x20000606
 8001654:	20000410 	.word	0x20000410
 8001658:	20002f80 	.word	0x20002f80
 800165c:	20000605 	.word	0x20000605
 8001660:	2000021c 	.word	0x2000021c

08001664 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_9

/* SPI Chip Select */
static void SELECT(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166e:	4802      	ldr	r0, [pc, #8]	; (8001678 <SELECT+0x14>)
 8001670:	f003 fa18 	bl	8004aa4 <HAL_GPIO_WritePin>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40020000 	.word	0x40020000

0800167c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001686:	4802      	ldr	r0, [pc, #8]	; (8001690 <DESELECT+0x14>)
 8001688:	f003 fa0c 	bl	8004aa4 <HAL_GPIO_WritePin>
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40020000 	.word	0x40020000

08001694 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800169e:	bf00      	nop
 80016a0:	4808      	ldr	r0, [pc, #32]	; (80016c4 <SPI_TxByte+0x30>)
 80016a2:	f004 ff36 	bl	8006512 <HAL_SPI_GetState>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d1f9      	bne.n	80016a0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80016ac:	1df9      	adds	r1, r7, #7
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	2201      	movs	r2, #1
 80016b4:	4803      	ldr	r0, [pc, #12]	; (80016c4 <SPI_TxByte+0x30>)
 80016b6:	f004 fc4e 	bl	8005f56 <HAL_SPI_Transmit>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20002f28 	.word	0x20002f28

080016c8 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80016ce:	23ff      	movs	r3, #255	; 0xff
 80016d0:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80016d6:	bf00      	nop
 80016d8:	4809      	ldr	r0, [pc, #36]	; (8001700 <SPI_RxByte+0x38>)
 80016da:	f004 ff1a 	bl	8006512 <HAL_SPI_GetState>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d1f9      	bne.n	80016d8 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80016e4:	1dba      	adds	r2, r7, #6
 80016e6:	1df9      	adds	r1, r7, #7
 80016e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2301      	movs	r3, #1
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <SPI_RxByte+0x38>)
 80016f2:	f004 fd6c 	bl	80061ce <HAL_SPI_TransmitReceive>

  return data;
 80016f6:	79bb      	ldrb	r3, [r7, #6]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20002f28 	.word	0x20002f28

08001704 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800170c:	f7ff ffdc 	bl	80016c8 <SPI_RxByte>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	701a      	strb	r2, [r3, #0]
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <SD_ReadyWait+0x34>)
 8001728:	2232      	movs	r2, #50	; 0x32
 800172a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800172c:	f7ff ffcc 	bl	80016c8 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001730:	f7ff ffca 	bl	80016c8 <SPI_RxByte>
 8001734:	4603      	mov	r3, r0
 8001736:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	2bff      	cmp	r3, #255	; 0xff
 800173c:	d004      	beq.n	8001748 <SD_ReadyWait+0x28>
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SD_ReadyWait+0x34>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f3      	bne.n	8001730 <SD_ReadyWait+0x10>

  return res;
 8001748:	79fb      	ldrb	r3, [r7, #7]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20003030 	.word	0x20003030

08001758 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800175e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001762:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001764:	f7ff ff8a 	bl	800167c <DESELECT>

  for(int i = 0; i < 10; i++)
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	e005      	b.n	800177a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800176e:	20ff      	movs	r0, #255	; 0xff
 8001770:	f7ff ff90 	bl	8001694 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	3301      	adds	r3, #1
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b09      	cmp	r3, #9
 800177e:	ddf6      	ble.n	800176e <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001780:	f7ff ff70 	bl	8001664 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001784:	2340      	movs	r3, #64	; 0x40
 8001786:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001798:	2395      	movs	r3, #149	; 0x95
 800179a:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	e009      	b.n	80017b6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80017a2:	1d3a      	adds	r2, r7, #4
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff72 	bl	8001694 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	ddf2      	ble.n	80017a2 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80017bc:	e002      	b.n	80017c4 <SD_PowerOn+0x6c>
  {
    Count--;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80017c4:	f7ff ff80 	bl	80016c8 <SPI_RxByte>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d002      	beq.n	80017d4 <SD_PowerOn+0x7c>
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f4      	bne.n	80017be <SD_PowerOn+0x66>
  }

  DESELECT();
 80017d4:	f7ff ff52 	bl	800167c <DESELECT>
  SPI_TxByte(0XFF);
 80017d8:	20ff      	movs	r0, #255	; 0xff
 80017da:	f7ff ff5b 	bl	8001694 <SPI_TxByte>

  PowerFlag = 1;
 80017de:	4b03      	ldr	r3, [pc, #12]	; (80017ec <SD_PowerOn+0x94>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000659 	.word	0x20000659

080017f0 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <SD_PowerOff+0x14>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	20000659 	.word	0x20000659

08001808 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <SD_CheckPower+0x14>)
 800180e:	781b      	ldrb	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000659 	.word	0x20000659

08001820 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <SD_RxDataBlock+0x68>)
 800182c:	220a      	movs	r2, #10
 800182e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001830:	f7ff ff4a 	bl	80016c8 <SPI_RxByte>
 8001834:	4603      	mov	r3, r0
 8001836:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	2bff      	cmp	r3, #255	; 0xff
 800183c:	d104      	bne.n	8001848 <SD_RxDataBlock+0x28>
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <SD_RxDataBlock+0x68>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f3      	bne.n	8001830 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	2bfe      	cmp	r3, #254	; 0xfe
 800184c:	d001      	beq.n	8001852 <SD_RxDataBlock+0x32>
    return FALSE;
 800184e:	2300      	movs	r3, #0
 8001850:	e016      	b.n	8001880 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff53 	bl	8001704 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff4d 	bl	8001704 <SPI_RxBytePtr>
  } while(btr -= 2);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	3b02      	subs	r3, #2
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1ed      	bne.n	8001852 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001876:	f7ff ff27 	bl	80016c8 <SPI_RxByte>
  SPI_RxByte();
 800187a:	f7ff ff25 	bl	80016c8 <SPI_RxByte>

  return TRUE;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20003031 	.word	0x20003031

0800188c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800189c:	f7ff ff40 	bl	8001720 <SD_ReadyWait>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2bff      	cmp	r3, #255	; 0xff
 80018a4:	d001      	beq.n	80018aa <SD_TxDataBlock+0x1e>
    return FALSE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e040      	b.n	800192c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fef1 	bl	8001694 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	2bfd      	cmp	r3, #253	; 0xfd
 80018b6:	d031      	beq.n	800191c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fee5 	bl	8001694 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fede 	bl	8001694 <SPI_TxByte>
    } while (--wc);
 80018d8:	7bbb      	ldrb	r3, [r7, #14]
 80018da:	3b01      	subs	r3, #1
 80018dc:	73bb      	strb	r3, [r7, #14]
 80018de:	7bbb      	ldrb	r3, [r7, #14]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1eb      	bne.n	80018bc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80018e4:	f7ff fef0 	bl	80016c8 <SPI_RxByte>
    SPI_RxByte();
 80018e8:	f7ff feee 	bl	80016c8 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80018ec:	e00b      	b.n	8001906 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80018ee:	f7ff feeb 	bl	80016c8 <SPI_RxByte>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d006      	beq.n	800190e <SD_TxDataBlock+0x82>
        break;

      i++;
 8001900:	7b7b      	ldrb	r3, [r7, #13]
 8001902:	3301      	adds	r3, #1
 8001904:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001906:	7b7b      	ldrb	r3, [r7, #13]
 8001908:	2b40      	cmp	r3, #64	; 0x40
 800190a:	d9f0      	bls.n	80018ee <SD_TxDataBlock+0x62>
 800190c:	e000      	b.n	8001910 <SD_TxDataBlock+0x84>
        break;
 800190e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001910:	bf00      	nop
 8001912:	f7ff fed9 	bl	80016c8 <SPI_RxByte>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0fa      	beq.n	8001912 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	f003 031f 	and.w	r3, r3, #31
 8001922:	2b05      	cmp	r3, #5
 8001924:	d101      	bne.n	800192a <SD_TxDataBlock+0x9e>
    return TRUE;
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001940:	f7ff feee 	bl	8001720 <SD_ReadyWait>
 8001944:	4603      	mov	r3, r0
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	d001      	beq.n	800194e <SD_SendCmd+0x1a>
    return 0xFF;
 800194a:	23ff      	movs	r3, #255	; 0xff
 800194c:	e040      	b.n	80019d0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fe9f 	bl	8001694 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	0e1b      	lsrs	r3, r3, #24
 800195a:	b2db      	uxtb	r3, r3
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fe99 	bl	8001694 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	0c1b      	lsrs	r3, r3, #16
 8001966:	b2db      	uxtb	r3, r3
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fe93 	bl	8001694 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	b2db      	uxtb	r3, r3
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fe8d 	bl	8001694 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fe88 	bl	8001694 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	2b40      	cmp	r3, #64	; 0x40
 800198c:	d101      	bne.n	8001992 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800198e:	2395      	movs	r3, #149	; 0x95
 8001990:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	2b48      	cmp	r3, #72	; 0x48
 8001996:	d101      	bne.n	800199c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001998:	2387      	movs	r3, #135	; 0x87
 800199a:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fe78 	bl	8001694 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2b4c      	cmp	r3, #76	; 0x4c
 80019a8:	d101      	bne.n	80019ae <SD_SendCmd+0x7a>
    SPI_RxByte();
 80019aa:	f7ff fe8d 	bl	80016c8 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80019ae:	230a      	movs	r3, #10
 80019b0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80019b2:	f7ff fe89 	bl	80016c8 <SPI_RxByte>
 80019b6:	4603      	mov	r3, r0
 80019b8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80019ba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	da05      	bge.n	80019ce <SD_SendCmd+0x9a>
 80019c2:	7bbb      	ldrb	r3, [r7, #14]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	73bb      	strb	r3, [r7, #14]
 80019c8:	7bbb      	ldrb	r3, [r7, #14]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f1      	bne.n	80019b2 <SD_SendCmd+0x7e>

  return res;
 80019ce:	7b7b      	ldrb	r3, [r7, #13]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0d5      	b.n	8001b98 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80019ec:	4b6c      	ldr	r3, [pc, #432]	; (8001ba0 <SD_disk_initialize+0x1c8>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <SD_disk_initialize+0x2a>
    return Stat;
 80019fa:	4b69      	ldr	r3, [pc, #420]	; (8001ba0 <SD_disk_initialize+0x1c8>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	e0ca      	b.n	8001b98 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001a02:	f7ff fea9 	bl	8001758 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001a06:	f7ff fe2d 	bl	8001664 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2040      	movs	r0, #64	; 0x40
 8001a12:	f7ff ff8f 	bl	8001934 <SD_SendCmd>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	f040 80a5 	bne.w	8001b68 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001a1e:	4b61      	ldr	r3, [pc, #388]	; (8001ba4 <SD_disk_initialize+0x1cc>)
 8001a20:	2264      	movs	r2, #100	; 0x64
 8001a22:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001a24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001a28:	2048      	movs	r0, #72	; 0x48
 8001a2a:	f7ff ff83 	bl	8001934 <SD_SendCmd>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d158      	bne.n	8001ae6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	e00c      	b.n	8001a54 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001a3a:	7bfc      	ldrb	r4, [r7, #15]
 8001a3c:	f7ff fe44 	bl	80016c8 <SPI_RxByte>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	4423      	add	r3, r4
 8001a4a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	3301      	adds	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d9ef      	bls.n	8001a3a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001a5a:	7abb      	ldrb	r3, [r7, #10]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	f040 8083 	bne.w	8001b68 <SD_disk_initialize+0x190>
 8001a62:	7afb      	ldrb	r3, [r7, #11]
 8001a64:	2baa      	cmp	r3, #170	; 0xaa
 8001a66:	d17f      	bne.n	8001b68 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2077      	movs	r0, #119	; 0x77
 8001a6c:	f7ff ff62 	bl	8001934 <SD_SendCmd>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d807      	bhi.n	8001a86 <SD_disk_initialize+0xae>
 8001a76:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a7a:	2069      	movs	r0, #105	; 0x69
 8001a7c:	f7ff ff5a 	bl	8001934 <SD_SendCmd>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <SD_disk_initialize+0x1cc>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1eb      	bne.n	8001a68 <SD_disk_initialize+0x90>
 8001a90:	e000      	b.n	8001a94 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001a92:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001a94:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <SD_disk_initialize+0x1cc>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d064      	beq.n	8001b68 <SD_disk_initialize+0x190>
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	207a      	movs	r0, #122	; 0x7a
 8001aa2:	f7ff ff47 	bl	8001934 <SD_SendCmd>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d15d      	bne.n	8001b68 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	e00c      	b.n	8001acc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001ab2:	7bfc      	ldrb	r4, [r7, #15]
 8001ab4:	f7ff fe08 	bl	80016c8 <SPI_RxByte>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	4423      	add	r3, r4
 8001ac2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d9ef      	bls.n	8001ab2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001ad2:	7a3b      	ldrb	r3, [r7, #8]
 8001ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SD_disk_initialize+0x108>
 8001adc:	2306      	movs	r3, #6
 8001ade:	e000      	b.n	8001ae2 <SD_disk_initialize+0x10a>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	73bb      	strb	r3, [r7, #14]
 8001ae4:	e040      	b.n	8001b68 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2077      	movs	r0, #119	; 0x77
 8001aea:	f7ff ff23 	bl	8001934 <SD_SendCmd>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d808      	bhi.n	8001b06 <SD_disk_initialize+0x12e>
 8001af4:	2100      	movs	r1, #0
 8001af6:	2069      	movs	r0, #105	; 0x69
 8001af8:	f7ff ff1c 	bl	8001934 <SD_SendCmd>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d801      	bhi.n	8001b06 <SD_disk_initialize+0x12e>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e000      	b.n	8001b08 <SD_disk_initialize+0x130>
 8001b06:	2301      	movs	r3, #1
 8001b08:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001b0a:	7bbb      	ldrb	r3, [r7, #14]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d10e      	bne.n	8001b2e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001b10:	2100      	movs	r1, #0
 8001b12:	2077      	movs	r0, #119	; 0x77
 8001b14:	f7ff ff0e 	bl	8001934 <SD_SendCmd>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d80e      	bhi.n	8001b3c <SD_disk_initialize+0x164>
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2069      	movs	r0, #105	; 0x69
 8001b22:	f7ff ff07 	bl	8001934 <SD_SendCmd>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001b2c:	e00d      	b.n	8001b4a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2041      	movs	r0, #65	; 0x41
 8001b32:	f7ff feff 	bl	8001934 <SD_SendCmd>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <SD_disk_initialize+0x1cc>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1e1      	bne.n	8001b0a <SD_disk_initialize+0x132>
 8001b46:	e000      	b.n	8001b4a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001b48:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <SD_disk_initialize+0x1cc>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d007      	beq.n	8001b64 <SD_disk_initialize+0x18c>
 8001b54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b58:	2050      	movs	r0, #80	; 0x50
 8001b5a:	f7ff feeb 	bl	8001934 <SD_SendCmd>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001b68:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <SD_disk_initialize+0x1d0>)
 8001b6a:	7bbb      	ldrb	r3, [r7, #14]
 8001b6c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001b6e:	f7ff fd85 	bl	800167c <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001b72:	f7ff fda9 	bl	80016c8 <SPI_RxByte>

  if (type)
 8001b76:	7bbb      	ldrb	r3, [r7, #14]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <SD_disk_initialize+0x1c8>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f023 0301 	bic.w	r3, r3, #1
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SD_disk_initialize+0x1c8>)
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	e001      	b.n	8001b92 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001b8e:	f7ff fe2f 	bl	80017f0 <SD_PowerOff>
  }

  return Stat;
 8001b92:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <SD_disk_initialize+0x1c8>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20003031 	.word	0x20003031
 8001ba8:	20000658 	.word	0x20000658

08001bac <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e002      	b.n	8001bc6 <SD_disk_status+0x1a>

  return Stat;
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <SD_disk_status+0x28>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b2db      	uxtb	r3, r3
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000000 	.word	0x20000000

08001bd8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	4603      	mov	r3, r0
 8001be6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <SD_disk_read+0x1c>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <SD_disk_read+0x20>
    return RES_PARERR;
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	e051      	b.n	8001c9c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <SD_disk_read+0xcc>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e048      	b.n	8001c9c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001c0a:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <SD_disk_read+0xd0>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d102      	bne.n	8001c1c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	025b      	lsls	r3, r3, #9
 8001c1a:	607b      	str	r3, [r7, #4]

  SELECT();
 8001c1c:	f7ff fd22 	bl	8001664 <SELECT>

  if (count == 1)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d111      	bne.n	8001c4a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	2051      	movs	r0, #81	; 0x51
 8001c2a:	f7ff fe83 	bl	8001934 <SD_SendCmd>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d129      	bne.n	8001c88 <SD_disk_read+0xb0>
 8001c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c38:	68b8      	ldr	r0, [r7, #8]
 8001c3a:	f7ff fdf1 	bl	8001820 <SD_RxDataBlock>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d021      	beq.n	8001c88 <SD_disk_read+0xb0>
      count = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	e01e      	b.n	8001c88 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	2052      	movs	r0, #82	; 0x52
 8001c4e:	f7ff fe71 	bl	8001934 <SD_SendCmd>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d117      	bne.n	8001c88 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c5c:	68b8      	ldr	r0, [r7, #8]
 8001c5e:	f7ff fddf 	bl	8001820 <SD_RxDataBlock>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00a      	beq.n	8001c7e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c6e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ed      	bne.n	8001c58 <SD_disk_read+0x80>
 8001c7c:	e000      	b.n	8001c80 <SD_disk_read+0xa8>
          break;
 8001c7e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001c80:	2100      	movs	r1, #0
 8001c82:	204c      	movs	r0, #76	; 0x4c
 8001c84:	f7ff fe56 	bl	8001934 <SD_SendCmd>
    }
  }

  DESELECT();
 8001c88:	f7ff fcf8 	bl	800167c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001c8c:	f7ff fd1c 	bl	80016c8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	bf14      	ite	ne
 8001c96:	2301      	movne	r3, #1
 8001c98:	2300      	moveq	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000658 	.word	0x20000658

08001cac <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	4603      	mov	r3, r0
 8001cba:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <SD_disk_write+0x1c>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <SD_disk_write+0x20>
    return RES_PARERR;
 8001cc8:	2304      	movs	r3, #4
 8001cca:	e06b      	b.n	8001da4 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001ccc:	4b37      	ldr	r3, [pc, #220]	; (8001dac <SD_disk_write+0x100>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e062      	b.n	8001da4 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001cde:	4b33      	ldr	r3, [pc, #204]	; (8001dac <SD_disk_write+0x100>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001cec:	2302      	movs	r3, #2
 8001cee:	e059      	b.n	8001da4 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001cf0:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <SD_disk_write+0x104>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	025b      	lsls	r3, r3, #9
 8001d00:	607b      	str	r3, [r7, #4]

  SELECT();
 8001d02:	f7ff fcaf 	bl	8001664 <SELECT>

  if (count == 1)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d110      	bne.n	8001d2e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	2058      	movs	r0, #88	; 0x58
 8001d10:	f7ff fe10 	bl	8001934 <SD_SendCmd>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d13a      	bne.n	8001d90 <SD_disk_write+0xe4>
 8001d1a:	21fe      	movs	r1, #254	; 0xfe
 8001d1c:	68b8      	ldr	r0, [r7, #8]
 8001d1e:	f7ff fdb5 	bl	800188c <SD_TxDataBlock>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d033      	beq.n	8001d90 <SD_disk_write+0xe4>
      count = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	e030      	b.n	8001d90 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <SD_disk_write+0x104>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2077      	movs	r0, #119	; 0x77
 8001d3e:	f7ff fdf9 	bl	8001934 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	2057      	movs	r0, #87	; 0x57
 8001d46:	f7ff fdf5 	bl	8001934 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	2059      	movs	r0, #89	; 0x59
 8001d4e:	f7ff fdf1 	bl	8001934 <SD_SendCmd>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d11b      	bne.n	8001d90 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001d58:	21fc      	movs	r1, #252	; 0xfc
 8001d5a:	68b8      	ldr	r0, [r7, #8]
 8001d5c:	f7ff fd96 	bl	800188c <SD_TxDataBlock>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00a      	beq.n	8001d7c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d6c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1ee      	bne.n	8001d58 <SD_disk_write+0xac>
 8001d7a:	e000      	b.n	8001d7e <SD_disk_write+0xd2>
          break;
 8001d7c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001d7e:	21fd      	movs	r1, #253	; 0xfd
 8001d80:	2000      	movs	r0, #0
 8001d82:	f7ff fd83 	bl	800188c <SD_TxDataBlock>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <SD_disk_write+0xe4>
      {
        count = 1;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001d90:	f7ff fc74 	bl	800167c <DESELECT>
  SPI_RxByte();
 8001d94:	f7ff fc98 	bl	80016c8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	bf14      	ite	ne
 8001d9e:	2301      	movne	r3, #1
 8001da0:	2300      	moveq	r3, #0
 8001da2:	b2db      	uxtb	r3, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000000 	.word	0x20000000
 8001db0:	20000658 	.word	0x20000658

08001db4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b08b      	sub	sp, #44	; 0x2c
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	603a      	str	r2, [r7, #0]
 8001dbe:	71fb      	strb	r3, [r7, #7]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	e11b      	b.n	800200a <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001dd8:	79bb      	ldrb	r3, [r7, #6]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d129      	bne.n	8001e32 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d017      	beq.n	8001e16 <SD_disk_ioctl+0x62>
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	dc1f      	bgt.n	8001e2a <SD_disk_ioctl+0x76>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <SD_disk_ioctl+0x40>
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d00b      	beq.n	8001e0a <SD_disk_ioctl+0x56>
 8001df2:	e01a      	b.n	8001e2a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001df4:	f7ff fd08 	bl	8001808 <SD_CheckPower>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001dfe:	f7ff fcf7 	bl	80017f0 <SD_PowerOff>
      res = RES_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e08:	e0fd      	b.n	8002006 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001e0a:	f7ff fca5 	bl	8001758 <SD_PowerOn>
      res = RES_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e14:	e0f7      	b.n	8002006 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	1c5c      	adds	r4, r3, #1
 8001e1a:	f7ff fcf5 	bl	8001808 <SD_CheckPower>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e28:	e0ed      	b.n	8002006 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e30:	e0e9      	b.n	8002006 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001e32:	4b78      	ldr	r3, [pc, #480]	; (8002014 <SD_disk_ioctl+0x260>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e0e2      	b.n	800200a <SD_disk_ioctl+0x256>

    SELECT();
 8001e44:	f7ff fc0e 	bl	8001664 <SELECT>

    switch (ctrl)
 8001e48:	79bb      	ldrb	r3, [r7, #6]
 8001e4a:	2b0d      	cmp	r3, #13
 8001e4c:	f200 80cc 	bhi.w	8001fe8 <SD_disk_ioctl+0x234>
 8001e50:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <SD_disk_ioctl+0xa4>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001f53 	.word	0x08001f53
 8001e5c:	08001e91 	.word	0x08001e91
 8001e60:	08001f43 	.word	0x08001f43
 8001e64:	08001fe9 	.word	0x08001fe9
 8001e68:	08001fe9 	.word	0x08001fe9
 8001e6c:	08001fe9 	.word	0x08001fe9
 8001e70:	08001fe9 	.word	0x08001fe9
 8001e74:	08001fe9 	.word	0x08001fe9
 8001e78:	08001fe9 	.word	0x08001fe9
 8001e7c:	08001fe9 	.word	0x08001fe9
 8001e80:	08001fe9 	.word	0x08001fe9
 8001e84:	08001f65 	.word	0x08001f65
 8001e88:	08001f89 	.word	0x08001f89
 8001e8c:	08001fad 	.word	0x08001fad
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001e90:	2100      	movs	r1, #0
 8001e92:	2049      	movs	r0, #73	; 0x49
 8001e94:	f7ff fd4e 	bl	8001934 <SD_SendCmd>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 80a8 	bne.w	8001ff0 <SD_disk_ioctl+0x23c>
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	2110      	movs	r1, #16
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fcba 	bl	8001820 <SD_RxDataBlock>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 809e 	beq.w	8001ff0 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001eb4:	7b3b      	ldrb	r3, [r7, #12]
 8001eb6:	099b      	lsrs	r3, r3, #6
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d10e      	bne.n	8001edc <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001ebe:	7d7b      	ldrb	r3, [r7, #21]
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	7d3b      	ldrb	r3, [r7, #20]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	3301      	adds	r3, #1
 8001ed0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001ed2:	8bfb      	ldrh	r3, [r7, #30]
 8001ed4:	029a      	lsls	r2, r3, #10
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e02e      	b.n	8001f3a <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001edc:	7c7b      	ldrb	r3, [r7, #17]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	7dbb      	ldrb	r3, [r7, #22]
 8001ee6:	09db      	lsrs	r3, r3, #7
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	7d7b      	ldrb	r3, [r7, #21]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	f003 0306 	and.w	r3, r3, #6
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	3302      	adds	r3, #2
 8001f00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001f04:	7d3b      	ldrb	r3, [r7, #20]
 8001f06:	099b      	lsrs	r3, r3, #6
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	7cfb      	ldrb	r3, [r7, #19]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	7cbb      	ldrb	r3, [r7, #18]
 8001f1a:	029b      	lsls	r3, r3, #10
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	4413      	add	r3, r2
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3301      	adds	r3, #1
 8001f2a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001f2c:	8bfa      	ldrh	r2, [r7, #30]
 8001f2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f32:	3b09      	subs	r3, #9
 8001f34:	409a      	lsls	r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001f40:	e056      	b.n	8001ff0 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f48:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f50:	e055      	b.n	8001ffe <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001f52:	f7ff fbe5 	bl	8001720 <SD_ReadyWait>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2bff      	cmp	r3, #255	; 0xff
 8001f5a:	d14b      	bne.n	8001ff4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f62:	e047      	b.n	8001ff4 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001f64:	2100      	movs	r1, #0
 8001f66:	2049      	movs	r0, #73	; 0x49
 8001f68:	f7ff fce4 	bl	8001934 <SD_SendCmd>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d142      	bne.n	8001ff8 <SD_disk_ioctl+0x244>
 8001f72:	2110      	movs	r1, #16
 8001f74:	6a38      	ldr	r0, [r7, #32]
 8001f76:	f7ff fc53 	bl	8001820 <SD_RxDataBlock>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d03b      	beq.n	8001ff8 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f86:	e037      	b.n	8001ff8 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001f88:	2100      	movs	r1, #0
 8001f8a:	204a      	movs	r0, #74	; 0x4a
 8001f8c:	f7ff fcd2 	bl	8001934 <SD_SendCmd>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d132      	bne.n	8001ffc <SD_disk_ioctl+0x248>
 8001f96:	2110      	movs	r1, #16
 8001f98:	6a38      	ldr	r0, [r7, #32]
 8001f9a:	f7ff fc41 	bl	8001820 <SD_RxDataBlock>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d02b      	beq.n	8001ffc <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001faa:	e027      	b.n	8001ffc <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001fac:	2100      	movs	r1, #0
 8001fae:	207a      	movs	r0, #122	; 0x7a
 8001fb0:	f7ff fcc0 	bl	8001934 <SD_SendCmd>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001fc0:	e00b      	b.n	8001fda <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001fc2:	6a3c      	ldr	r4, [r7, #32]
 8001fc4:	1c63      	adds	r3, r4, #1
 8001fc6:	623b      	str	r3, [r7, #32]
 8001fc8:	f7ff fb7e 	bl	80016c8 <SPI_RxByte>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001fd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001fda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d9ef      	bls.n	8001fc2 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001fe8:	2304      	movs	r3, #4
 8001fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001fee:	e006      	b.n	8001ffe <SD_disk_ioctl+0x24a>
      break;
 8001ff0:	bf00      	nop
 8001ff2:	e004      	b.n	8001ffe <SD_disk_ioctl+0x24a>
      break;
 8001ff4:	bf00      	nop
 8001ff6:	e002      	b.n	8001ffe <SD_disk_ioctl+0x24a>
      break;
 8001ff8:	bf00      	nop
 8001ffa:	e000      	b.n	8001ffe <SD_disk_ioctl+0x24a>
      break;
 8001ffc:	bf00      	nop
    }

    DESELECT();
 8001ffe:	f7ff fb3d 	bl	800167c <DESELECT>
    SPI_RxByte();
 8002002:	f7ff fb61 	bl	80016c8 <SPI_RxByte>
  }

  return res;
 8002006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800200a:	4618      	mov	r0, r3
 800200c:	372c      	adds	r7, #44	; 0x2c
 800200e:	46bd      	mov	sp, r7
 8002010:	bd90      	pop	{r4, r7, pc}
 8002012:	bf00      	nop
 8002014:	20000000 	.word	0x20000000

08002018 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af02      	add	r7, sp, #8
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	f023 030f 	bic.w	r3, r3, #15
 8002028:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	f043 030c 	orr.w	r3, r3, #12
 8002036:	b2db      	uxtb	r3, r3
 8002038:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	f043 0308 	orr.w	r3, r3, #8
 8002040:	b2db      	uxtb	r3, r3
 8002042:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002044:	7bbb      	ldrb	r3, [r7, #14]
 8002046:	f043 030c 	orr.w	r3, r3, #12
 800204a:	b2db      	uxtb	r3, r3
 800204c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800204e:	7bbb      	ldrb	r3, [r7, #14]
 8002050:	f043 0308 	orr.w	r3, r3, #8
 8002054:	b2db      	uxtb	r3, r3
 8002056:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002058:	f107 0208 	add.w	r2, r7, #8
 800205c:	2364      	movs	r3, #100	; 0x64
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2304      	movs	r3, #4
 8002062:	214e      	movs	r1, #78	; 0x4e
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <lcd_send_cmd+0x5c>)
 8002066:	f002 fe7b 	bl	8004d60 <HAL_I2C_Master_Transmit>
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20001988 	.word	0x20001988

08002078 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800207c:	2032      	movs	r0, #50	; 0x32
 800207e:	f001 fab5 	bl	80035ec <HAL_Delay>
	lcd_send_cmd (0x30);
 8002082:	2030      	movs	r0, #48	; 0x30
 8002084:	f7ff ffc8 	bl	8002018 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8002088:	2005      	movs	r0, #5
 800208a:	f001 faaf 	bl	80035ec <HAL_Delay>
	lcd_send_cmd (0x30);
 800208e:	2030      	movs	r0, #48	; 0x30
 8002090:	f7ff ffc2 	bl	8002018 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8002094:	2001      	movs	r0, #1
 8002096:	f001 faa9 	bl	80035ec <HAL_Delay>
	lcd_send_cmd (0x30);
 800209a:	2030      	movs	r0, #48	; 0x30
 800209c:	f7ff ffbc 	bl	8002018 <lcd_send_cmd>
	HAL_Delay(10);
 80020a0:	200a      	movs	r0, #10
 80020a2:	f001 faa3 	bl	80035ec <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80020a6:	2020      	movs	r0, #32
 80020a8:	f7ff ffb6 	bl	8002018 <lcd_send_cmd>
	HAL_Delay(10);
 80020ac:	200a      	movs	r0, #10
 80020ae:	f001 fa9d 	bl	80035ec <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80020b2:	2028      	movs	r0, #40	; 0x28
 80020b4:	f7ff ffb0 	bl	8002018 <lcd_send_cmd>
	HAL_Delay(1);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f001 fa97 	bl	80035ec <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80020be:	2008      	movs	r0, #8
 80020c0:	f7ff ffaa 	bl	8002018 <lcd_send_cmd>
	HAL_Delay(1);
 80020c4:	2001      	movs	r0, #1
 80020c6:	f001 fa91 	bl	80035ec <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80020ca:	2001      	movs	r0, #1
 80020cc:	f7ff ffa4 	bl	8002018 <lcd_send_cmd>
	HAL_Delay(1);
 80020d0:	2001      	movs	r0, #1
 80020d2:	f001 fa8b 	bl	80035ec <HAL_Delay>
	HAL_Delay(1);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f001 fa88 	bl	80035ec <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80020dc:	2006      	movs	r0, #6
 80020de:	f7ff ff9b 	bl	8002018 <lcd_send_cmd>
	HAL_Delay(1);
 80020e2:	2001      	movs	r0, #1
 80020e4:	f001 fa82 	bl	80035ec <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80020e8:	200c      	movs	r0, #12
 80020ea:	f7ff ff95 	bl	8002018 <lcd_send_cmd>
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <read_cell_voltages>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void read_cell_voltages(){
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0

	for( int i = 1; i < 4; i++){		// Channel voltage values
 80020fa:	2301      	movs	r3, #1
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	e025      	b.n	800214c <read_cell_voltages+0x58>

		cell_voltages[count] = (float) 5.0 * adc1_digital_value[i] / 4095;
 8002100:	4a17      	ldr	r2, [pc, #92]	; (8002160 <read_cell_voltages+0x6c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002110:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002114:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <read_cell_voltages+0x70>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002168 <read_cell_voltages+0x74>
 8002120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002124:	4a11      	ldr	r2, [pc, #68]	; (800216c <read_cell_voltages+0x78>)
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	edc3 7a00 	vstr	s15, [r3]
		count++;
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <read_cell_voltages+0x70>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3301      	adds	r3, #1
 8002134:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <read_cell_voltages+0x70>)
 8002136:	6013      	str	r3, [r2, #0]

		if(count == 3)	// Reset counter to recount 0,1,2
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <read_cell_voltages+0x70>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d102      	bne.n	8002146 <read_cell_voltages+0x52>
			count = 0;
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <read_cell_voltages+0x70>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
	for( int i = 1; i < 4; i++){		// Channel voltage values
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3301      	adds	r3, #1
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b03      	cmp	r3, #3
 8002150:	ddd6      	ble.n	8002100 <read_cell_voltages+0xc>
		}
}
 8002152:	bf00      	nop
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	20002a68 	.word	0x20002a68
 8002164:	20000660 	.word	0x20000660
 8002168:	457ff000 	.word	0x457ff000
 800216c:	20002f00 	.word	0x20002f00

08002170 <read_temperature>:

double read_temperature(int ntc_digital_value){
 8002170:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]

	// NTC resistance calculation
	resistance = resolution / ntc_digital_value;
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe f9f2 	bl	8000564 <__aeabi_i2d>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	a161      	add	r1, pc, #388	; (adr r1, 800230c <read_temperature+0x19c>)
 8002186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800218a:	f7fe fb7f 	bl	800088c <__aeabi_ddiv>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	495b      	ldr	r1, [pc, #364]	; (8002300 <read_temperature+0x190>)
 8002194:	e9c1 2300 	strd	r2, r3, [r1]
	resistance -= 1.0;
 8002198:	4b59      	ldr	r3, [pc, #356]	; (8002300 <read_temperature+0x190>)
 800219a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b58      	ldr	r3, [pc, #352]	; (8002304 <read_temperature+0x194>)
 80021a4:	f7fe f890 	bl	80002c8 <__aeabi_dsub>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4954      	ldr	r1, [pc, #336]	; (8002300 <read_temperature+0x190>)
 80021ae:	e9c1 2300 	strd	r2, r3, [r1]
	resistance = res_10k / resistance;
 80021b2:	4b53      	ldr	r3, [pc, #332]	; (8002300 <read_temperature+0x190>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	a147      	add	r1, pc, #284	; (adr r1, 80022d8 <read_temperature+0x168>)
 80021ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021be:	f7fe fb65 	bl	800088c <__aeabi_ddiv>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	494e      	ldr	r1, [pc, #312]	; (8002300 <read_temperature+0x190>)
 80021c8:	e9c1 2300 	strd	r2, r3, [r1]

	// Steinhart-Hart equation
	steinhart = (constant_A) + (constant_B * log(resistance)) + (constant_C * log(resistance) * log(resistance) * log(resistance));
 80021cc:	4b4c      	ldr	r3, [pc, #304]	; (8002300 <read_temperature+0x190>)
 80021ce:	ed93 7b00 	vldr	d7, [r3]
 80021d2:	eeb0 0a47 	vmov.f32	s0, s14
 80021d6:	eef0 0a67 	vmov.f32	s1, s15
 80021da:	f00c fba5 	bl	800e928 <log>
 80021de:	ec51 0b10 	vmov	r0, r1, d0
 80021e2:	a33f      	add	r3, pc, #252	; (adr r3, 80022e0 <read_temperature+0x170>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe fa26 	bl	8000638 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	a33c      	add	r3, pc, #240	; (adr r3, 80022e8 <read_temperature+0x178>)
 80021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fa:	f7fe f867 	bl	80002cc <__adddf3>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4614      	mov	r4, r2
 8002204:	461d      	mov	r5, r3
 8002206:	4b3e      	ldr	r3, [pc, #248]	; (8002300 <read_temperature+0x190>)
 8002208:	ed93 7b00 	vldr	d7, [r3]
 800220c:	eeb0 0a47 	vmov.f32	s0, s14
 8002210:	eef0 0a67 	vmov.f32	s1, s15
 8002214:	f00c fb88 	bl	800e928 <log>
 8002218:	ec51 0b10 	vmov	r0, r1, d0
 800221c:	a334      	add	r3, pc, #208	; (adr r3, 80022f0 <read_temperature+0x180>)
 800221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002222:	f7fe fa09 	bl	8000638 <__aeabi_dmul>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4690      	mov	r8, r2
 800222c:	4699      	mov	r9, r3
 800222e:	4b34      	ldr	r3, [pc, #208]	; (8002300 <read_temperature+0x190>)
 8002230:	ed93 7b00 	vldr	d7, [r3]
 8002234:	eeb0 0a47 	vmov.f32	s0, s14
 8002238:	eef0 0a67 	vmov.f32	s1, s15
 800223c:	f00c fb74 	bl	800e928 <log>
 8002240:	ec53 2b10 	vmov	r2, r3, d0
 8002244:	4640      	mov	r0, r8
 8002246:	4649      	mov	r1, r9
 8002248:	f7fe f9f6 	bl	8000638 <__aeabi_dmul>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4690      	mov	r8, r2
 8002252:	4699      	mov	r9, r3
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <read_temperature+0x190>)
 8002256:	ed93 7b00 	vldr	d7, [r3]
 800225a:	eeb0 0a47 	vmov.f32	s0, s14
 800225e:	eef0 0a67 	vmov.f32	s1, s15
 8002262:	f00c fb61 	bl	800e928 <log>
 8002266:	ec53 2b10 	vmov	r2, r3, d0
 800226a:	4640      	mov	r0, r8
 800226c:	4649      	mov	r1, r9
 800226e:	f7fe f9e3 	bl	8000638 <__aeabi_dmul>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4620      	mov	r0, r4
 8002278:	4629      	mov	r1, r5
 800227a:	f7fe f827 	bl	80002cc <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4921      	ldr	r1, [pc, #132]	; (8002308 <read_temperature+0x198>)
 8002284:	e9c1 2300 	strd	r2, r3, [r1]
	steinhart = 1 / steinhart;
 8002288:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <read_temperature+0x198>)
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	f04f 0000 	mov.w	r0, #0
 8002292:	491c      	ldr	r1, [pc, #112]	; (8002304 <read_temperature+0x194>)
 8002294:	f7fe fafa 	bl	800088c <__aeabi_ddiv>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	491a      	ldr	r1, [pc, #104]	; (8002308 <read_temperature+0x198>)
 800229e:	e9c1 2300 	strd	r2, r3, [r1]
	steinhart -= 273.15;	// Convert Kelvin to Celsius
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <read_temperature+0x198>)
 80022a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022a8:	a313      	add	r3, pc, #76	; (adr r3, 80022f8 <read_temperature+0x188>)
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	f7fe f80b 	bl	80002c8 <__aeabi_dsub>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4914      	ldr	r1, [pc, #80]	; (8002308 <read_temperature+0x198>)
 80022b8:	e9c1 2300 	strd	r2, r3, [r1]

	return steinhart;
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <read_temperature+0x198>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80022c6:	eeb0 0a47 	vmov.f32	s0, s14
 80022ca:	eef0 0a67 	vmov.f32	s1, s15
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022d6:	bf00      	nop
 80022d8:	00000000 	.word	0x00000000
 80022dc:	40c38800 	.word	0x40c38800
 80022e0:	56f8bf82 	.word	0x56f8bf82
 80022e4:	3f2af966 	.word	0x3f2af966
 80022e8:	6e404f7b 	.word	0x6e404f7b
 80022ec:	3f55361a 	.word	0x3f55361a
 80022f0:	135e049e 	.word	0x135e049e
 80022f4:	3e8b7bac 	.word	0x3e8b7bac
 80022f8:	66666666 	.word	0x66666666
 80022fc:	40711266 	.word	0x40711266
 8002300:	20002f18 	.word	0x20002f18
 8002304:	3ff00000 	.word	0x3ff00000
 8002308:	200008b8 	.word	0x200008b8
 800230c:	00000000 	.word	0x00000000
 8002310:	40affe00 	.word	0x40affe00
 8002314:	00000000 	.word	0x00000000

08002318 <read_current>:

void read_current(){
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0

	vsupply = vdda * adc2_digital_value[1] / 4095;
 800231e:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <read_current+0xe0>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800232a:	4b34      	ldr	r3, [pc, #208]	; (80023fc <read_current+0xe4>)
 800232c:	edd3 7a00 	vldr	s15, [r3]
 8002330:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002334:	eddf 6a32 	vldr	s13, [pc, #200]	; 8002400 <read_current+0xe8>
 8002338:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <read_current+0xec>)
 800233e:	edc3 7a00 	vstr	s15, [r3]

	for ( int x = 0; x < 500; x++){
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	e01f      	b.n	8002388 <read_current+0x70>
	acs_output_voltage = vdda * adc2_digital_value[0] / 4095;
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <read_current+0xe0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002354:	4b29      	ldr	r3, [pc, #164]	; (80023fc <read_current+0xe4>)
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800235e:	eddf 6a28 	vldr	s13, [pc, #160]	; 8002400 <read_current+0xe8>
 8002362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002366:	4b28      	ldr	r3, [pc, #160]	; (8002408 <read_current+0xf0>)
 8002368:	edc3 7a00 	vstr	s15, [r3]
	acs_output_sum += acs_output_voltage;
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <read_current+0xf4>)
 800236e:	ed93 7a00 	vldr	s14, [r3]
 8002372:	4b25      	ldr	r3, [pc, #148]	; (8002408 <read_current+0xf0>)
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237c:	4b23      	ldr	r3, [pc, #140]	; (800240c <read_current+0xf4>)
 800237e:	edc3 7a00 	vstr	s15, [r3]
	for ( int x = 0; x < 500; x++){
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3301      	adds	r3, #1
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800238e:	dbdb      	blt.n	8002348 <read_current+0x30>
	}
	acs_output_ave = acs_output_sum / 500.0;
 8002390:	4b1e      	ldr	r3, [pc, #120]	; (800240c <read_current+0xf4>)
 8002392:	ed93 7a00 	vldr	s14, [r3]
 8002396:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002410 <read_current+0xf8>
 800239a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <read_current+0xfc>)
 80023a0:	edc3 7a00 	vstr	s15, [r3]

	acs_current_value = (acs_output_ave - (vsupply / 2)) / 0.066;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <read_current+0xfc>)
 80023a6:	ed93 7a00 	vldr	s14, [r3]
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <read_current+0xec>)
 80023ac:	edd3 6a00 	vldr	s13, [r3]
 80023b0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80023b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023bc:	ee17 0a90 	vmov	r0, s15
 80023c0:	f7fe f8e2 	bl	8000588 <__aeabi_f2d>
 80023c4:	a30a      	add	r3, pc, #40	; (adr r3, 80023f0 <read_current+0xd8>)
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	f7fe fa5f 	bl	800088c <__aeabi_ddiv>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7fe fc27 	bl	8000c28 <__aeabi_d2f>
 80023da:	4603      	mov	r3, r0
 80023dc:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <read_current+0x100>)
 80023de:	6013      	str	r3, [r2, #0]

	/*if(acs_current_value < 0)
		acs_current_value = 0;
*/
	acs_output_sum = 0;
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <read_current+0xf4>)
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]


}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	4189374c 	.word	0x4189374c
 80023f4:	3fb0e560 	.word	0x3fb0e560
 80023f8:	20002f0c 	.word	0x20002f0c
 80023fc:	20002f14 	.word	0x20002f14
 8002400:	457ff000 	.word	0x457ff000
 8002404:	20003028 	.word	0x20003028
 8002408:	20002ef8 	.word	0x20002ef8
 800240c:	2000065c 	.word	0x2000065c
 8002410:	43fa0000 	.word	0x43fa0000
 8002414:	200008ac 	.word	0x200008ac
 8002418:	200019e8 	.word	0x200019e8
 800241c:	00000000 	.word	0x00000000

08002420 <calculate_soc>:

void calculate_soc(){
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0

	current_integration = ( acs_current_value * delta_time / batt_nominal );
 8002424:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <calculate_soc+0x88>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f8ad 	bl	8000588 <__aeabi_f2d>
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <calculate_soc+0x8c>)
 8002434:	f7fe f900 	bl	8000638 <__aeabi_dmul>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	a317      	add	r3, pc, #92	; (adr r3, 80024a0 <calculate_soc+0x80>)
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	f7fe fa21 	bl	800088c <__aeabi_ddiv>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <calculate_soc+0x90>)
 8002458:	f7fe fa18 	bl	800088c <__aeabi_ddiv>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe fbe0 	bl	8000c28 <__aeabi_d2f>
 8002468:	4603      	mov	r3, r0
 800246a:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <calculate_soc+0x94>)
 800246c:	6013      	str	r3, [r2, #0]
	current_percentage = current_integration * 100.0;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <calculate_soc+0x94>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80024b8 <calculate_soc+0x98>
 8002478:	ee67 7a87 	vmul.f32	s15, s15, s14
 800247c:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <calculate_soc+0x9c>)
 800247e:	edc3 7a00 	vstr	s15, [r3]

	initial_soc = hundred_percent - current_percentage;	// inital soc calculation
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <calculate_soc+0x9c>)
 8002484:	edd3 7a00 	vldr	s15, [r3]
 8002488:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80024b8 <calculate_soc+0x98>
 800248c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <calculate_soc+0xa0>)
 8002492:	edc3 7a00 	vstr	s15, [r3]
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	f3af 8000 	nop.w
 80024a0:	00000000 	.word	0x00000000
 80024a4:	414b7740 	.word	0x414b7740
 80024a8:	200019e8 	.word	0x200019e8
 80024ac:	40240000 	.word	0x40240000
 80024b0:	3ff80000 	.word	0x3ff80000
 80024b4:	20002e94 	.word	0x20002e94
 80024b8:	42c80000 	.word	0x42c80000
 80024bc:	200008b0 	.word	0x200008b0
 80024c0:	200008c0 	.word	0x200008c0

080024c4 <create_txt_document>:
{
	for(int i = 0; i < 1024; i++)
		buffer[i] = '\0';
}

void create_txt_document(){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0

	  fresult = f_mount(&fs, "", 0);
 80024c8:	2200      	movs	r2, #0
 80024ca:	492d      	ldr	r1, [pc, #180]	; (8002580 <create_txt_document+0xbc>)
 80024cc:	482d      	ldr	r0, [pc, #180]	; (8002584 <create_txt_document+0xc0>)
 80024ce:	f006 fedf 	bl	8009290 <f_mount>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <create_txt_document+0xc4>)
 80024d8:	701a      	strb	r2, [r3, #0]
	  f_getfree("", &fre_clust, &pfs);
 80024da:	4a2c      	ldr	r2, [pc, #176]	; (800258c <create_txt_document+0xc8>)
 80024dc:	492c      	ldr	r1, [pc, #176]	; (8002590 <create_txt_document+0xcc>)
 80024de:	4828      	ldr	r0, [pc, #160]	; (8002580 <create_txt_document+0xbc>)
 80024e0:	f007 fb24 	bl	8009b2c <f_getfree>
	  total = (uint32_t)((pfs->n_fatent -2) * pfs->csize * 0.5 );
 80024e4:	4b29      	ldr	r3, [pc, #164]	; (800258c <create_txt_document+0xc8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	3b02      	subs	r3, #2
 80024ec:	4a27      	ldr	r2, [pc, #156]	; (800258c <create_txt_document+0xc8>)
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	8952      	ldrh	r2, [r2, #10]
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe f824 	bl	8000544 <__aeabi_ui2d>
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <create_txt_document+0xd0>)
 8002502:	f7fe f899 	bl	8000638 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f7fe fb6b 	bl	8000be8 <__aeabi_d2uiz>
 8002512:	4603      	mov	r3, r0
 8002514:	4a20      	ldr	r2, [pc, #128]	; (8002598 <create_txt_document+0xd4>)
 8002516:	6013      	str	r3, [r2, #0]
	  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002518:	4b1c      	ldr	r3, [pc, #112]	; (800258c <create_txt_document+0xc8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	895b      	ldrh	r3, [r3, #10]
 800251e:	461a      	mov	r2, r3
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <create_txt_document+0xcc>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fb03 f302 	mul.w	r3, r3, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe f80b 	bl	8000544 <__aeabi_ui2d>
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	4b18      	ldr	r3, [pc, #96]	; (8002594 <create_txt_document+0xd0>)
 8002534:	f7fe f880 	bl	8000638 <__aeabi_dmul>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	f7fe fb52 	bl	8000be8 <__aeabi_d2uiz>
 8002544:	4603      	mov	r3, r0
 8002546:	4a15      	ldr	r2, [pc, #84]	; (800259c <create_txt_document+0xd8>)
 8002548:	6013      	str	r3, [r2, #0]
	  fresult = f_open(&file, "1.txt", FA_CREATE_NEW | FA_READ | FA_WRITE);
 800254a:	2207      	movs	r2, #7
 800254c:	4914      	ldr	r1, [pc, #80]	; (80025a0 <create_txt_document+0xdc>)
 800254e:	4815      	ldr	r0, [pc, #84]	; (80025a4 <create_txt_document+0xe0>)
 8002550:	f006 fee4 	bl	800931c <f_open>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <create_txt_document+0xc4>)
 800255a:	701a      	strb	r2, [r3, #0]
	  sprintf(data, "Cell1	Cell2	Cell3	T	SoC\n");
 800255c:	4912      	ldr	r1, [pc, #72]	; (80025a8 <create_txt_document+0xe4>)
 800255e:	4813      	ldr	r0, [pc, #76]	; (80025ac <create_txt_document+0xe8>)
 8002560:	f008 fc08 	bl	800ad74 <siprintf>
	  f_puts(data, &file);
 8002564:	490f      	ldr	r1, [pc, #60]	; (80025a4 <create_txt_document+0xe0>)
 8002566:	4811      	ldr	r0, [pc, #68]	; (80025ac <create_txt_document+0xe8>)
 8002568:	f007 fc0c 	bl	8009d84 <f_puts>
	  fresult = f_close(&file);
 800256c:	480d      	ldr	r0, [pc, #52]	; (80025a4 <create_txt_document+0xe0>)
 800256e:	f007 fab3 	bl	8009ad8 <f_close>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <create_txt_document+0xc4>)
 8002578:	701a      	strb	r2, [r3, #0]
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	0800f008 	.word	0x0800f008
 8002584:	20000908 	.word	0x20000908
 8002588:	20002f24 	.word	0x20002f24
 800258c:	20002f20 	.word	0x20002f20
 8002590:	200008a8 	.word	0x200008a8
 8002594:	3fe00000 	.word	0x3fe00000
 8002598:	20003024 	.word	0x20003024
 800259c:	20002a64 	.word	0x20002a64
 80025a0:	0800f00c 	.word	0x0800f00c
 80025a4:	200019ec 	.word	0x200019ec
 80025a8:	0800f014 	.word	0x0800f014
 80025ac:	20000608 	.word	0x20000608

080025b0 <write_data_to_sd_card>:

void write_data_to_sd_card(){
 80025b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025b4:	b08a      	sub	sp, #40	; 0x28
 80025b6:	af08      	add	r7, sp, #32

	  fresult = f_open(&file, "1.txt", FA_OPEN_APPEND | FA_READ | FA_WRITE);
 80025b8:	2233      	movs	r2, #51	; 0x33
 80025ba:	4922      	ldr	r1, [pc, #136]	; (8002644 <write_data_to_sd_card+0x94>)
 80025bc:	4822      	ldr	r0, [pc, #136]	; (8002648 <write_data_to_sd_card+0x98>)
 80025be:	f006 fead 	bl	800931c <f_open>
 80025c2:	4603      	mov	r3, r0
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b21      	ldr	r3, [pc, #132]	; (800264c <write_data_to_sd_card+0x9c>)
 80025c8:	701a      	strb	r2, [r3, #0]
	  sprintf(data, "%.3f	%.3f	%.3f	%.1f	%.3f\n",
			  cell_voltages[0], cell_voltages[1], cell_voltages[2], temperature, soc);
 80025ca:	4b21      	ldr	r3, [pc, #132]	; (8002650 <write_data_to_sd_card+0xa0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
	  sprintf(data, "%.3f	%.3f	%.3f	%.1f	%.3f\n",
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ffda 	bl	8000588 <__aeabi_f2d>
 80025d4:	e9c7 0100 	strd	r0, r1, [r7]
			  cell_voltages[0], cell_voltages[1], cell_voltages[2], temperature, soc);
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <write_data_to_sd_card+0xa0>)
 80025da:	685b      	ldr	r3, [r3, #4]
	  sprintf(data, "%.3f	%.3f	%.3f	%.1f	%.3f\n",
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fd ffd3 	bl	8000588 <__aeabi_f2d>
 80025e2:	4680      	mov	r8, r0
 80025e4:	4689      	mov	r9, r1
			  cell_voltages[0], cell_voltages[1], cell_voltages[2], temperature, soc);
 80025e6:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <write_data_to_sd_card+0xa0>)
 80025e8:	689b      	ldr	r3, [r3, #8]
	  sprintf(data, "%.3f	%.3f	%.3f	%.1f	%.3f\n",
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ffcc 	bl	8000588 <__aeabi_f2d>
 80025f0:	4682      	mov	sl, r0
 80025f2:	468b      	mov	fp, r1
 80025f4:	4b17      	ldr	r3, [pc, #92]	; (8002654 <write_data_to_sd_card+0xa4>)
 80025f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80025fa:	4b17      	ldr	r3, [pc, #92]	; (8002658 <write_data_to_sd_card+0xa8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd ffc2 	bl	8000588 <__aeabi_f2d>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800260c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002610:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002614:	e9cd 8900 	strd	r8, r9, [sp]
 8002618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800261c:	490f      	ldr	r1, [pc, #60]	; (800265c <write_data_to_sd_card+0xac>)
 800261e:	4810      	ldr	r0, [pc, #64]	; (8002660 <write_data_to_sd_card+0xb0>)
 8002620:	f008 fba8 	bl	800ad74 <siprintf>
	  f_puts(data, &file);
 8002624:	4908      	ldr	r1, [pc, #32]	; (8002648 <write_data_to_sd_card+0x98>)
 8002626:	480e      	ldr	r0, [pc, #56]	; (8002660 <write_data_to_sd_card+0xb0>)
 8002628:	f007 fbac 	bl	8009d84 <f_puts>
	  fresult = f_close(&file);
 800262c:	4806      	ldr	r0, [pc, #24]	; (8002648 <write_data_to_sd_card+0x98>)
 800262e:	f007 fa53 	bl	8009ad8 <f_close>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <write_data_to_sd_card+0x9c>)
 8002638:	701a      	strb	r2, [r3, #0]

}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002644:	0800f00c 	.word	0x0800f00c
 8002648:	200019ec 	.word	0x200019ec
 800264c:	20002f24 	.word	0x20002f24
 8002650:	20002f00 	.word	0x20002f00
 8002654:	200019e0 	.word	0x200019e0
 8002658:	2000302c 	.word	0x2000302c
 800265c:	0800f030 	.word	0x0800f030
 8002660:	20000608 	.word	0x20000608

08002664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002668:	f000 ff4e 	bl	8003508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800266c:	f000 f8c2 	bl	80027f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002670:	f000 faf6 	bl	8002c60 <MX_GPIO_Init>
  MX_DMA_Init();
 8002674:	f000 facc 	bl	8002c10 <MX_DMA_Init>
  MX_ADC1_Init();
 8002678:	f000 f928 	bl	80028cc <MX_ADC1_Init>
  MX_ADC2_Init();
 800267c:	f000 f9b0 	bl	80029e0 <MX_ADC2_Init>
  MX_I2C1_Init();
 8002680:	f000 fa0e 	bl	8002aa0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002684:	f000 fa3a 	bl	8002afc <MX_SPI1_Init>
  MX_FATFS_Init();
 8002688:	f004 fbb0 	bl	8006dec <MX_FATFS_Init>
  MX_USART2_UART_Init();
 800268c:	f000 fa6c 	bl	8002b68 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002690:	f000 fa94 	bl	8002bbc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, adc1_digital_value, 5);
 8002694:	2205      	movs	r2, #5
 8002696:	4944      	ldr	r1, [pc, #272]	; (80027a8 <main+0x144>)
 8002698:	4844      	ldr	r0, [pc, #272]	; (80027ac <main+0x148>)
 800269a:	f001 f80f 	bl	80036bc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, adc2_digital_value, 2);
 800269e:	2202      	movs	r2, #2
 80026a0:	4943      	ldr	r1, [pc, #268]	; (80027b0 <main+0x14c>)
 80026a2:	4844      	ldr	r0, [pc, #272]	; (80027b4 <main+0x150>)
 80026a4:	f001 f80a 	bl	80036bc <HAL_ADC_Start_DMA>
  lcd_init();
 80026a8:	f7ff fce6 	bl	8002078 <lcd_init>

  __HAL_UART_ENABLE_IT(pc_uart,UART_IT_RXNE);
 80026ac:	4b42      	ldr	r3, [pc, #264]	; (80027b8 <main+0x154>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	4b41      	ldr	r3, [pc, #260]	; (80027b8 <main+0x154>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0220 	orr.w	r2, r2, #32
 80026ba:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(wifi_uart,UART_IT_RXNE);
 80026bc:	4b3f      	ldr	r3, [pc, #252]	; (80027bc <main+0x158>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	4b3e      	ldr	r3, [pc, #248]	; (80027bc <main+0x158>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0220 	orr.w	r2, r2, #32
 80026ca:	60da      	str	r2, [r3, #12]

  ESP8266_Init("AKYUZ", "portakal54");
 80026cc:	493c      	ldr	r1, [pc, #240]	; (80027c0 <main+0x15c>)
 80026ce:	483d      	ldr	r0, [pc, #244]	; (80027c4 <main+0x160>)
 80026d0:	f7fe fe32 	bl	8001338 <ESP8266_Init>

  create_txt_document();
 80026d4:	f7ff fef6 	bl	80024c4 <create_txt_document>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  vdda = (float) 3.3 * (*VREFIN_CAL) / adc1_digital_value[0];		// Vref voltage value
 80026d8:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <main+0x164>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	ee07 3a90 	vmov	s15, r3
 80026e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026e4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80027cc <main+0x168>
 80026e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80026ec:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <main+0x144>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	ee07 3a90 	vmov	s15, r3
 80026f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026fc:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <main+0x16c>)
 80026fe:	edc3 7a00 	vstr	s15, [r3]
	  read_cell_voltages();
 8002702:	f7ff fcf7 	bl	80020f4 <read_cell_voltages>
	  temperature = read_temperature(adc1_digital_value[4]);
 8002706:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <main+0x144>)
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fd30 	bl	8002170 <read_temperature>
 8002710:	eeb0 7a40 	vmov.f32	s14, s0
 8002714:	eef0 7a60 	vmov.f32	s15, s1
 8002718:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <main+0x170>)
 800271a:	ed83 7b00 	vstr	d7, [r3]
	  read_current();
 800271e:	f7ff fdfb 	bl	8002318 <read_current>
	  calculate_soc();
 8002722:	f7ff fe7d 	bl	8002420 <calculate_soc>

	  if(first_run){
 8002726:	4b2c      	ldr	r3, [pc, #176]	; (80027d8 <main+0x174>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00e      	beq.n	800274c <main+0xe8>
		  soc = initial_soc;
 800272e:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <main+0x178>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a2b      	ldr	r2, [pc, #172]	; (80027e0 <main+0x17c>)
 8002734:	6013      	str	r3, [r2, #0]
		  first_run = !first_run;
 8002736:	4b28      	ldr	r3, [pc, #160]	; (80027d8 <main+0x174>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	bf0c      	ite	eq
 800273e:	2301      	moveq	r3, #1
 8002740:	2300      	movne	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <main+0x174>)
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e00a      	b.n	8002762 <main+0xfe>
	  }
	  else
		  soc = soc - current_percentage;
 800274c:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <main+0x17c>)
 800274e:	ed93 7a00 	vldr	s14, [r3]
 8002752:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <main+0x180>)
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275c:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <main+0x17c>)
 800275e:	edc3 7a00 	vstr	s15, [r3]

	  esp_data_buffer[0] = cell_voltages[0];
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <main+0x184>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a21      	ldr	r2, [pc, #132]	; (80027ec <main+0x188>)
 8002768:	6013      	str	r3, [r2, #0]
	  esp_data_buffer[1] = cell_voltages[1];
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <main+0x184>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4a1f      	ldr	r2, [pc, #124]	; (80027ec <main+0x188>)
 8002770:	6053      	str	r3, [r2, #4]
	  esp_data_buffer[2] = cell_voltages[2];
 8002772:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <main+0x184>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <main+0x188>)
 8002778:	6093      	str	r3, [r2, #8]
	  esp_data_buffer[3] = temperature;
 800277a:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <main+0x170>)
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	f7fe fa50 	bl	8000c28 <__aeabi_d2f>
 8002788:	4603      	mov	r3, r0
 800278a:	4a18      	ldr	r2, [pc, #96]	; (80027ec <main+0x188>)
 800278c:	60d3      	str	r3, [r2, #12]
	  esp_data_buffer[4] = soc;
 800278e:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <main+0x17c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a16      	ldr	r2, [pc, #88]	; (80027ec <main+0x188>)
 8002794:	6113      	str	r3, [r2, #16]

	  ESP_Send_Server_Multi("97WNS6R7B6C1CN3T", 5, esp_data_buffer);
 8002796:	4a15      	ldr	r2, [pc, #84]	; (80027ec <main+0x188>)
 8002798:	2105      	movs	r1, #5
 800279a:	4815      	ldr	r0, [pc, #84]	; (80027f0 <main+0x18c>)
 800279c:	f7fe fc46 	bl	800102c <ESP_Send_Server_Multi>

	  write_data_to_sd_card();
 80027a0:	f7ff ff06 	bl	80025b0 <write_data_to_sd_card>
	  vdda = (float) 3.3 * (*VREFIN_CAL) / adc1_digital_value[0];		// Vref voltage value
 80027a4:	e798      	b.n	80026d8 <main+0x74>
 80027a6:	bf00      	nop
 80027a8:	20002a68 	.word	0x20002a68
 80027ac:	20002a1c 	.word	0x20002a1c
 80027b0:	20002f0c 	.word	0x20002f0c
 80027b4:	20001940 	.word	0x20001940
 80027b8:	20002f80 	.word	0x20002f80
 80027bc:	200008c4 	.word	0x200008c4
 80027c0:	0800f04c 	.word	0x0800f04c
 80027c4:	0800f058 	.word	0x0800f058
 80027c8:	1fff7a2a 	.word	0x1fff7a2a
 80027cc:	40533333 	.word	0x40533333
 80027d0:	20002f14 	.word	0x20002f14
 80027d4:	200019e0 	.word	0x200019e0
 80027d8:	20000004 	.word	0x20000004
 80027dc:	200008c0 	.word	0x200008c0
 80027e0:	2000302c 	.word	0x2000302c
 80027e4:	200008b0 	.word	0x200008b0
 80027e8:	20002f00 	.word	0x20002f00
 80027ec:	20002a80 	.word	0x20002a80
 80027f0:	0800f060 	.word	0x0800f060

080027f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b094      	sub	sp, #80	; 0x50
 80027f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027fa:	f107 031c 	add.w	r3, r7, #28
 80027fe:	2234      	movs	r2, #52	; 0x34
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f007 fc2e 	bl	800a064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002808:	f107 0308 	add.w	r3, r7, #8
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002818:	2300      	movs	r3, #0
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <SystemClock_Config+0xd0>)
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	4a28      	ldr	r2, [pc, #160]	; (80028c4 <SystemClock_Config+0xd0>)
 8002822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002826:	6413      	str	r3, [r2, #64]	; 0x40
 8002828:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <SystemClock_Config+0xd0>)
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002834:	2300      	movs	r3, #0
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <SystemClock_Config+0xd4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a22      	ldr	r2, [pc, #136]	; (80028c8 <SystemClock_Config+0xd4>)
 800283e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <SystemClock_Config+0xd4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002850:	2301      	movs	r3, #1
 8002852:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002854:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002858:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800285a:	2302      	movs	r3, #2
 800285c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800285e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002862:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002864:	2304      	movs	r3, #4
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002868:	23a8      	movs	r3, #168	; 0xa8
 800286a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800286c:	2302      	movs	r3, #2
 800286e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002870:	2302      	movs	r3, #2
 8002872:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002874:	2302      	movs	r3, #2
 8002876:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4618      	mov	r0, r3
 800287e:	f003 f843 	bl	8005908 <HAL_RCC_OscConfig>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002888:	f000 fa4a 	bl	8002d20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800288c:	230f      	movs	r3, #15
 800288e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002890:	2302      	movs	r3, #2
 8002892:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002898:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800289c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800289e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028a4:	f107 0308 	add.w	r3, r7, #8
 80028a8:	2105      	movs	r1, #5
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fd60 	bl	8005370 <HAL_RCC_ClockConfig>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80028b6:	f000 fa33 	bl	8002d20 <Error_Handler>
  }
}
 80028ba:	bf00      	nop
 80028bc:	3750      	adds	r7, #80	; 0x50
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40007000 	.word	0x40007000

080028cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028d2:	463b      	mov	r3, r7
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <MX_ADC1_Init+0x108>)
 80028e0:	4a3d      	ldr	r2, [pc, #244]	; (80029d8 <MX_ADC1_Init+0x10c>)
 80028e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80028e4:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <MX_ADC1_Init+0x108>)
 80028e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028ec:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <MX_ADC1_Init+0x108>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80028f2:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <MX_ADC1_Init+0x108>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80028f8:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <MX_ADC1_Init+0x108>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028fe:	4b35      	ldr	r3, [pc, #212]	; (80029d4 <MX_ADC1_Init+0x108>)
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002906:	4b33      	ldr	r3, [pc, #204]	; (80029d4 <MX_ADC1_Init+0x108>)
 8002908:	2200      	movs	r2, #0
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800290c:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <MX_ADC1_Init+0x108>)
 800290e:	4a33      	ldr	r2, [pc, #204]	; (80029dc <MX_ADC1_Init+0x110>)
 8002910:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002912:	4b30      	ldr	r3, [pc, #192]	; (80029d4 <MX_ADC1_Init+0x108>)
 8002914:	2200      	movs	r2, #0
 8002916:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8002918:	4b2e      	ldr	r3, [pc, #184]	; (80029d4 <MX_ADC1_Init+0x108>)
 800291a:	2205      	movs	r2, #5
 800291c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800291e:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <MX_ADC1_Init+0x108>)
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002926:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <MX_ADC1_Init+0x108>)
 8002928:	2201      	movs	r2, #1
 800292a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800292c:	4829      	ldr	r0, [pc, #164]	; (80029d4 <MX_ADC1_Init+0x108>)
 800292e:	f000 fe81 	bl	8003634 <HAL_ADC_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002938:	f000 f9f2 	bl	8002d20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800293c:	2311      	movs	r3, #17
 800293e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002940:	2301      	movs	r3, #1
 8002942:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002944:	2306      	movs	r3, #6
 8002946:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002948:	463b      	mov	r3, r7
 800294a:	4619      	mov	r1, r3
 800294c:	4821      	ldr	r0, [pc, #132]	; (80029d4 <MX_ADC1_Init+0x108>)
 800294e:	f000 ffe3 	bl	8003918 <HAL_ADC_ConfigChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002958:	f000 f9e2 	bl	8002d20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800295c:	2300      	movs	r3, #0
 800295e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002960:	2302      	movs	r3, #2
 8002962:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002964:	463b      	mov	r3, r7
 8002966:	4619      	mov	r1, r3
 8002968:	481a      	ldr	r0, [pc, #104]	; (80029d4 <MX_ADC1_Init+0x108>)
 800296a:	f000 ffd5 	bl	8003918 <HAL_ADC_ConfigChannel>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002974:	f000 f9d4 	bl	8002d20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002978:	2301      	movs	r3, #1
 800297a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800297c:	2303      	movs	r3, #3
 800297e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002980:	463b      	mov	r3, r7
 8002982:	4619      	mov	r1, r3
 8002984:	4813      	ldr	r0, [pc, #76]	; (80029d4 <MX_ADC1_Init+0x108>)
 8002986:	f000 ffc7 	bl	8003918 <HAL_ADC_ConfigChannel>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002990:	f000 f9c6 	bl	8002d20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002994:	230c      	movs	r3, #12
 8002996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002998:	2304      	movs	r3, #4
 800299a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800299c:	463b      	mov	r3, r7
 800299e:	4619      	mov	r1, r3
 80029a0:	480c      	ldr	r0, [pc, #48]	; (80029d4 <MX_ADC1_Init+0x108>)
 80029a2:	f000 ffb9 	bl	8003918 <HAL_ADC_ConfigChannel>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80029ac:	f000 f9b8 	bl	8002d20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80029b0:	230d      	movs	r3, #13
 80029b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80029b4:	2305      	movs	r3, #5
 80029b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029b8:	463b      	mov	r3, r7
 80029ba:	4619      	mov	r1, r3
 80029bc:	4805      	ldr	r0, [pc, #20]	; (80029d4 <MX_ADC1_Init+0x108>)
 80029be:	f000 ffab 	bl	8003918 <HAL_ADC_ConfigChannel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80029c8:	f000 f9aa 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20002a1c 	.word	0x20002a1c
 80029d8:	40012000 	.word	0x40012000
 80029dc:	0f000001 	.word	0x0f000001

080029e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029e6:	463b      	mov	r3, r7
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80029f2:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <MX_ADC2_Init+0xb4>)
 80029f4:	4a28      	ldr	r2, [pc, #160]	; (8002a98 <MX_ADC2_Init+0xb8>)
 80029f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029f8:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <MX_ADC2_Init+0xb4>)
 80029fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002a00:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <MX_ADC2_Init+0xb4>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8002a06:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <MX_ADC2_Init+0xb4>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002a0c:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <MX_ADC2_Init+0xb4>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <MX_ADC2_Init+0xb4>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <MX_ADC2_Init+0xb4>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a20:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <MX_ADC2_Init+0xb4>)
 8002a22:	4a1e      	ldr	r2, [pc, #120]	; (8002a9c <MX_ADC2_Init+0xbc>)
 8002a24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <MX_ADC2_Init+0xb4>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <MX_ADC2_Init+0xb4>)
 8002a2e:	2202      	movs	r2, #2
 8002a30:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002a32:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <MX_ADC2_Init+0xb4>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a3a:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <MX_ADC2_Init+0xb4>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002a40:	4814      	ldr	r0, [pc, #80]	; (8002a94 <MX_ADC2_Init+0xb4>)
 8002a42:	f000 fdf7 	bl	8003634 <HAL_ADC_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002a4c:	f000 f968 	bl	8002d20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002a50:	230e      	movs	r3, #14
 8002a52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a54:	2301      	movs	r3, #1
 8002a56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002a58:	2306      	movs	r3, #6
 8002a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a5c:	463b      	mov	r3, r7
 8002a5e:	4619      	mov	r1, r3
 8002a60:	480c      	ldr	r0, [pc, #48]	; (8002a94 <MX_ADC2_Init+0xb4>)
 8002a62:	f000 ff59 	bl	8003918 <HAL_ADC_ConfigChannel>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002a6c:	f000 f958 	bl	8002d20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002a70:	230f      	movs	r3, #15
 8002a72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002a74:	2302      	movs	r3, #2
 8002a76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a78:	463b      	mov	r3, r7
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4805      	ldr	r0, [pc, #20]	; (8002a94 <MX_ADC2_Init+0xb4>)
 8002a7e:	f000 ff4b 	bl	8003918 <HAL_ADC_ConfigChannel>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8002a88:	f000 f94a 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20001940 	.word	0x20001940
 8002a98:	40012100 	.word	0x40012100
 8002a9c:	0f000001 	.word	0x0f000001

08002aa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <MX_I2C1_Init+0x50>)
 8002aa6:	4a13      	ldr	r2, [pc, #76]	; (8002af4 <MX_I2C1_Init+0x54>)
 8002aa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <MX_I2C1_Init+0x50>)
 8002aac:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <MX_I2C1_Init+0x58>)
 8002aae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <MX_I2C1_Init+0x50>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <MX_I2C1_Init+0x50>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <MX_I2C1_Init+0x50>)
 8002abe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ac2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <MX_I2C1_Init+0x50>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <MX_I2C1_Init+0x50>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <MX_I2C1_Init+0x50>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <MX_I2C1_Init+0x50>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002adc:	4804      	ldr	r0, [pc, #16]	; (8002af0 <MX_I2C1_Init+0x50>)
 8002ade:	f001 fffb 	bl	8004ad8 <HAL_I2C_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ae8:	f000 f91a 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20001988 	.word	0x20001988
 8002af4:	40005400 	.word	0x40005400
 8002af8:	000186a0 	.word	0x000186a0

08002afc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b00:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <MX_SPI1_Init+0x64>)
 8002b02:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <MX_SPI1_Init+0x68>)
 8002b04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b06:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <MX_SPI1_Init+0x64>)
 8002b08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <MX_SPI1_Init+0x64>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <MX_SPI1_Init+0x64>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <MX_SPI1_Init+0x64>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <MX_SPI1_Init+0x64>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <MX_SPI1_Init+0x64>)
 8002b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <MX_SPI1_Init+0x64>)
 8002b30:	2228      	movs	r2, #40	; 0x28
 8002b32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <MX_SPI1_Init+0x64>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <MX_SPI1_Init+0x64>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b40:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <MX_SPI1_Init+0x64>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <MX_SPI1_Init+0x64>)
 8002b48:	220a      	movs	r2, #10
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b4c:	4804      	ldr	r0, [pc, #16]	; (8002b60 <MX_SPI1_Init+0x64>)
 8002b4e:	f003 f979 	bl	8005e44 <HAL_SPI_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b58:	f000 f8e2 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20002f28 	.word	0x20002f28
 8002b64:	40013000 	.word	0x40013000

08002b68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <MX_USART2_UART_Init+0x50>)
 8002b70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b8e:	220c      	movs	r2, #12
 8002b90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b9e:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002ba0:	f003 fd90 	bl	80066c4 <HAL_UART_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002baa:	f000 f8b9 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20002f80 	.word	0x20002f80
 8002bb8:	40004400 	.word	0x40004400

08002bbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_USART3_UART_Init+0x4c>)
 8002bc2:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <MX_USART3_UART_Init+0x50>)
 8002bc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <MX_USART3_UART_Init+0x4c>)
 8002bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_USART3_UART_Init+0x4c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <MX_USART3_UART_Init+0x4c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <MX_USART3_UART_Init+0x4c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_USART3_UART_Init+0x4c>)
 8002be2:	220c      	movs	r2, #12
 8002be4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <MX_USART3_UART_Init+0x4c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <MX_USART3_UART_Init+0x4c>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <MX_USART3_UART_Init+0x4c>)
 8002bf4:	f003 fd66 	bl	80066c4 <HAL_UART_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002bfe:	f000 f88f 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200008c4 	.word	0x200008c4
 8002c0c:	40004800 	.word	0x40004800

08002c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <MX_DMA_Init+0x4c>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <MX_DMA_Init+0x4c>)
 8002c20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <MX_DMA_Init+0x4c>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2100      	movs	r1, #0
 8002c36:	2038      	movs	r0, #56	; 0x38
 8002c38:	f001 f9f9 	bl	800402e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002c3c:	2038      	movs	r0, #56	; 0x38
 8002c3e:	f001 fa12 	bl	8004066 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2100      	movs	r1, #0
 8002c46:	203a      	movs	r0, #58	; 0x3a
 8002c48:	f001 f9f1 	bl	800402e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002c4c:	203a      	movs	r0, #58	; 0x3a
 8002c4e:	f001 fa0a 	bl	8004066 <HAL_NVIC_EnableIRQ>

}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800

08002c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	; 0x28
 8002c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c66:	f107 0314 	add.w	r3, r7, #20
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	609a      	str	r2, [r3, #8]
 8002c72:	60da      	str	r2, [r3, #12]
 8002c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <MX_GPIO_Init+0xb8>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a26      	ldr	r2, [pc, #152]	; (8002d18 <MX_GPIO_Init+0xb8>)
 8002c80:	f043 0304 	orr.w	r3, r3, #4
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b24      	ldr	r3, [pc, #144]	; (8002d18 <MX_GPIO_Init+0xb8>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <MX_GPIO_Init+0xb8>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <MX_GPIO_Init+0xb8>)
 8002c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <MX_GPIO_Init+0xb8>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <MX_GPIO_Init+0xb8>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <MX_GPIO_Init+0xb8>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <MX_GPIO_Init+0xb8>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	607b      	str	r3, [r7, #4]
 8002cce:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <MX_GPIO_Init+0xb8>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a11      	ldr	r2, [pc, #68]	; (8002d18 <MX_GPIO_Init+0xb8>)
 8002cd4:	f043 0302 	orr.w	r3, r3, #2
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <MX_GPIO_Init+0xb8>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cec:	480b      	ldr	r0, [pc, #44]	; (8002d1c <MX_GPIO_Init+0xbc>)
 8002cee:	f001 fed9 	bl	8004aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d00:	2300      	movs	r3, #0
 8002d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4804      	ldr	r0, [pc, #16]	; (8002d1c <MX_GPIO_Init+0xbc>)
 8002d0c:	f001 fd36 	bl	800477c <HAL_GPIO_Init>

}
 8002d10:	bf00      	nop
 8002d12:	3728      	adds	r7, #40	; 0x28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40020000 	.word	0x40020000

08002d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d24:	b672      	cpsid	i
}
 8002d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <Error_Handler+0x8>
	...

08002d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <HAL_MspInit+0x4c>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	4a0f      	ldr	r2, [pc, #60]	; (8002d78 <HAL_MspInit+0x4c>)
 8002d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d40:	6453      	str	r3, [r2, #68]	; 0x44
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <HAL_MspInit+0x4c>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	603b      	str	r3, [r7, #0]
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_MspInit+0x4c>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <HAL_MspInit+0x4c>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_MspInit+0x4c>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800

08002d7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08c      	sub	sp, #48	; 0x30
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	f107 031c 	add.w	r3, r7, #28
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a6c      	ldr	r2, [pc, #432]	; (8002f4c <HAL_ADC_MspInit+0x1d0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d173      	bne.n	8002e86 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61bb      	str	r3, [r7, #24]
 8002da2:	4b6b      	ldr	r3, [pc, #428]	; (8002f50 <HAL_ADC_MspInit+0x1d4>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a6a      	ldr	r2, [pc, #424]	; (8002f50 <HAL_ADC_MspInit+0x1d4>)
 8002da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44
 8002dae:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <HAL_ADC_MspInit+0x1d4>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	4b64      	ldr	r3, [pc, #400]	; (8002f50 <HAL_ADC_MspInit+0x1d4>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a63      	ldr	r2, [pc, #396]	; (8002f50 <HAL_ADC_MspInit+0x1d4>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b61      	ldr	r3, [pc, #388]	; (8002f50 <HAL_ADC_MspInit+0x1d4>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	4b5d      	ldr	r3, [pc, #372]	; (8002f50 <HAL_ADC_MspInit+0x1d4>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a5c      	ldr	r2, [pc, #368]	; (8002f50 <HAL_ADC_MspInit+0x1d4>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b5a      	ldr	r3, [pc, #360]	; (8002f50 <HAL_ADC_MspInit+0x1d4>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002df2:	230c      	movs	r3, #12
 8002df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002df6:	2303      	movs	r3, #3
 8002df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dfe:	f107 031c 	add.w	r3, r7, #28
 8002e02:	4619      	mov	r1, r3
 8002e04:	4853      	ldr	r0, [pc, #332]	; (8002f54 <HAL_ADC_MspInit+0x1d8>)
 8002e06:	f001 fcb9 	bl	800477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e16:	f107 031c 	add.w	r3, r7, #28
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	484e      	ldr	r0, [pc, #312]	; (8002f58 <HAL_ADC_MspInit+0x1dc>)
 8002e1e:	f001 fcad 	bl	800477c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002e22:	4b4e      	ldr	r3, [pc, #312]	; (8002f5c <HAL_ADC_MspInit+0x1e0>)
 8002e24:	4a4e      	ldr	r2, [pc, #312]	; (8002f60 <HAL_ADC_MspInit+0x1e4>)
 8002e26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002e28:	4b4c      	ldr	r3, [pc, #304]	; (8002f5c <HAL_ADC_MspInit+0x1e0>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e2e:	4b4b      	ldr	r3, [pc, #300]	; (8002f5c <HAL_ADC_MspInit+0x1e0>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e34:	4b49      	ldr	r3, [pc, #292]	; (8002f5c <HAL_ADC_MspInit+0x1e0>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e3a:	4b48      	ldr	r3, [pc, #288]	; (8002f5c <HAL_ADC_MspInit+0x1e0>)
 8002e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e40:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e42:	4b46      	ldr	r3, [pc, #280]	; (8002f5c <HAL_ADC_MspInit+0x1e0>)
 8002e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e48:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e4a:	4b44      	ldr	r3, [pc, #272]	; (8002f5c <HAL_ADC_MspInit+0x1e0>)
 8002e4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e52:	4b42      	ldr	r3, [pc, #264]	; (8002f5c <HAL_ADC_MspInit+0x1e0>)
 8002e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e58:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e5a:	4b40      	ldr	r3, [pc, #256]	; (8002f5c <HAL_ADC_MspInit+0x1e0>)
 8002e5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e60:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e62:	4b3e      	ldr	r3, [pc, #248]	; (8002f5c <HAL_ADC_MspInit+0x1e0>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e68:	483c      	ldr	r0, [pc, #240]	; (8002f5c <HAL_ADC_MspInit+0x1e0>)
 8002e6a:	f001 f917 	bl	800409c <HAL_DMA_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8002e74:	f7ff ff54 	bl	8002d20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a38      	ldr	r2, [pc, #224]	; (8002f5c <HAL_ADC_MspInit+0x1e0>)
 8002e7c:	639a      	str	r2, [r3, #56]	; 0x38
 8002e7e:	4a37      	ldr	r2, [pc, #220]	; (8002f5c <HAL_ADC_MspInit+0x1e0>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002e84:	e05e      	b.n	8002f44 <HAL_ADC_MspInit+0x1c8>
  else if(hadc->Instance==ADC2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a36      	ldr	r2, [pc, #216]	; (8002f64 <HAL_ADC_MspInit+0x1e8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d159      	bne.n	8002f44 <HAL_ADC_MspInit+0x1c8>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <HAL_ADC_MspInit+0x1d4>)
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	4a2d      	ldr	r2, [pc, #180]	; (8002f50 <HAL_ADC_MspInit+0x1d4>)
 8002e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e9e:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea0:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <HAL_ADC_MspInit+0x1d4>)
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	4b27      	ldr	r3, [pc, #156]	; (8002f50 <HAL_ADC_MspInit+0x1d4>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	4a26      	ldr	r2, [pc, #152]	; (8002f50 <HAL_ADC_MspInit+0x1d4>)
 8002eb6:	f043 0304 	orr.w	r3, r3, #4
 8002eba:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebc:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_ADC_MspInit+0x1d4>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002ec8:	2330      	movs	r3, #48	; 0x30
 8002eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed4:	f107 031c 	add.w	r3, r7, #28
 8002ed8:	4619      	mov	r1, r3
 8002eda:	481e      	ldr	r0, [pc, #120]	; (8002f54 <HAL_ADC_MspInit+0x1d8>)
 8002edc:	f001 fc4e 	bl	800477c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002ee0:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <HAL_ADC_MspInit+0x1ec>)
 8002ee2:	4a22      	ldr	r2, [pc, #136]	; (8002f6c <HAL_ADC_MspInit+0x1f0>)
 8002ee4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002ee6:	4b20      	ldr	r3, [pc, #128]	; (8002f68 <HAL_ADC_MspInit+0x1ec>)
 8002ee8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eec:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eee:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <HAL_ADC_MspInit+0x1ec>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef4:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_ADC_MspInit+0x1ec>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002efa:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_ADC_MspInit+0x1ec>)
 8002efc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f00:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f02:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_ADC_MspInit+0x1ec>)
 8002f04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f08:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f0a:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <HAL_ADC_MspInit+0x1ec>)
 8002f0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f10:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <HAL_ADC_MspInit+0x1ec>)
 8002f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f18:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <HAL_ADC_MspInit+0x1ec>)
 8002f1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f20:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f22:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_ADC_MspInit+0x1ec>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002f28:	480f      	ldr	r0, [pc, #60]	; (8002f68 <HAL_ADC_MspInit+0x1ec>)
 8002f2a:	f001 f8b7 	bl	800409c <HAL_DMA_Init>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_ADC_MspInit+0x1bc>
      Error_Handler();
 8002f34:	f7ff fef4 	bl	8002d20 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a0b      	ldr	r2, [pc, #44]	; (8002f68 <HAL_ADC_MspInit+0x1ec>)
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <HAL_ADC_MspInit+0x1ec>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002f44:	bf00      	nop
 8002f46:	3730      	adds	r7, #48	; 0x30
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40012000 	.word	0x40012000
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40020800 	.word	0x40020800
 8002f58:	40020000 	.word	0x40020000
 8002f5c:	20002e98 	.word	0x20002e98
 8002f60:	40026410 	.word	0x40026410
 8002f64:	40012100 	.word	0x40012100
 8002f68:	20002fc4 	.word	0x20002fc4
 8002f6c:	40026440 	.word	0x40026440

08002f70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <HAL_I2C_MspInit+0x84>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d12b      	bne.n	8002fea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <HAL_I2C_MspInit+0x88>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <HAL_I2C_MspInit+0x88>)
 8002f9c:	f043 0302 	orr.w	r3, r3, #2
 8002fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <HAL_I2C_MspInit+0x88>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fae:	23c0      	movs	r3, #192	; 0xc0
 8002fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fb2:	2312      	movs	r3, #18
 8002fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc2:	f107 0314 	add.w	r3, r7, #20
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	480c      	ldr	r0, [pc, #48]	; (8002ffc <HAL_I2C_MspInit+0x8c>)
 8002fca:	f001 fbd7 	bl	800477c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_I2C_MspInit+0x88>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <HAL_I2C_MspInit+0x88>)
 8002fd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_I2C_MspInit+0x88>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002fea:	bf00      	nop
 8002fec:	3728      	adds	r7, #40	; 0x28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40005400 	.word	0x40005400
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40020400 	.word	0x40020400

08003000 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	; 0x28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a19      	ldr	r2, [pc, #100]	; (8003084 <HAL_SPI_MspInit+0x84>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d12b      	bne.n	800307a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	4b18      	ldr	r3, [pc, #96]	; (8003088 <HAL_SPI_MspInit+0x88>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	4a17      	ldr	r2, [pc, #92]	; (8003088 <HAL_SPI_MspInit+0x88>)
 800302c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003030:	6453      	str	r3, [r2, #68]	; 0x44
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_SPI_MspInit+0x88>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_SPI_MspInit+0x88>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	4a10      	ldr	r2, [pc, #64]	; (8003088 <HAL_SPI_MspInit+0x88>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6313      	str	r3, [r2, #48]	; 0x30
 800304e:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <HAL_SPI_MspInit+0x88>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800305a:	23e0      	movs	r3, #224	; 0xe0
 800305c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305e:	2302      	movs	r3, #2
 8003060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003066:	2303      	movs	r3, #3
 8003068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800306a:	2305      	movs	r3, #5
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306e:	f107 0314 	add.w	r3, r7, #20
 8003072:	4619      	mov	r1, r3
 8003074:	4805      	ldr	r0, [pc, #20]	; (800308c <HAL_SPI_MspInit+0x8c>)
 8003076:	f001 fb81 	bl	800477c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800307a:	bf00      	nop
 800307c:	3728      	adds	r7, #40	; 0x28
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40013000 	.word	0x40013000
 8003088:	40023800 	.word	0x40023800
 800308c:	40020000 	.word	0x40020000

08003090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a4a      	ldr	r2, [pc, #296]	; (80031d8 <HAL_UART_MspInit+0x148>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d134      	bne.n	800311c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	4b49      	ldr	r3, [pc, #292]	; (80031dc <HAL_UART_MspInit+0x14c>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	4a48      	ldr	r2, [pc, #288]	; (80031dc <HAL_UART_MspInit+0x14c>)
 80030bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c0:	6413      	str	r3, [r2, #64]	; 0x40
 80030c2:	4b46      	ldr	r3, [pc, #280]	; (80031dc <HAL_UART_MspInit+0x14c>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	4b42      	ldr	r3, [pc, #264]	; (80031dc <HAL_UART_MspInit+0x14c>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a41      	ldr	r2, [pc, #260]	; (80031dc <HAL_UART_MspInit+0x14c>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b3f      	ldr	r3, [pc, #252]	; (80031dc <HAL_UART_MspInit+0x14c>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030ea:	230c      	movs	r3, #12
 80030ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	2302      	movs	r3, #2
 80030f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f6:	2303      	movs	r3, #3
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030fa:	2307      	movs	r3, #7
 80030fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fe:	f107 031c 	add.w	r3, r7, #28
 8003102:	4619      	mov	r1, r3
 8003104:	4836      	ldr	r0, [pc, #216]	; (80031e0 <HAL_UART_MspInit+0x150>)
 8003106:	f001 fb39 	bl	800477c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	2026      	movs	r0, #38	; 0x26
 8003110:	f000 ff8d 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003114:	2026      	movs	r0, #38	; 0x26
 8003116:	f000 ffa6 	bl	8004066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800311a:	e058      	b.n	80031ce <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a30      	ldr	r2, [pc, #192]	; (80031e4 <HAL_UART_MspInit+0x154>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d153      	bne.n	80031ce <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	4b2c      	ldr	r3, [pc, #176]	; (80031dc <HAL_UART_MspInit+0x14c>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a2b      	ldr	r2, [pc, #172]	; (80031dc <HAL_UART_MspInit+0x14c>)
 8003130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
 8003136:	4b29      	ldr	r3, [pc, #164]	; (80031dc <HAL_UART_MspInit+0x14c>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	4b25      	ldr	r3, [pc, #148]	; (80031dc <HAL_UART_MspInit+0x14c>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	4a24      	ldr	r2, [pc, #144]	; (80031dc <HAL_UART_MspInit+0x14c>)
 800314c:	f043 0302 	orr.w	r3, r3, #2
 8003150:	6313      	str	r3, [r2, #48]	; 0x30
 8003152:	4b22      	ldr	r3, [pc, #136]	; (80031dc <HAL_UART_MspInit+0x14c>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <HAL_UART_MspInit+0x14c>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <HAL_UART_MspInit+0x14c>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	6313      	str	r3, [r2, #48]	; 0x30
 800316e:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_UART_MspInit+0x14c>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800317a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800317e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003180:	2302      	movs	r3, #2
 8003182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003184:	2300      	movs	r3, #0
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003188:	2303      	movs	r3, #3
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800318c:	2307      	movs	r3, #7
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003190:	f107 031c 	add.w	r3, r7, #28
 8003194:	4619      	mov	r1, r3
 8003196:	4814      	ldr	r0, [pc, #80]	; (80031e8 <HAL_UART_MspInit+0x158>)
 8003198:	f001 faf0 	bl	800477c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800319c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	2302      	movs	r3, #2
 80031a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031aa:	2303      	movs	r3, #3
 80031ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031ae:	2307      	movs	r3, #7
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b2:	f107 031c 	add.w	r3, r7, #28
 80031b6:	4619      	mov	r1, r3
 80031b8:	480c      	ldr	r0, [pc, #48]	; (80031ec <HAL_UART_MspInit+0x15c>)
 80031ba:	f001 fadf 	bl	800477c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2100      	movs	r1, #0
 80031c2:	2027      	movs	r0, #39	; 0x27
 80031c4:	f000 ff33 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80031c8:	2027      	movs	r0, #39	; 0x27
 80031ca:	f000 ff4c 	bl	8004066 <HAL_NVIC_EnableIRQ>
}
 80031ce:	bf00      	nop
 80031d0:	3730      	adds	r7, #48	; 0x30
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40004400 	.word	0x40004400
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40020000 	.word	0x40020000
 80031e4:	40004800 	.word	0x40004800
 80031e8:	40020400 	.word	0x40020400
 80031ec:	40020800 	.word	0x40020800

080031f0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(){
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0

	if(Timer1 > 0)
 80031f4:	4b0e      	ldr	r3, [pc, #56]	; (8003230 <SDTimer_Handler+0x40>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d006      	beq.n	800320c <SDTimer_Handler+0x1c>
		Timer1--;
 80031fe:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <SDTimer_Handler+0x40>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b2da      	uxtb	r2, r3
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <SDTimer_Handler+0x40>)
 800320a:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <SDTimer_Handler+0x44>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <SDTimer_Handler+0x34>
		Timer2--;
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <SDTimer_Handler+0x44>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b2da      	uxtb	r2, r3
 8003220:	4b04      	ldr	r3, [pc, #16]	; (8003234 <SDTimer_Handler+0x44>)
 8003222:	701a      	strb	r2, [r3, #0]
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20003031 	.word	0x20003031
 8003234:	20003030 	.word	0x20003030

08003238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800323c:	e7fe      	b.n	800323c <NMI_Handler+0x4>

0800323e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800323e:	b480      	push	{r7}
 8003240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003242:	e7fe      	b.n	8003242 <HardFault_Handler+0x4>

08003244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003248:	e7fe      	b.n	8003248 <MemManage_Handler+0x4>

0800324a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800324a:	b480      	push	{r7}
 800324c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800324e:	e7fe      	b.n	800324e <BusFault_Handler+0x4>

08003250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003254:	e7fe      	b.n	8003254 <UsageFault_Handler+0x4>

08003256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003256:	b480      	push	{r7}
 8003258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003272:	b480      	push	{r7}
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <SysTick_Handler+0x30>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	3301      	adds	r3, #1
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <SysTick_Handler+0x30>)
 8003290:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8003292:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <SysTick_Handler+0x30>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b09      	cmp	r3, #9
 800329a:	d904      	bls.n	80032a6 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <SysTick_Handler+0x30>)
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80032a2:	f7ff ffa5 	bl	80031f0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032a6:	f000 f981 	bl	80035ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000664 	.word	0x20000664

080032b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 80032b8:	4802      	ldr	r0, [pc, #8]	; (80032c4 <USART2_IRQHandler+0x10>)
 80032ba:	f7fe f995 	bl	80015e8 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20002f80 	.word	0x20002f80

080032c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 80032cc:	4802      	ldr	r0, [pc, #8]	; (80032d8 <USART3_IRQHandler+0x10>)
 80032ce:	f7fe f98b 	bl	80015e8 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  //HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200008c4 	.word	0x200008c4

080032dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032e0:	4802      	ldr	r0, [pc, #8]	; (80032ec <DMA2_Stream0_IRQHandler+0x10>)
 80032e2:	f000 ffe1 	bl	80042a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20002e98 	.word	0x20002e98

080032f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80032f4:	4802      	ldr	r0, [pc, #8]	; (8003300 <DMA2_Stream2_IRQHandler+0x10>)
 80032f6:	f000 ffd7 	bl	80042a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20002fc4 	.word	0x20002fc4

08003304 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
	return 1;
 8003308:	2301      	movs	r3, #1
}
 800330a:	4618      	mov	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <_kill>:

int _kill(int pid, int sig)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800331e:	f006 fe77 	bl	800a010 <__errno>
 8003322:	4603      	mov	r3, r0
 8003324:	2216      	movs	r2, #22
 8003326:	601a      	str	r2, [r3, #0]
	return -1;
 8003328:	f04f 33ff 	mov.w	r3, #4294967295
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <_exit>:

void _exit (int status)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800333c:	f04f 31ff 	mov.w	r1, #4294967295
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ffe7 	bl	8003314 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003346:	e7fe      	b.n	8003346 <_exit+0x12>

08003348 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	e00a      	b.n	8003370 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800335a:	f3af 8000 	nop.w
 800335e:	4601      	mov	r1, r0
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	60ba      	str	r2, [r7, #8]
 8003366:	b2ca      	uxtb	r2, r1
 8003368:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	3301      	adds	r3, #1
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	dbf0      	blt.n	800335a <_read+0x12>
	}

return len;
 8003378:	687b      	ldr	r3, [r7, #4]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e009      	b.n	80033a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	60ba      	str	r2, [r7, #8]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	3301      	adds	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	dbf1      	blt.n	8003394 <_write+0x12>
	}
	return len;
 80033b0:	687b      	ldr	r3, [r7, #4]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <_close>:

int _close(int file)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
	return -1;
 80033c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033e2:	605a      	str	r2, [r3, #4]
	return 0;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <_isatty>:

int _isatty(int file)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
	return 1;
 80033fa:	2301      	movs	r3, #1
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
	return 0;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800342c:	4a14      	ldr	r2, [pc, #80]	; (8003480 <_sbrk+0x5c>)
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <_sbrk+0x60>)
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003438:	4b13      	ldr	r3, [pc, #76]	; (8003488 <_sbrk+0x64>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <_sbrk+0x64>)
 8003442:	4a12      	ldr	r2, [pc, #72]	; (800348c <_sbrk+0x68>)
 8003444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <_sbrk+0x64>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	429a      	cmp	r2, r3
 8003452:	d207      	bcs.n	8003464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003454:	f006 fddc 	bl	800a010 <__errno>
 8003458:	4603      	mov	r3, r0
 800345a:	220c      	movs	r2, #12
 800345c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800345e:	f04f 33ff 	mov.w	r3, #4294967295
 8003462:	e009      	b.n	8003478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003464:	4b08      	ldr	r3, [pc, #32]	; (8003488 <_sbrk+0x64>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800346a:	4b07      	ldr	r3, [pc, #28]	; (8003488 <_sbrk+0x64>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	4a05      	ldr	r2, [pc, #20]	; (8003488 <_sbrk+0x64>)
 8003474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003476:	68fb      	ldr	r3, [r7, #12]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20020000 	.word	0x20020000
 8003484:	00000400 	.word	0x00000400
 8003488:	20000668 	.word	0x20000668
 800348c:	200050b8 	.word	0x200050b8

08003490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <SystemInit+0x20>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349a:	4a05      	ldr	r2, [pc, #20]	; (80034b0 <SystemInit+0x20>)
 800349c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034b8:	480d      	ldr	r0, [pc, #52]	; (80034f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034ba:	490e      	ldr	r1, [pc, #56]	; (80034f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034bc:	4a0e      	ldr	r2, [pc, #56]	; (80034f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034c0:	e002      	b.n	80034c8 <LoopCopyDataInit>

080034c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034c6:	3304      	adds	r3, #4

080034c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034cc:	d3f9      	bcc.n	80034c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ce:	4a0b      	ldr	r2, [pc, #44]	; (80034fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034d0:	4c0b      	ldr	r4, [pc, #44]	; (8003500 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034d4:	e001      	b.n	80034da <LoopFillZerobss>

080034d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034d8:	3204      	adds	r2, #4

080034da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034dc:	d3fb      	bcc.n	80034d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034de:	f7ff ffd7 	bl	8003490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034e2:	f006 fd9b 	bl	800a01c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034e6:	f7ff f8bd 	bl	8002664 <main>
  bx  lr    
 80034ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034f4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80034f8:	0800f9e4 	.word	0x0800f9e4
  ldr r2, =_sbss
 80034fc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003500:	200050b8 	.word	0x200050b8

08003504 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003504:	e7fe      	b.n	8003504 <ADC_IRQHandler>
	...

08003508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800350c:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <HAL_Init+0x40>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a0d      	ldr	r2, [pc, #52]	; (8003548 <HAL_Init+0x40>)
 8003512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003516:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_Init+0x40>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <HAL_Init+0x40>)
 800351e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003522:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <HAL_Init+0x40>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a07      	ldr	r2, [pc, #28]	; (8003548 <HAL_Init+0x40>)
 800352a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003530:	2003      	movs	r0, #3
 8003532:	f000 fd71 	bl	8004018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003536:	2000      	movs	r0, #0
 8003538:	f000 f808 	bl	800354c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800353c:	f7ff fbf6 	bl	8002d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40023c00 	.word	0x40023c00

0800354c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003554:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <HAL_InitTick+0x54>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <HAL_InitTick+0x58>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	4619      	mov	r1, r3
 800355e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003562:	fbb3 f3f1 	udiv	r3, r3, r1
 8003566:	fbb2 f3f3 	udiv	r3, r2, r3
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fd89 	bl	8004082 <HAL_SYSTICK_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e00e      	b.n	8003598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b0f      	cmp	r3, #15
 800357e:	d80a      	bhi.n	8003596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003580:	2200      	movs	r2, #0
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	f04f 30ff 	mov.w	r0, #4294967295
 8003588:	f000 fd51 	bl	800402e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800358c:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <HAL_InitTick+0x5c>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	e000      	b.n	8003598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
}
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	20000008 	.word	0x20000008
 80035a4:	20000010 	.word	0x20000010
 80035a8:	2000000c 	.word	0x2000000c

080035ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_IncTick+0x20>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_IncTick+0x24>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4413      	add	r3, r2
 80035bc:	4a04      	ldr	r2, [pc, #16]	; (80035d0 <HAL_IncTick+0x24>)
 80035be:	6013      	str	r3, [r2, #0]
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000010 	.word	0x20000010
 80035d0:	20003034 	.word	0x20003034

080035d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return uwTick;
 80035d8:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <HAL_GetTick+0x14>)
 80035da:	681b      	ldr	r3, [r3, #0]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20003034 	.word	0x20003034

080035ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035f4:	f7ff ffee 	bl	80035d4 <HAL_GetTick>
 80035f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d005      	beq.n	8003612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003606:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <HAL_Delay+0x44>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4413      	add	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003612:	bf00      	nop
 8003614:	f7ff ffde 	bl	80035d4 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	429a      	cmp	r2, r3
 8003622:	d8f7      	bhi.n	8003614 <HAL_Delay+0x28>
  {
  }
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000010 	.word	0x20000010

08003634 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e033      	b.n	80036b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff fb92 	bl	8002d7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	d118      	bne.n	80036a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800367a:	f023 0302 	bic.w	r3, r3, #2
 800367e:	f043 0202 	orr.w	r2, r3, #2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa78 	bl	8003b7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f023 0303 	bic.w	r3, r3, #3
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
 80036a2:	e001      	b.n	80036a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_ADC_Start_DMA+0x1e>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e0e9      	b.n	80038ae <HAL_ADC_Start_DMA+0x1f2>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d018      	beq.n	8003722 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003700:	4b6d      	ldr	r3, [pc, #436]	; (80038b8 <HAL_ADC_Start_DMA+0x1fc>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6d      	ldr	r2, [pc, #436]	; (80038bc <HAL_ADC_Start_DMA+0x200>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	0c9a      	lsrs	r2, r3, #18
 800370c:	4613      	mov	r3, r2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4413      	add	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003714:	e002      	b.n	800371c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	3b01      	subs	r3, #1
 800371a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f9      	bne.n	8003716 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003730:	d107      	bne.n	8003742 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003740:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b01      	cmp	r3, #1
 800374e:	f040 80a1 	bne.w	8003894 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800377c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800378c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003790:	d106      	bne.n	80037a0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f023 0206 	bic.w	r2, r3, #6
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
 800379e:	e002      	b.n	80037a6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037ae:	4b44      	ldr	r3, [pc, #272]	; (80038c0 <HAL_ADC_Start_DMA+0x204>)
 80037b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	4a43      	ldr	r2, [pc, #268]	; (80038c4 <HAL_ADC_Start_DMA+0x208>)
 80037b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	4a42      	ldr	r2, [pc, #264]	; (80038c8 <HAL_ADC_Start_DMA+0x20c>)
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	4a41      	ldr	r2, [pc, #260]	; (80038cc <HAL_ADC_Start_DMA+0x210>)
 80037c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80037d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80037e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	334c      	adds	r3, #76	; 0x4c
 80037fe:	4619      	mov	r1, r3
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f000 fcf8 	bl	80041f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2b00      	cmp	r3, #0
 8003812:	d12a      	bne.n	800386a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a2d      	ldr	r2, [pc, #180]	; (80038d0 <HAL_ADC_Start_DMA+0x214>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d015      	beq.n	800384a <HAL_ADC_Start_DMA+0x18e>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a2c      	ldr	r2, [pc, #176]	; (80038d4 <HAL_ADC_Start_DMA+0x218>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d105      	bne.n	8003834 <HAL_ADC_Start_DMA+0x178>
 8003828:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <HAL_ADC_Start_DMA+0x204>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a27      	ldr	r2, [pc, #156]	; (80038d8 <HAL_ADC_Start_DMA+0x21c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d136      	bne.n	80038ac <HAL_ADC_Start_DMA+0x1f0>
 800383e:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <HAL_ADC_Start_DMA+0x204>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	2b00      	cmp	r3, #0
 8003848:	d130      	bne.n	80038ac <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d129      	bne.n	80038ac <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	e020      	b.n	80038ac <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a18      	ldr	r2, [pc, #96]	; (80038d0 <HAL_ADC_Start_DMA+0x214>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d11b      	bne.n	80038ac <HAL_ADC_Start_DMA+0x1f0>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d114      	bne.n	80038ac <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003890:	609a      	str	r2, [r3, #8]
 8003892:	e00b      	b.n	80038ac <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f043 0210 	orr.w	r2, r3, #16
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a4:	f043 0201 	orr.w	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000008 	.word	0x20000008
 80038bc:	431bde83 	.word	0x431bde83
 80038c0:	40012300 	.word	0x40012300
 80038c4:	08003d75 	.word	0x08003d75
 80038c8:	08003e2f 	.word	0x08003e2f
 80038cc:	08003e4b 	.word	0x08003e4b
 80038d0:	40012000 	.word	0x40012000
 80038d4:	40012100 	.word	0x40012100
 80038d8:	40012200 	.word	0x40012200

080038dc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x1c>
 8003930:	2302      	movs	r3, #2
 8003932:	e113      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x244>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b09      	cmp	r3, #9
 8003942:	d925      	bls.n	8003990 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68d9      	ldr	r1, [r3, #12]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	b29b      	uxth	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	4613      	mov	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4413      	add	r3, r2
 8003958:	3b1e      	subs	r3, #30
 800395a:	2207      	movs	r2, #7
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43da      	mvns	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	400a      	ands	r2, r1
 8003968:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68d9      	ldr	r1, [r3, #12]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	b29b      	uxth	r3, r3
 800397a:	4618      	mov	r0, r3
 800397c:	4603      	mov	r3, r0
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4403      	add	r3, r0
 8003982:	3b1e      	subs	r3, #30
 8003984:	409a      	lsls	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	e022      	b.n	80039d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6919      	ldr	r1, [r3, #16]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	2207      	movs	r2, #7
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43da      	mvns	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	400a      	ands	r2, r1
 80039b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6919      	ldr	r1, [r3, #16]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	4618      	mov	r0, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	4403      	add	r3, r0
 80039cc:	409a      	lsls	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b06      	cmp	r3, #6
 80039dc:	d824      	bhi.n	8003a28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	3b05      	subs	r3, #5
 80039f0:	221f      	movs	r2, #31
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43da      	mvns	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	400a      	ands	r2, r1
 80039fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	3b05      	subs	r3, #5
 8003a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	635a      	str	r2, [r3, #52]	; 0x34
 8003a26:	e04c      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b0c      	cmp	r3, #12
 8003a2e:	d824      	bhi.n	8003a7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	3b23      	subs	r3, #35	; 0x23
 8003a42:	221f      	movs	r2, #31
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43da      	mvns	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	400a      	ands	r2, r1
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	4618      	mov	r0, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	3b23      	subs	r3, #35	; 0x23
 8003a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
 8003a78:	e023      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	3b41      	subs	r3, #65	; 0x41
 8003a8c:	221f      	movs	r2, #31
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43da      	mvns	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	400a      	ands	r2, r1
 8003a9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3b41      	subs	r3, #65	; 0x41
 8003ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ac2:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <HAL_ADC_ConfigChannel+0x250>)
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a28      	ldr	r2, [pc, #160]	; (8003b6c <HAL_ADC_ConfigChannel+0x254>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d10f      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x1d8>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b12      	cmp	r3, #18
 8003ad6:	d10b      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <HAL_ADC_ConfigChannel+0x254>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d12b      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x23a>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <HAL_ADC_ConfigChannel+0x258>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <HAL_ADC_ConfigChannel+0x1f4>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b11      	cmp	r3, #17
 8003b0a:	d122      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <HAL_ADC_ConfigChannel+0x258>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d111      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b2e:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_ADC_ConfigChannel+0x25c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a11      	ldr	r2, [pc, #68]	; (8003b78 <HAL_ADC_ConfigChannel+0x260>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	0c9a      	lsrs	r2, r3, #18
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b44:	e002      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f9      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	40012300 	.word	0x40012300
 8003b6c:	40012000 	.word	0x40012000
 8003b70:	10000012 	.word	0x10000012
 8003b74:	20000008 	.word	0x20000008
 8003b78:	431bde83 	.word	0x431bde83

08003b7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b84:	4b79      	ldr	r3, [pc, #484]	; (8003d6c <ADC_Init+0x1f0>)
 8003b86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	021a      	lsls	r2, r3, #8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6899      	ldr	r1, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	4a58      	ldr	r2, [pc, #352]	; (8003d70 <ADC_Init+0x1f4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d022      	beq.n	8003c5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6899      	ldr	r1, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6899      	ldr	r1, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	e00f      	b.n	8003c7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0202 	bic.w	r2, r2, #2
 8003c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6899      	ldr	r1, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	7e1b      	ldrb	r3, [r3, #24]
 8003c94:	005a      	lsls	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01b      	beq.n	8003ce0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6859      	ldr	r1, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	035a      	lsls	r2, r3, #13
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	e007      	b.n	8003cf0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	051a      	lsls	r2, r3, #20
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6899      	ldr	r1, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d32:	025a      	lsls	r2, r3, #9
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6899      	ldr	r1, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	029a      	lsls	r2, r3, #10
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	40012300 	.word	0x40012300
 8003d70:	0f000001 	.word	0x0f000001

08003d74 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d13c      	bne.n	8003e08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d12b      	bne.n	8003e00 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d127      	bne.n	8003e00 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d006      	beq.n	8003dcc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d119      	bne.n	8003e00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0220 	bic.w	r2, r2, #32
 8003dda:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d105      	bne.n	8003e00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff fd6b 	bl	80038dc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e06:	e00e      	b.n	8003e26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7ff fd75 	bl	8003904 <HAL_ADC_ErrorCallback>
}
 8003e1a:	e004      	b.n	8003e26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	4798      	blx	r3
}
 8003e26:	bf00      	nop
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f7ff fd57 	bl	80038f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e42:	bf00      	nop
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2240      	movs	r2, #64	; 0x40
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f043 0204 	orr.w	r2, r3, #4
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f7ff fd4a 	bl	8003904 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e70:	bf00      	nop
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <__NVIC_SetPriorityGrouping+0x44>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e94:	4013      	ands	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eaa:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <__NVIC_SetPriorityGrouping+0x44>)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	60d3      	str	r3, [r2, #12]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec4:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	f003 0307 	and.w	r3, r3, #7
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	db0b      	blt.n	8003f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	f003 021f 	and.w	r2, r3, #31
 8003ef4:	4907      	ldr	r1, [pc, #28]	; (8003f14 <__NVIC_EnableIRQ+0x38>)
 8003ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2001      	movs	r0, #1
 8003efe:	fa00 f202 	lsl.w	r2, r0, r2
 8003f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	e000e100 	.word	0xe000e100

08003f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	6039      	str	r1, [r7, #0]
 8003f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	db0a      	blt.n	8003f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	490c      	ldr	r1, [pc, #48]	; (8003f64 <__NVIC_SetPriority+0x4c>)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	0112      	lsls	r2, r2, #4
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f40:	e00a      	b.n	8003f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	4908      	ldr	r1, [pc, #32]	; (8003f68 <__NVIC_SetPriority+0x50>)
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	3b04      	subs	r3, #4
 8003f50:	0112      	lsls	r2, r2, #4
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	440b      	add	r3, r1
 8003f56:	761a      	strb	r2, [r3, #24]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000e100 	.word	0xe000e100
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b089      	sub	sp, #36	; 0x24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f1c3 0307 	rsb	r3, r3, #7
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	bf28      	it	cs
 8003f8a:	2304      	movcs	r3, #4
 8003f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	3304      	adds	r3, #4
 8003f92:	2b06      	cmp	r3, #6
 8003f94:	d902      	bls.n	8003f9c <NVIC_EncodePriority+0x30>
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3b03      	subs	r3, #3
 8003f9a:	e000      	b.n	8003f9e <NVIC_EncodePriority+0x32>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43da      	mvns	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	401a      	ands	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbe:	43d9      	mvns	r1, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc4:	4313      	orrs	r3, r2
         );
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3724      	adds	r7, #36	; 0x24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe4:	d301      	bcc.n	8003fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e00f      	b.n	800400a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fea:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <SysTick_Config+0x40>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ff2:	210f      	movs	r1, #15
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	f7ff ff8e 	bl	8003f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <SysTick_Config+0x40>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004002:	4b04      	ldr	r3, [pc, #16]	; (8004014 <SysTick_Config+0x40>)
 8004004:	2207      	movs	r2, #7
 8004006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	e000e010 	.word	0xe000e010

08004018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff29 	bl	8003e78 <__NVIC_SetPriorityGrouping>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004040:	f7ff ff3e 	bl	8003ec0 <__NVIC_GetPriorityGrouping>
 8004044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	6978      	ldr	r0, [r7, #20]
 800404c:	f7ff ff8e 	bl	8003f6c <NVIC_EncodePriority>
 8004050:	4602      	mov	r2, r0
 8004052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff ff5d 	bl	8003f18 <__NVIC_SetPriority>
}
 800405e:	bf00      	nop
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	4603      	mov	r3, r0
 800406e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ff31 	bl	8003edc <__NVIC_EnableIRQ>
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff ffa2 	bl	8003fd4 <SysTick_Config>
 8004090:	4603      	mov	r3, r0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040a8:	f7ff fa94 	bl	80035d4 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e099      	b.n	80041ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040d8:	e00f      	b.n	80040fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040da:	f7ff fa7b 	bl	80035d4 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b05      	cmp	r3, #5
 80040e6:	d908      	bls.n	80040fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2203      	movs	r2, #3
 80040f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e078      	b.n	80041ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e8      	bne.n	80040da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4b38      	ldr	r3, [pc, #224]	; (80041f4 <HAL_DMA_Init+0x158>)
 8004114:	4013      	ands	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004126:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004132:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800413e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	2b04      	cmp	r3, #4
 8004152:	d107      	bne.n	8004164 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	4313      	orrs	r3, r2
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f023 0307 	bic.w	r3, r3, #7
 800417a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2b04      	cmp	r3, #4
 800418c:	d117      	bne.n	80041be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00e      	beq.n	80041be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fa6f 	bl	8004684 <DMA_CheckFifoParam>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2240      	movs	r2, #64	; 0x40
 80041b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041ba:	2301      	movs	r3, #1
 80041bc:	e016      	b.n	80041ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fa26 	bl	8004618 <DMA_CalcBaseAndBitshift>
 80041cc:	4603      	mov	r3, r0
 80041ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d4:	223f      	movs	r2, #63	; 0x3f
 80041d6:	409a      	lsls	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	f010803f 	.word	0xf010803f

080041f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_DMA_Start_IT+0x26>
 800421a:	2302      	movs	r3, #2
 800421c:	e040      	b.n	80042a0 <HAL_DMA_Start_IT+0xa8>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d12f      	bne.n	8004292 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2202      	movs	r2, #2
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f9b8 	bl	80045bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004250:	223f      	movs	r2, #63	; 0x3f
 8004252:	409a      	lsls	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0216 	orr.w	r2, r2, #22
 8004266:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0208 	orr.w	r2, r2, #8
 800427e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	e005      	b.n	800429e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800429a:	2302      	movs	r3, #2
 800429c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800429e:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042b4:	4b92      	ldr	r3, [pc, #584]	; (8004500 <HAL_DMA_IRQHandler+0x258>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a92      	ldr	r2, [pc, #584]	; (8004504 <HAL_DMA_IRQHandler+0x25c>)
 80042ba:	fba2 2303 	umull	r2, r3, r2, r3
 80042be:	0a9b      	lsrs	r3, r3, #10
 80042c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d2:	2208      	movs	r2, #8
 80042d4:	409a      	lsls	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4013      	ands	r3, r2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01a      	beq.n	8004314 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d013      	beq.n	8004314 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0204 	bic.w	r2, r2, #4
 80042fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004300:	2208      	movs	r2, #8
 8004302:	409a      	lsls	r2, r3
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	f043 0201 	orr.w	r2, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	2201      	movs	r2, #1
 800431a:	409a      	lsls	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4013      	ands	r3, r2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d012      	beq.n	800434a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004336:	2201      	movs	r2, #1
 8004338:	409a      	lsls	r2, r3
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	f043 0202 	orr.w	r2, r3, #2
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434e:	2204      	movs	r2, #4
 8004350:	409a      	lsls	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d012      	beq.n	8004380 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00b      	beq.n	8004380 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436c:	2204      	movs	r2, #4
 800436e:	409a      	lsls	r2, r3
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004378:	f043 0204 	orr.w	r2, r3, #4
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004384:	2210      	movs	r2, #16
 8004386:	409a      	lsls	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d043      	beq.n	8004418 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d03c      	beq.n	8004418 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a2:	2210      	movs	r2, #16
 80043a4:	409a      	lsls	r2, r3
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d018      	beq.n	80043ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d108      	bne.n	80043d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d024      	beq.n	8004418 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	4798      	blx	r3
 80043d6:	e01f      	b.n	8004418 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01b      	beq.n	8004418 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4798      	blx	r3
 80043e8:	e016      	b.n	8004418 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d107      	bne.n	8004408 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0208 	bic.w	r2, r2, #8
 8004406:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441c:	2220      	movs	r2, #32
 800441e:	409a      	lsls	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 808e 	beq.w	8004546 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8086 	beq.w	8004546 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443e:	2220      	movs	r2, #32
 8004440:	409a      	lsls	r2, r3
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b05      	cmp	r3, #5
 8004450:	d136      	bne.n	80044c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0216 	bic.w	r2, r2, #22
 8004460:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695a      	ldr	r2, [r3, #20]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004470:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d103      	bne.n	8004482 <HAL_DMA_IRQHandler+0x1da>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0208 	bic.w	r2, r2, #8
 8004490:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004496:	223f      	movs	r2, #63	; 0x3f
 8004498:	409a      	lsls	r2, r3
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d07d      	beq.n	80045b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	4798      	blx	r3
        }
        return;
 80044be:	e078      	b.n	80045b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01c      	beq.n	8004508 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d108      	bne.n	80044ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d030      	beq.n	8004546 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	4798      	blx	r3
 80044ec:	e02b      	b.n	8004546 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d027      	beq.n	8004546 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	4798      	blx	r3
 80044fe:	e022      	b.n	8004546 <HAL_DMA_IRQHandler+0x29e>
 8004500:	20000008 	.word	0x20000008
 8004504:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10f      	bne.n	8004536 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0210 	bic.w	r2, r2, #16
 8004524:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	2b00      	cmp	r3, #0
 800454c:	d032      	beq.n	80045b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d022      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2205      	movs	r2, #5
 800455e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	3301      	adds	r3, #1
 8004576:	60bb      	str	r3, [r7, #8]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	429a      	cmp	r2, r3
 800457c:	d307      	bcc.n	800458e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f2      	bne.n	8004572 <HAL_DMA_IRQHandler+0x2ca>
 800458c:	e000      	b.n	8004590 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800458e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	4798      	blx	r3
 80045b0:	e000      	b.n	80045b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80045b2:	bf00      	nop
    }
  }
}
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop

080045bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d108      	bne.n	80045fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045fa:	e007      	b.n	800460c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	60da      	str	r2, [r3, #12]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	3b10      	subs	r3, #16
 8004628:	4a14      	ldr	r2, [pc, #80]	; (800467c <DMA_CalcBaseAndBitshift+0x64>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	091b      	lsrs	r3, r3, #4
 8004630:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004632:	4a13      	ldr	r2, [pc, #76]	; (8004680 <DMA_CalcBaseAndBitshift+0x68>)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d909      	bls.n	800465a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800464e:	f023 0303 	bic.w	r3, r3, #3
 8004652:	1d1a      	adds	r2, r3, #4
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	659a      	str	r2, [r3, #88]	; 0x58
 8004658:	e007      	b.n	800466a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004662:	f023 0303 	bic.w	r3, r3, #3
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	aaaaaaab 	.word	0xaaaaaaab
 8004680:	0800f0d4 	.word	0x0800f0d4

08004684 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d11f      	bne.n	80046de <DMA_CheckFifoParam+0x5a>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d856      	bhi.n	8004752 <DMA_CheckFifoParam+0xce>
 80046a4:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <DMA_CheckFifoParam+0x28>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	080046bd 	.word	0x080046bd
 80046b0:	080046cf 	.word	0x080046cf
 80046b4:	080046bd 	.word	0x080046bd
 80046b8:	08004753 	.word	0x08004753
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d046      	beq.n	8004756 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046cc:	e043      	b.n	8004756 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046d6:	d140      	bne.n	800475a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046dc:	e03d      	b.n	800475a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e6:	d121      	bne.n	800472c <DMA_CheckFifoParam+0xa8>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d837      	bhi.n	800475e <DMA_CheckFifoParam+0xda>
 80046ee:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <DMA_CheckFifoParam+0x70>)
 80046f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f4:	08004705 	.word	0x08004705
 80046f8:	0800470b 	.word	0x0800470b
 80046fc:	08004705 	.word	0x08004705
 8004700:	0800471d 	.word	0x0800471d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
      break;
 8004708:	e030      	b.n	800476c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d025      	beq.n	8004762 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800471a:	e022      	b.n	8004762 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004724:	d11f      	bne.n	8004766 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800472a:	e01c      	b.n	8004766 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d903      	bls.n	800473a <DMA_CheckFifoParam+0xb6>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b03      	cmp	r3, #3
 8004736:	d003      	beq.n	8004740 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004738:	e018      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	73fb      	strb	r3, [r7, #15]
      break;
 800473e:	e015      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00e      	beq.n	800476a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
      break;
 8004750:	e00b      	b.n	800476a <DMA_CheckFifoParam+0xe6>
      break;
 8004752:	bf00      	nop
 8004754:	e00a      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      break;
 8004756:	bf00      	nop
 8004758:	e008      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      break;
 800475a:	bf00      	nop
 800475c:	e006      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      break;
 800475e:	bf00      	nop
 8004760:	e004      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      break;
 8004762:	bf00      	nop
 8004764:	e002      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      break;   
 8004766:	bf00      	nop
 8004768:	e000      	b.n	800476c <DMA_CheckFifoParam+0xe8>
      break;
 800476a:	bf00      	nop
    }
  } 
  
  return status; 
 800476c:	7bfb      	ldrb	r3, [r7, #15]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop

0800477c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800477c:	b480      	push	{r7}
 800477e:	b089      	sub	sp, #36	; 0x24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	e165      	b.n	8004a64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004798:	2201      	movs	r2, #1
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4013      	ands	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	f040 8154 	bne.w	8004a5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d005      	beq.n	80047ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d130      	bne.n	8004830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	2203      	movs	r2, #3
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43db      	mvns	r3, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4013      	ands	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004804:	2201      	movs	r2, #1
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4013      	ands	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 0201 	and.w	r2, r3, #1
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4313      	orrs	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	2b03      	cmp	r3, #3
 800483a:	d017      	beq.n	800486c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	2203      	movs	r2, #3
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4313      	orrs	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d123      	bne.n	80048c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	08da      	lsrs	r2, r3, #3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3208      	adds	r2, #8
 8004880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	220f      	movs	r2, #15
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	08da      	lsrs	r2, r3, #3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3208      	adds	r2, #8
 80048ba:	69b9      	ldr	r1, [r7, #24]
 80048bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	2203      	movs	r2, #3
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	43db      	mvns	r3, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 0203 	and.w	r2, r3, #3
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80ae 	beq.w	8004a5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	4b5d      	ldr	r3, [pc, #372]	; (8004a7c <HAL_GPIO_Init+0x300>)
 8004908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490a:	4a5c      	ldr	r2, [pc, #368]	; (8004a7c <HAL_GPIO_Init+0x300>)
 800490c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004910:	6453      	str	r3, [r2, #68]	; 0x44
 8004912:	4b5a      	ldr	r3, [pc, #360]	; (8004a7c <HAL_GPIO_Init+0x300>)
 8004914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800491e:	4a58      	ldr	r2, [pc, #352]	; (8004a80 <HAL_GPIO_Init+0x304>)
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	089b      	lsrs	r3, r3, #2
 8004924:	3302      	adds	r3, #2
 8004926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800492a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	220f      	movs	r2, #15
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a4f      	ldr	r2, [pc, #316]	; (8004a84 <HAL_GPIO_Init+0x308>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d025      	beq.n	8004996 <HAL_GPIO_Init+0x21a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a4e      	ldr	r2, [pc, #312]	; (8004a88 <HAL_GPIO_Init+0x30c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d01f      	beq.n	8004992 <HAL_GPIO_Init+0x216>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a4d      	ldr	r2, [pc, #308]	; (8004a8c <HAL_GPIO_Init+0x310>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d019      	beq.n	800498e <HAL_GPIO_Init+0x212>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a4c      	ldr	r2, [pc, #304]	; (8004a90 <HAL_GPIO_Init+0x314>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <HAL_GPIO_Init+0x20e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a4b      	ldr	r2, [pc, #300]	; (8004a94 <HAL_GPIO_Init+0x318>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00d      	beq.n	8004986 <HAL_GPIO_Init+0x20a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a4a      	ldr	r2, [pc, #296]	; (8004a98 <HAL_GPIO_Init+0x31c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d007      	beq.n	8004982 <HAL_GPIO_Init+0x206>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a49      	ldr	r2, [pc, #292]	; (8004a9c <HAL_GPIO_Init+0x320>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d101      	bne.n	800497e <HAL_GPIO_Init+0x202>
 800497a:	2306      	movs	r3, #6
 800497c:	e00c      	b.n	8004998 <HAL_GPIO_Init+0x21c>
 800497e:	2307      	movs	r3, #7
 8004980:	e00a      	b.n	8004998 <HAL_GPIO_Init+0x21c>
 8004982:	2305      	movs	r3, #5
 8004984:	e008      	b.n	8004998 <HAL_GPIO_Init+0x21c>
 8004986:	2304      	movs	r3, #4
 8004988:	e006      	b.n	8004998 <HAL_GPIO_Init+0x21c>
 800498a:	2303      	movs	r3, #3
 800498c:	e004      	b.n	8004998 <HAL_GPIO_Init+0x21c>
 800498e:	2302      	movs	r3, #2
 8004990:	e002      	b.n	8004998 <HAL_GPIO_Init+0x21c>
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <HAL_GPIO_Init+0x21c>
 8004996:	2300      	movs	r3, #0
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	f002 0203 	and.w	r2, r2, #3
 800499e:	0092      	lsls	r2, r2, #2
 80049a0:	4093      	lsls	r3, r2
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049a8:	4935      	ldr	r1, [pc, #212]	; (8004a80 <HAL_GPIO_Init+0x304>)
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	089b      	lsrs	r3, r3, #2
 80049ae:	3302      	adds	r3, #2
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049b6:	4b3a      	ldr	r3, [pc, #232]	; (8004aa0 <HAL_GPIO_Init+0x324>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	43db      	mvns	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049da:	4a31      	ldr	r2, [pc, #196]	; (8004aa0 <HAL_GPIO_Init+0x324>)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80049e0:	4b2f      	ldr	r3, [pc, #188]	; (8004aa0 <HAL_GPIO_Init+0x324>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a04:	4a26      	ldr	r2, [pc, #152]	; (8004aa0 <HAL_GPIO_Init+0x324>)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a0a:	4b25      	ldr	r3, [pc, #148]	; (8004aa0 <HAL_GPIO_Init+0x324>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4013      	ands	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a2e:	4a1c      	ldr	r2, [pc, #112]	; (8004aa0 <HAL_GPIO_Init+0x324>)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a34:	4b1a      	ldr	r3, [pc, #104]	; (8004aa0 <HAL_GPIO_Init+0x324>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4013      	ands	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a58:	4a11      	ldr	r2, [pc, #68]	; (8004aa0 <HAL_GPIO_Init+0x324>)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	3301      	adds	r3, #1
 8004a62:	61fb      	str	r3, [r7, #28]
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	2b0f      	cmp	r3, #15
 8004a68:	f67f ae96 	bls.w	8004798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	3724      	adds	r7, #36	; 0x24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	40013800 	.word	0x40013800
 8004a84:	40020000 	.word	0x40020000
 8004a88:	40020400 	.word	0x40020400
 8004a8c:	40020800 	.word	0x40020800
 8004a90:	40020c00 	.word	0x40020c00
 8004a94:	40021000 	.word	0x40021000
 8004a98:	40021400 	.word	0x40021400
 8004a9c:	40021800 	.word	0x40021800
 8004aa0:	40013c00 	.word	0x40013c00

08004aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	807b      	strh	r3, [r7, #2]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ab4:	787b      	ldrb	r3, [r7, #1]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aba:	887a      	ldrh	r2, [r7, #2]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ac0:	e003      	b.n	8004aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ac2:	887b      	ldrh	r3, [r7, #2]
 8004ac4:	041a      	lsls	r2, r3, #16
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	619a      	str	r2, [r3, #24]
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
	...

08004ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e12b      	b.n	8004d42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fe fa36 	bl	8002f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2224      	movs	r2, #36	; 0x24
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0201 	bic.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b3c:	f000 fd0a 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 8004b40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4a81      	ldr	r2, [pc, #516]	; (8004d4c <HAL_I2C_Init+0x274>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d807      	bhi.n	8004b5c <HAL_I2C_Init+0x84>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4a80      	ldr	r2, [pc, #512]	; (8004d50 <HAL_I2C_Init+0x278>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	bf94      	ite	ls
 8004b54:	2301      	movls	r3, #1
 8004b56:	2300      	movhi	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	e006      	b.n	8004b6a <HAL_I2C_Init+0x92>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a7d      	ldr	r2, [pc, #500]	; (8004d54 <HAL_I2C_Init+0x27c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	bf94      	ite	ls
 8004b64:	2301      	movls	r3, #1
 8004b66:	2300      	movhi	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e0e7      	b.n	8004d42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4a78      	ldr	r2, [pc, #480]	; (8004d58 <HAL_I2C_Init+0x280>)
 8004b76:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7a:	0c9b      	lsrs	r3, r3, #18
 8004b7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4a6a      	ldr	r2, [pc, #424]	; (8004d4c <HAL_I2C_Init+0x274>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d802      	bhi.n	8004bac <HAL_I2C_Init+0xd4>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	e009      	b.n	8004bc0 <HAL_I2C_Init+0xe8>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	4a69      	ldr	r2, [pc, #420]	; (8004d5c <HAL_I2C_Init+0x284>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	099b      	lsrs	r3, r3, #6
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	495c      	ldr	r1, [pc, #368]	; (8004d4c <HAL_I2C_Init+0x274>)
 8004bdc:	428b      	cmp	r3, r1
 8004bde:	d819      	bhi.n	8004c14 <HAL_I2C_Init+0x13c>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1e59      	subs	r1, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bee:	1c59      	adds	r1, r3, #1
 8004bf0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bf4:	400b      	ands	r3, r1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <HAL_I2C_Init+0x138>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1e59      	subs	r1, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c08:	3301      	adds	r3, #1
 8004c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0e:	e051      	b.n	8004cb4 <HAL_I2C_Init+0x1dc>
 8004c10:	2304      	movs	r3, #4
 8004c12:	e04f      	b.n	8004cb4 <HAL_I2C_Init+0x1dc>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d111      	bne.n	8004c40 <HAL_I2C_Init+0x168>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	1e58      	subs	r0, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6859      	ldr	r1, [r3, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	440b      	add	r3, r1
 8004c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2e:	3301      	adds	r3, #1
 8004c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bf0c      	ite	eq
 8004c38:	2301      	moveq	r3, #1
 8004c3a:	2300      	movne	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	e012      	b.n	8004c66 <HAL_I2C_Init+0x18e>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	1e58      	subs	r0, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6859      	ldr	r1, [r3, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	0099      	lsls	r1, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c56:	3301      	adds	r3, #1
 8004c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_I2C_Init+0x196>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e022      	b.n	8004cb4 <HAL_I2C_Init+0x1dc>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10e      	bne.n	8004c94 <HAL_I2C_Init+0x1bc>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1e58      	subs	r0, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6859      	ldr	r1, [r3, #4]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	440b      	add	r3, r1
 8004c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c88:	3301      	adds	r3, #1
 8004c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c92:	e00f      	b.n	8004cb4 <HAL_I2C_Init+0x1dc>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1e58      	subs	r0, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6859      	ldr	r1, [r3, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	0099      	lsls	r1, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004caa:	3301      	adds	r3, #1
 8004cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	6809      	ldr	r1, [r1, #0]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69da      	ldr	r2, [r3, #28]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ce2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6911      	ldr	r1, [r2, #16]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68d2      	ldr	r2, [r2, #12]
 8004cee:	4311      	orrs	r1, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695a      	ldr	r2, [r3, #20]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	000186a0 	.word	0x000186a0
 8004d50:	001e847f 	.word	0x001e847f
 8004d54:	003d08ff 	.word	0x003d08ff
 8004d58:	431bde83 	.word	0x431bde83
 8004d5c:	10624dd3 	.word	0x10624dd3

08004d60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	817b      	strh	r3, [r7, #10]
 8004d70:	4613      	mov	r3, r2
 8004d72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d74:	f7fe fc2e 	bl	80035d4 <HAL_GetTick>
 8004d78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	f040 80e0 	bne.w	8004f48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	2319      	movs	r3, #25
 8004d8e:	2201      	movs	r2, #1
 8004d90:	4970      	ldr	r1, [pc, #448]	; (8004f54 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f964 	bl	8005060 <I2C_WaitOnFlagUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e0d3      	b.n	8004f4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_I2C_Master_Transmit+0x50>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e0cc      	b.n	8004f4a <HAL_I2C_Master_Transmit+0x1ea>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d007      	beq.n	8004dd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004de4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2221      	movs	r2, #33	; 0x21
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2210      	movs	r2, #16
 8004df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	893a      	ldrh	r2, [r7, #8]
 8004e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4a50      	ldr	r2, [pc, #320]	; (8004f58 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e18:	8979      	ldrh	r1, [r7, #10]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	6a3a      	ldr	r2, [r7, #32]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f89c 	bl	8004f5c <I2C_MasterRequestWrite>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e08d      	b.n	8004f4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2e:	2300      	movs	r3, #0
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e44:	e066      	b.n	8004f14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	6a39      	ldr	r1, [r7, #32]
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f9de 	bl	800520c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00d      	beq.n	8004e72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d107      	bne.n	8004e6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e06b      	b.n	8004f4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	781a      	ldrb	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d11b      	bne.n	8004ee8 <HAL_I2C_Master_Transmit+0x188>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d017      	beq.n	8004ee8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	781a      	ldrb	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	6a39      	ldr	r1, [r7, #32]
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f9ce 	bl	800528e <I2C_WaitOnBTFFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00d      	beq.n	8004f14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d107      	bne.n	8004f10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e01a      	b.n	8004f4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d194      	bne.n	8004e46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	e000      	b.n	8004f4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f48:	2302      	movs	r3, #2
  }
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	00100002 	.word	0x00100002
 8004f58:	ffff0000 	.word	0xffff0000

08004f5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d006      	beq.n	8004f86 <I2C_MasterRequestWrite+0x2a>
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d003      	beq.n	8004f86 <I2C_MasterRequestWrite+0x2a>
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f84:	d108      	bne.n	8004f98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	e00b      	b.n	8004fb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	2b12      	cmp	r3, #18
 8004f9e:	d107      	bne.n	8004fb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f84f 	bl	8005060 <I2C_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00d      	beq.n	8004fe4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd6:	d103      	bne.n	8004fe0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e035      	b.n	8005050 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fec:	d108      	bne.n	8005000 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fee:	897b      	ldrh	r3, [r7, #10]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ffc:	611a      	str	r2, [r3, #16]
 8004ffe:	e01b      	b.n	8005038 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005000:	897b      	ldrh	r3, [r7, #10]
 8005002:	11db      	asrs	r3, r3, #7
 8005004:	b2db      	uxtb	r3, r3
 8005006:	f003 0306 	and.w	r3, r3, #6
 800500a:	b2db      	uxtb	r3, r3
 800500c:	f063 030f 	orn	r3, r3, #15
 8005010:	b2da      	uxtb	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	490e      	ldr	r1, [pc, #56]	; (8005058 <I2C_MasterRequestWrite+0xfc>)
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f875 	bl	800510e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e010      	b.n	8005050 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800502e:	897b      	ldrh	r3, [r7, #10]
 8005030:	b2da      	uxtb	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	4907      	ldr	r1, [pc, #28]	; (800505c <I2C_MasterRequestWrite+0x100>)
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 f865 	bl	800510e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	00010008 	.word	0x00010008
 800505c:	00010002 	.word	0x00010002

08005060 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	4613      	mov	r3, r2
 800506e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005070:	e025      	b.n	80050be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005078:	d021      	beq.n	80050be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507a:	f7fe faab 	bl	80035d4 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d302      	bcc.n	8005090 <I2C_WaitOnFlagUntilTimeout+0x30>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d116      	bne.n	80050be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e023      	b.n	8005106 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	0c1b      	lsrs	r3, r3, #16
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d10d      	bne.n	80050e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	43da      	mvns	r2, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4013      	ands	r3, r2
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bf0c      	ite	eq
 80050da:	2301      	moveq	r3, #1
 80050dc:	2300      	movne	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	461a      	mov	r2, r3
 80050e2:	e00c      	b.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	43da      	mvns	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4013      	ands	r3, r2
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	bf0c      	ite	eq
 80050f6:	2301      	moveq	r3, #1
 80050f8:	2300      	movne	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	429a      	cmp	r2, r3
 8005102:	d0b6      	beq.n	8005072 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800511c:	e051      	b.n	80051c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800512c:	d123      	bne.n	8005176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005146:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f043 0204 	orr.w	r2, r3, #4
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e046      	b.n	8005204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d021      	beq.n	80051c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517e:	f7fe fa29 	bl	80035d4 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	429a      	cmp	r2, r3
 800518c:	d302      	bcc.n	8005194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d116      	bne.n	80051c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f043 0220 	orr.w	r2, r3, #32
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e020      	b.n	8005204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	0c1b      	lsrs	r3, r3, #16
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d10c      	bne.n	80051e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	43da      	mvns	r2, r3
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4013      	ands	r3, r2
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bf14      	ite	ne
 80051de:	2301      	movne	r3, #1
 80051e0:	2300      	moveq	r3, #0
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	e00b      	b.n	80051fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	43da      	mvns	r2, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4013      	ands	r3, r2
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bf14      	ite	ne
 80051f8:	2301      	movne	r3, #1
 80051fa:	2300      	moveq	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d18d      	bne.n	800511e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005218:	e02d      	b.n	8005276 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f878 	bl	8005310 <I2C_IsAcknowledgeFailed>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e02d      	b.n	8005286 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d021      	beq.n	8005276 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005232:	f7fe f9cf 	bl	80035d4 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	429a      	cmp	r2, r3
 8005240:	d302      	bcc.n	8005248 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d116      	bne.n	8005276 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f043 0220 	orr.w	r2, r3, #32
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e007      	b.n	8005286 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005280:	2b80      	cmp	r3, #128	; 0x80
 8005282:	d1ca      	bne.n	800521a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800529a:	e02d      	b.n	80052f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 f837 	bl	8005310 <I2C_IsAcknowledgeFailed>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e02d      	b.n	8005308 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b2:	d021      	beq.n	80052f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b4:	f7fe f98e 	bl	80035d4 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d302      	bcc.n	80052ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d116      	bne.n	80052f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	f043 0220 	orr.w	r2, r3, #32
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e007      	b.n	8005308 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b04      	cmp	r3, #4
 8005304:	d1ca      	bne.n	800529c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005326:	d11b      	bne.n	8005360 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005330:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	f043 0204 	orr.w	r2, r3, #4
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0cc      	b.n	800551e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005384:	4b68      	ldr	r3, [pc, #416]	; (8005528 <HAL_RCC_ClockConfig+0x1b8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d90c      	bls.n	80053ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005392:	4b65      	ldr	r3, [pc, #404]	; (8005528 <HAL_RCC_ClockConfig+0x1b8>)
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539a:	4b63      	ldr	r3, [pc, #396]	; (8005528 <HAL_RCC_ClockConfig+0x1b8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d001      	beq.n	80053ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0b8      	b.n	800551e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d020      	beq.n	80053fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053c4:	4b59      	ldr	r3, [pc, #356]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	4a58      	ldr	r2, [pc, #352]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053dc:	4b53      	ldr	r3, [pc, #332]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4a52      	ldr	r2, [pc, #328]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e8:	4b50      	ldr	r3, [pc, #320]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	494d      	ldr	r1, [pc, #308]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d044      	beq.n	8005490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d107      	bne.n	800541e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540e:	4b47      	ldr	r3, [pc, #284]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d119      	bne.n	800544e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e07f      	b.n	800551e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d003      	beq.n	800542e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542a:	2b03      	cmp	r3, #3
 800542c:	d107      	bne.n	800543e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800542e:	4b3f      	ldr	r3, [pc, #252]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d109      	bne.n	800544e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e06f      	b.n	800551e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800543e:	4b3b      	ldr	r3, [pc, #236]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e067      	b.n	800551e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800544e:	4b37      	ldr	r3, [pc, #220]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f023 0203 	bic.w	r2, r3, #3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4934      	ldr	r1, [pc, #208]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 800545c:	4313      	orrs	r3, r2
 800545e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005460:	f7fe f8b8 	bl	80035d4 <HAL_GetTick>
 8005464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005466:	e00a      	b.n	800547e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005468:	f7fe f8b4 	bl	80035d4 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	f241 3288 	movw	r2, #5000	; 0x1388
 8005476:	4293      	cmp	r3, r2
 8005478:	d901      	bls.n	800547e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e04f      	b.n	800551e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800547e:	4b2b      	ldr	r3, [pc, #172]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 020c 	and.w	r2, r3, #12
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	429a      	cmp	r2, r3
 800548e:	d1eb      	bne.n	8005468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005490:	4b25      	ldr	r3, [pc, #148]	; (8005528 <HAL_RCC_ClockConfig+0x1b8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d20c      	bcs.n	80054b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549e:	4b22      	ldr	r3, [pc, #136]	; (8005528 <HAL_RCC_ClockConfig+0x1b8>)
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a6:	4b20      	ldr	r3, [pc, #128]	; (8005528 <HAL_RCC_ClockConfig+0x1b8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d001      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e032      	b.n	800551e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d008      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c4:	4b19      	ldr	r3, [pc, #100]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	4916      	ldr	r1, [pc, #88]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	490e      	ldr	r1, [pc, #56]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054f6:	f000 f855 	bl	80055a4 <HAL_RCC_GetSysClockFreq>
 80054fa:	4602      	mov	r2, r0
 80054fc:	4b0b      	ldr	r3, [pc, #44]	; (800552c <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	091b      	lsrs	r3, r3, #4
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	490a      	ldr	r1, [pc, #40]	; (8005530 <HAL_RCC_ClockConfig+0x1c0>)
 8005508:	5ccb      	ldrb	r3, [r1, r3]
 800550a:	fa22 f303 	lsr.w	r3, r2, r3
 800550e:	4a09      	ldr	r2, [pc, #36]	; (8005534 <HAL_RCC_ClockConfig+0x1c4>)
 8005510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005512:	4b09      	ldr	r3, [pc, #36]	; (8005538 <HAL_RCC_ClockConfig+0x1c8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f7fe f818 	bl	800354c <HAL_InitTick>

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40023c00 	.word	0x40023c00
 800552c:	40023800 	.word	0x40023800
 8005530:	0800f0bc 	.word	0x0800f0bc
 8005534:	20000008 	.word	0x20000008
 8005538:	2000000c 	.word	0x2000000c

0800553c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005540:	4b03      	ldr	r3, [pc, #12]	; (8005550 <HAL_RCC_GetHCLKFreq+0x14>)
 8005542:	681b      	ldr	r3, [r3, #0]
}
 8005544:	4618      	mov	r0, r3
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	20000008 	.word	0x20000008

08005554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005558:	f7ff fff0 	bl	800553c <HAL_RCC_GetHCLKFreq>
 800555c:	4602      	mov	r2, r0
 800555e:	4b05      	ldr	r3, [pc, #20]	; (8005574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	0a9b      	lsrs	r3, r3, #10
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	4903      	ldr	r1, [pc, #12]	; (8005578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800556a:	5ccb      	ldrb	r3, [r1, r3]
 800556c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005570:	4618      	mov	r0, r3
 8005572:	bd80      	pop	{r7, pc}
 8005574:	40023800 	.word	0x40023800
 8005578:	0800f0cc 	.word	0x0800f0cc

0800557c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005580:	f7ff ffdc 	bl	800553c <HAL_RCC_GetHCLKFreq>
 8005584:	4602      	mov	r2, r0
 8005586:	4b05      	ldr	r3, [pc, #20]	; (800559c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	0b5b      	lsrs	r3, r3, #13
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	4903      	ldr	r1, [pc, #12]	; (80055a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005592:	5ccb      	ldrb	r3, [r1, r3]
 8005594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005598:	4618      	mov	r0, r3
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40023800 	.word	0x40023800
 80055a0:	0800f0cc 	.word	0x0800f0cc

080055a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055a8:	b088      	sub	sp, #32
 80055aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055c0:	4bce      	ldr	r3, [pc, #824]	; (80058fc <HAL_RCC_GetSysClockFreq+0x358>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 030c 	and.w	r3, r3, #12
 80055c8:	2b0c      	cmp	r3, #12
 80055ca:	f200 818d 	bhi.w	80058e8 <HAL_RCC_GetSysClockFreq+0x344>
 80055ce:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <HAL_RCC_GetSysClockFreq+0x30>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	08005609 	.word	0x08005609
 80055d8:	080058e9 	.word	0x080058e9
 80055dc:	080058e9 	.word	0x080058e9
 80055e0:	080058e9 	.word	0x080058e9
 80055e4:	0800560f 	.word	0x0800560f
 80055e8:	080058e9 	.word	0x080058e9
 80055ec:	080058e9 	.word	0x080058e9
 80055f0:	080058e9 	.word	0x080058e9
 80055f4:	08005615 	.word	0x08005615
 80055f8:	080058e9 	.word	0x080058e9
 80055fc:	080058e9 	.word	0x080058e9
 8005600:	080058e9 	.word	0x080058e9
 8005604:	08005789 	.word	0x08005789
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005608:	4bbd      	ldr	r3, [pc, #756]	; (8005900 <HAL_RCC_GetSysClockFreq+0x35c>)
 800560a:	61bb      	str	r3, [r7, #24]
       break;
 800560c:	e16f      	b.n	80058ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800560e:	4bbd      	ldr	r3, [pc, #756]	; (8005904 <HAL_RCC_GetSysClockFreq+0x360>)
 8005610:	61bb      	str	r3, [r7, #24]
      break;
 8005612:	e16c      	b.n	80058ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005614:	4bb9      	ldr	r3, [pc, #740]	; (80058fc <HAL_RCC_GetSysClockFreq+0x358>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800561c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800561e:	4bb7      	ldr	r3, [pc, #732]	; (80058fc <HAL_RCC_GetSysClockFreq+0x358>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d053      	beq.n	80056d2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800562a:	4bb4      	ldr	r3, [pc, #720]	; (80058fc <HAL_RCC_GetSysClockFreq+0x358>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	099b      	lsrs	r3, r3, #6
 8005630:	461a      	mov	r2, r3
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	f240 10ff 	movw	r0, #511	; 0x1ff
 800563a:	f04f 0100 	mov.w	r1, #0
 800563e:	ea02 0400 	and.w	r4, r2, r0
 8005642:	603c      	str	r4, [r7, #0]
 8005644:	400b      	ands	r3, r1
 8005646:	607b      	str	r3, [r7, #4]
 8005648:	e9d7 4500 	ldrd	r4, r5, [r7]
 800564c:	4620      	mov	r0, r4
 800564e:	4629      	mov	r1, r5
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	014b      	lsls	r3, r1, #5
 800565a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800565e:	0142      	lsls	r2, r0, #5
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	4623      	mov	r3, r4
 8005666:	1ac0      	subs	r0, r0, r3
 8005668:	462b      	mov	r3, r5
 800566a:	eb61 0103 	sbc.w	r1, r1, r3
 800566e:	f04f 0200 	mov.w	r2, #0
 8005672:	f04f 0300 	mov.w	r3, #0
 8005676:	018b      	lsls	r3, r1, #6
 8005678:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800567c:	0182      	lsls	r2, r0, #6
 800567e:	1a12      	subs	r2, r2, r0
 8005680:	eb63 0301 	sbc.w	r3, r3, r1
 8005684:	f04f 0000 	mov.w	r0, #0
 8005688:	f04f 0100 	mov.w	r1, #0
 800568c:	00d9      	lsls	r1, r3, #3
 800568e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005692:	00d0      	lsls	r0, r2, #3
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	4621      	mov	r1, r4
 800569a:	1852      	adds	r2, r2, r1
 800569c:	4629      	mov	r1, r5
 800569e:	eb43 0101 	adc.w	r1, r3, r1
 80056a2:	460b      	mov	r3, r1
 80056a4:	f04f 0000 	mov.w	r0, #0
 80056a8:	f04f 0100 	mov.w	r1, #0
 80056ac:	0259      	lsls	r1, r3, #9
 80056ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80056b2:	0250      	lsls	r0, r2, #9
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	461a      	mov	r2, r3
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	f7fb fb00 	bl	8000cc8 <__aeabi_uldivmod>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4613      	mov	r3, r2
 80056ce:	61fb      	str	r3, [r7, #28]
 80056d0:	e04c      	b.n	800576c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d2:	4b8a      	ldr	r3, [pc, #552]	; (80058fc <HAL_RCC_GetSysClockFreq+0x358>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	461a      	mov	r2, r3
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80056e2:	f04f 0100 	mov.w	r1, #0
 80056e6:	ea02 0a00 	and.w	sl, r2, r0
 80056ea:	ea03 0b01 	and.w	fp, r3, r1
 80056ee:	4650      	mov	r0, sl
 80056f0:	4659      	mov	r1, fp
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	014b      	lsls	r3, r1, #5
 80056fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005700:	0142      	lsls	r2, r0, #5
 8005702:	4610      	mov	r0, r2
 8005704:	4619      	mov	r1, r3
 8005706:	ebb0 000a 	subs.w	r0, r0, sl
 800570a:	eb61 010b 	sbc.w	r1, r1, fp
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	018b      	lsls	r3, r1, #6
 8005718:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800571c:	0182      	lsls	r2, r0, #6
 800571e:	1a12      	subs	r2, r2, r0
 8005720:	eb63 0301 	sbc.w	r3, r3, r1
 8005724:	f04f 0000 	mov.w	r0, #0
 8005728:	f04f 0100 	mov.w	r1, #0
 800572c:	00d9      	lsls	r1, r3, #3
 800572e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005732:	00d0      	lsls	r0, r2, #3
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	eb12 020a 	adds.w	r2, r2, sl
 800573c:	eb43 030b 	adc.w	r3, r3, fp
 8005740:	f04f 0000 	mov.w	r0, #0
 8005744:	f04f 0100 	mov.w	r1, #0
 8005748:	0299      	lsls	r1, r3, #10
 800574a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800574e:	0290      	lsls	r0, r2, #10
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4610      	mov	r0, r2
 8005756:	4619      	mov	r1, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	461a      	mov	r2, r3
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	f7fb fab2 	bl	8000cc8 <__aeabi_uldivmod>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4613      	mov	r3, r2
 800576a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800576c:	4b63      	ldr	r3, [pc, #396]	; (80058fc <HAL_RCC_GetSysClockFreq+0x358>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	0c1b      	lsrs	r3, r3, #16
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	3301      	adds	r3, #1
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800577c:	69fa      	ldr	r2, [r7, #28]
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	fbb2 f3f3 	udiv	r3, r2, r3
 8005784:	61bb      	str	r3, [r7, #24]
      break;
 8005786:	e0b2      	b.n	80058ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005788:	4b5c      	ldr	r3, [pc, #368]	; (80058fc <HAL_RCC_GetSysClockFreq+0x358>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005790:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005792:	4b5a      	ldr	r3, [pc, #360]	; (80058fc <HAL_RCC_GetSysClockFreq+0x358>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d04d      	beq.n	800583a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800579e:	4b57      	ldr	r3, [pc, #348]	; (80058fc <HAL_RCC_GetSysClockFreq+0x358>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	099b      	lsrs	r3, r3, #6
 80057a4:	461a      	mov	r2, r3
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057ae:	f04f 0100 	mov.w	r1, #0
 80057b2:	ea02 0800 	and.w	r8, r2, r0
 80057b6:	ea03 0901 	and.w	r9, r3, r1
 80057ba:	4640      	mov	r0, r8
 80057bc:	4649      	mov	r1, r9
 80057be:	f04f 0200 	mov.w	r2, #0
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	014b      	lsls	r3, r1, #5
 80057c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057cc:	0142      	lsls	r2, r0, #5
 80057ce:	4610      	mov	r0, r2
 80057d0:	4619      	mov	r1, r3
 80057d2:	ebb0 0008 	subs.w	r0, r0, r8
 80057d6:	eb61 0109 	sbc.w	r1, r1, r9
 80057da:	f04f 0200 	mov.w	r2, #0
 80057de:	f04f 0300 	mov.w	r3, #0
 80057e2:	018b      	lsls	r3, r1, #6
 80057e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057e8:	0182      	lsls	r2, r0, #6
 80057ea:	1a12      	subs	r2, r2, r0
 80057ec:	eb63 0301 	sbc.w	r3, r3, r1
 80057f0:	f04f 0000 	mov.w	r0, #0
 80057f4:	f04f 0100 	mov.w	r1, #0
 80057f8:	00d9      	lsls	r1, r3, #3
 80057fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057fe:	00d0      	lsls	r0, r2, #3
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	eb12 0208 	adds.w	r2, r2, r8
 8005808:	eb43 0309 	adc.w	r3, r3, r9
 800580c:	f04f 0000 	mov.w	r0, #0
 8005810:	f04f 0100 	mov.w	r1, #0
 8005814:	0259      	lsls	r1, r3, #9
 8005816:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800581a:	0250      	lsls	r0, r2, #9
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4610      	mov	r0, r2
 8005822:	4619      	mov	r1, r3
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	461a      	mov	r2, r3
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	f7fb fa4c 	bl	8000cc8 <__aeabi_uldivmod>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4613      	mov	r3, r2
 8005836:	61fb      	str	r3, [r7, #28]
 8005838:	e04a      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800583a:	4b30      	ldr	r3, [pc, #192]	; (80058fc <HAL_RCC_GetSysClockFreq+0x358>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	099b      	lsrs	r3, r3, #6
 8005840:	461a      	mov	r2, r3
 8005842:	f04f 0300 	mov.w	r3, #0
 8005846:	f240 10ff 	movw	r0, #511	; 0x1ff
 800584a:	f04f 0100 	mov.w	r1, #0
 800584e:	ea02 0400 	and.w	r4, r2, r0
 8005852:	ea03 0501 	and.w	r5, r3, r1
 8005856:	4620      	mov	r0, r4
 8005858:	4629      	mov	r1, r5
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	014b      	lsls	r3, r1, #5
 8005864:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005868:	0142      	lsls	r2, r0, #5
 800586a:	4610      	mov	r0, r2
 800586c:	4619      	mov	r1, r3
 800586e:	1b00      	subs	r0, r0, r4
 8005870:	eb61 0105 	sbc.w	r1, r1, r5
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	018b      	lsls	r3, r1, #6
 800587e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005882:	0182      	lsls	r2, r0, #6
 8005884:	1a12      	subs	r2, r2, r0
 8005886:	eb63 0301 	sbc.w	r3, r3, r1
 800588a:	f04f 0000 	mov.w	r0, #0
 800588e:	f04f 0100 	mov.w	r1, #0
 8005892:	00d9      	lsls	r1, r3, #3
 8005894:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005898:	00d0      	lsls	r0, r2, #3
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	1912      	adds	r2, r2, r4
 80058a0:	eb45 0303 	adc.w	r3, r5, r3
 80058a4:	f04f 0000 	mov.w	r0, #0
 80058a8:	f04f 0100 	mov.w	r1, #0
 80058ac:	0299      	lsls	r1, r3, #10
 80058ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80058b2:	0290      	lsls	r0, r2, #10
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4610      	mov	r0, r2
 80058ba:	4619      	mov	r1, r3
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	461a      	mov	r2, r3
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	f7fb fa00 	bl	8000cc8 <__aeabi_uldivmod>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4613      	mov	r3, r2
 80058ce:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80058d0:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <HAL_RCC_GetSysClockFreq+0x358>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	0f1b      	lsrs	r3, r3, #28
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80058dc:	69fa      	ldr	r2, [r7, #28]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e4:	61bb      	str	r3, [r7, #24]
      break;
 80058e6:	e002      	b.n	80058ee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058e8:	4b05      	ldr	r3, [pc, #20]	; (8005900 <HAL_RCC_GetSysClockFreq+0x35c>)
 80058ea:	61bb      	str	r3, [r7, #24]
      break;
 80058ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058ee:	69bb      	ldr	r3, [r7, #24]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3720      	adds	r7, #32
 80058f4:	46bd      	mov	sp, r7
 80058f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058fa:	bf00      	nop
 80058fc:	40023800 	.word	0x40023800
 8005900:	00f42400 	.word	0x00f42400
 8005904:	007a1200 	.word	0x007a1200

08005908 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e28d      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 8083 	beq.w	8005a2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005928:	4b94      	ldr	r3, [pc, #592]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 030c 	and.w	r3, r3, #12
 8005930:	2b04      	cmp	r3, #4
 8005932:	d019      	beq.n	8005968 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005934:	4b91      	ldr	r3, [pc, #580]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800593c:	2b08      	cmp	r3, #8
 800593e:	d106      	bne.n	800594e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005940:	4b8e      	ldr	r3, [pc, #568]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800594c:	d00c      	beq.n	8005968 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800594e:	4b8b      	ldr	r3, [pc, #556]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005956:	2b0c      	cmp	r3, #12
 8005958:	d112      	bne.n	8005980 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800595a:	4b88      	ldr	r3, [pc, #544]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005966:	d10b      	bne.n	8005980 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005968:	4b84      	ldr	r3, [pc, #528]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d05b      	beq.n	8005a2c <HAL_RCC_OscConfig+0x124>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d157      	bne.n	8005a2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e25a      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005988:	d106      	bne.n	8005998 <HAL_RCC_OscConfig+0x90>
 800598a:	4b7c      	ldr	r3, [pc, #496]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a7b      	ldr	r2, [pc, #492]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	e01d      	b.n	80059d4 <HAL_RCC_OscConfig+0xcc>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059a0:	d10c      	bne.n	80059bc <HAL_RCC_OscConfig+0xb4>
 80059a2:	4b76      	ldr	r3, [pc, #472]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a75      	ldr	r2, [pc, #468]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 80059a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	4b73      	ldr	r3, [pc, #460]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a72      	ldr	r2, [pc, #456]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 80059b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	e00b      	b.n	80059d4 <HAL_RCC_OscConfig+0xcc>
 80059bc:	4b6f      	ldr	r3, [pc, #444]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a6e      	ldr	r2, [pc, #440]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 80059c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	4b6c      	ldr	r3, [pc, #432]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a6b      	ldr	r2, [pc, #428]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 80059ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d013      	beq.n	8005a04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059dc:	f7fd fdfa 	bl	80035d4 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059e4:	f7fd fdf6 	bl	80035d4 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b64      	cmp	r3, #100	; 0x64
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e21f      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059f6:	4b61      	ldr	r3, [pc, #388]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0f0      	beq.n	80059e4 <HAL_RCC_OscConfig+0xdc>
 8005a02:	e014      	b.n	8005a2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a04:	f7fd fde6 	bl	80035d4 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a0c:	f7fd fde2 	bl	80035d4 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b64      	cmp	r3, #100	; 0x64
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e20b      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a1e:	4b57      	ldr	r3, [pc, #348]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f0      	bne.n	8005a0c <HAL_RCC_OscConfig+0x104>
 8005a2a:	e000      	b.n	8005a2e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d06f      	beq.n	8005b1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a3a:	4b50      	ldr	r3, [pc, #320]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 030c 	and.w	r3, r3, #12
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d017      	beq.n	8005a76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a46:	4b4d      	ldr	r3, [pc, #308]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d105      	bne.n	8005a5e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a52:	4b4a      	ldr	r3, [pc, #296]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00b      	beq.n	8005a76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a5e:	4b47      	ldr	r3, [pc, #284]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a66:	2b0c      	cmp	r3, #12
 8005a68:	d11c      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a6a:	4b44      	ldr	r3, [pc, #272]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d116      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a76:	4b41      	ldr	r3, [pc, #260]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d005      	beq.n	8005a8e <HAL_RCC_OscConfig+0x186>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d001      	beq.n	8005a8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e1d3      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a8e:	4b3b      	ldr	r3, [pc, #236]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	4937      	ldr	r1, [pc, #220]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aa2:	e03a      	b.n	8005b1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d020      	beq.n	8005aee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005aac:	4b34      	ldr	r3, [pc, #208]	; (8005b80 <HAL_RCC_OscConfig+0x278>)
 8005aae:	2201      	movs	r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab2:	f7fd fd8f 	bl	80035d4 <HAL_GetTick>
 8005ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab8:	e008      	b.n	8005acc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aba:	f7fd fd8b 	bl	80035d4 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e1b4      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005acc:	4b2b      	ldr	r3, [pc, #172]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0f0      	beq.n	8005aba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad8:	4b28      	ldr	r3, [pc, #160]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	4925      	ldr	r1, [pc, #148]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	600b      	str	r3, [r1, #0]
 8005aec:	e015      	b.n	8005b1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aee:	4b24      	ldr	r3, [pc, #144]	; (8005b80 <HAL_RCC_OscConfig+0x278>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af4:	f7fd fd6e 	bl	80035d4 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005afc:	f7fd fd6a 	bl	80035d4 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e193      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b0e:	4b1b      	ldr	r3, [pc, #108]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1f0      	bne.n	8005afc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d036      	beq.n	8005b94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d016      	beq.n	8005b5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b2e:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <HAL_RCC_OscConfig+0x27c>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b34:	f7fd fd4e 	bl	80035d4 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b3c:	f7fd fd4a 	bl	80035d4 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e173      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b4e:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0f0      	beq.n	8005b3c <HAL_RCC_OscConfig+0x234>
 8005b5a:	e01b      	b.n	8005b94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b5c:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <HAL_RCC_OscConfig+0x27c>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b62:	f7fd fd37 	bl	80035d4 <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b68:	e00e      	b.n	8005b88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b6a:	f7fd fd33 	bl	80035d4 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d907      	bls.n	8005b88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e15c      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	42470000 	.word	0x42470000
 8005b84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b88:	4b8a      	ldr	r3, [pc, #552]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1ea      	bne.n	8005b6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 8097 	beq.w	8005cd0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ba6:	4b83      	ldr	r3, [pc, #524]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10f      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60bb      	str	r3, [r7, #8]
 8005bb6:	4b7f      	ldr	r3, [pc, #508]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	4a7e      	ldr	r2, [pc, #504]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8005bc2:	4b7c      	ldr	r3, [pc, #496]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bca:	60bb      	str	r3, [r7, #8]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd2:	4b79      	ldr	r3, [pc, #484]	; (8005db8 <HAL_RCC_OscConfig+0x4b0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d118      	bne.n	8005c10 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bde:	4b76      	ldr	r3, [pc, #472]	; (8005db8 <HAL_RCC_OscConfig+0x4b0>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a75      	ldr	r2, [pc, #468]	; (8005db8 <HAL_RCC_OscConfig+0x4b0>)
 8005be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bea:	f7fd fcf3 	bl	80035d4 <HAL_GetTick>
 8005bee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf0:	e008      	b.n	8005c04 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf2:	f7fd fcef 	bl	80035d4 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e118      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c04:	4b6c      	ldr	r3, [pc, #432]	; (8005db8 <HAL_RCC_OscConfig+0x4b0>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f0      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d106      	bne.n	8005c26 <HAL_RCC_OscConfig+0x31e>
 8005c18:	4b66      	ldr	r3, [pc, #408]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1c:	4a65      	ldr	r2, [pc, #404]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	6713      	str	r3, [r2, #112]	; 0x70
 8005c24:	e01c      	b.n	8005c60 <HAL_RCC_OscConfig+0x358>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b05      	cmp	r3, #5
 8005c2c:	d10c      	bne.n	8005c48 <HAL_RCC_OscConfig+0x340>
 8005c2e:	4b61      	ldr	r3, [pc, #388]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	4a60      	ldr	r2, [pc, #384]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005c34:	f043 0304 	orr.w	r3, r3, #4
 8005c38:	6713      	str	r3, [r2, #112]	; 0x70
 8005c3a:	4b5e      	ldr	r3, [pc, #376]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3e:	4a5d      	ldr	r2, [pc, #372]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	6713      	str	r3, [r2, #112]	; 0x70
 8005c46:	e00b      	b.n	8005c60 <HAL_RCC_OscConfig+0x358>
 8005c48:	4b5a      	ldr	r3, [pc, #360]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4c:	4a59      	ldr	r2, [pc, #356]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	6713      	str	r3, [r2, #112]	; 0x70
 8005c54:	4b57      	ldr	r3, [pc, #348]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c58:	4a56      	ldr	r2, [pc, #344]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005c5a:	f023 0304 	bic.w	r3, r3, #4
 8005c5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d015      	beq.n	8005c94 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c68:	f7fd fcb4 	bl	80035d4 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c6e:	e00a      	b.n	8005c86 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c70:	f7fd fcb0 	bl	80035d4 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e0d7      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c86:	4b4b      	ldr	r3, [pc, #300]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0ee      	beq.n	8005c70 <HAL_RCC_OscConfig+0x368>
 8005c92:	e014      	b.n	8005cbe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c94:	f7fd fc9e 	bl	80035d4 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c9a:	e00a      	b.n	8005cb2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c9c:	f7fd fc9a 	bl	80035d4 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e0c1      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cb2:	4b40      	ldr	r3, [pc, #256]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1ee      	bne.n	8005c9c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cbe:	7dfb      	ldrb	r3, [r7, #23]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d105      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cc4:	4b3b      	ldr	r3, [pc, #236]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	4a3a      	ldr	r2, [pc, #232]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 80ad 	beq.w	8005e34 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cda:	4b36      	ldr	r3, [pc, #216]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 030c 	and.w	r3, r3, #12
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d060      	beq.n	8005da8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d145      	bne.n	8005d7a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cee:	4b33      	ldr	r3, [pc, #204]	; (8005dbc <HAL_RCC_OscConfig+0x4b4>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf4:	f7fd fc6e 	bl	80035d4 <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cfc:	f7fd fc6a 	bl	80035d4 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e093      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d0e:	4b29      	ldr	r3, [pc, #164]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f0      	bne.n	8005cfc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	69da      	ldr	r2, [r3, #28]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	019b      	lsls	r3, r3, #6
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	3b01      	subs	r3, #1
 8005d34:	041b      	lsls	r3, r3, #16
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	061b      	lsls	r3, r3, #24
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	071b      	lsls	r3, r3, #28
 8005d46:	491b      	ldr	r1, [pc, #108]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d4c:	4b1b      	ldr	r3, [pc, #108]	; (8005dbc <HAL_RCC_OscConfig+0x4b4>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d52:	f7fd fc3f 	bl	80035d4 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d5a:	f7fd fc3b 	bl	80035d4 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e064      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d6c:	4b11      	ldr	r3, [pc, #68]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f0      	beq.n	8005d5a <HAL_RCC_OscConfig+0x452>
 8005d78:	e05c      	b.n	8005e34 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d7a:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <HAL_RCC_OscConfig+0x4b4>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d80:	f7fd fc28 	bl	80035d4 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d88:	f7fd fc24 	bl	80035d4 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e04d      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d9a:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <HAL_RCC_OscConfig+0x4ac>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f0      	bne.n	8005d88 <HAL_RCC_OscConfig+0x480>
 8005da6:	e045      	b.n	8005e34 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d107      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e040      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
 8005db4:	40023800 	.word	0x40023800
 8005db8:	40007000 	.word	0x40007000
 8005dbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dc0:	4b1f      	ldr	r3, [pc, #124]	; (8005e40 <HAL_RCC_OscConfig+0x538>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d030      	beq.n	8005e30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d129      	bne.n	8005e30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d122      	bne.n	8005e30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005df0:	4013      	ands	r3, r2
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005df6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d119      	bne.n	8005e30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d10f      	bne.n	8005e30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d107      	bne.n	8005e30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d001      	beq.n	8005e34 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e000      	b.n	8005e36 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	40023800 	.word	0x40023800

08005e44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e07b      	b.n	8005f4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d108      	bne.n	8005e70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e66:	d009      	beq.n	8005e7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	61da      	str	r2, [r3, #28]
 8005e6e:	e005      	b.n	8005e7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fd f8b2 	bl	8003000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f00:	ea42 0103 	orr.w	r1, r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	0c1b      	lsrs	r3, r3, #16
 8005f1a:	f003 0104 	and.w	r1, r3, #4
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	f003 0210 	and.w	r2, r3, #16
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b088      	sub	sp, #32
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	603b      	str	r3, [r7, #0]
 8005f62:	4613      	mov	r3, r2
 8005f64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_SPI_Transmit+0x22>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e126      	b.n	80061c6 <HAL_SPI_Transmit+0x270>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f80:	f7fd fb28 	bl	80035d4 <HAL_GetTick>
 8005f84:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d002      	beq.n	8005f9c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f96:	2302      	movs	r3, #2
 8005f98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f9a:	e10b      	b.n	80061b4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_SPI_Transmit+0x52>
 8005fa2:	88fb      	ldrh	r3, [r7, #6]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fac:	e102      	b.n	80061b4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	88fa      	ldrh	r2, [r7, #6]
 8005fc6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	88fa      	ldrh	r2, [r7, #6]
 8005fcc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff4:	d10f      	bne.n	8006016 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006004:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006014:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006020:	2b40      	cmp	r3, #64	; 0x40
 8006022:	d007      	beq.n	8006034 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006032:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800603c:	d14b      	bne.n	80060d6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_SPI_Transmit+0xf6>
 8006046:	8afb      	ldrh	r3, [r7, #22]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d13e      	bne.n	80060ca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006050:	881a      	ldrh	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	1c9a      	adds	r2, r3, #2
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006070:	e02b      	b.n	80060ca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b02      	cmp	r3, #2
 800607e:	d112      	bne.n	80060a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006084:	881a      	ldrh	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	1c9a      	adds	r2, r3, #2
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80060a4:	e011      	b.n	80060ca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060a6:	f7fd fa95 	bl	80035d4 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d803      	bhi.n	80060be <HAL_SPI_Transmit+0x168>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060bc:	d102      	bne.n	80060c4 <HAL_SPI_Transmit+0x16e>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060c8:	e074      	b.n	80061b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1ce      	bne.n	8006072 <HAL_SPI_Transmit+0x11c>
 80060d4:	e04c      	b.n	8006170 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <HAL_SPI_Transmit+0x18e>
 80060de:	8afb      	ldrh	r3, [r7, #22]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d140      	bne.n	8006166 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	330c      	adds	r3, #12
 80060ee:	7812      	ldrb	r2, [r2, #0]
 80060f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800610a:	e02c      	b.n	8006166 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b02      	cmp	r3, #2
 8006118:	d113      	bne.n	8006142 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006140:	e011      	b.n	8006166 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006142:	f7fd fa47 	bl	80035d4 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d803      	bhi.n	800615a <HAL_SPI_Transmit+0x204>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006158:	d102      	bne.n	8006160 <HAL_SPI_Transmit+0x20a>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d102      	bne.n	8006166 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006164:	e026      	b.n	80061b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1cd      	bne.n	800610c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 fa63 	bl	8006640 <SPI_EndRxTxTransaction>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800618e:	2300      	movs	r3, #0
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	77fb      	strb	r3, [r7, #31]
 80061b0:	e000      	b.n	80061b4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80061b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3720      	adds	r7, #32
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b08c      	sub	sp, #48	; 0x30
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	607a      	str	r2, [r7, #4]
 80061da:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061dc:	2301      	movs	r3, #1
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x26>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e18a      	b.n	800650a <HAL_SPI_TransmitReceive+0x33c>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061fc:	f7fd f9ea 	bl	80035d4 <HAL_GetTick>
 8006200:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006212:	887b      	ldrh	r3, [r7, #2]
 8006214:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006216:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800621a:	2b01      	cmp	r3, #1
 800621c:	d00f      	beq.n	800623e <HAL_SPI_TransmitReceive+0x70>
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006224:	d107      	bne.n	8006236 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d103      	bne.n	8006236 <HAL_SPI_TransmitReceive+0x68>
 800622e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006232:	2b04      	cmp	r3, #4
 8006234:	d003      	beq.n	800623e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006236:	2302      	movs	r3, #2
 8006238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800623c:	e15b      	b.n	80064f6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <HAL_SPI_TransmitReceive+0x82>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <HAL_SPI_TransmitReceive+0x82>
 800624a:	887b      	ldrh	r3, [r7, #2]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d103      	bne.n	8006258 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006256:	e14e      	b.n	80064f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b04      	cmp	r3, #4
 8006262:	d003      	beq.n	800626c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2205      	movs	r2, #5
 8006268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	887a      	ldrh	r2, [r7, #2]
 800627c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	887a      	ldrh	r2, [r7, #2]
 8006282:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	887a      	ldrh	r2, [r7, #2]
 800628e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	887a      	ldrh	r2, [r7, #2]
 8006294:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ac:	2b40      	cmp	r3, #64	; 0x40
 80062ae:	d007      	beq.n	80062c0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062c8:	d178      	bne.n	80063bc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <HAL_SPI_TransmitReceive+0x10a>
 80062d2:	8b7b      	ldrh	r3, [r7, #26]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d166      	bne.n	80063a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062dc:	881a      	ldrh	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	1c9a      	adds	r2, r3, #2
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062fc:	e053      	b.n	80063a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b02      	cmp	r3, #2
 800630a:	d11b      	bne.n	8006344 <HAL_SPI_TransmitReceive+0x176>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d016      	beq.n	8006344 <HAL_SPI_TransmitReceive+0x176>
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d113      	bne.n	8006344 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	881a      	ldrh	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632c:	1c9a      	adds	r2, r3, #2
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006336:	b29b      	uxth	r3, r3
 8006338:	3b01      	subs	r3, #1
 800633a:	b29a      	uxth	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b01      	cmp	r3, #1
 8006350:	d119      	bne.n	8006386 <HAL_SPI_TransmitReceive+0x1b8>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006356:	b29b      	uxth	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d014      	beq.n	8006386 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68da      	ldr	r2, [r3, #12]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006366:	b292      	uxth	r2, r2
 8006368:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	1c9a      	adds	r2, r3, #2
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006378:	b29b      	uxth	r3, r3
 800637a:	3b01      	subs	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006382:	2301      	movs	r3, #1
 8006384:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006386:	f7fd f925 	bl	80035d4 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006392:	429a      	cmp	r2, r3
 8006394:	d807      	bhi.n	80063a6 <HAL_SPI_TransmitReceive+0x1d8>
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639c:	d003      	beq.n	80063a6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063a4:	e0a7      	b.n	80064f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1a6      	bne.n	80062fe <HAL_SPI_TransmitReceive+0x130>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1a1      	bne.n	80062fe <HAL_SPI_TransmitReceive+0x130>
 80063ba:	e07c      	b.n	80064b6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <HAL_SPI_TransmitReceive+0x1fc>
 80063c4:	8b7b      	ldrh	r3, [r7, #26]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d16b      	bne.n	80064a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	330c      	adds	r3, #12
 80063d4:	7812      	ldrb	r2, [r2, #0]
 80063d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063f0:	e057      	b.n	80064a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d11c      	bne.n	800643a <HAL_SPI_TransmitReceive+0x26c>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d017      	beq.n	800643a <HAL_SPI_TransmitReceive+0x26c>
 800640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640c:	2b01      	cmp	r3, #1
 800640e:	d114      	bne.n	800643a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	330c      	adds	r3, #12
 800641a:	7812      	ldrb	r2, [r2, #0]
 800641c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b01      	cmp	r3, #1
 8006446:	d119      	bne.n	800647c <HAL_SPI_TransmitReceive+0x2ae>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d014      	beq.n	800647c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006478:	2301      	movs	r3, #1
 800647a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800647c:	f7fd f8aa 	bl	80035d4 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006488:	429a      	cmp	r2, r3
 800648a:	d803      	bhi.n	8006494 <HAL_SPI_TransmitReceive+0x2c6>
 800648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d102      	bne.n	800649a <HAL_SPI_TransmitReceive+0x2cc>
 8006494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006496:	2b00      	cmp	r3, #0
 8006498:	d103      	bne.n	80064a2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064a0:	e029      	b.n	80064f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1a2      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0x224>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d19d      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 f8c0 	bl	8006640 <SPI_EndRxTxTransaction>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d006      	beq.n	80064d4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2220      	movs	r2, #32
 80064d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80064d2:	e010      	b.n	80064f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064dc:	2300      	movs	r3, #0
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	e000      	b.n	80064f6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80064f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006506:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800650a:	4618      	mov	r0, r3
 800650c:	3730      	adds	r7, #48	; 0x30
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006520:	b2db      	uxtb	r3, r3
}
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
	...

08006530 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	4613      	mov	r3, r2
 800653e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006540:	f7fd f848 	bl	80035d4 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	1a9b      	subs	r3, r3, r2
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	4413      	add	r3, r2
 800654e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006550:	f7fd f840 	bl	80035d4 <HAL_GetTick>
 8006554:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006556:	4b39      	ldr	r3, [pc, #228]	; (800663c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	015b      	lsls	r3, r3, #5
 800655c:	0d1b      	lsrs	r3, r3, #20
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	fb02 f303 	mul.w	r3, r2, r3
 8006564:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006566:	e054      	b.n	8006612 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d050      	beq.n	8006612 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006570:	f7fd f830 	bl	80035d4 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	69fa      	ldr	r2, [r7, #28]
 800657c:	429a      	cmp	r2, r3
 800657e:	d902      	bls.n	8006586 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d13d      	bne.n	8006602 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006594:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800659e:	d111      	bne.n	80065c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a8:	d004      	beq.n	80065b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b2:	d107      	bne.n	80065c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065cc:	d10f      	bne.n	80065ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e017      	b.n	8006632 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	3b01      	subs	r3, #1
 8006610:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4013      	ands	r3, r2
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	429a      	cmp	r2, r3
 8006620:	bf0c      	ite	eq
 8006622:	2301      	moveq	r3, #1
 8006624:	2300      	movne	r3, #0
 8006626:	b2db      	uxtb	r3, r3
 8006628:	461a      	mov	r2, r3
 800662a:	79fb      	ldrb	r3, [r7, #7]
 800662c:	429a      	cmp	r2, r3
 800662e:	d19b      	bne.n	8006568 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3720      	adds	r7, #32
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20000008 	.word	0x20000008

08006640 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af02      	add	r7, sp, #8
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800664c:	4b1b      	ldr	r3, [pc, #108]	; (80066bc <SPI_EndRxTxTransaction+0x7c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a1b      	ldr	r2, [pc, #108]	; (80066c0 <SPI_EndRxTxTransaction+0x80>)
 8006652:	fba2 2303 	umull	r2, r3, r2, r3
 8006656:	0d5b      	lsrs	r3, r3, #21
 8006658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800665c:	fb02 f303 	mul.w	r3, r2, r3
 8006660:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800666a:	d112      	bne.n	8006692 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2200      	movs	r2, #0
 8006674:	2180      	movs	r1, #128	; 0x80
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f7ff ff5a 	bl	8006530 <SPI_WaitFlagStateUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d016      	beq.n	80066b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006686:	f043 0220 	orr.w	r2, r3, #32
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e00f      	b.n	80066b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00a      	beq.n	80066ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	3b01      	subs	r3, #1
 800669c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a8:	2b80      	cmp	r3, #128	; 0x80
 80066aa:	d0f2      	beq.n	8006692 <SPI_EndRxTxTransaction+0x52>
 80066ac:	e000      	b.n	80066b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80066ae:	bf00      	nop
  }

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20000008 	.word	0x20000008
 80066c0:	165e9f81 	.word	0x165e9f81

080066c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e03f      	b.n	8006756 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7fc fcd0 	bl	8003090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2224      	movs	r2, #36	; 0x24
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f9a7 	bl	8006a5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	691a      	ldr	r2, [r3, #16]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800671c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695a      	ldr	r2, [r3, #20]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800672c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800673c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b08a      	sub	sp, #40	; 0x28
 8006762:	af02      	add	r7, sp, #8
 8006764:	60f8      	str	r0, [r7, #12]
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	603b      	str	r3, [r7, #0]
 800676a:	4613      	mov	r3, r2
 800676c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b20      	cmp	r3, #32
 800677c:	d17c      	bne.n	8006878 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <HAL_UART_Transmit+0x2c>
 8006784:	88fb      	ldrh	r3, [r7, #6]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e075      	b.n	800687a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006794:	2b01      	cmp	r3, #1
 8006796:	d101      	bne.n	800679c <HAL_UART_Transmit+0x3e>
 8006798:	2302      	movs	r3, #2
 800679a:	e06e      	b.n	800687a <HAL_UART_Transmit+0x11c>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2221      	movs	r2, #33	; 0x21
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067b2:	f7fc ff0f 	bl	80035d4 <HAL_GetTick>
 80067b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	88fa      	ldrh	r2, [r7, #6]
 80067bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	88fa      	ldrh	r2, [r7, #6]
 80067c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067cc:	d108      	bne.n	80067e0 <HAL_UART_Transmit+0x82>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80067d6:	2300      	movs	r3, #0
 80067d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	e003      	b.n	80067e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80067f0:	e02a      	b.n	8006848 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2200      	movs	r2, #0
 80067fa:	2180      	movs	r1, #128	; 0x80
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f8e2 	bl	80069c6 <UART_WaitOnFlagUntilTimeout>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e036      	b.n	800687a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10b      	bne.n	800682a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	3302      	adds	r3, #2
 8006826:	61bb      	str	r3, [r7, #24]
 8006828:	e007      	b.n	800683a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	781a      	ldrb	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	3301      	adds	r3, #1
 8006838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800683e:	b29b      	uxth	r3, r3
 8006840:	3b01      	subs	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1cf      	bne.n	80067f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2200      	movs	r2, #0
 800685a:	2140      	movs	r1, #64	; 0x40
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 f8b2 	bl	80069c6 <UART_WaitOnFlagUntilTimeout>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e006      	b.n	800687a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2220      	movs	r2, #32
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	e000      	b.n	800687a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006878:	2302      	movs	r3, #2
  }
}
 800687a:	4618      	mov	r0, r3
 800687c:	3720      	adds	r7, #32
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b08a      	sub	sp, #40	; 0x28
 8006886:	af02      	add	r7, sp, #8
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	603b      	str	r3, [r7, #0]
 800688e:	4613      	mov	r3, r2
 8006890:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b20      	cmp	r3, #32
 80068a0:	f040 808c 	bne.w	80069bc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <HAL_UART_Receive+0x2e>
 80068aa:	88fb      	ldrh	r3, [r7, #6]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e084      	b.n	80069be <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <HAL_UART_Receive+0x40>
 80068be:	2302      	movs	r3, #2
 80068c0:	e07d      	b.n	80069be <HAL_UART_Receive+0x13c>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2222      	movs	r2, #34	; 0x22
 80068d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068de:	f7fc fe79 	bl	80035d4 <HAL_GetTick>
 80068e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	88fa      	ldrh	r2, [r7, #6]
 80068e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	88fa      	ldrh	r2, [r7, #6]
 80068ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f8:	d108      	bne.n	800690c <HAL_UART_Receive+0x8a>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d104      	bne.n	800690c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006902:	2300      	movs	r3, #0
 8006904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	e003      	b.n	8006914 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006910:	2300      	movs	r3, #0
 8006912:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800691c:	e043      	b.n	80069a6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2200      	movs	r2, #0
 8006926:	2120      	movs	r1, #32
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 f84c 	bl	80069c6 <UART_WaitOnFlagUntilTimeout>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e042      	b.n	80069be <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10c      	bne.n	8006958 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	b29b      	uxth	r3, r3
 8006946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800694a:	b29a      	uxth	r2, r3
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	3302      	adds	r3, #2
 8006954:	61bb      	str	r3, [r7, #24]
 8006956:	e01f      	b.n	8006998 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006960:	d007      	beq.n	8006972 <HAL_UART_Receive+0xf0>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <HAL_UART_Receive+0xfe>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	b2da      	uxtb	r2, r3
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	e008      	b.n	8006992 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	b2db      	uxtb	r3, r3
 8006988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800698c:	b2da      	uxtb	r2, r3
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	3301      	adds	r3, #1
 8006996:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1b6      	bne.n	800691e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80069b8:	2300      	movs	r3, #0
 80069ba:	e000      	b.n	80069be <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80069bc:	2302      	movs	r3, #2
  }
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3720      	adds	r7, #32
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	4613      	mov	r3, r2
 80069d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d6:	e02c      	b.n	8006a32 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069de:	d028      	beq.n	8006a32 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d007      	beq.n	80069f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80069e6:	f7fc fdf5 	bl	80035d4 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d21d      	bcs.n	8006a32 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a04:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695a      	ldr	r2, [r3, #20]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0201 	bic.w	r2, r2, #1
 8006a14:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e00f      	b.n	8006a52 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	bf0c      	ite	eq
 8006a42:	2301      	moveq	r3, #1
 8006a44:	2300      	movne	r3, #0
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	461a      	mov	r2, r3
 8006a4a:	79fb      	ldrb	r3, [r7, #7]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d0c3      	beq.n	80069d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a60:	b09f      	sub	sp, #124	; 0x7c
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a72:	68d9      	ldr	r1, [r3, #12]
 8006a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	ea40 0301 	orr.w	r3, r0, r1
 8006a7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	431a      	orrs	r2, r3
 8006a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006aa0:	f021 010c 	bic.w	r1, r1, #12
 8006aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aaa:	430b      	orrs	r3, r1
 8006aac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aba:	6999      	ldr	r1, [r3, #24]
 8006abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	ea40 0301 	orr.w	r3, r0, r1
 8006ac4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	4bc5      	ldr	r3, [pc, #788]	; (8006de0 <UART_SetConfig+0x384>)
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d004      	beq.n	8006ada <UART_SetConfig+0x7e>
 8006ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	4bc3      	ldr	r3, [pc, #780]	; (8006de4 <UART_SetConfig+0x388>)
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d103      	bne.n	8006ae2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ada:	f7fe fd4f 	bl	800557c <HAL_RCC_GetPCLK2Freq>
 8006ade:	6778      	str	r0, [r7, #116]	; 0x74
 8006ae0:	e002      	b.n	8006ae8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ae2:	f7fe fd37 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 8006ae6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af0:	f040 80b6 	bne.w	8006c60 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006af6:	461c      	mov	r4, r3
 8006af8:	f04f 0500 	mov.w	r5, #0
 8006afc:	4622      	mov	r2, r4
 8006afe:	462b      	mov	r3, r5
 8006b00:	1891      	adds	r1, r2, r2
 8006b02:	6439      	str	r1, [r7, #64]	; 0x40
 8006b04:	415b      	adcs	r3, r3
 8006b06:	647b      	str	r3, [r7, #68]	; 0x44
 8006b08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b0c:	1912      	adds	r2, r2, r4
 8006b0e:	eb45 0303 	adc.w	r3, r5, r3
 8006b12:	f04f 0000 	mov.w	r0, #0
 8006b16:	f04f 0100 	mov.w	r1, #0
 8006b1a:	00d9      	lsls	r1, r3, #3
 8006b1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b20:	00d0      	lsls	r0, r2, #3
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	1911      	adds	r1, r2, r4
 8006b28:	6639      	str	r1, [r7, #96]	; 0x60
 8006b2a:	416b      	adcs	r3, r5
 8006b2c:	667b      	str	r3, [r7, #100]	; 0x64
 8006b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	461a      	mov	r2, r3
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	1891      	adds	r1, r2, r2
 8006b3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b3c:	415b      	adcs	r3, r3
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b44:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006b48:	f7fa f8be 	bl	8000cc8 <__aeabi_uldivmod>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4ba5      	ldr	r3, [pc, #660]	; (8006de8 <UART_SetConfig+0x38c>)
 8006b52:	fba3 2302 	umull	r2, r3, r3, r2
 8006b56:	095b      	lsrs	r3, r3, #5
 8006b58:	011e      	lsls	r6, r3, #4
 8006b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b5c:	461c      	mov	r4, r3
 8006b5e:	f04f 0500 	mov.w	r5, #0
 8006b62:	4622      	mov	r2, r4
 8006b64:	462b      	mov	r3, r5
 8006b66:	1891      	adds	r1, r2, r2
 8006b68:	6339      	str	r1, [r7, #48]	; 0x30
 8006b6a:	415b      	adcs	r3, r3
 8006b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006b72:	1912      	adds	r2, r2, r4
 8006b74:	eb45 0303 	adc.w	r3, r5, r3
 8006b78:	f04f 0000 	mov.w	r0, #0
 8006b7c:	f04f 0100 	mov.w	r1, #0
 8006b80:	00d9      	lsls	r1, r3, #3
 8006b82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b86:	00d0      	lsls	r0, r2, #3
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	1911      	adds	r1, r2, r4
 8006b8e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b90:	416b      	adcs	r3, r5
 8006b92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f04f 0300 	mov.w	r3, #0
 8006b9e:	1891      	adds	r1, r2, r2
 8006ba0:	62b9      	str	r1, [r7, #40]	; 0x28
 8006ba2:	415b      	adcs	r3, r3
 8006ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ba6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006baa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006bae:	f7fa f88b 	bl	8000cc8 <__aeabi_uldivmod>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4b8c      	ldr	r3, [pc, #560]	; (8006de8 <UART_SetConfig+0x38c>)
 8006bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8006bbc:	095b      	lsrs	r3, r3, #5
 8006bbe:	2164      	movs	r1, #100	; 0x64
 8006bc0:	fb01 f303 	mul.w	r3, r1, r3
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	3332      	adds	r3, #50	; 0x32
 8006bca:	4a87      	ldr	r2, [pc, #540]	; (8006de8 <UART_SetConfig+0x38c>)
 8006bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd0:	095b      	lsrs	r3, r3, #5
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bd8:	441e      	add	r6, r3
 8006bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f04f 0100 	mov.w	r1, #0
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	1894      	adds	r4, r2, r2
 8006be8:	623c      	str	r4, [r7, #32]
 8006bea:	415b      	adcs	r3, r3
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24
 8006bee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bf2:	1812      	adds	r2, r2, r0
 8006bf4:	eb41 0303 	adc.w	r3, r1, r3
 8006bf8:	f04f 0400 	mov.w	r4, #0
 8006bfc:	f04f 0500 	mov.w	r5, #0
 8006c00:	00dd      	lsls	r5, r3, #3
 8006c02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c06:	00d4      	lsls	r4, r2, #3
 8006c08:	4622      	mov	r2, r4
 8006c0a:	462b      	mov	r3, r5
 8006c0c:	1814      	adds	r4, r2, r0
 8006c0e:	653c      	str	r4, [r7, #80]	; 0x50
 8006c10:	414b      	adcs	r3, r1
 8006c12:	657b      	str	r3, [r7, #84]	; 0x54
 8006c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	f04f 0300 	mov.w	r3, #0
 8006c1e:	1891      	adds	r1, r2, r2
 8006c20:	61b9      	str	r1, [r7, #24]
 8006c22:	415b      	adcs	r3, r3
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c2e:	f7fa f84b 	bl	8000cc8 <__aeabi_uldivmod>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4b6c      	ldr	r3, [pc, #432]	; (8006de8 <UART_SetConfig+0x38c>)
 8006c38:	fba3 1302 	umull	r1, r3, r3, r2
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	2164      	movs	r1, #100	; 0x64
 8006c40:	fb01 f303 	mul.w	r3, r1, r3
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	3332      	adds	r3, #50	; 0x32
 8006c4a:	4a67      	ldr	r2, [pc, #412]	; (8006de8 <UART_SetConfig+0x38c>)
 8006c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	f003 0207 	and.w	r2, r3, #7
 8006c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4432      	add	r2, r6
 8006c5c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c5e:	e0b9      	b.n	8006dd4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c62:	461c      	mov	r4, r3
 8006c64:	f04f 0500 	mov.w	r5, #0
 8006c68:	4622      	mov	r2, r4
 8006c6a:	462b      	mov	r3, r5
 8006c6c:	1891      	adds	r1, r2, r2
 8006c6e:	6139      	str	r1, [r7, #16]
 8006c70:	415b      	adcs	r3, r3
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c78:	1912      	adds	r2, r2, r4
 8006c7a:	eb45 0303 	adc.w	r3, r5, r3
 8006c7e:	f04f 0000 	mov.w	r0, #0
 8006c82:	f04f 0100 	mov.w	r1, #0
 8006c86:	00d9      	lsls	r1, r3, #3
 8006c88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c8c:	00d0      	lsls	r0, r2, #3
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	eb12 0804 	adds.w	r8, r2, r4
 8006c96:	eb43 0905 	adc.w	r9, r3, r5
 8006c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f04f 0100 	mov.w	r1, #0
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	f04f 0300 	mov.w	r3, #0
 8006cac:	008b      	lsls	r3, r1, #2
 8006cae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006cb2:	0082      	lsls	r2, r0, #2
 8006cb4:	4640      	mov	r0, r8
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	f7fa f806 	bl	8000cc8 <__aeabi_uldivmod>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4b49      	ldr	r3, [pc, #292]	; (8006de8 <UART_SetConfig+0x38c>)
 8006cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8006cc6:	095b      	lsrs	r3, r3, #5
 8006cc8:	011e      	lsls	r6, r3, #4
 8006cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f04f 0100 	mov.w	r1, #0
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	1894      	adds	r4, r2, r2
 8006cd8:	60bc      	str	r4, [r7, #8]
 8006cda:	415b      	adcs	r3, r3
 8006cdc:	60fb      	str	r3, [r7, #12]
 8006cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ce2:	1812      	adds	r2, r2, r0
 8006ce4:	eb41 0303 	adc.w	r3, r1, r3
 8006ce8:	f04f 0400 	mov.w	r4, #0
 8006cec:	f04f 0500 	mov.w	r5, #0
 8006cf0:	00dd      	lsls	r5, r3, #3
 8006cf2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006cf6:	00d4      	lsls	r4, r2, #3
 8006cf8:	4622      	mov	r2, r4
 8006cfa:	462b      	mov	r3, r5
 8006cfc:	1814      	adds	r4, r2, r0
 8006cfe:	64bc      	str	r4, [r7, #72]	; 0x48
 8006d00:	414b      	adcs	r3, r1
 8006d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f04f 0100 	mov.w	r1, #0
 8006d0e:	f04f 0200 	mov.w	r2, #0
 8006d12:	f04f 0300 	mov.w	r3, #0
 8006d16:	008b      	lsls	r3, r1, #2
 8006d18:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d1c:	0082      	lsls	r2, r0, #2
 8006d1e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d22:	f7f9 ffd1 	bl	8000cc8 <__aeabi_uldivmod>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4b2f      	ldr	r3, [pc, #188]	; (8006de8 <UART_SetConfig+0x38c>)
 8006d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d30:	095b      	lsrs	r3, r3, #5
 8006d32:	2164      	movs	r1, #100	; 0x64
 8006d34:	fb01 f303 	mul.w	r3, r1, r3
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	3332      	adds	r3, #50	; 0x32
 8006d3e:	4a2a      	ldr	r2, [pc, #168]	; (8006de8 <UART_SetConfig+0x38c>)
 8006d40:	fba2 2303 	umull	r2, r3, r2, r3
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d4a:	441e      	add	r6, r3
 8006d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f04f 0100 	mov.w	r1, #0
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	1894      	adds	r4, r2, r2
 8006d5a:	603c      	str	r4, [r7, #0]
 8006d5c:	415b      	adcs	r3, r3
 8006d5e:	607b      	str	r3, [r7, #4]
 8006d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d64:	1812      	adds	r2, r2, r0
 8006d66:	eb41 0303 	adc.w	r3, r1, r3
 8006d6a:	f04f 0400 	mov.w	r4, #0
 8006d6e:	f04f 0500 	mov.w	r5, #0
 8006d72:	00dd      	lsls	r5, r3, #3
 8006d74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d78:	00d4      	lsls	r4, r2, #3
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	eb12 0a00 	adds.w	sl, r2, r0
 8006d82:	eb43 0b01 	adc.w	fp, r3, r1
 8006d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f04f 0100 	mov.w	r1, #0
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	f04f 0300 	mov.w	r3, #0
 8006d98:	008b      	lsls	r3, r1, #2
 8006d9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d9e:	0082      	lsls	r2, r0, #2
 8006da0:	4650      	mov	r0, sl
 8006da2:	4659      	mov	r1, fp
 8006da4:	f7f9 ff90 	bl	8000cc8 <__aeabi_uldivmod>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4b0e      	ldr	r3, [pc, #56]	; (8006de8 <UART_SetConfig+0x38c>)
 8006dae:	fba3 1302 	umull	r1, r3, r3, r2
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	2164      	movs	r1, #100	; 0x64
 8006db6:	fb01 f303 	mul.w	r3, r1, r3
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	3332      	adds	r3, #50	; 0x32
 8006dc0:	4a09      	ldr	r2, [pc, #36]	; (8006de8 <UART_SetConfig+0x38c>)
 8006dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	f003 020f 	and.w	r2, r3, #15
 8006dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4432      	add	r2, r6
 8006dd2:	609a      	str	r2, [r3, #8]
}
 8006dd4:	bf00      	nop
 8006dd6:	377c      	adds	r7, #124	; 0x7c
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dde:	bf00      	nop
 8006de0:	40011000 	.word	0x40011000
 8006de4:	40011400 	.word	0x40011400
 8006de8:	51eb851f 	.word	0x51eb851f

08006dec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006df0:	4904      	ldr	r1, [pc, #16]	; (8006e04 <MX_FATFS_Init+0x18>)
 8006df2:	4805      	ldr	r0, [pc, #20]	; (8006e08 <MX_FATFS_Init+0x1c>)
 8006df4:	f003 f836 	bl	8009e64 <FATFS_LinkDriver>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	4b03      	ldr	r3, [pc, #12]	; (8006e0c <MX_FATFS_Init+0x20>)
 8006dfe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006e00:	bf00      	nop
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20003038 	.word	0x20003038
 8006e08:	20000014 	.word	0x20000014
 8006e0c:	2000303c 	.word	0x2000303c

08006e10 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006e14:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	4603      	mov	r3, r0
 8006e28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fa fdd3 	bl	80019d8 <SD_disk_initialize>
 8006e32:	4603      	mov	r3, r0
 8006e34:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	4603      	mov	r3, r0
 8006e46:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006e48:	79fb      	ldrb	r3, [r7, #7]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fa feae 	bl	8001bac <SD_disk_status>
 8006e50:	4603      	mov	r3, r0
 8006e52:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	607a      	str	r2, [r7, #4]
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	4603      	mov	r3, r0
 8006e6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006e6c:	7bf8      	ldrb	r0, [r7, #15]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	f7fa feb0 	bl	8001bd8 <SD_disk_read>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	607a      	str	r2, [r7, #4]
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	4603      	mov	r3, r0
 8006e92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8006e94:	7bf8      	ldrb	r0, [r7, #15]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	68b9      	ldr	r1, [r7, #8]
 8006e9c:	f7fa ff06 	bl	8001cac <SD_disk_write>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	603a      	str	r2, [r7, #0]
 8006eb6:	71fb      	strb	r3, [r7, #7]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	79b9      	ldrb	r1, [r7, #6]
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fa ff76 	bl	8001db4 <SD_disk_ioctl>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	4a08      	ldr	r2, [pc, #32]	; (8006f04 <disk_status+0x30>)
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	79fa      	ldrb	r2, [r7, #7]
 8006eec:	4905      	ldr	r1, [pc, #20]	; (8006f04 <disk_status+0x30>)
 8006eee:	440a      	add	r2, r1
 8006ef0:	7a12      	ldrb	r2, [r2, #8]
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	4798      	blx	r3
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	20000894 	.word	0x20000894

08006f08 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	4a0d      	ldr	r2, [pc, #52]	; (8006f50 <disk_initialize+0x48>)
 8006f1a:	5cd3      	ldrb	r3, [r2, r3]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d111      	bne.n	8006f44 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	4a0b      	ldr	r2, [pc, #44]	; (8006f50 <disk_initialize+0x48>)
 8006f24:	2101      	movs	r1, #1
 8006f26:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	4a09      	ldr	r2, [pc, #36]	; (8006f50 <disk_initialize+0x48>)
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	79fa      	ldrb	r2, [r7, #7]
 8006f36:	4906      	ldr	r1, [pc, #24]	; (8006f50 <disk_initialize+0x48>)
 8006f38:	440a      	add	r2, r1
 8006f3a:	7a12      	ldrb	r2, [r2, #8]
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4798      	blx	r3
 8006f40:	4603      	mov	r3, r0
 8006f42:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000894 	.word	0x20000894

08006f54 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006f54:	b590      	push	{r4, r7, lr}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60b9      	str	r1, [r7, #8]
 8006f5c:	607a      	str	r2, [r7, #4]
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	4603      	mov	r3, r0
 8006f62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	4a0a      	ldr	r2, [pc, #40]	; (8006f90 <disk_read+0x3c>)
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	689c      	ldr	r4, [r3, #8]
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	4a07      	ldr	r2, [pc, #28]	; (8006f90 <disk_read+0x3c>)
 8006f74:	4413      	add	r3, r2
 8006f76:	7a18      	ldrb	r0, [r3, #8]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	68b9      	ldr	r1, [r7, #8]
 8006f7e:	47a0      	blx	r4
 8006f80:	4603      	mov	r3, r0
 8006f82:	75fb      	strb	r3, [r7, #23]
  return res;
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd90      	pop	{r4, r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000894 	.word	0x20000894

08006f94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006f94:	b590      	push	{r4, r7, lr}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	607a      	str	r2, [r7, #4]
 8006f9e:	603b      	str	r3, [r7, #0]
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	4a0a      	ldr	r2, [pc, #40]	; (8006fd0 <disk_write+0x3c>)
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	68dc      	ldr	r4, [r3, #12]
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	4a07      	ldr	r2, [pc, #28]	; (8006fd0 <disk_write+0x3c>)
 8006fb4:	4413      	add	r3, r2
 8006fb6:	7a18      	ldrb	r0, [r3, #8]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	68b9      	ldr	r1, [r7, #8]
 8006fbe:	47a0      	blx	r4
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	75fb      	strb	r3, [r7, #23]
  return res;
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd90      	pop	{r4, r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000894 	.word	0x20000894

08006fd4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	603a      	str	r2, [r7, #0]
 8006fde:	71fb      	strb	r3, [r7, #7]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	4a09      	ldr	r2, [pc, #36]	; (800700c <disk_ioctl+0x38>)
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	79fa      	ldrb	r2, [r7, #7]
 8006ff2:	4906      	ldr	r1, [pc, #24]	; (800700c <disk_ioctl+0x38>)
 8006ff4:	440a      	add	r2, r1
 8006ff6:	7a10      	ldrb	r0, [r2, #8]
 8006ff8:	79b9      	ldrb	r1, [r7, #6]
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	4798      	blx	r3
 8006ffe:	4603      	mov	r3, r0
 8007000:	73fb      	strb	r3, [r7, #15]
  return res;
 8007002:	7bfb      	ldrb	r3, [r7, #15]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20000894 	.word	0x20000894

08007010 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3301      	adds	r3, #1
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007020:	89fb      	ldrh	r3, [r7, #14]
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	b21a      	sxth	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	b21b      	sxth	r3, r3
 800702c:	4313      	orrs	r3, r2
 800702e:	b21b      	sxth	r3, r3
 8007030:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007032:	89fb      	ldrh	r3, [r7, #14]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3303      	adds	r3, #3
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	021b      	lsls	r3, r3, #8
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	3202      	adds	r2, #2
 8007058:	7812      	ldrb	r2, [r2, #0]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	021b      	lsls	r3, r3, #8
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	3201      	adds	r2, #1
 8007066:	7812      	ldrb	r2, [r2, #0]
 8007068:	4313      	orrs	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	021b      	lsls	r3, r3, #8
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	7812      	ldrb	r2, [r2, #0]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
	return rv;
 8007078:	68fb      	ldr	r3, [r7, #12]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	460b      	mov	r3, r1
 8007090:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	887a      	ldrh	r2, [r7, #2]
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	887b      	ldrh	r3, [r7, #2]
 80070a0:	0a1b      	lsrs	r3, r3, #8
 80070a2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	607a      	str	r2, [r7, #4]
 80070aa:	887a      	ldrh	r2, [r7, #2]
 80070ac:	b2d2      	uxtb	r2, r2
 80070ae:	701a      	strb	r2, [r3, #0]
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	0a1b      	lsrs	r3, r3, #8
 80070d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	607a      	str	r2, [r7, #4]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	0a1b      	lsrs	r3, r3, #8
 80070e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	b2d2      	uxtb	r2, r2
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	0a1b      	lsrs	r3, r3, #8
 80070fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	607a      	str	r2, [r7, #4]
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	b2d2      	uxtb	r2, r2
 8007106:	701a      	strb	r2, [r3, #0]
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00d      	beq.n	800714a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	1c53      	adds	r3, r2, #1
 8007132:	613b      	str	r3, [r7, #16]
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	1c59      	adds	r1, r3, #1
 8007138:	6179      	str	r1, [r7, #20]
 800713a:	7812      	ldrb	r2, [r2, #0]
 800713c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3b01      	subs	r3, #1
 8007142:	607b      	str	r3, [r7, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1f1      	bne.n	800712e <mem_cpy+0x1a>
	}
}
 800714a:	bf00      	nop
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007156:	b480      	push	{r7}
 8007158:	b087      	sub	sp, #28
 800715a:	af00      	add	r7, sp, #0
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	1c5a      	adds	r2, r3, #1
 800716a:	617a      	str	r2, [r7, #20]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3b01      	subs	r3, #1
 8007176:	607b      	str	r3, [r7, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1f3      	bne.n	8007166 <mem_set+0x10>
}
 800717e:	bf00      	nop
 8007180:	bf00      	nop
 8007182:	371c      	adds	r7, #28
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800718c:	b480      	push	{r7}
 800718e:	b089      	sub	sp, #36	; 0x24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	61fb      	str	r3, [r7, #28]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	61fa      	str	r2, [r7, #28]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	4619      	mov	r1, r3
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	61ba      	str	r2, [r7, #24]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	1acb      	subs	r3, r1, r3
 80071b8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3b01      	subs	r3, #1
 80071be:	607b      	str	r3, [r7, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <mem_cmp+0x40>
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0eb      	beq.n	80071a4 <mem_cmp+0x18>

	return r;
 80071cc:	697b      	ldr	r3, [r7, #20]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3724      	adds	r7, #36	; 0x24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80071e4:	e002      	b.n	80071ec <chk_chr+0x12>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3301      	adds	r3, #1
 80071ea:	607b      	str	r3, [r7, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <chk_chr+0x26>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d1f2      	bne.n	80071e6 <chk_chr+0xc>
	return *str;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	781b      	ldrb	r3, [r3, #0]
}
 8007204:	4618      	mov	r0, r3
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800721a:	2300      	movs	r3, #0
 800721c:	60bb      	str	r3, [r7, #8]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	60fb      	str	r3, [r7, #12]
 8007222:	e029      	b.n	8007278 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007224:	4a27      	ldr	r2, [pc, #156]	; (80072c4 <chk_lock+0xb4>)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	4413      	add	r3, r2
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01d      	beq.n	800726e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007232:	4a24      	ldr	r2, [pc, #144]	; (80072c4 <chk_lock+0xb4>)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	011b      	lsls	r3, r3, #4
 8007238:	4413      	add	r3, r2
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	429a      	cmp	r2, r3
 8007242:	d116      	bne.n	8007272 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007244:	4a1f      	ldr	r2, [pc, #124]	; (80072c4 <chk_lock+0xb4>)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	011b      	lsls	r3, r3, #4
 800724a:	4413      	add	r3, r2
 800724c:	3304      	adds	r3, #4
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007254:	429a      	cmp	r2, r3
 8007256:	d10c      	bne.n	8007272 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007258:	4a1a      	ldr	r2, [pc, #104]	; (80072c4 <chk_lock+0xb4>)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	011b      	lsls	r3, r3, #4
 800725e:	4413      	add	r3, r2
 8007260:	3308      	adds	r3, #8
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007268:	429a      	cmp	r2, r3
 800726a:	d102      	bne.n	8007272 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800726c:	e007      	b.n	800727e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800726e:	2301      	movs	r3, #1
 8007270:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3301      	adds	r3, #1
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d9d2      	bls.n	8007224 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b02      	cmp	r3, #2
 8007282:	d109      	bne.n	8007298 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d102      	bne.n	8007290 <chk_lock+0x80>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b02      	cmp	r3, #2
 800728e:	d101      	bne.n	8007294 <chk_lock+0x84>
 8007290:	2300      	movs	r3, #0
 8007292:	e010      	b.n	80072b6 <chk_lock+0xa6>
 8007294:	2312      	movs	r3, #18
 8007296:	e00e      	b.n	80072b6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d108      	bne.n	80072b0 <chk_lock+0xa0>
 800729e:	4a09      	ldr	r2, [pc, #36]	; (80072c4 <chk_lock+0xb4>)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	4413      	add	r3, r2
 80072a6:	330c      	adds	r3, #12
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ae:	d101      	bne.n	80072b4 <chk_lock+0xa4>
 80072b0:	2310      	movs	r3, #16
 80072b2:	e000      	b.n	80072b6 <chk_lock+0xa6>
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	20000674 	.word	0x20000674

080072c8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80072ce:	2300      	movs	r3, #0
 80072d0:	607b      	str	r3, [r7, #4]
 80072d2:	e002      	b.n	80072da <enq_lock+0x12>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3301      	adds	r3, #1
 80072d8:	607b      	str	r3, [r7, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d806      	bhi.n	80072ee <enq_lock+0x26>
 80072e0:	4a09      	ldr	r2, [pc, #36]	; (8007308 <enq_lock+0x40>)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	011b      	lsls	r3, r3, #4
 80072e6:	4413      	add	r3, r2
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1f2      	bne.n	80072d4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	bf14      	ite	ne
 80072f4:	2301      	movne	r3, #1
 80072f6:	2300      	moveq	r3, #0
 80072f8:	b2db      	uxtb	r3, r3
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20000674 	.word	0x20000674

0800730c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007316:	2300      	movs	r3, #0
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	e01f      	b.n	800735c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800731c:	4a41      	ldr	r2, [pc, #260]	; (8007424 <inc_lock+0x118>)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	011b      	lsls	r3, r3, #4
 8007322:	4413      	add	r3, r2
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	429a      	cmp	r2, r3
 800732c:	d113      	bne.n	8007356 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800732e:	4a3d      	ldr	r2, [pc, #244]	; (8007424 <inc_lock+0x118>)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	4413      	add	r3, r2
 8007336:	3304      	adds	r3, #4
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800733e:	429a      	cmp	r2, r3
 8007340:	d109      	bne.n	8007356 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007342:	4a38      	ldr	r2, [pc, #224]	; (8007424 <inc_lock+0x118>)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	011b      	lsls	r3, r3, #4
 8007348:	4413      	add	r3, r2
 800734a:	3308      	adds	r3, #8
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007352:	429a      	cmp	r2, r3
 8007354:	d006      	beq.n	8007364 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3301      	adds	r3, #1
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d9dc      	bls.n	800731c <inc_lock+0x10>
 8007362:	e000      	b.n	8007366 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007364:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b02      	cmp	r3, #2
 800736a:	d132      	bne.n	80073d2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800736c:	2300      	movs	r3, #0
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e002      	b.n	8007378 <inc_lock+0x6c>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3301      	adds	r3, #1
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d806      	bhi.n	800738c <inc_lock+0x80>
 800737e:	4a29      	ldr	r2, [pc, #164]	; (8007424 <inc_lock+0x118>)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	4413      	add	r3, r2
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1f2      	bne.n	8007372 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b02      	cmp	r3, #2
 8007390:	d101      	bne.n	8007396 <inc_lock+0x8a>
 8007392:	2300      	movs	r3, #0
 8007394:	e040      	b.n	8007418 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	4922      	ldr	r1, [pc, #136]	; (8007424 <inc_lock+0x118>)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	440b      	add	r3, r1
 80073a2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	491e      	ldr	r1, [pc, #120]	; (8007424 <inc_lock+0x118>)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	440b      	add	r3, r1
 80073b0:	3304      	adds	r3, #4
 80073b2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	695a      	ldr	r2, [r3, #20]
 80073b8:	491a      	ldr	r1, [pc, #104]	; (8007424 <inc_lock+0x118>)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	011b      	lsls	r3, r3, #4
 80073be:	440b      	add	r3, r1
 80073c0:	3308      	adds	r3, #8
 80073c2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80073c4:	4a17      	ldr	r2, [pc, #92]	; (8007424 <inc_lock+0x118>)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	4413      	add	r3, r2
 80073cc:	330c      	adds	r3, #12
 80073ce:	2200      	movs	r2, #0
 80073d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d009      	beq.n	80073ec <inc_lock+0xe0>
 80073d8:	4a12      	ldr	r2, [pc, #72]	; (8007424 <inc_lock+0x118>)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	011b      	lsls	r3, r3, #4
 80073de:	4413      	add	r3, r2
 80073e0:	330c      	adds	r3, #12
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <inc_lock+0xe0>
 80073e8:	2300      	movs	r3, #0
 80073ea:	e015      	b.n	8007418 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d108      	bne.n	8007404 <inc_lock+0xf8>
 80073f2:	4a0c      	ldr	r2, [pc, #48]	; (8007424 <inc_lock+0x118>)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	011b      	lsls	r3, r3, #4
 80073f8:	4413      	add	r3, r2
 80073fa:	330c      	adds	r3, #12
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	3301      	adds	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	e001      	b.n	8007408 <inc_lock+0xfc>
 8007404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007408:	4906      	ldr	r1, [pc, #24]	; (8007424 <inc_lock+0x118>)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	440b      	add	r3, r1
 8007410:	330c      	adds	r3, #12
 8007412:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3301      	adds	r3, #1
}
 8007418:	4618      	mov	r0, r3
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	20000674 	.word	0x20000674

08007428 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3b01      	subs	r3, #1
 8007434:	607b      	str	r3, [r7, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d825      	bhi.n	8007488 <dec_lock+0x60>
		n = Files[i].ctr;
 800743c:	4a17      	ldr	r2, [pc, #92]	; (800749c <dec_lock+0x74>)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	4413      	add	r3, r2
 8007444:	330c      	adds	r3, #12
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800744a:	89fb      	ldrh	r3, [r7, #14]
 800744c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007450:	d101      	bne.n	8007456 <dec_lock+0x2e>
 8007452:	2300      	movs	r3, #0
 8007454:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007456:	89fb      	ldrh	r3, [r7, #14]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <dec_lock+0x3a>
 800745c:	89fb      	ldrh	r3, [r7, #14]
 800745e:	3b01      	subs	r3, #1
 8007460:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007462:	4a0e      	ldr	r2, [pc, #56]	; (800749c <dec_lock+0x74>)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	4413      	add	r3, r2
 800746a:	330c      	adds	r3, #12
 800746c:	89fa      	ldrh	r2, [r7, #14]
 800746e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007470:	89fb      	ldrh	r3, [r7, #14]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d105      	bne.n	8007482 <dec_lock+0x5a>
 8007476:	4a09      	ldr	r2, [pc, #36]	; (800749c <dec_lock+0x74>)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	4413      	add	r3, r2
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	737b      	strb	r3, [r7, #13]
 8007486:	e001      	b.n	800748c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007488:	2302      	movs	r3, #2
 800748a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800748c:	7b7b      	ldrb	r3, [r7, #13]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	20000674 	.word	0x20000674

080074a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	e010      	b.n	80074d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80074ae:	4a0d      	ldr	r2, [pc, #52]	; (80074e4 <clear_lock+0x44>)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	4413      	add	r3, r2
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d105      	bne.n	80074ca <clear_lock+0x2a>
 80074be:	4a09      	ldr	r2, [pc, #36]	; (80074e4 <clear_lock+0x44>)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	4413      	add	r3, r2
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3301      	adds	r3, #1
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d9eb      	bls.n	80074ae <clear_lock+0xe>
	}
}
 80074d6:	bf00      	nop
 80074d8:	bf00      	nop
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	20000674 	.word	0x20000674

080074e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	78db      	ldrb	r3, [r3, #3]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d034      	beq.n	8007566 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007500:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	7858      	ldrb	r0, [r3, #1]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800750c:	2301      	movs	r3, #1
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	f7ff fd40 	bl	8006f94 <disk_write>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <sync_window+0x38>
			res = FR_DISK_ERR;
 800751a:	2301      	movs	r3, #1
 800751c:	73fb      	strb	r3, [r7, #15]
 800751e:	e022      	b.n	8007566 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	1ad2      	subs	r2, r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	429a      	cmp	r2, r3
 8007534:	d217      	bcs.n	8007566 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	789b      	ldrb	r3, [r3, #2]
 800753a:	613b      	str	r3, [r7, #16]
 800753c:	e010      	b.n	8007560 <sync_window+0x78>
					wsect += fs->fsize;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	4413      	add	r3, r2
 8007546:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	7858      	ldrb	r0, [r3, #1]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007552:	2301      	movs	r3, #1
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	f7ff fd1d 	bl	8006f94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	3b01      	subs	r3, #1
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d8eb      	bhi.n	800753e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007566:	7bfb      	ldrb	r3, [r7, #15]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	429a      	cmp	r2, r3
 8007586:	d01b      	beq.n	80075c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff ffad 	bl	80074e8 <sync_window>
 800758e:	4603      	mov	r3, r0
 8007590:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d113      	bne.n	80075c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	7858      	ldrb	r0, [r3, #1]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80075a2:	2301      	movs	r3, #1
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	f7ff fcd5 	bl	8006f54 <disk_read>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d004      	beq.n	80075ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80075b0:	f04f 33ff 	mov.w	r3, #4294967295
 80075b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff ff87 	bl	80074e8 <sync_window>
 80075da:	4603      	mov	r3, r0
 80075dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d159      	bne.n	8007698 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	d149      	bne.n	8007680 <sync_fs+0xb4>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	791b      	ldrb	r3, [r3, #4]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d145      	bne.n	8007680 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	899b      	ldrh	r3, [r3, #12]
 80075fe:	461a      	mov	r2, r3
 8007600:	2100      	movs	r1, #0
 8007602:	f7ff fda8 	bl	8007156 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3338      	adds	r3, #56	; 0x38
 800760a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800760e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007612:	4618      	mov	r0, r3
 8007614:	f7ff fd37 	bl	8007086 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	3338      	adds	r3, #56	; 0x38
 800761c:	4921      	ldr	r1, [pc, #132]	; (80076a4 <sync_fs+0xd8>)
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff fd4c 	bl	80070bc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3338      	adds	r3, #56	; 0x38
 8007628:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800762c:	491e      	ldr	r1, [pc, #120]	; (80076a8 <sync_fs+0xdc>)
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff fd44 	bl	80070bc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	3338      	adds	r3, #56	; 0x38
 8007638:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	4619      	mov	r1, r3
 8007642:	4610      	mov	r0, r2
 8007644:	f7ff fd3a 	bl	80070bc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	3338      	adds	r3, #56	; 0x38
 800764c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	4619      	mov	r1, r3
 8007656:	4610      	mov	r0, r2
 8007658:	f7ff fd30 	bl	80070bc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	7858      	ldrb	r0, [r3, #1]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007674:	2301      	movs	r3, #1
 8007676:	f7ff fc8d 	bl	8006f94 <disk_write>
			fs->fsi_flag = 0;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	785b      	ldrb	r3, [r3, #1]
 8007684:	2200      	movs	r2, #0
 8007686:	2100      	movs	r1, #0
 8007688:	4618      	mov	r0, r3
 800768a:	f7ff fca3 	bl	8006fd4 <disk_ioctl>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <sync_fs+0xcc>
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007698:	7bfb      	ldrb	r3, [r7, #15]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	41615252 	.word	0x41615252
 80076a8:	61417272 	.word	0x61417272

080076ac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	3b02      	subs	r3, #2
 80076ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	3b02      	subs	r3, #2
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d301      	bcc.n	80076cc <clust2sect+0x20>
 80076c8:	2300      	movs	r3, #0
 80076ca:	e008      	b.n	80076de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	895b      	ldrh	r3, [r3, #10]
 80076d0:	461a      	mov	r2, r3
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	fb03 f202 	mul.w	r2, r3, r2
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076dc:	4413      	add	r3, r2
}
 80076de:	4618      	mov	r0, r3
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b086      	sub	sp, #24
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d904      	bls.n	800770a <get_fat+0x20>
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d302      	bcc.n	8007710 <get_fat+0x26>
		val = 1;	/* Internal error */
 800770a:	2301      	movs	r3, #1
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	e0bb      	b.n	8007888 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007710:	f04f 33ff 	mov.w	r3, #4294967295
 8007714:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b03      	cmp	r3, #3
 800771c:	f000 8083 	beq.w	8007826 <get_fat+0x13c>
 8007720:	2b03      	cmp	r3, #3
 8007722:	f300 80a7 	bgt.w	8007874 <get_fat+0x18a>
 8007726:	2b01      	cmp	r3, #1
 8007728:	d002      	beq.n	8007730 <get_fat+0x46>
 800772a:	2b02      	cmp	r3, #2
 800772c:	d056      	beq.n	80077dc <get_fat+0xf2>
 800772e:	e0a1      	b.n	8007874 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	085b      	lsrs	r3, r3, #1
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	4413      	add	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	899b      	ldrh	r3, [r3, #12]
 8007746:	4619      	mov	r1, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	fbb3 f3f1 	udiv	r3, r3, r1
 800774e:	4413      	add	r3, r2
 8007750:	4619      	mov	r1, r3
 8007752:	6938      	ldr	r0, [r7, #16]
 8007754:	f7ff ff0c 	bl	8007570 <move_window>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 808d 	bne.w	800787a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	60fa      	str	r2, [r7, #12]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	8992      	ldrh	r2, [r2, #12]
 800776a:	fbb3 f1f2 	udiv	r1, r3, r2
 800776e:	fb02 f201 	mul.w	r2, r2, r1
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	4413      	add	r3, r2
 8007778:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800777c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	899b      	ldrh	r3, [r3, #12]
 8007786:	4619      	mov	r1, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	fbb3 f3f1 	udiv	r3, r3, r1
 800778e:	4413      	add	r3, r2
 8007790:	4619      	mov	r1, r3
 8007792:	6938      	ldr	r0, [r7, #16]
 8007794:	f7ff feec 	bl	8007570 <move_window>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d16f      	bne.n	800787e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	899b      	ldrh	r3, [r3, #12]
 80077a2:	461a      	mov	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80077aa:	fb02 f201 	mul.w	r2, r2, r1
 80077ae:	1a9b      	subs	r3, r3, r2
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	4413      	add	r3, r2
 80077b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	461a      	mov	r2, r3
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <get_fat+0xe8>
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	091b      	lsrs	r3, r3, #4
 80077d0:	e002      	b.n	80077d8 <get_fat+0xee>
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077d8:	617b      	str	r3, [r7, #20]
			break;
 80077da:	e055      	b.n	8007888 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	899b      	ldrh	r3, [r3, #12]
 80077e4:	085b      	lsrs	r3, r3, #1
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	4619      	mov	r1, r3
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80077f0:	4413      	add	r3, r2
 80077f2:	4619      	mov	r1, r3
 80077f4:	6938      	ldr	r0, [r7, #16]
 80077f6:	f7ff febb 	bl	8007570 <move_window>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d140      	bne.n	8007882 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	8992      	ldrh	r2, [r2, #12]
 800780e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007812:	fb02 f200 	mul.w	r2, r2, r0
 8007816:	1a9b      	subs	r3, r3, r2
 8007818:	440b      	add	r3, r1
 800781a:	4618      	mov	r0, r3
 800781c:	f7ff fbf8 	bl	8007010 <ld_word>
 8007820:	4603      	mov	r3, r0
 8007822:	617b      	str	r3, [r7, #20]
			break;
 8007824:	e030      	b.n	8007888 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	899b      	ldrh	r3, [r3, #12]
 800782e:	089b      	lsrs	r3, r3, #2
 8007830:	b29b      	uxth	r3, r3
 8007832:	4619      	mov	r1, r3
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	fbb3 f3f1 	udiv	r3, r3, r1
 800783a:	4413      	add	r3, r2
 800783c:	4619      	mov	r1, r3
 800783e:	6938      	ldr	r0, [r7, #16]
 8007840:	f7ff fe96 	bl	8007570 <move_window>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d11d      	bne.n	8007886 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	8992      	ldrh	r2, [r2, #12]
 8007858:	fbb3 f0f2 	udiv	r0, r3, r2
 800785c:	fb02 f200 	mul.w	r2, r2, r0
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	440b      	add	r3, r1
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff fbeb 	bl	8007040 <ld_dword>
 800786a:	4603      	mov	r3, r0
 800786c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007870:	617b      	str	r3, [r7, #20]
			break;
 8007872:	e009      	b.n	8007888 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007874:	2301      	movs	r3, #1
 8007876:	617b      	str	r3, [r7, #20]
 8007878:	e006      	b.n	8007888 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800787a:	bf00      	nop
 800787c:	e004      	b.n	8007888 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800787e:	bf00      	nop
 8007880:	e002      	b.n	8007888 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007882:	bf00      	nop
 8007884:	e000      	b.n	8007888 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007886:	bf00      	nop
		}
	}

	return val;
 8007888:	697b      	ldr	r3, [r7, #20]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3718      	adds	r7, #24
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007892:	b590      	push	{r4, r7, lr}
 8007894:	b089      	sub	sp, #36	; 0x24
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800789e:	2302      	movs	r3, #2
 80078a0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	f240 8102 	bls.w	8007aae <put_fat+0x21c>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	f080 80fc 	bcs.w	8007aae <put_fat+0x21c>
		switch (fs->fs_type) {
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	f000 80b6 	beq.w	8007a2c <put_fat+0x19a>
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	f300 80fd 	bgt.w	8007ac0 <put_fat+0x22e>
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d003      	beq.n	80078d2 <put_fat+0x40>
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	f000 8083 	beq.w	80079d6 <put_fat+0x144>
 80078d0:	e0f6      	b.n	8007ac0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	61bb      	str	r3, [r7, #24]
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	085b      	lsrs	r3, r3, #1
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	4413      	add	r3, r2
 80078de:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	899b      	ldrh	r3, [r3, #12]
 80078e8:	4619      	mov	r1, r3
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80078f0:	4413      	add	r3, r2
 80078f2:	4619      	mov	r1, r3
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f7ff fe3b 	bl	8007570 <move_window>
 80078fa:	4603      	mov	r3, r0
 80078fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80078fe:	7ffb      	ldrb	r3, [r7, #31]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f040 80d6 	bne.w	8007ab2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	1c5a      	adds	r2, r3, #1
 8007910:	61ba      	str	r2, [r7, #24]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	8992      	ldrh	r2, [r2, #12]
 8007916:	fbb3 f0f2 	udiv	r0, r3, r2
 800791a:	fb02 f200 	mul.w	r2, r2, r0
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	440b      	add	r3, r1
 8007922:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00d      	beq.n	800794a <put_fat+0xb8>
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	b25b      	sxtb	r3, r3
 8007934:	f003 030f 	and.w	r3, r3, #15
 8007938:	b25a      	sxtb	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	b25b      	sxtb	r3, r3
 8007942:	4313      	orrs	r3, r2
 8007944:	b25b      	sxtb	r3, r3
 8007946:	b2db      	uxtb	r3, r3
 8007948:	e001      	b.n	800794e <put_fat+0xbc>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2201      	movs	r2, #1
 8007956:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	899b      	ldrh	r3, [r3, #12]
 8007960:	4619      	mov	r1, r3
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	fbb3 f3f1 	udiv	r3, r3, r1
 8007968:	4413      	add	r3, r2
 800796a:	4619      	mov	r1, r3
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f7ff fdff 	bl	8007570 <move_window>
 8007972:	4603      	mov	r3, r0
 8007974:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007976:	7ffb      	ldrb	r3, [r7, #31]
 8007978:	2b00      	cmp	r3, #0
 800797a:	f040 809c 	bne.w	8007ab6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	899b      	ldrh	r3, [r3, #12]
 8007988:	461a      	mov	r2, r3
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007990:	fb02 f200 	mul.w	r2, r2, r0
 8007994:	1a9b      	subs	r3, r3, r2
 8007996:	440b      	add	r3, r1
 8007998:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <put_fat+0x11a>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	091b      	lsrs	r3, r3, #4
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	e00e      	b.n	80079ca <put_fat+0x138>
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	b25b      	sxtb	r3, r3
 80079b2:	f023 030f 	bic.w	r3, r3, #15
 80079b6:	b25a      	sxtb	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	0a1b      	lsrs	r3, r3, #8
 80079bc:	b25b      	sxtb	r3, r3
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	b25b      	sxtb	r3, r3
 80079c4:	4313      	orrs	r3, r2
 80079c6:	b25b      	sxtb	r3, r3
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2201      	movs	r2, #1
 80079d2:	70da      	strb	r2, [r3, #3]
			break;
 80079d4:	e074      	b.n	8007ac0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	899b      	ldrh	r3, [r3, #12]
 80079de:	085b      	lsrs	r3, r3, #1
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	4619      	mov	r1, r3
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80079ea:	4413      	add	r3, r2
 80079ec:	4619      	mov	r1, r3
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f7ff fdbe 	bl	8007570 <move_window>
 80079f4:	4603      	mov	r3, r0
 80079f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079f8:	7ffb      	ldrb	r3, [r7, #31]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d15d      	bne.n	8007aba <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	005b      	lsls	r3, r3, #1
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	8992      	ldrh	r2, [r2, #12]
 8007a0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a10:	fb02 f200 	mul.w	r2, r2, r0
 8007a14:	1a9b      	subs	r3, r3, r2
 8007a16:	440b      	add	r3, r1
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	b292      	uxth	r2, r2
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7ff fb31 	bl	8007086 <st_word>
			fs->wflag = 1;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2201      	movs	r2, #1
 8007a28:	70da      	strb	r2, [r3, #3]
			break;
 8007a2a:	e049      	b.n	8007ac0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	899b      	ldrh	r3, [r3, #12]
 8007a34:	089b      	lsrs	r3, r3, #2
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	4619      	mov	r1, r3
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a40:	4413      	add	r3, r2
 8007a42:	4619      	mov	r1, r3
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f7ff fd93 	bl	8007570 <move_window>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a4e:	7ffb      	ldrb	r3, [r7, #31]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d134      	bne.n	8007abe <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	8992      	ldrh	r2, [r2, #12]
 8007a68:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a6c:	fb02 f200 	mul.w	r2, r2, r0
 8007a70:	1a9b      	subs	r3, r3, r2
 8007a72:	440b      	add	r3, r1
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff fae3 	bl	8007040 <ld_dword>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007a80:	4323      	orrs	r3, r4
 8007a82:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	8992      	ldrh	r2, [r2, #12]
 8007a92:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a96:	fb02 f200 	mul.w	r2, r2, r0
 8007a9a:	1a9b      	subs	r3, r3, r2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff fb0b 	bl	80070bc <st_dword>
			fs->wflag = 1;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	70da      	strb	r2, [r3, #3]
			break;
 8007aac:	e008      	b.n	8007ac0 <put_fat+0x22e>
		}
	}
 8007aae:	bf00      	nop
 8007ab0:	e006      	b.n	8007ac0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007ab2:	bf00      	nop
 8007ab4:	e004      	b.n	8007ac0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007ab6:	bf00      	nop
 8007ab8:	e002      	b.n	8007ac0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007aba:	bf00      	nop
 8007abc:	e000      	b.n	8007ac0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007abe:	bf00      	nop
	return res;
 8007ac0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3724      	adds	r7, #36	; 0x24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd90      	pop	{r4, r7, pc}

08007aca <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b088      	sub	sp, #32
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d904      	bls.n	8007af0 <remove_chain+0x26>
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d301      	bcc.n	8007af4 <remove_chain+0x2a>
 8007af0:	2302      	movs	r3, #2
 8007af2:	e04b      	b.n	8007b8c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00c      	beq.n	8007b14 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007afa:	f04f 32ff 	mov.w	r2, #4294967295
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	69b8      	ldr	r0, [r7, #24]
 8007b02:	f7ff fec6 	bl	8007892 <put_fat>
 8007b06:	4603      	mov	r3, r0
 8007b08:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007b0a:	7ffb      	ldrb	r3, [r7, #31]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <remove_chain+0x4a>
 8007b10:	7ffb      	ldrb	r3, [r7, #31]
 8007b12:	e03b      	b.n	8007b8c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007b14:	68b9      	ldr	r1, [r7, #8]
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f7ff fde7 	bl	80076ea <get_fat>
 8007b1c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d031      	beq.n	8007b88 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d101      	bne.n	8007b2e <remove_chain+0x64>
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	e02e      	b.n	8007b8c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b34:	d101      	bne.n	8007b3a <remove_chain+0x70>
 8007b36:	2301      	movs	r3, #1
 8007b38:	e028      	b.n	8007b8c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	69b8      	ldr	r0, [r7, #24]
 8007b40:	f7ff fea7 	bl	8007892 <put_fat>
 8007b44:	4603      	mov	r3, r0
 8007b46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007b48:	7ffb      	ldrb	r3, [r7, #31]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <remove_chain+0x88>
 8007b4e:	7ffb      	ldrb	r3, [r7, #31]
 8007b50:	e01c      	b.n	8007b8c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	699a      	ldr	r2, [r3, #24]
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	3b02      	subs	r3, #2
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d20b      	bcs.n	8007b78 <remove_chain+0xae>
			fs->free_clst++;
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	791b      	ldrb	r3, [r3, #4]
 8007b6e:	f043 0301 	orr.w	r3, r3, #1
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d3c6      	bcc.n	8007b14 <remove_chain+0x4a>
 8007b86:	e000      	b.n	8007b8a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007b88:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3720      	adds	r7, #32
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10d      	bne.n	8007bc6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d004      	beq.n	8007bc0 <create_chain+0x2c>
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d31b      	bcc.n	8007bf8 <create_chain+0x64>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	61bb      	str	r3, [r7, #24]
 8007bc4:	e018      	b.n	8007bf8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff fd8e 	bl	80076ea <get_fat>
 8007bce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d801      	bhi.n	8007bda <create_chain+0x46>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e070      	b.n	8007cbc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be0:	d101      	bne.n	8007be6 <create_chain+0x52>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	e06a      	b.n	8007cbc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d201      	bcs.n	8007bf4 <create_chain+0x60>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	e063      	b.n	8007cbc <create_chain+0x128>
		scl = clst;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	69fa      	ldr	r2, [r7, #28]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d307      	bcc.n	8007c1c <create_chain+0x88>
				ncl = 2;
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007c10:	69fa      	ldr	r2, [r7, #28]
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d901      	bls.n	8007c1c <create_chain+0x88>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	e04f      	b.n	8007cbc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007c1c:	69f9      	ldr	r1, [r7, #28]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff fd63 	bl	80076ea <get_fat>
 8007c24:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00e      	beq.n	8007c4a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d003      	beq.n	8007c3a <create_chain+0xa6>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c38:	d101      	bne.n	8007c3e <create_chain+0xaa>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	e03e      	b.n	8007cbc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d1da      	bne.n	8007bfc <create_chain+0x68>
 8007c46:	2300      	movs	r3, #0
 8007c48:	e038      	b.n	8007cbc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007c4a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c50:	69f9      	ldr	r1, [r7, #28]
 8007c52:	6938      	ldr	r0, [r7, #16]
 8007c54:	f7ff fe1d 	bl	8007892 <put_fat>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d109      	bne.n	8007c76 <create_chain+0xe2>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d006      	beq.n	8007c76 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007c68:	69fa      	ldr	r2, [r7, #28]
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6938      	ldr	r0, [r7, #16]
 8007c6e:	f7ff fe10 	bl	8007892 <put_fat>
 8007c72:	4603      	mov	r3, r0
 8007c74:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d116      	bne.n	8007caa <create_chain+0x116>
		fs->last_clst = ncl;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	69fa      	ldr	r2, [r7, #28]
 8007c80:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	699a      	ldr	r2, [r3, #24]
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	3b02      	subs	r3, #2
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d804      	bhi.n	8007c9a <create_chain+0x106>
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	1e5a      	subs	r2, r3, #1
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	791b      	ldrb	r3, [r3, #4]
 8007c9e:	f043 0301 	orr.w	r3, r3, #1
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	711a      	strb	r2, [r3, #4]
 8007ca8:	e007      	b.n	8007cba <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d102      	bne.n	8007cb6 <create_chain+0x122>
 8007cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb4:	e000      	b.n	8007cb8 <create_chain+0x124>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007cba:	69fb      	ldr	r3, [r7, #28]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3720      	adds	r7, #32
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd8:	3304      	adds	r3, #4
 8007cda:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	899b      	ldrh	r3, [r3, #12]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	8952      	ldrh	r2, [r2, #10]
 8007cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	1d1a      	adds	r2, r3, #4
 8007cf6:	613a      	str	r2, [r7, #16]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <clmt_clust+0x42>
 8007d02:	2300      	movs	r3, #0
 8007d04:	e010      	b.n	8007d28 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d307      	bcc.n	8007d1e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	617b      	str	r3, [r7, #20]
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	3304      	adds	r3, #4
 8007d1a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d1c:	e7e9      	b.n	8007cf2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007d1e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	4413      	add	r3, r2
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d4a:	d204      	bcs.n	8007d56 <dir_sdi+0x22>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	f003 031f 	and.w	r3, r3, #31
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007d56:	2302      	movs	r3, #2
 8007d58:	e071      	b.n	8007e3e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d106      	bne.n	8007d7a <dir_sdi+0x46>
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d902      	bls.n	8007d7a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10c      	bne.n	8007d9a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	8912      	ldrh	r2, [r2, #8]
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d301      	bcc.n	8007d90 <dir_sdi+0x5c>
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	e056      	b.n	8007e3e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	61da      	str	r2, [r3, #28]
 8007d98:	e02d      	b.n	8007df6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	895b      	ldrh	r3, [r3, #10]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	899b      	ldrh	r3, [r3, #12]
 8007da4:	fb03 f302 	mul.w	r3, r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007daa:	e019      	b.n	8007de0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6979      	ldr	r1, [r7, #20]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff fc9a 	bl	80076ea <get_fat>
 8007db6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dbe:	d101      	bne.n	8007dc4 <dir_sdi+0x90>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e03c      	b.n	8007e3e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d904      	bls.n	8007dd4 <dir_sdi+0xa0>
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d301      	bcc.n	8007dd8 <dir_sdi+0xa4>
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	e032      	b.n	8007e3e <dir_sdi+0x10a>
			ofs -= csz;
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d2e1      	bcs.n	8007dac <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007de8:	6979      	ldr	r1, [r7, #20]
 8007dea:	6938      	ldr	r0, [r7, #16]
 8007dec:	f7ff fc5e 	bl	80076ac <clust2sect>
 8007df0:	4602      	mov	r2, r0
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <dir_sdi+0xd4>
 8007e04:	2302      	movs	r3, #2
 8007e06:	e01a      	b.n	8007e3e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	69da      	ldr	r2, [r3, #28]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	899b      	ldrh	r3, [r3, #12]
 8007e10:	4619      	mov	r1, r3
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e18:	441a      	add	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	899b      	ldrh	r3, [r3, #12]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e30:	fb02 f200 	mul.w	r2, r2, r0
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	18ca      	adds	r2, r1, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b086      	sub	sp, #24
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	3320      	adds	r3, #32
 8007e5c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <dir_next+0x28>
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e6c:	d301      	bcc.n	8007e72 <dir_next+0x2c>
 8007e6e:	2304      	movs	r3, #4
 8007e70:	e0bb      	b.n	8007fea <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	899b      	ldrh	r3, [r3, #12]
 8007e76:	461a      	mov	r2, r3
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e7e:	fb02 f201 	mul.w	r2, r2, r1
 8007e82:	1a9b      	subs	r3, r3, r2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f040 809d 	bne.w	8007fc4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10b      	bne.n	8007eb4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	095b      	lsrs	r3, r3, #5
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	8912      	ldrh	r2, [r2, #8]
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	f0c0 808d 	bcc.w	8007fc4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	61da      	str	r2, [r3, #28]
 8007eb0:	2304      	movs	r3, #4
 8007eb2:	e09a      	b.n	8007fea <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	899b      	ldrh	r3, [r3, #12]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	8952      	ldrh	r2, [r2, #10]
 8007ec4:	3a01      	subs	r2, #1
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d17b      	bne.n	8007fc4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	f7ff fc08 	bl	80076ea <get_fat>
 8007eda:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d801      	bhi.n	8007ee6 <dir_next+0xa0>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e081      	b.n	8007fea <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eec:	d101      	bne.n	8007ef2 <dir_next+0xac>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e07b      	b.n	8007fea <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d359      	bcc.n	8007fb0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d104      	bne.n	8007f0c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	61da      	str	r2, [r3, #28]
 8007f08:	2304      	movs	r3, #4
 8007f0a:	e06e      	b.n	8007fea <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	4619      	mov	r1, r3
 8007f14:	4610      	mov	r0, r2
 8007f16:	f7ff fe3d 	bl	8007b94 <create_chain>
 8007f1a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <dir_next+0xe0>
 8007f22:	2307      	movs	r3, #7
 8007f24:	e061      	b.n	8007fea <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d101      	bne.n	8007f30 <dir_next+0xea>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e05c      	b.n	8007fea <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f36:	d101      	bne.n	8007f3c <dir_next+0xf6>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e056      	b.n	8007fea <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f7ff fad3 	bl	80074e8 <sync_window>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <dir_next+0x106>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e04e      	b.n	8007fea <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	899b      	ldrh	r3, [r3, #12]
 8007f56:	461a      	mov	r2, r3
 8007f58:	2100      	movs	r1, #0
 8007f5a:	f7ff f8fc 	bl	8007156 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f5e:	2300      	movs	r3, #0
 8007f60:	613b      	str	r3, [r7, #16]
 8007f62:	6979      	ldr	r1, [r7, #20]
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f7ff fba1 	bl	80076ac <clust2sect>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	635a      	str	r2, [r3, #52]	; 0x34
 8007f70:	e012      	b.n	8007f98 <dir_next+0x152>
						fs->wflag = 1;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2201      	movs	r2, #1
 8007f76:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f7ff fab5 	bl	80074e8 <sync_window>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <dir_next+0x142>
 8007f84:	2301      	movs	r3, #1
 8007f86:	e030      	b.n	8007fea <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	613b      	str	r3, [r7, #16]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f92:	1c5a      	adds	r2, r3, #1
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	635a      	str	r2, [r3, #52]	; 0x34
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	895b      	ldrh	r3, [r3, #10]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d3e6      	bcc.n	8007f72 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	1ad2      	subs	r2, r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007fb6:	6979      	ldr	r1, [r7, #20]
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f7ff fb77 	bl	80076ac <clust2sect>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	899b      	ldrh	r3, [r3, #12]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fdc:	fb02 f200 	mul.w	r2, r2, r0
 8007fe0:	1a9b      	subs	r3, r3, r2
 8007fe2:	18ca      	adds	r2, r1, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b086      	sub	sp, #24
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008002:	2100      	movs	r1, #0
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff fe95 	bl	8007d34 <dir_sdi>
 800800a:	4603      	mov	r3, r0
 800800c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d12b      	bne.n	800806c <dir_alloc+0x7a>
		n = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	69db      	ldr	r3, [r3, #28]
 800801c:	4619      	mov	r1, r3
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f7ff faa6 	bl	8007570 <move_window>
 8008024:	4603      	mov	r3, r0
 8008026:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d11d      	bne.n	800806a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2be5      	cmp	r3, #229	; 0xe5
 8008036:	d004      	beq.n	8008042 <dir_alloc+0x50>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d107      	bne.n	8008052 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	3301      	adds	r3, #1
 8008046:	613b      	str	r3, [r7, #16]
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d102      	bne.n	8008056 <dir_alloc+0x64>
 8008050:	e00c      	b.n	800806c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008052:	2300      	movs	r3, #0
 8008054:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008056:	2101      	movs	r1, #1
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7ff fef4 	bl	8007e46 <dir_next>
 800805e:	4603      	mov	r3, r0
 8008060:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d0d7      	beq.n	8008018 <dir_alloc+0x26>
 8008068:	e000      	b.n	800806c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800806a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800806c:	7dfb      	ldrb	r3, [r7, #23]
 800806e:	2b04      	cmp	r3, #4
 8008070:	d101      	bne.n	8008076 <dir_alloc+0x84>
 8008072:	2307      	movs	r3, #7
 8008074:	75fb      	strb	r3, [r7, #23]
	return res;
 8008076:	7dfb      	ldrb	r3, [r7, #23]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3718      	adds	r7, #24
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	331a      	adds	r3, #26
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe ffbe 	bl	8007010 <ld_word>
 8008094:	4603      	mov	r3, r0
 8008096:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2b03      	cmp	r3, #3
 800809e:	d109      	bne.n	80080b4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	3314      	adds	r3, #20
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fe ffb3 	bl	8007010 <ld_word>
 80080aa:	4603      	mov	r3, r0
 80080ac:	041b      	lsls	r3, r3, #16
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80080b4:	68fb      	ldr	r3, [r7, #12]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	60b9      	str	r1, [r7, #8]
 80080c8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	331a      	adds	r3, #26
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	b292      	uxth	r2, r2
 80080d2:	4611      	mov	r1, r2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fe ffd6 	bl	8007086 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d109      	bne.n	80080f6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	f103 0214 	add.w	r2, r3, #20
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	0c1b      	lsrs	r3, r3, #16
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	4619      	mov	r1, r3
 80080f0:	4610      	mov	r0, r2
 80080f2:	f7fe ffc8 	bl	8007086 <st_word>
	}
}
 80080f6:	bf00      	nop
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008100:	b590      	push	{r4, r7, lr}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	331a      	adds	r3, #26
 800810e:	4618      	mov	r0, r3
 8008110:	f7fe ff7e 	bl	8007010 <ld_word>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <cmp_lfn+0x1e>
 800811a:	2300      	movs	r3, #0
 800811c:	e059      	b.n	80081d2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008126:	1e5a      	subs	r2, r3, #1
 8008128:	4613      	mov	r3, r2
 800812a:	005b      	lsls	r3, r3, #1
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008134:	2301      	movs	r3, #1
 8008136:	81fb      	strh	r3, [r7, #14]
 8008138:	2300      	movs	r3, #0
 800813a:	613b      	str	r3, [r7, #16]
 800813c:	e033      	b.n	80081a6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800813e:	4a27      	ldr	r2, [pc, #156]	; (80081dc <cmp_lfn+0xdc>)
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	4413      	add	r3, r2
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	4413      	add	r3, r2
 800814c:	4618      	mov	r0, r3
 800814e:	f7fe ff5f 	bl	8007010 <ld_word>
 8008152:	4603      	mov	r3, r0
 8008154:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008156:	89fb      	ldrh	r3, [r7, #14]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01a      	beq.n	8008192 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	2bfe      	cmp	r3, #254	; 0xfe
 8008160:	d812      	bhi.n	8008188 <cmp_lfn+0x88>
 8008162:	89bb      	ldrh	r3, [r7, #12]
 8008164:	4618      	mov	r0, r3
 8008166:	f001 fec9 	bl	8009efc <ff_wtoupper>
 800816a:	4603      	mov	r3, r0
 800816c:	461c      	mov	r4, r3
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	617a      	str	r2, [r7, #20]
 8008174:	005b      	lsls	r3, r3, #1
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	4413      	add	r3, r2
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	4618      	mov	r0, r3
 800817e:	f001 febd 	bl	8009efc <ff_wtoupper>
 8008182:	4603      	mov	r3, r0
 8008184:	429c      	cmp	r4, r3
 8008186:	d001      	beq.n	800818c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008188:	2300      	movs	r3, #0
 800818a:	e022      	b.n	80081d2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800818c:	89bb      	ldrh	r3, [r7, #12]
 800818e:	81fb      	strh	r3, [r7, #14]
 8008190:	e006      	b.n	80081a0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008192:	89bb      	ldrh	r3, [r7, #12]
 8008194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008198:	4293      	cmp	r3, r2
 800819a:	d001      	beq.n	80081a0 <cmp_lfn+0xa0>
 800819c:	2300      	movs	r3, #0
 800819e:	e018      	b.n	80081d2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	3301      	adds	r3, #1
 80081a4:	613b      	str	r3, [r7, #16]
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	2b0c      	cmp	r3, #12
 80081aa:	d9c8      	bls.n	800813e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00b      	beq.n	80081d0 <cmp_lfn+0xd0>
 80081b8:	89fb      	ldrh	r3, [r7, #14]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d008      	beq.n	80081d0 <cmp_lfn+0xd0>
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	4413      	add	r3, r2
 80081c6:	881b      	ldrh	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <cmp_lfn+0xd0>
 80081cc:	2300      	movs	r3, #0
 80081ce:	e000      	b.n	80081d2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80081d0:	2301      	movs	r3, #1
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	371c      	adds	r7, #28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd90      	pop	{r4, r7, pc}
 80081da:	bf00      	nop
 80081dc:	0800f15c 	.word	0x0800f15c

080081e0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	4611      	mov	r1, r2
 80081ec:	461a      	mov	r2, r3
 80081ee:	460b      	mov	r3, r1
 80081f0:	71fb      	strb	r3, [r7, #7]
 80081f2:	4613      	mov	r3, r2
 80081f4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	330d      	adds	r3, #13
 80081fa:	79ba      	ldrb	r2, [r7, #6]
 80081fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	330b      	adds	r3, #11
 8008202:	220f      	movs	r2, #15
 8008204:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	330c      	adds	r3, #12
 800820a:	2200      	movs	r2, #0
 800820c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	331a      	adds	r3, #26
 8008212:	2100      	movs	r1, #0
 8008214:	4618      	mov	r0, r3
 8008216:	f7fe ff36 	bl	8007086 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	1e5a      	subs	r2, r3, #1
 800821e:	4613      	mov	r3, r2
 8008220:	005b      	lsls	r3, r3, #1
 8008222:	4413      	add	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800822a:	2300      	movs	r3, #0
 800822c:	82fb      	strh	r3, [r7, #22]
 800822e:	2300      	movs	r3, #0
 8008230:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008232:	8afb      	ldrh	r3, [r7, #22]
 8008234:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008238:	4293      	cmp	r3, r2
 800823a:	d007      	beq.n	800824c <put_lfn+0x6c>
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	61fa      	str	r2, [r7, #28]
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	4413      	add	r3, r2
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800824c:	4a17      	ldr	r2, [pc, #92]	; (80082ac <put_lfn+0xcc>)
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	4413      	add	r3, r2
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	461a      	mov	r2, r3
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	4413      	add	r3, r2
 800825a:	8afa      	ldrh	r2, [r7, #22]
 800825c:	4611      	mov	r1, r2
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe ff11 	bl	8007086 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008264:	8afb      	ldrh	r3, [r7, #22]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d102      	bne.n	8008270 <put_lfn+0x90>
 800826a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800826e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	3301      	adds	r3, #1
 8008274:	61bb      	str	r3, [r7, #24]
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b0c      	cmp	r3, #12
 800827a:	d9da      	bls.n	8008232 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800827c:	8afb      	ldrh	r3, [r7, #22]
 800827e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008282:	4293      	cmp	r3, r2
 8008284:	d006      	beq.n	8008294 <put_lfn+0xb4>
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	4413      	add	r3, r2
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d103      	bne.n	800829c <put_lfn+0xbc>
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800829a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	79fa      	ldrb	r2, [r7, #7]
 80082a0:	701a      	strb	r2, [r3, #0]
}
 80082a2:	bf00      	nop
 80082a4:	3720      	adds	r7, #32
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	0800f15c 	.word	0x0800f15c

080082b0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08c      	sub	sp, #48	; 0x30
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
 80082bc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80082be:	220b      	movs	r2, #11
 80082c0:	68b9      	ldr	r1, [r7, #8]
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7fe ff26 	bl	8007114 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2b05      	cmp	r3, #5
 80082cc:	d92b      	bls.n	8008326 <gen_numname+0x76>
		sr = seq;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80082d2:	e022      	b.n	800831a <gen_numname+0x6a>
			wc = *lfn++;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	1c9a      	adds	r2, r3, #2
 80082d8:	607a      	str	r2, [r7, #4]
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80082de:	2300      	movs	r3, #0
 80082e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80082e2:	e017      	b.n	8008314 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	005a      	lsls	r2, r3, #1
 80082e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	4413      	add	r3, r2
 80082f0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80082f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082f4:	085b      	lsrs	r3, r3, #1
 80082f6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d005      	beq.n	800830e <gen_numname+0x5e>
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008308:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800830c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	3301      	adds	r3, #1
 8008312:	62bb      	str	r3, [r7, #40]	; 0x28
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	2b0f      	cmp	r3, #15
 8008318:	d9e4      	bls.n	80082e4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1d8      	bne.n	80082d4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008326:	2307      	movs	r3, #7
 8008328:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	f003 030f 	and.w	r3, r3, #15
 8008332:	b2db      	uxtb	r3, r3
 8008334:	3330      	adds	r3, #48	; 0x30
 8008336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800833a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800833e:	2b39      	cmp	r3, #57	; 0x39
 8008340:	d904      	bls.n	800834c <gen_numname+0x9c>
 8008342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008346:	3307      	adds	r3, #7
 8008348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800834c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834e:	1e5a      	subs	r2, r3, #1
 8008350:	62ba      	str	r2, [r7, #40]	; 0x28
 8008352:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008356:	4413      	add	r3, r2
 8008358:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800835c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	091b      	lsrs	r3, r3, #4
 8008364:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1de      	bne.n	800832a <gen_numname+0x7a>
	ns[i] = '~';
 800836c:	f107 0214 	add.w	r2, r7, #20
 8008370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008372:	4413      	add	r3, r2
 8008374:	227e      	movs	r2, #126	; 0x7e
 8008376:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008378:	2300      	movs	r3, #0
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
 800837c:	e002      	b.n	8008384 <gen_numname+0xd4>
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	3301      	adds	r3, #1
 8008382:	627b      	str	r3, [r7, #36]	; 0x24
 8008384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	429a      	cmp	r2, r3
 800838a:	d205      	bcs.n	8008398 <gen_numname+0xe8>
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	4413      	add	r3, r2
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b20      	cmp	r3, #32
 8008396:	d1f2      	bne.n	800837e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	2b07      	cmp	r3, #7
 800839c:	d808      	bhi.n	80083b0 <gen_numname+0x100>
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	1c5a      	adds	r2, r3, #1
 80083a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80083a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80083a8:	4413      	add	r3, r2
 80083aa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80083ae:	e000      	b.n	80083b2 <gen_numname+0x102>
 80083b0:	2120      	movs	r1, #32
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	627a      	str	r2, [r7, #36]	; 0x24
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	4413      	add	r3, r2
 80083bc:	460a      	mov	r2, r1
 80083be:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	2b07      	cmp	r3, #7
 80083c4:	d9e8      	bls.n	8008398 <gen_numname+0xe8>
}
 80083c6:	bf00      	nop
 80083c8:	bf00      	nop
 80083ca:	3730      	adds	r7, #48	; 0x30
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80083dc:	230b      	movs	r3, #11
 80083de:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	0852      	lsrs	r2, r2, #1
 80083e6:	01db      	lsls	r3, r3, #7
 80083e8:	4313      	orrs	r3, r2
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	1c59      	adds	r1, r3, #1
 80083f0:	6079      	str	r1, [r7, #4]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	4413      	add	r3, r2
 80083f6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	3b01      	subs	r3, #1
 80083fc:	60bb      	str	r3, [r7, #8]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1ed      	bne.n	80083e0 <sum_sfn+0x10>
	return sum;
 8008404:	7bfb      	ldrb	r3, [r7, #15]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b086      	sub	sp, #24
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008420:	2100      	movs	r1, #0
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7ff fc86 	bl	8007d34 <dir_sdi>
 8008428:	4603      	mov	r3, r0
 800842a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800842c:	7dfb      	ldrb	r3, [r7, #23]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <dir_find+0x24>
 8008432:	7dfb      	ldrb	r3, [r7, #23]
 8008434:	e0a9      	b.n	800858a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008436:	23ff      	movs	r3, #255	; 0xff
 8008438:	753b      	strb	r3, [r7, #20]
 800843a:	7d3b      	ldrb	r3, [r7, #20]
 800843c:	757b      	strb	r3, [r7, #21]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f04f 32ff 	mov.w	r2, #4294967295
 8008444:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	4619      	mov	r1, r3
 800844c:	6938      	ldr	r0, [r7, #16]
 800844e:	f7ff f88f 	bl	8007570 <move_window>
 8008452:	4603      	mov	r3, r0
 8008454:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008456:	7dfb      	ldrb	r3, [r7, #23]
 8008458:	2b00      	cmp	r3, #0
 800845a:	f040 8090 	bne.w	800857e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008466:	7dbb      	ldrb	r3, [r7, #22]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d102      	bne.n	8008472 <dir_find+0x60>
 800846c:	2304      	movs	r3, #4
 800846e:	75fb      	strb	r3, [r7, #23]
 8008470:	e08a      	b.n	8008588 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	330b      	adds	r3, #11
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800847e:	73fb      	strb	r3, [r7, #15]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	7bfa      	ldrb	r2, [r7, #15]
 8008484:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008486:	7dbb      	ldrb	r3, [r7, #22]
 8008488:	2be5      	cmp	r3, #229	; 0xe5
 800848a:	d007      	beq.n	800849c <dir_find+0x8a>
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	f003 0308 	and.w	r3, r3, #8
 8008492:	2b00      	cmp	r3, #0
 8008494:	d009      	beq.n	80084aa <dir_find+0x98>
 8008496:	7bfb      	ldrb	r3, [r7, #15]
 8008498:	2b0f      	cmp	r3, #15
 800849a:	d006      	beq.n	80084aa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800849c:	23ff      	movs	r3, #255	; 0xff
 800849e:	757b      	strb	r3, [r7, #21]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f04f 32ff 	mov.w	r2, #4294967295
 80084a6:	631a      	str	r2, [r3, #48]	; 0x30
 80084a8:	e05e      	b.n	8008568 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	2b0f      	cmp	r3, #15
 80084ae:	d136      	bne.n	800851e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80084b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d154      	bne.n	8008568 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80084be:	7dbb      	ldrb	r3, [r7, #22]
 80084c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00d      	beq.n	80084e4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	7b5b      	ldrb	r3, [r3, #13]
 80084ce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80084d0:	7dbb      	ldrb	r3, [r7, #22]
 80084d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084d6:	75bb      	strb	r3, [r7, #22]
 80084d8:	7dbb      	ldrb	r3, [r7, #22]
 80084da:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	695a      	ldr	r2, [r3, #20]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80084e4:	7dba      	ldrb	r2, [r7, #22]
 80084e6:	7d7b      	ldrb	r3, [r7, #21]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d115      	bne.n	8008518 <dir_find+0x106>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	330d      	adds	r3, #13
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	7d3a      	ldrb	r2, [r7, #20]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d10e      	bne.n	8008518 <dir_find+0x106>
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	691a      	ldr	r2, [r3, #16]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	4619      	mov	r1, r3
 8008504:	4610      	mov	r0, r2
 8008506:	f7ff fdfb 	bl	8008100 <cmp_lfn>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d003      	beq.n	8008518 <dir_find+0x106>
 8008510:	7d7b      	ldrb	r3, [r7, #21]
 8008512:	3b01      	subs	r3, #1
 8008514:	b2db      	uxtb	r3, r3
 8008516:	e000      	b.n	800851a <dir_find+0x108>
 8008518:	23ff      	movs	r3, #255	; 0xff
 800851a:	757b      	strb	r3, [r7, #21]
 800851c:	e024      	b.n	8008568 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800851e:	7d7b      	ldrb	r3, [r7, #21]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d109      	bne.n	8008538 <dir_find+0x126>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	4618      	mov	r0, r3
 800852a:	f7ff ff51 	bl	80083d0 <sum_sfn>
 800852e:	4603      	mov	r3, r0
 8008530:	461a      	mov	r2, r3
 8008532:	7d3b      	ldrb	r3, [r7, #20]
 8008534:	4293      	cmp	r3, r2
 8008536:	d024      	beq.n	8008582 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10a      	bne.n	800855c <dir_find+0x14a>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a18      	ldr	r0, [r3, #32]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3324      	adds	r3, #36	; 0x24
 800854e:	220b      	movs	r2, #11
 8008550:	4619      	mov	r1, r3
 8008552:	f7fe fe1b 	bl	800718c <mem_cmp>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d014      	beq.n	8008586 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800855c:	23ff      	movs	r3, #255	; 0xff
 800855e:	757b      	strb	r3, [r7, #21]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f04f 32ff 	mov.w	r2, #4294967295
 8008566:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008568:	2100      	movs	r1, #0
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff fc6b 	bl	8007e46 <dir_next>
 8008570:	4603      	mov	r3, r0
 8008572:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008574:	7dfb      	ldrb	r3, [r7, #23]
 8008576:	2b00      	cmp	r3, #0
 8008578:	f43f af65 	beq.w	8008446 <dir_find+0x34>
 800857c:	e004      	b.n	8008588 <dir_find+0x176>
		if (res != FR_OK) break;
 800857e:	bf00      	nop
 8008580:	e002      	b.n	8008588 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008582:	bf00      	nop
 8008584:	e000      	b.n	8008588 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008586:	bf00      	nop

	return res;
 8008588:	7dfb      	ldrb	r3, [r7, #23]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08c      	sub	sp, #48	; 0x30
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80085a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <dir_register+0x20>
 80085b0:	2306      	movs	r3, #6
 80085b2:	e0e0      	b.n	8008776 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80085b4:	2300      	movs	r3, #0
 80085b6:	627b      	str	r3, [r7, #36]	; 0x24
 80085b8:	e002      	b.n	80085c0 <dir_register+0x2c>
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	3301      	adds	r3, #1
 80085be:	627b      	str	r3, [r7, #36]	; 0x24
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	691a      	ldr	r2, [r3, #16]
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	005b      	lsls	r3, r3, #1
 80085c8:	4413      	add	r3, r2
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1f4      	bne.n	80085ba <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80085d6:	f107 030c 	add.w	r3, r7, #12
 80085da:	220c      	movs	r2, #12
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fe fd99 	bl	8007114 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d032      	beq.n	8008652 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2240      	movs	r2, #64	; 0x40
 80085f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80085f4:	2301      	movs	r3, #1
 80085f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80085f8:	e016      	b.n	8008628 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	691a      	ldr	r2, [r3, #16]
 8008604:	f107 010c 	add.w	r1, r7, #12
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	f7ff fe51 	bl	80082b0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7ff feff 	bl	8008412 <dir_find>
 8008614:	4603      	mov	r3, r0
 8008616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800861a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800861e:	2b00      	cmp	r3, #0
 8008620:	d106      	bne.n	8008630 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	3301      	adds	r3, #1
 8008626:	62bb      	str	r3, [r7, #40]	; 0x28
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	2b63      	cmp	r3, #99	; 0x63
 800862c:	d9e5      	bls.n	80085fa <dir_register+0x66>
 800862e:	e000      	b.n	8008632 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008630:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	2b64      	cmp	r3, #100	; 0x64
 8008636:	d101      	bne.n	800863c <dir_register+0xa8>
 8008638:	2307      	movs	r3, #7
 800863a:	e09c      	b.n	8008776 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800863c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008640:	2b04      	cmp	r3, #4
 8008642:	d002      	beq.n	800864a <dir_register+0xb6>
 8008644:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008648:	e095      	b.n	8008776 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800864a:	7dfa      	ldrb	r2, [r7, #23]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b00      	cmp	r3, #0
 800865a:	d007      	beq.n	800866c <dir_register+0xd8>
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	330c      	adds	r3, #12
 8008660:	4a47      	ldr	r2, [pc, #284]	; (8008780 <dir_register+0x1ec>)
 8008662:	fba2 2303 	umull	r2, r3, r2, r3
 8008666:	089b      	lsrs	r3, r3, #2
 8008668:	3301      	adds	r3, #1
 800866a:	e000      	b.n	800866e <dir_register+0xda>
 800866c:	2301      	movs	r3, #1
 800866e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008670:	6a39      	ldr	r1, [r7, #32]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7ff fcbd 	bl	8007ff2 <dir_alloc>
 8008678:	4603      	mov	r3, r0
 800867a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800867e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008682:	2b00      	cmp	r3, #0
 8008684:	d148      	bne.n	8008718 <dir_register+0x184>
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	3b01      	subs	r3, #1
 800868a:	623b      	str	r3, [r7, #32]
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d042      	beq.n	8008718 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	695a      	ldr	r2, [r3, #20]
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	015b      	lsls	r3, r3, #5
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff fb48 	bl	8007d34 <dir_sdi>
 80086a4:	4603      	mov	r3, r0
 80086a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80086aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d132      	bne.n	8008718 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	3324      	adds	r3, #36	; 0x24
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff fe8a 	bl	80083d0 <sum_sfn>
 80086bc:	4603      	mov	r3, r0
 80086be:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	4619      	mov	r1, r3
 80086c6:	69f8      	ldr	r0, [r7, #28]
 80086c8:	f7fe ff52 	bl	8007570 <move_window>
 80086cc:	4603      	mov	r3, r0
 80086ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80086d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d11d      	bne.n	8008716 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	6918      	ldr	r0, [r3, #16]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a19      	ldr	r1, [r3, #32]
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	7efb      	ldrb	r3, [r7, #27]
 80086e8:	f7ff fd7a 	bl	80081e0 <put_lfn>
				fs->wflag = 1;
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	2201      	movs	r2, #1
 80086f0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80086f2:	2100      	movs	r1, #0
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7ff fba6 	bl	8007e46 <dir_next>
 80086fa:	4603      	mov	r3, r0
 80086fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008704:	2b00      	cmp	r3, #0
 8008706:	d107      	bne.n	8008718 <dir_register+0x184>
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	3b01      	subs	r3, #1
 800870c:	623b      	str	r3, [r7, #32]
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1d5      	bne.n	80086c0 <dir_register+0x12c>
 8008714:	e000      	b.n	8008718 <dir_register+0x184>
				if (res != FR_OK) break;
 8008716:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008718:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800871c:	2b00      	cmp	r3, #0
 800871e:	d128      	bne.n	8008772 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	4619      	mov	r1, r3
 8008726:	69f8      	ldr	r0, [r7, #28]
 8008728:	f7fe ff22 	bl	8007570 <move_window>
 800872c:	4603      	mov	r3, r0
 800872e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008736:	2b00      	cmp	r3, #0
 8008738:	d11b      	bne.n	8008772 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	2220      	movs	r2, #32
 8008740:	2100      	movs	r1, #0
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe fd07 	bl	8007156 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a18      	ldr	r0, [r3, #32]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	3324      	adds	r3, #36	; 0x24
 8008750:	220b      	movs	r2, #11
 8008752:	4619      	mov	r1, r3
 8008754:	f7fe fcde 	bl	8007114 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	330c      	adds	r3, #12
 8008764:	f002 0218 	and.w	r2, r2, #24
 8008768:	b2d2      	uxtb	r2, r2
 800876a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	2201      	movs	r2, #1
 8008770:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008776:	4618      	mov	r0, r3
 8008778:	3730      	adds	r7, #48	; 0x30
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	4ec4ec4f 	.word	0x4ec4ec4f

08008784 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b08a      	sub	sp, #40	; 0x28
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	613b      	str	r3, [r7, #16]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	2300      	movs	r3, #0
 800879e:	617b      	str	r3, [r7, #20]
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	61ba      	str	r2, [r7, #24]
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	4413      	add	r3, r2
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80087b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087b4:	2b1f      	cmp	r3, #31
 80087b6:	d940      	bls.n	800883a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80087b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087ba:	2b2f      	cmp	r3, #47	; 0x2f
 80087bc:	d006      	beq.n	80087cc <create_name+0x48>
 80087be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087c0:	2b5c      	cmp	r3, #92	; 0x5c
 80087c2:	d110      	bne.n	80087e6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80087c4:	e002      	b.n	80087cc <create_name+0x48>
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	3301      	adds	r3, #1
 80087ca:	61bb      	str	r3, [r7, #24]
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	4413      	add	r3, r2
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b2f      	cmp	r3, #47	; 0x2f
 80087d6:	d0f6      	beq.n	80087c6 <create_name+0x42>
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	4413      	add	r3, r2
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2b5c      	cmp	r3, #92	; 0x5c
 80087e2:	d0f0      	beq.n	80087c6 <create_name+0x42>
			break;
 80087e4:	e02a      	b.n	800883c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2bfe      	cmp	r3, #254	; 0xfe
 80087ea:	d901      	bls.n	80087f0 <create_name+0x6c>
 80087ec:	2306      	movs	r3, #6
 80087ee:	e177      	b.n	8008ae0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80087f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80087f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087f8:	2101      	movs	r1, #1
 80087fa:	4618      	mov	r0, r3
 80087fc:	f001 fb42 	bl	8009e84 <ff_convert>
 8008800:	4603      	mov	r3, r0
 8008802:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <create_name+0x8a>
 800880a:	2306      	movs	r3, #6
 800880c:	e168      	b.n	8008ae0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800880e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008810:	2b7f      	cmp	r3, #127	; 0x7f
 8008812:	d809      	bhi.n	8008828 <create_name+0xa4>
 8008814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008816:	4619      	mov	r1, r3
 8008818:	48b3      	ldr	r0, [pc, #716]	; (8008ae8 <create_name+0x364>)
 800881a:	f7fe fcde 	bl	80071da <chk_chr>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <create_name+0xa4>
 8008824:	2306      	movs	r3, #6
 8008826:	e15b      	b.n	8008ae0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	617a      	str	r2, [r7, #20]
 800882e:	005b      	lsls	r3, r3, #1
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	4413      	add	r3, r2
 8008834:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008836:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008838:	e7b4      	b.n	80087a4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800883a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	441a      	add	r2, r3
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008848:	2b1f      	cmp	r3, #31
 800884a:	d801      	bhi.n	8008850 <create_name+0xcc>
 800884c:	2304      	movs	r3, #4
 800884e:	e000      	b.n	8008852 <create_name+0xce>
 8008850:	2300      	movs	r3, #0
 8008852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008856:	e011      	b.n	800887c <create_name+0xf8>
		w = lfn[di - 1];
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800885e:	3b01      	subs	r3, #1
 8008860:	005b      	lsls	r3, r3, #1
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	4413      	add	r3, r2
 8008866:	881b      	ldrh	r3, [r3, #0]
 8008868:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800886a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800886c:	2b20      	cmp	r3, #32
 800886e:	d002      	beq.n	8008876 <create_name+0xf2>
 8008870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008872:	2b2e      	cmp	r3, #46	; 0x2e
 8008874:	d106      	bne.n	8008884 <create_name+0x100>
		di--;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	3b01      	subs	r3, #1
 800887a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1ea      	bne.n	8008858 <create_name+0xd4>
 8008882:	e000      	b.n	8008886 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008884:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	4413      	add	r3, r2
 800888e:	2200      	movs	r2, #0
 8008890:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <create_name+0x118>
 8008898:	2306      	movs	r3, #6
 800889a:	e121      	b.n	8008ae0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3324      	adds	r3, #36	; 0x24
 80088a0:	220b      	movs	r2, #11
 80088a2:	2120      	movs	r1, #32
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fe fc56 	bl	8007156 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80088aa:	2300      	movs	r3, #0
 80088ac:	61bb      	str	r3, [r7, #24]
 80088ae:	e002      	b.n	80088b6 <create_name+0x132>
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	3301      	adds	r3, #1
 80088b4:	61bb      	str	r3, [r7, #24]
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	4413      	add	r3, r2
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	2b20      	cmp	r3, #32
 80088c2:	d0f5      	beq.n	80088b0 <create_name+0x12c>
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	005b      	lsls	r3, r3, #1
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	4413      	add	r3, r2
 80088cc:	881b      	ldrh	r3, [r3, #0]
 80088ce:	2b2e      	cmp	r3, #46	; 0x2e
 80088d0:	d0ee      	beq.n	80088b0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d009      	beq.n	80088ec <create_name+0x168>
 80088d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088dc:	f043 0303 	orr.w	r3, r3, #3
 80088e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80088e4:	e002      	b.n	80088ec <create_name+0x168>
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	3b01      	subs	r3, #1
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d009      	beq.n	8008906 <create_name+0x182>
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80088f8:	3b01      	subs	r3, #1
 80088fa:	005b      	lsls	r3, r3, #1
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4413      	add	r3, r2
 8008900:	881b      	ldrh	r3, [r3, #0]
 8008902:	2b2e      	cmp	r3, #46	; 0x2e
 8008904:	d1ef      	bne.n	80088e6 <create_name+0x162>

	i = b = 0; ni = 8;
 8008906:	2300      	movs	r3, #0
 8008908:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800890c:	2300      	movs	r3, #0
 800890e:	623b      	str	r3, [r7, #32]
 8008910:	2308      	movs	r3, #8
 8008912:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	1c5a      	adds	r2, r3, #1
 8008918:	61ba      	str	r2, [r7, #24]
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	4413      	add	r3, r2
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 8090 	beq.w	8008a4c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800892c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800892e:	2b20      	cmp	r3, #32
 8008930:	d006      	beq.n	8008940 <create_name+0x1bc>
 8008932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008934:	2b2e      	cmp	r3, #46	; 0x2e
 8008936:	d10a      	bne.n	800894e <create_name+0x1ca>
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	429a      	cmp	r2, r3
 800893e:	d006      	beq.n	800894e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008944:	f043 0303 	orr.w	r3, r3, #3
 8008948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800894c:	e07d      	b.n	8008a4a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800894e:	6a3a      	ldr	r2, [r7, #32]
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	429a      	cmp	r2, r3
 8008954:	d203      	bcs.n	800895e <create_name+0x1da>
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	429a      	cmp	r2, r3
 800895c:	d123      	bne.n	80089a6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	2b0b      	cmp	r3, #11
 8008962:	d106      	bne.n	8008972 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008968:	f043 0303 	orr.w	r3, r3, #3
 800896c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008970:	e06f      	b.n	8008a52 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008972:	69ba      	ldr	r2, [r7, #24]
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	429a      	cmp	r2, r3
 8008978:	d005      	beq.n	8008986 <create_name+0x202>
 800897a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800897e:	f043 0303 	orr.w	r3, r3, #3
 8008982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008986:	69ba      	ldr	r2, [r7, #24]
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	429a      	cmp	r2, r3
 800898c:	d860      	bhi.n	8008a50 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	61bb      	str	r3, [r7, #24]
 8008992:	2308      	movs	r3, #8
 8008994:	623b      	str	r3, [r7, #32]
 8008996:	230b      	movs	r3, #11
 8008998:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800899a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80089a4:	e051      	b.n	8008a4a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80089a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089a8:	2b7f      	cmp	r3, #127	; 0x7f
 80089aa:	d914      	bls.n	80089d6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80089ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089ae:	2100      	movs	r1, #0
 80089b0:	4618      	mov	r0, r3
 80089b2:	f001 fa67 	bl	8009e84 <ff_convert>
 80089b6:	4603      	mov	r3, r0
 80089b8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80089ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d004      	beq.n	80089ca <create_name+0x246>
 80089c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089c2:	3b80      	subs	r3, #128	; 0x80
 80089c4:	4a49      	ldr	r2, [pc, #292]	; (8008aec <create_name+0x368>)
 80089c6:	5cd3      	ldrb	r3, [r2, r3]
 80089c8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80089ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089ce:	f043 0302 	orr.w	r3, r3, #2
 80089d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80089d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d007      	beq.n	80089ec <create_name+0x268>
 80089dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089de:	4619      	mov	r1, r3
 80089e0:	4843      	ldr	r0, [pc, #268]	; (8008af0 <create_name+0x36c>)
 80089e2:	f7fe fbfa 	bl	80071da <chk_chr>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d008      	beq.n	80089fe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80089ec:	235f      	movs	r3, #95	; 0x5f
 80089ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 80089f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089f4:	f043 0303 	orr.w	r3, r3, #3
 80089f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80089fc:	e01b      	b.n	8008a36 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80089fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a00:	2b40      	cmp	r3, #64	; 0x40
 8008a02:	d909      	bls.n	8008a18 <create_name+0x294>
 8008a04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a06:	2b5a      	cmp	r3, #90	; 0x5a
 8008a08:	d806      	bhi.n	8008a18 <create_name+0x294>
					b |= 2;
 8008a0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a0e:	f043 0302 	orr.w	r3, r3, #2
 8008a12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008a16:	e00e      	b.n	8008a36 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008a18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a1a:	2b60      	cmp	r3, #96	; 0x60
 8008a1c:	d90b      	bls.n	8008a36 <create_name+0x2b2>
 8008a1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a20:	2b7a      	cmp	r3, #122	; 0x7a
 8008a22:	d808      	bhi.n	8008a36 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008a24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a28:	f043 0301 	orr.w	r3, r3, #1
 8008a2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008a30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a32:	3b20      	subs	r3, #32
 8008a34:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	623a      	str	r2, [r7, #32]
 8008a3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008a3e:	b2d1      	uxtb	r1, r2
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	4413      	add	r3, r2
 8008a44:	460a      	mov	r2, r1
 8008a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008a4a:	e763      	b.n	8008914 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008a4c:	bf00      	nop
 8008a4e:	e000      	b.n	8008a52 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8008a50:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a58:	2be5      	cmp	r3, #229	; 0xe5
 8008a5a:	d103      	bne.n	8008a64 <create_name+0x2e0>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2205      	movs	r2, #5
 8008a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	2b08      	cmp	r3, #8
 8008a68:	d104      	bne.n	8008a74 <create_name+0x2f0>
 8008a6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008a74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a78:	f003 030c 	and.w	r3, r3, #12
 8008a7c:	2b0c      	cmp	r3, #12
 8008a7e:	d005      	beq.n	8008a8c <create_name+0x308>
 8008a80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a84:	f003 0303 	and.w	r3, r3, #3
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d105      	bne.n	8008a98 <create_name+0x314>
 8008a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a90:	f043 0302 	orr.w	r3, r3, #2
 8008a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d117      	bne.n	8008ad4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008aa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008aa8:	f003 0303 	and.w	r3, r3, #3
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d105      	bne.n	8008abc <create_name+0x338>
 8008ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ab4:	f043 0310 	orr.w	r3, r3, #16
 8008ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008abc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ac0:	f003 030c 	and.w	r3, r3, #12
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	d105      	bne.n	8008ad4 <create_name+0x350>
 8008ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008acc:	f043 0308 	orr.w	r3, r3, #8
 8008ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008ada:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8008ade:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3728      	adds	r7, #40	; 0x28
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	0800f074 	.word	0x0800f074
 8008aec:	0800f0dc 	.word	0x0800f0dc
 8008af0:	0800f080 	.word	0x0800f080

08008af4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008b08:	e002      	b.n	8008b10 <follow_path+0x1c>
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	603b      	str	r3, [r7, #0]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b2f      	cmp	r3, #47	; 0x2f
 8008b16:	d0f8      	beq.n	8008b0a <follow_path+0x16>
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	2b5c      	cmp	r3, #92	; 0x5c
 8008b1e:	d0f4      	beq.n	8008b0a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	2200      	movs	r2, #0
 8008b24:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	2b1f      	cmp	r3, #31
 8008b2c:	d80a      	bhi.n	8008b44 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2280      	movs	r2, #128	; 0x80
 8008b32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008b36:	2100      	movs	r1, #0
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7ff f8fb 	bl	8007d34 <dir_sdi>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	75fb      	strb	r3, [r7, #23]
 8008b42:	e048      	b.n	8008bd6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008b44:	463b      	mov	r3, r7
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff fe1b 	bl	8008784 <create_name>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d139      	bne.n	8008bcc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff fc5a 	bl	8008412 <dir_find>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b68:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00a      	beq.n	8008b86 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d12c      	bne.n	8008bd0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008b76:	7afb      	ldrb	r3, [r7, #11]
 8008b78:	f003 0304 	and.w	r3, r3, #4
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d127      	bne.n	8008bd0 <follow_path+0xdc>
 8008b80:	2305      	movs	r3, #5
 8008b82:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008b84:	e024      	b.n	8008bd0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008b86:	7afb      	ldrb	r3, [r7, #11]
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d121      	bne.n	8008bd4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	799b      	ldrb	r3, [r3, #6]
 8008b94:	f003 0310 	and.w	r3, r3, #16
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d102      	bne.n	8008ba2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008b9c:	2305      	movs	r3, #5
 8008b9e:	75fb      	strb	r3, [r7, #23]
 8008ba0:	e019      	b.n	8008bd6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	8992      	ldrh	r2, [r2, #12]
 8008bb0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bb4:	fb02 f200 	mul.w	r2, r2, r0
 8008bb8:	1a9b      	subs	r3, r3, r2
 8008bba:	440b      	add	r3, r1
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f7ff fa5e 	bl	8008080 <ld_clust>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008bca:	e7bb      	b.n	8008b44 <follow_path+0x50>
			if (res != FR_OK) break;
 8008bcc:	bf00      	nop
 8008bce:	e002      	b.n	8008bd6 <follow_path+0xe2>
				break;
 8008bd0:	bf00      	nop
 8008bd2:	e000      	b.n	8008bd6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008bd4:	bf00      	nop
			}
		}
	}

	return res;
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3718      	adds	r7, #24
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008be8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bec:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d031      	beq.n	8008c5a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	e002      	b.n	8008c04 <get_ldnumber+0x24>
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	3301      	adds	r3, #1
 8008c02:	617b      	str	r3, [r7, #20]
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2b1f      	cmp	r3, #31
 8008c0a:	d903      	bls.n	8008c14 <get_ldnumber+0x34>
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	2b3a      	cmp	r3, #58	; 0x3a
 8008c12:	d1f4      	bne.n	8008bfe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2b3a      	cmp	r3, #58	; 0x3a
 8008c1a:	d11c      	bne.n	8008c56 <get_ldnumber+0x76>
			tp = *path;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	1c5a      	adds	r2, r3, #1
 8008c26:	60fa      	str	r2, [r7, #12]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	3b30      	subs	r3, #48	; 0x30
 8008c2c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2b09      	cmp	r3, #9
 8008c32:	d80e      	bhi.n	8008c52 <get_ldnumber+0x72>
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d10a      	bne.n	8008c52 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d107      	bne.n	8008c52 <get_ldnumber+0x72>
					vol = (int)i;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	617b      	str	r3, [r7, #20]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	e002      	b.n	8008c5c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008c56:	2300      	movs	r3, #0
 8008c58:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008c5a:	693b      	ldr	r3, [r7, #16]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	371c      	adds	r7, #28
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	70da      	strb	r2, [r3, #3]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c7e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7fe fc74 	bl	8007570 <move_window>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <check_fs+0x2a>
 8008c8e:	2304      	movs	r3, #4
 8008c90:	e038      	b.n	8008d04 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	3338      	adds	r3, #56	; 0x38
 8008c96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fe f9b8 	bl	8007010 <ld_word>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d001      	beq.n	8008cb0 <check_fs+0x48>
 8008cac:	2303      	movs	r3, #3
 8008cae:	e029      	b.n	8008d04 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008cb6:	2be9      	cmp	r3, #233	; 0xe9
 8008cb8:	d009      	beq.n	8008cce <check_fs+0x66>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008cc0:	2beb      	cmp	r3, #235	; 0xeb
 8008cc2:	d11e      	bne.n	8008d02 <check_fs+0x9a>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008cca:	2b90      	cmp	r3, #144	; 0x90
 8008ccc:	d119      	bne.n	8008d02 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	3338      	adds	r3, #56	; 0x38
 8008cd2:	3336      	adds	r3, #54	; 0x36
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fe f9b3 	bl	8007040 <ld_dword>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008ce0:	4a0a      	ldr	r2, [pc, #40]	; (8008d0c <check_fs+0xa4>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d101      	bne.n	8008cea <check_fs+0x82>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	e00c      	b.n	8008d04 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3338      	adds	r3, #56	; 0x38
 8008cee:	3352      	adds	r3, #82	; 0x52
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7fe f9a5 	bl	8007040 <ld_dword>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	4a05      	ldr	r2, [pc, #20]	; (8008d10 <check_fs+0xa8>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d101      	bne.n	8008d02 <check_fs+0x9a>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	e000      	b.n	8008d04 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008d02:	2302      	movs	r3, #2
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	00544146 	.word	0x00544146
 8008d10:	33544146 	.word	0x33544146

08008d14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b096      	sub	sp, #88	; 0x58
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f7ff ff59 	bl	8008be0 <get_ldnumber>
 8008d2e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	da01      	bge.n	8008d3a <find_volume+0x26>
 8008d36:	230b      	movs	r3, #11
 8008d38:	e268      	b.n	800920c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008d3a:	4ab0      	ldr	r2, [pc, #704]	; (8008ffc <find_volume+0x2e8>)
 8008d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d42:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <find_volume+0x3a>
 8008d4a:	230c      	movs	r3, #12
 8008d4c:	e25e      	b.n	800920c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d52:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008d54:	79fb      	ldrb	r3, [r7, #7]
 8008d56:	f023 0301 	bic.w	r3, r3, #1
 8008d5a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d01a      	beq.n	8008d9a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	785b      	ldrb	r3, [r3, #1]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fe f8b3 	bl	8006ed4 <disk_status>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008d74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d78:	f003 0301 	and.w	r3, r3, #1
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10c      	bne.n	8008d9a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008d80:	79fb      	ldrb	r3, [r7, #7]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d007      	beq.n	8008d96 <find_volume+0x82>
 8008d86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d8a:	f003 0304 	and.w	r3, r3, #4
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008d92:	230a      	movs	r3, #10
 8008d94:	e23a      	b.n	800920c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8008d96:	2300      	movs	r3, #0
 8008d98:	e238      	b.n	800920c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008daa:	785b      	ldrb	r3, [r3, #1]
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fe f8ab 	bl	8006f08 <disk_initialize>
 8008db2:	4603      	mov	r3, r0
 8008db4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008db8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008dbc:	f003 0301 	and.w	r3, r3, #1
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e221      	b.n	800920c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d007      	beq.n	8008dde <find_volume+0xca>
 8008dce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008dd2:	f003 0304 	and.w	r3, r3, #4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008dda:	230a      	movs	r3, #10
 8008ddc:	e216      	b.n	800920c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	7858      	ldrb	r0, [r3, #1]
 8008de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de4:	330c      	adds	r3, #12
 8008de6:	461a      	mov	r2, r3
 8008de8:	2102      	movs	r1, #2
 8008dea:	f7fe f8f3 	bl	8006fd4 <disk_ioctl>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <find_volume+0xe4>
 8008df4:	2301      	movs	r3, #1
 8008df6:	e209      	b.n	800920c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	899b      	ldrh	r3, [r3, #12]
 8008dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e00:	d80d      	bhi.n	8008e1e <find_volume+0x10a>
 8008e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e04:	899b      	ldrh	r3, [r3, #12]
 8008e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e0a:	d308      	bcc.n	8008e1e <find_volume+0x10a>
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0e:	899b      	ldrh	r3, [r3, #12]
 8008e10:	461a      	mov	r2, r3
 8008e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e14:	899b      	ldrh	r3, [r3, #12]
 8008e16:	3b01      	subs	r3, #1
 8008e18:	4013      	ands	r3, r2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <find_volume+0x10e>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e1f4      	b.n	800920c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008e26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e2a:	f7ff ff1d 	bl	8008c68 <check_fs>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008e34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d14b      	bne.n	8008ed4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	643b      	str	r3, [r7, #64]	; 0x40
 8008e40:	e01f      	b.n	8008e82 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e44:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e4a:	011b      	lsls	r3, r3, #4
 8008e4c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008e50:	4413      	add	r3, r2
 8008e52:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e56:	3304      	adds	r3, #4
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d006      	beq.n	8008e6c <find_volume+0x158>
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	3308      	adds	r3, #8
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fe f8ec 	bl	8007040 <ld_dword>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	e000      	b.n	8008e6e <find_volume+0x15a>
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008e76:	440b      	add	r3, r1
 8008e78:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e7e:	3301      	adds	r3, #1
 8008e80:	643b      	str	r3, [r7, #64]	; 0x40
 8008e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e84:	2b03      	cmp	r3, #3
 8008e86:	d9dc      	bls.n	8008e42 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008e88:	2300      	movs	r3, #0
 8008e8a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d002      	beq.n	8008e98 <find_volume+0x184>
 8008e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e94:	3b01      	subs	r3, #1
 8008e96:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008ea6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d005      	beq.n	8008eba <find_volume+0x1a6>
 8008eae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008eb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008eb2:	f7ff fed9 	bl	8008c68 <check_fs>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	e000      	b.n	8008ebc <find_volume+0x1a8>
 8008eba:	2303      	movs	r3, #3
 8008ebc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008ec0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d905      	bls.n	8008ed4 <find_volume+0x1c0>
 8008ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eca:	3301      	adds	r3, #1
 8008ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8008ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d9e1      	bls.n	8008e98 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008ed4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	d101      	bne.n	8008ee0 <find_volume+0x1cc>
 8008edc:	2301      	movs	r3, #1
 8008ede:	e195      	b.n	800920c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008ee0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d901      	bls.n	8008eec <find_volume+0x1d8>
 8008ee8:	230d      	movs	r3, #13
 8008eea:	e18f      	b.n	800920c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eee:	3338      	adds	r3, #56	; 0x38
 8008ef0:	330b      	adds	r3, #11
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fe f88c 	bl	8007010 <ld_word>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	461a      	mov	r2, r3
 8008efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efe:	899b      	ldrh	r3, [r3, #12]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d001      	beq.n	8008f08 <find_volume+0x1f4>
 8008f04:	230d      	movs	r3, #13
 8008f06:	e181      	b.n	800920c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0a:	3338      	adds	r3, #56	; 0x38
 8008f0c:	3316      	adds	r3, #22
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe f87e 	bl	8007010 <ld_word>
 8008f14:	4603      	mov	r3, r0
 8008f16:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d106      	bne.n	8008f2c <find_volume+0x218>
 8008f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f20:	3338      	adds	r3, #56	; 0x38
 8008f22:	3324      	adds	r3, #36	; 0x24
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fe f88b 	bl	8007040 <ld_dword>
 8008f2a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f30:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f34:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8008f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3e:	789b      	ldrb	r3, [r3, #2]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d005      	beq.n	8008f50 <find_volume+0x23c>
 8008f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f46:	789b      	ldrb	r3, [r3, #2]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d001      	beq.n	8008f50 <find_volume+0x23c>
 8008f4c:	230d      	movs	r3, #13
 8008f4e:	e15d      	b.n	800920c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f52:	789b      	ldrb	r3, [r3, #2]
 8008f54:	461a      	mov	r2, r3
 8008f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f58:	fb02 f303 	mul.w	r3, r2, r3
 8008f5c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f68:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6c:	895b      	ldrh	r3, [r3, #10]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d008      	beq.n	8008f84 <find_volume+0x270>
 8008f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f74:	895b      	ldrh	r3, [r3, #10]
 8008f76:	461a      	mov	r2, r3
 8008f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7a:	895b      	ldrh	r3, [r3, #10]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	4013      	ands	r3, r2
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <find_volume+0x274>
 8008f84:	230d      	movs	r3, #13
 8008f86:	e141      	b.n	800920c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8a:	3338      	adds	r3, #56	; 0x38
 8008f8c:	3311      	adds	r3, #17
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe f83e 	bl	8007010 <ld_word>
 8008f94:	4603      	mov	r3, r0
 8008f96:	461a      	mov	r2, r3
 8008f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9e:	891b      	ldrh	r3, [r3, #8]
 8008fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fa2:	8992      	ldrh	r2, [r2, #12]
 8008fa4:	0952      	lsrs	r2, r2, #5
 8008fa6:	b292      	uxth	r2, r2
 8008fa8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fac:	fb02 f201 	mul.w	r2, r2, r1
 8008fb0:	1a9b      	subs	r3, r3, r2
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <find_volume+0x2a8>
 8008fb8:	230d      	movs	r3, #13
 8008fba:	e127      	b.n	800920c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	3338      	adds	r3, #56	; 0x38
 8008fc0:	3313      	adds	r3, #19
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fe f824 	bl	8007010 <ld_word>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d106      	bne.n	8008fe0 <find_volume+0x2cc>
 8008fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd4:	3338      	adds	r3, #56	; 0x38
 8008fd6:	3320      	adds	r3, #32
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe f831 	bl	8007040 <ld_dword>
 8008fde:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe2:	3338      	adds	r3, #56	; 0x38
 8008fe4:	330e      	adds	r3, #14
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe f812 	bl	8007010 <ld_word>
 8008fec:	4603      	mov	r3, r0
 8008fee:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008ff0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d104      	bne.n	8009000 <find_volume+0x2ec>
 8008ff6:	230d      	movs	r3, #13
 8008ff8:	e108      	b.n	800920c <find_volume+0x4f8>
 8008ffa:	bf00      	nop
 8008ffc:	2000066c 	.word	0x2000066c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009000:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009004:	4413      	add	r3, r2
 8009006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009008:	8911      	ldrh	r1, [r2, #8]
 800900a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800900c:	8992      	ldrh	r2, [r2, #12]
 800900e:	0952      	lsrs	r2, r2, #5
 8009010:	b292      	uxth	r2, r2
 8009012:	fbb1 f2f2 	udiv	r2, r1, r2
 8009016:	b292      	uxth	r2, r2
 8009018:	4413      	add	r3, r2
 800901a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800901c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800901e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009020:	429a      	cmp	r2, r3
 8009022:	d201      	bcs.n	8009028 <find_volume+0x314>
 8009024:	230d      	movs	r3, #13
 8009026:	e0f1      	b.n	800920c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800902a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009030:	8952      	ldrh	r2, [r2, #10]
 8009032:	fbb3 f3f2 	udiv	r3, r3, r2
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	2b00      	cmp	r3, #0
 800903c:	d101      	bne.n	8009042 <find_volume+0x32e>
 800903e:	230d      	movs	r3, #13
 8009040:	e0e4      	b.n	800920c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8009042:	2303      	movs	r3, #3
 8009044:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800904e:	4293      	cmp	r3, r2
 8009050:	d802      	bhi.n	8009058 <find_volume+0x344>
 8009052:	2302      	movs	r3, #2
 8009054:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800905e:	4293      	cmp	r3, r2
 8009060:	d802      	bhi.n	8009068 <find_volume+0x354>
 8009062:	2301      	movs	r3, #1
 8009064:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906a:	1c9a      	adds	r2, r3, #2
 800906c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009074:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009076:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800907a:	441a      	add	r2, r3
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009080:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009084:	441a      	add	r2, r3
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800908a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800908e:	2b03      	cmp	r3, #3
 8009090:	d11e      	bne.n	80090d0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	3338      	adds	r3, #56	; 0x38
 8009096:	332a      	adds	r3, #42	; 0x2a
 8009098:	4618      	mov	r0, r3
 800909a:	f7fd ffb9 	bl	8007010 <ld_word>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <find_volume+0x394>
 80090a4:	230d      	movs	r3, #13
 80090a6:	e0b1      	b.n	800920c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80090a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090aa:	891b      	ldrh	r3, [r3, #8]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <find_volume+0x3a0>
 80090b0:	230d      	movs	r3, #13
 80090b2:	e0ab      	b.n	800920c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80090b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b6:	3338      	adds	r3, #56	; 0x38
 80090b8:	332c      	adds	r3, #44	; 0x2c
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fd ffc0 	bl	8007040 <ld_dword>
 80090c0:	4602      	mov	r2, r0
 80090c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80090c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	647b      	str	r3, [r7, #68]	; 0x44
 80090ce:	e01f      	b.n	8009110 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d2:	891b      	ldrh	r3, [r3, #8]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <find_volume+0x3c8>
 80090d8:	230d      	movs	r3, #13
 80090da:	e097      	b.n	800920c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80090dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090e2:	441a      	add	r2, r3
 80090e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80090e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d103      	bne.n	80090f8 <find_volume+0x3e4>
 80090f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	005b      	lsls	r3, r3, #1
 80090f6:	e00a      	b.n	800910e <find_volume+0x3fa>
 80090f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fa:	69da      	ldr	r2, [r3, #28]
 80090fc:	4613      	mov	r3, r2
 80090fe:	005b      	lsls	r3, r3, #1
 8009100:	4413      	add	r3, r2
 8009102:	085a      	lsrs	r2, r3, #1
 8009104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800910e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009112:	6a1a      	ldr	r2, [r3, #32]
 8009114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009116:	899b      	ldrh	r3, [r3, #12]
 8009118:	4619      	mov	r1, r3
 800911a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800911c:	440b      	add	r3, r1
 800911e:	3b01      	subs	r3, #1
 8009120:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009122:	8989      	ldrh	r1, [r1, #12]
 8009124:	fbb3 f3f1 	udiv	r3, r3, r1
 8009128:	429a      	cmp	r2, r3
 800912a:	d201      	bcs.n	8009130 <find_volume+0x41c>
 800912c:	230d      	movs	r3, #13
 800912e:	e06d      	b.n	800920c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	f04f 32ff 	mov.w	r2, #4294967295
 8009136:	619a      	str	r2, [r3, #24]
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	699a      	ldr	r2, [r3, #24]
 800913c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009142:	2280      	movs	r2, #128	; 0x80
 8009144:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009146:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800914a:	2b03      	cmp	r3, #3
 800914c:	d149      	bne.n	80091e2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800914e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009150:	3338      	adds	r3, #56	; 0x38
 8009152:	3330      	adds	r3, #48	; 0x30
 8009154:	4618      	mov	r0, r3
 8009156:	f7fd ff5b 	bl	8007010 <ld_word>
 800915a:	4603      	mov	r3, r0
 800915c:	2b01      	cmp	r3, #1
 800915e:	d140      	bne.n	80091e2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009162:	3301      	adds	r3, #1
 8009164:	4619      	mov	r1, r3
 8009166:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009168:	f7fe fa02 	bl	8007570 <move_window>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d137      	bne.n	80091e2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8009172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009174:	2200      	movs	r2, #0
 8009176:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917a:	3338      	adds	r3, #56	; 0x38
 800917c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009180:	4618      	mov	r0, r3
 8009182:	f7fd ff45 	bl	8007010 <ld_word>
 8009186:	4603      	mov	r3, r0
 8009188:	461a      	mov	r2, r3
 800918a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800918e:	429a      	cmp	r2, r3
 8009190:	d127      	bne.n	80091e2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	3338      	adds	r3, #56	; 0x38
 8009196:	4618      	mov	r0, r3
 8009198:	f7fd ff52 	bl	8007040 <ld_dword>
 800919c:	4603      	mov	r3, r0
 800919e:	4a1d      	ldr	r2, [pc, #116]	; (8009214 <find_volume+0x500>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d11e      	bne.n	80091e2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	3338      	adds	r3, #56	; 0x38
 80091a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fd ff47 	bl	8007040 <ld_dword>
 80091b2:	4603      	mov	r3, r0
 80091b4:	4a18      	ldr	r2, [pc, #96]	; (8009218 <find_volume+0x504>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d113      	bne.n	80091e2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80091ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091bc:	3338      	adds	r3, #56	; 0x38
 80091be:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fd ff3c 	bl	8007040 <ld_dword>
 80091c8:	4602      	mov	r2, r0
 80091ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091cc:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80091ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d0:	3338      	adds	r3, #56	; 0x38
 80091d2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fd ff32 	bl	8007040 <ld_dword>
 80091dc:	4602      	mov	r2, r0
 80091de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e0:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80091e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80091e8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80091ea:	4b0c      	ldr	r3, [pc, #48]	; (800921c <find_volume+0x508>)
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	3301      	adds	r3, #1
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	4b0a      	ldr	r3, [pc, #40]	; (800921c <find_volume+0x508>)
 80091f4:	801a      	strh	r2, [r3, #0]
 80091f6:	4b09      	ldr	r3, [pc, #36]	; (800921c <find_volume+0x508>)
 80091f8:	881a      	ldrh	r2, [r3, #0]
 80091fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fc:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009200:	4a07      	ldr	r2, [pc, #28]	; (8009220 <find_volume+0x50c>)
 8009202:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009204:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009206:	f7fe f94b 	bl	80074a0 <clear_lock>
#endif
	return FR_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3758      	adds	r7, #88	; 0x58
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	41615252 	.word	0x41615252
 8009218:	61417272 	.word	0x61417272
 800921c:	20000670 	.word	0x20000670
 8009220:	20000694 	.word	0x20000694

08009224 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800922e:	2309      	movs	r3, #9
 8009230:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d01c      	beq.n	8009272 <validate+0x4e>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d018      	beq.n	8009272 <validate+0x4e>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d013      	beq.n	8009272 <validate+0x4e>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	889a      	ldrh	r2, [r3, #4]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	88db      	ldrh	r3, [r3, #6]
 8009254:	429a      	cmp	r2, r3
 8009256:	d10c      	bne.n	8009272 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	785b      	ldrb	r3, [r3, #1]
 800925e:	4618      	mov	r0, r3
 8009260:	f7fd fe38 	bl	8006ed4 <disk_status>
 8009264:	4603      	mov	r3, r0
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	d101      	bne.n	8009272 <validate+0x4e>
			res = FR_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009272:	7bfb      	ldrb	r3, [r7, #15]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d102      	bne.n	800927e <validate+0x5a>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	e000      	b.n	8009280 <validate+0x5c>
 800927e:	2300      	movs	r3, #0
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	6013      	str	r3, [r2, #0]
	return res;
 8009284:	7bfb      	ldrb	r3, [r7, #15]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
	...

08009290 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b088      	sub	sp, #32
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	4613      	mov	r3, r2
 800929c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80092a2:	f107 0310 	add.w	r3, r7, #16
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7ff fc9a 	bl	8008be0 <get_ldnumber>
 80092ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	da01      	bge.n	80092b8 <f_mount+0x28>
 80092b4:	230b      	movs	r3, #11
 80092b6:	e02b      	b.n	8009310 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80092b8:	4a17      	ldr	r2, [pc, #92]	; (8009318 <f_mount+0x88>)
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d005      	beq.n	80092d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80092c8:	69b8      	ldr	r0, [r7, #24]
 80092ca:	f7fe f8e9 	bl	80074a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	2200      	movs	r2, #0
 80092d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	490d      	ldr	r1, [pc, #52]	; (8009318 <f_mount+0x88>)
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <f_mount+0x66>
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d001      	beq.n	80092fa <f_mount+0x6a>
 80092f6:	2300      	movs	r3, #0
 80092f8:	e00a      	b.n	8009310 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80092fa:	f107 010c 	add.w	r1, r7, #12
 80092fe:	f107 0308 	add.w	r3, r7, #8
 8009302:	2200      	movs	r2, #0
 8009304:	4618      	mov	r0, r3
 8009306:	f7ff fd05 	bl	8008d14 <find_volume>
 800930a:	4603      	mov	r3, r0
 800930c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800930e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3720      	adds	r7, #32
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	2000066c 	.word	0x2000066c

0800931c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b09a      	sub	sp, #104	; 0x68
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	4613      	mov	r3, r2
 8009328:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d101      	bne.n	8009334 <f_open+0x18>
 8009330:	2309      	movs	r3, #9
 8009332:	e1bb      	b.n	80096ac <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009334:	79fb      	ldrb	r3, [r7, #7]
 8009336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800933a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800933c:	79fa      	ldrb	r2, [r7, #7]
 800933e:	f107 0114 	add.w	r1, r7, #20
 8009342:	f107 0308 	add.w	r3, r7, #8
 8009346:	4618      	mov	r0, r3
 8009348:	f7ff fce4 	bl	8008d14 <find_volume>
 800934c:	4603      	mov	r3, r0
 800934e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009352:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009356:	2b00      	cmp	r3, #0
 8009358:	f040 819f 	bne.w	800969a <f_open+0x37e>
		dj.obj.fs = fs;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	f107 0318 	add.w	r3, r7, #24
 8009366:	4611      	mov	r1, r2
 8009368:	4618      	mov	r0, r3
 800936a:	f7ff fbc3 	bl	8008af4 <follow_path>
 800936e:	4603      	mov	r3, r0
 8009370:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009374:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009378:	2b00      	cmp	r3, #0
 800937a:	d11a      	bne.n	80093b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800937c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009380:	b25b      	sxtb	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	da03      	bge.n	800938e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009386:	2306      	movs	r3, #6
 8009388:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800938c:	e011      	b.n	80093b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800938e:	79fb      	ldrb	r3, [r7, #7]
 8009390:	f023 0301 	bic.w	r3, r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	bf14      	ite	ne
 8009398:	2301      	movne	r3, #1
 800939a:	2300      	moveq	r3, #0
 800939c:	b2db      	uxtb	r3, r3
 800939e:	461a      	mov	r2, r3
 80093a0:	f107 0318 	add.w	r3, r7, #24
 80093a4:	4611      	mov	r1, r2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fd ff32 	bl	8007210 <chk_lock>
 80093ac:	4603      	mov	r3, r0
 80093ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80093b2:	79fb      	ldrb	r3, [r7, #7]
 80093b4:	f003 031c 	and.w	r3, r3, #28
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d07f      	beq.n	80094bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80093bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d017      	beq.n	80093f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80093c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	d10e      	bne.n	80093ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80093cc:	f7fd ff7c 	bl	80072c8 <enq_lock>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d006      	beq.n	80093e4 <f_open+0xc8>
 80093d6:	f107 0318 	add.w	r3, r7, #24
 80093da:	4618      	mov	r0, r3
 80093dc:	f7ff f8da 	bl	8008594 <dir_register>
 80093e0:	4603      	mov	r3, r0
 80093e2:	e000      	b.n	80093e6 <f_open+0xca>
 80093e4:	2312      	movs	r3, #18
 80093e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	f043 0308 	orr.w	r3, r3, #8
 80093f0:	71fb      	strb	r3, [r7, #7]
 80093f2:	e010      	b.n	8009416 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80093f4:	7fbb      	ldrb	r3, [r7, #30]
 80093f6:	f003 0311 	and.w	r3, r3, #17
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <f_open+0xea>
					res = FR_DENIED;
 80093fe:	2307      	movs	r3, #7
 8009400:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009404:	e007      	b.n	8009416 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009406:	79fb      	ldrb	r3, [r7, #7]
 8009408:	f003 0304 	and.w	r3, r3, #4
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <f_open+0xfa>
 8009410:	2308      	movs	r3, #8
 8009412:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009416:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800941a:	2b00      	cmp	r3, #0
 800941c:	d168      	bne.n	80094f0 <f_open+0x1d4>
 800941e:	79fb      	ldrb	r3, [r7, #7]
 8009420:	f003 0308 	and.w	r3, r3, #8
 8009424:	2b00      	cmp	r3, #0
 8009426:	d063      	beq.n	80094f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009428:	f7fd fcf2 	bl	8006e10 <get_fattime>
 800942c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800942e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009430:	330e      	adds	r3, #14
 8009432:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009434:	4618      	mov	r0, r3
 8009436:	f7fd fe41 	bl	80070bc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800943a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943c:	3316      	adds	r3, #22
 800943e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009440:	4618      	mov	r0, r3
 8009442:	f7fd fe3b 	bl	80070bc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	330b      	adds	r3, #11
 800944a:	2220      	movs	r2, #32
 800944c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009452:	4611      	mov	r1, r2
 8009454:	4618      	mov	r0, r3
 8009456:	f7fe fe13 	bl	8008080 <ld_clust>
 800945a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009460:	2200      	movs	r2, #0
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe fe2b 	bl	80080be <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946a:	331c      	adds	r3, #28
 800946c:	2100      	movs	r1, #0
 800946e:	4618      	mov	r0, r3
 8009470:	f7fd fe24 	bl	80070bc <st_dword>
					fs->wflag = 1;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	2201      	movs	r2, #1
 8009478:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800947a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800947c:	2b00      	cmp	r3, #0
 800947e:	d037      	beq.n	80094f0 <f_open+0x1d4>
						dw = fs->winsect;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009484:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009486:	f107 0318 	add.w	r3, r7, #24
 800948a:	2200      	movs	r2, #0
 800948c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe fb1b 	bl	8007aca <remove_chain>
 8009494:	4603      	mov	r3, r0
 8009496:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800949a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d126      	bne.n	80094f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe f862 	bl	8007570 <move_window>
 80094ac:	4603      	mov	r3, r0
 80094ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094b6:	3a01      	subs	r2, #1
 80094b8:	615a      	str	r2, [r3, #20]
 80094ba:	e019      	b.n	80094f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80094bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d115      	bne.n	80094f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80094c4:	7fbb      	ldrb	r3, [r7, #30]
 80094c6:	f003 0310 	and.w	r3, r3, #16
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80094ce:	2304      	movs	r3, #4
 80094d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80094d4:	e00c      	b.n	80094f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80094d6:	79fb      	ldrb	r3, [r7, #7]
 80094d8:	f003 0302 	and.w	r3, r3, #2
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d007      	beq.n	80094f0 <f_open+0x1d4>
 80094e0:	7fbb      	ldrb	r3, [r7, #30]
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d002      	beq.n	80094f0 <f_open+0x1d4>
						res = FR_DENIED;
 80094ea:	2307      	movs	r3, #7
 80094ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80094f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d128      	bne.n	800954a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80094f8:	79fb      	ldrb	r3, [r7, #7]
 80094fa:	f003 0308 	and.w	r3, r3, #8
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009502:	79fb      	ldrb	r3, [r7, #7]
 8009504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009508:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009518:	79fb      	ldrb	r3, [r7, #7]
 800951a:	f023 0301 	bic.w	r3, r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	bf14      	ite	ne
 8009522:	2301      	movne	r3, #1
 8009524:	2300      	moveq	r3, #0
 8009526:	b2db      	uxtb	r3, r3
 8009528:	461a      	mov	r2, r3
 800952a:	f107 0318 	add.w	r3, r7, #24
 800952e:	4611      	mov	r1, r2
 8009530:	4618      	mov	r0, r3
 8009532:	f7fd feeb 	bl	800730c <inc_lock>
 8009536:	4602      	mov	r2, r0
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d102      	bne.n	800954a <f_open+0x22e>
 8009544:	2302      	movs	r3, #2
 8009546:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800954a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800954e:	2b00      	cmp	r3, #0
 8009550:	f040 80a3 	bne.w	800969a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009558:	4611      	mov	r1, r2
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe fd90 	bl	8008080 <ld_clust>
 8009560:	4602      	mov	r2, r0
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009568:	331c      	adds	r3, #28
 800956a:	4618      	mov	r0, r3
 800956c:	f7fd fd68 	bl	8007040 <ld_dword>
 8009570:	4602      	mov	r2, r0
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	88da      	ldrh	r2, [r3, #6]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	79fa      	ldrb	r2, [r7, #7]
 800958e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3330      	adds	r3, #48	; 0x30
 80095a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80095aa:	2100      	movs	r1, #0
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fd fdd2 	bl	8007156 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80095b2:	79fb      	ldrb	r3, [r7, #7]
 80095b4:	f003 0320 	and.w	r3, r3, #32
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d06e      	beq.n	800969a <f_open+0x37e>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d06a      	beq.n	800969a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	68da      	ldr	r2, [r3, #12]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	895b      	ldrh	r3, [r3, #10]
 80095d0:	461a      	mov	r2, r3
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	899b      	ldrh	r3, [r3, #12]
 80095d6:	fb03 f302 	mul.w	r3, r3, r2
 80095da:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095e8:	e016      	b.n	8009618 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fe f87b 	bl	80076ea <get_fat>
 80095f4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80095f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d802      	bhi.n	8009602 <f_open+0x2e6>
 80095fc:	2302      	movs	r3, #2
 80095fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009608:	d102      	bne.n	8009610 <f_open+0x2f4>
 800960a:	2301      	movs	r3, #1
 800960c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009610:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009618:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800961c:	2b00      	cmp	r3, #0
 800961e:	d103      	bne.n	8009628 <f_open+0x30c>
 8009620:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009624:	429a      	cmp	r2, r3
 8009626:	d8e0      	bhi.n	80095ea <f_open+0x2ce>
				}
				fp->clust = clst;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800962c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800962e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009632:	2b00      	cmp	r3, #0
 8009634:	d131      	bne.n	800969a <f_open+0x37e>
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	899b      	ldrh	r3, [r3, #12]
 800963a:	461a      	mov	r2, r3
 800963c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800963e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009642:	fb02 f201 	mul.w	r2, r2, r1
 8009646:	1a9b      	subs	r3, r3, r2
 8009648:	2b00      	cmp	r3, #0
 800964a:	d026      	beq.n	800969a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009650:	4618      	mov	r0, r3
 8009652:	f7fe f82b 	bl	80076ac <clust2sect>
 8009656:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800965a:	2b00      	cmp	r3, #0
 800965c:	d103      	bne.n	8009666 <f_open+0x34a>
						res = FR_INT_ERR;
 800965e:	2302      	movs	r3, #2
 8009660:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009664:	e019      	b.n	800969a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	899b      	ldrh	r3, [r3, #12]
 800966a:	461a      	mov	r2, r3
 800966c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800966e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009674:	441a      	add	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	7858      	ldrb	r0, [r3, #1]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6a1a      	ldr	r2, [r3, #32]
 8009688:	2301      	movs	r3, #1
 800968a:	f7fd fc63 	bl	8006f54 <disk_read>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <f_open+0x37e>
 8009694:	2301      	movs	r3, #1
 8009696:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800969a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d002      	beq.n	80096a8 <f_open+0x38c>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80096a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3768      	adds	r7, #104	; 0x68
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08c      	sub	sp, #48	; 0x30
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	2200      	movs	r2, #0
 80096ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f107 0210 	add.w	r2, r7, #16
 80096d2:	4611      	mov	r1, r2
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7ff fda5 	bl	8009224 <validate>
 80096da:	4603      	mov	r3, r0
 80096dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80096e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d107      	bne.n	80096f8 <f_write+0x44>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	7d5b      	ldrb	r3, [r3, #21]
 80096ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80096f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <f_write+0x4a>
 80096f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096fc:	e16a      	b.n	80099d4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	7d1b      	ldrb	r3, [r3, #20]
 8009702:	f003 0302 	and.w	r3, r3, #2
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <f_write+0x5a>
 800970a:	2307      	movs	r3, #7
 800970c:	e162      	b.n	80099d4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	699a      	ldr	r2, [r3, #24]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	441a      	add	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	429a      	cmp	r2, r3
 800971c:	f080 814c 	bcs.w	80099b8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	43db      	mvns	r3, r3
 8009726:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009728:	e146      	b.n	80099b8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	8992      	ldrh	r2, [r2, #12]
 8009732:	fbb3 f1f2 	udiv	r1, r3, r2
 8009736:	fb02 f201 	mul.w	r2, r2, r1
 800973a:	1a9b      	subs	r3, r3, r2
 800973c:	2b00      	cmp	r3, #0
 800973e:	f040 80f1 	bne.w	8009924 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	8992      	ldrh	r2, [r2, #12]
 800974a:	fbb3 f3f2 	udiv	r3, r3, r2
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	8952      	ldrh	r2, [r2, #10]
 8009752:	3a01      	subs	r2, #1
 8009754:	4013      	ands	r3, r2
 8009756:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d143      	bne.n	80097e6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10c      	bne.n	8009780 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	2b00      	cmp	r3, #0
 8009770:	d11a      	bne.n	80097a8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2100      	movs	r1, #0
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe fa0c 	bl	8007b94 <create_chain>
 800977c:	62b8      	str	r0, [r7, #40]	; 0x28
 800977e:	e013      	b.n	80097a8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009784:	2b00      	cmp	r3, #0
 8009786:	d007      	beq.n	8009798 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	4619      	mov	r1, r3
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f7fe fa98 	bl	8007cc4 <clmt_clust>
 8009794:	62b8      	str	r0, [r7, #40]	; 0x28
 8009796:	e007      	b.n	80097a8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	69db      	ldr	r3, [r3, #28]
 800979e:	4619      	mov	r1, r3
 80097a0:	4610      	mov	r0, r2
 80097a2:	f7fe f9f7 	bl	8007b94 <create_chain>
 80097a6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80097a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 8109 	beq.w	80099c2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80097b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d104      	bne.n	80097c0 <f_write+0x10c>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2202      	movs	r2, #2
 80097ba:	755a      	strb	r2, [r3, #21]
 80097bc:	2302      	movs	r3, #2
 80097be:	e109      	b.n	80099d4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80097c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c6:	d104      	bne.n	80097d2 <f_write+0x11e>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2201      	movs	r2, #1
 80097cc:	755a      	strb	r2, [r3, #21]
 80097ce:	2301      	movs	r3, #1
 80097d0:	e100      	b.n	80099d4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097d6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d102      	bne.n	80097e6 <f_write+0x132>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097e4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	7d1b      	ldrb	r3, [r3, #20]
 80097ea:	b25b      	sxtb	r3, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	da18      	bge.n	8009822 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	7858      	ldrb	r0, [r3, #1]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6a1a      	ldr	r2, [r3, #32]
 80097fe:	2301      	movs	r3, #1
 8009800:	f7fd fbc8 	bl	8006f94 <disk_write>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d004      	beq.n	8009814 <f_write+0x160>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2201      	movs	r2, #1
 800980e:	755a      	strb	r2, [r3, #21]
 8009810:	2301      	movs	r3, #1
 8009812:	e0df      	b.n	80099d4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	7d1b      	ldrb	r3, [r3, #20]
 8009818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800981c:	b2da      	uxtb	r2, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	69db      	ldr	r3, [r3, #28]
 8009828:	4619      	mov	r1, r3
 800982a:	4610      	mov	r0, r2
 800982c:	f7fd ff3e 	bl	80076ac <clust2sect>
 8009830:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d104      	bne.n	8009842 <f_write+0x18e>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2202      	movs	r2, #2
 800983c:	755a      	strb	r2, [r3, #21]
 800983e:	2302      	movs	r3, #2
 8009840:	e0c8      	b.n	80099d4 <f_write+0x320>
			sect += csect;
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	4413      	add	r3, r2
 8009848:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	899b      	ldrh	r3, [r3, #12]
 800984e:	461a      	mov	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	fbb3 f3f2 	udiv	r3, r3, r2
 8009856:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d043      	beq.n	80098e6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800985e:	69ba      	ldr	r2, [r7, #24]
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	4413      	add	r3, r2
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	8952      	ldrh	r2, [r2, #10]
 8009868:	4293      	cmp	r3, r2
 800986a:	d905      	bls.n	8009878 <f_write+0x1c4>
					cc = fs->csize - csect;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	895b      	ldrh	r3, [r3, #10]
 8009870:	461a      	mov	r2, r3
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	7858      	ldrb	r0, [r3, #1]
 800987c:	6a3b      	ldr	r3, [r7, #32]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	69f9      	ldr	r1, [r7, #28]
 8009882:	f7fd fb87 	bl	8006f94 <disk_write>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d004      	beq.n	8009896 <f_write+0x1e2>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2201      	movs	r2, #1
 8009890:	755a      	strb	r2, [r3, #21]
 8009892:	2301      	movs	r3, #1
 8009894:	e09e      	b.n	80099d4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6a1a      	ldr	r2, [r3, #32]
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	6a3a      	ldr	r2, [r7, #32]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d918      	bls.n	80098d6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6a1a      	ldr	r2, [r3, #32]
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	8992      	ldrh	r2, [r2, #12]
 80098b6:	fb02 f303 	mul.w	r3, r2, r3
 80098ba:	69fa      	ldr	r2, [r7, #28]
 80098bc:	18d1      	adds	r1, r2, r3
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	899b      	ldrh	r3, [r3, #12]
 80098c2:	461a      	mov	r2, r3
 80098c4:	f7fd fc26 	bl	8007114 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	7d1b      	ldrb	r3, [r3, #20]
 80098cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	899b      	ldrh	r3, [r3, #12]
 80098da:	461a      	mov	r2, r3
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	fb02 f303 	mul.w	r3, r2, r3
 80098e2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80098e4:	e04b      	b.n	800997e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d016      	beq.n	800991e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	699a      	ldr	r2, [r3, #24]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d210      	bcs.n	800991e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	7858      	ldrb	r0, [r3, #1]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009906:	2301      	movs	r3, #1
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	f7fd fb23 	bl	8006f54 <disk_read>
 800990e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009910:	2b00      	cmp	r3, #0
 8009912:	d004      	beq.n	800991e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2201      	movs	r2, #1
 8009918:	755a      	strb	r2, [r3, #21]
 800991a:	2301      	movs	r3, #1
 800991c:	e05a      	b.n	80099d4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	899b      	ldrh	r3, [r3, #12]
 8009928:	4618      	mov	r0, r3
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	693a      	ldr	r2, [r7, #16]
 8009930:	8992      	ldrh	r2, [r2, #12]
 8009932:	fbb3 f1f2 	udiv	r1, r3, r2
 8009936:	fb02 f201 	mul.w	r2, r2, r1
 800993a:	1a9b      	subs	r3, r3, r2
 800993c:	1ac3      	subs	r3, r0, r3
 800993e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	429a      	cmp	r2, r3
 8009946:	d901      	bls.n	800994c <f_write+0x298>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	699b      	ldr	r3, [r3, #24]
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	8992      	ldrh	r2, [r2, #12]
 800995a:	fbb3 f0f2 	udiv	r0, r3, r2
 800995e:	fb02 f200 	mul.w	r2, r2, r0
 8009962:	1a9b      	subs	r3, r3, r2
 8009964:	440b      	add	r3, r1
 8009966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009968:	69f9      	ldr	r1, [r7, #28]
 800996a:	4618      	mov	r0, r3
 800996c:	f7fd fbd2 	bl	8007114 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	7d1b      	ldrb	r3, [r3, #20]
 8009974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009978:	b2da      	uxtb	r2, r3
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800997e:	69fa      	ldr	r2, [r7, #28]
 8009980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009982:	4413      	add	r3, r2
 8009984:	61fb      	str	r3, [r7, #28]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	699a      	ldr	r2, [r3, #24]
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	441a      	add	r2, r3
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	619a      	str	r2, [r3, #24]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	68da      	ldr	r2, [r3, #12]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	699b      	ldr	r3, [r3, #24]
 800999a:	429a      	cmp	r2, r3
 800999c:	bf38      	it	cc
 800999e:	461a      	movcc	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	60da      	str	r2, [r3, #12]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	441a      	add	r2, r3
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f47f aeb5 	bne.w	800972a <f_write+0x76>
 80099c0:	e000      	b.n	80099c4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80099c2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	7d1b      	ldrb	r3, [r3, #20]
 80099c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3730      	adds	r7, #48	; 0x30
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f107 0208 	add.w	r2, r7, #8
 80099ea:	4611      	mov	r1, r2
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff fc19 	bl	8009224 <validate>
 80099f2:	4603      	mov	r3, r0
 80099f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d168      	bne.n	8009ace <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	7d1b      	ldrb	r3, [r3, #20]
 8009a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d062      	beq.n	8009ace <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	7d1b      	ldrb	r3, [r3, #20]
 8009a0c:	b25b      	sxtb	r3, r3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	da15      	bge.n	8009a3e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	7858      	ldrb	r0, [r3, #1]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a1a      	ldr	r2, [r3, #32]
 8009a20:	2301      	movs	r3, #1
 8009a22:	f7fd fab7 	bl	8006f94 <disk_write>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <f_sync+0x54>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e04f      	b.n	8009ad0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	7d1b      	ldrb	r3, [r3, #20]
 8009a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009a3e:	f7fd f9e7 	bl	8006e10 <get_fattime>
 8009a42:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	f7fd fd8f 	bl	8007570 <move_window>
 8009a52:	4603      	mov	r3, r0
 8009a54:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009a56:	7dfb      	ldrb	r3, [r7, #23]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d138      	bne.n	8009ace <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a60:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	330b      	adds	r3, #11
 8009a66:	781a      	ldrb	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	330b      	adds	r3, #11
 8009a6c:	f042 0220 	orr.w	r2, r2, #32
 8009a70:	b2d2      	uxtb	r2, r2
 8009a72:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6818      	ldr	r0, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	68f9      	ldr	r1, [r7, #12]
 8009a80:	f7fe fb1d 	bl	80080be <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f103 021c 	add.w	r2, r3, #28
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	4610      	mov	r0, r2
 8009a92:	f7fd fb13 	bl	80070bc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	3316      	adds	r3, #22
 8009a9a:	6939      	ldr	r1, [r7, #16]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fd fb0d 	bl	80070bc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	3312      	adds	r3, #18
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fd faec 	bl	8007086 <st_word>
					fs->wflag = 1;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fd fd88 	bl	80075cc <sync_fs>
 8009abc:	4603      	mov	r3, r0
 8009abe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	7d1b      	ldrb	r3, [r3, #20]
 8009ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7ff ff7b 	bl	80099dc <f_sync>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d118      	bne.n	8009b22 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f107 0208 	add.w	r2, r7, #8
 8009af6:	4611      	mov	r1, r2
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7ff fb93 	bl	8009224 <validate>
 8009afe:	4603      	mov	r3, r0
 8009b00:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10c      	bne.n	8009b22 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fd fc8b 	bl	8007428 <dec_lock>
 8009b12:	4603      	mov	r3, r0
 8009b14:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d102      	bne.n	8009b22 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b092      	sub	sp, #72	; 0x48
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009b38:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009b3c:	f107 030c 	add.w	r3, r7, #12
 8009b40:	2200      	movs	r2, #0
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7ff f8e6 	bl	8008d14 <find_volume>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009b4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f040 8099 	bne.w	8009c8a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b60:	699a      	ldr	r2, [r3, #24]
 8009b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b64:	69db      	ldr	r3, [r3, #28]
 8009b66:	3b02      	subs	r3, #2
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d804      	bhi.n	8009b76 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6e:	699a      	ldr	r2, [r3, #24]
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	601a      	str	r2, [r3, #0]
 8009b74:	e089      	b.n	8009c8a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d128      	bne.n	8009bd4 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009b82:	2302      	movs	r3, #2
 8009b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009b8a:	f107 0314 	add.w	r3, r7, #20
 8009b8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fd fdaa 	bl	80076ea <get_fat>
 8009b96:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9e:	d103      	bne.n	8009ba8 <f_getfree+0x7c>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009ba6:	e063      	b.n	8009c70 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d103      	bne.n	8009bb6 <f_getfree+0x8a>
 8009bae:	2302      	movs	r3, #2
 8009bb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009bb4:	e05c      	b.n	8009c70 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d102      	bne.n	8009bc2 <f_getfree+0x96>
 8009bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bca:	69db      	ldr	r3, [r3, #28]
 8009bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d3db      	bcc.n	8009b8a <f_getfree+0x5e>
 8009bd2:	e04d      	b.n	8009c70 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd6:	69db      	ldr	r3, [r3, #28]
 8009bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bde:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009be0:	2300      	movs	r3, #0
 8009be2:	637b      	str	r3, [r7, #52]	; 0x34
 8009be4:	2300      	movs	r3, #0
 8009be6:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d113      	bne.n	8009c16 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	63ba      	str	r2, [r7, #56]	; 0x38
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	f7fd fcba 	bl	8007570 <move_window>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8009c02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d131      	bne.n	8009c6e <f_getfree+0x142>
							p = fs->win;
 8009c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0c:	3338      	adds	r3, #56	; 0x38
 8009c0e:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c12:	899b      	ldrh	r3, [r3, #12]
 8009c14:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d10f      	bne.n	8009c3e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009c1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c20:	f7fd f9f6 	bl	8007010 <ld_word>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d102      	bne.n	8009c30 <f_getfree+0x104>
 8009c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	3302      	adds	r3, #2
 8009c34:	633b      	str	r3, [r7, #48]	; 0x30
 8009c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c38:	3b02      	subs	r3, #2
 8009c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c3c:	e010      	b.n	8009c60 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c40:	f7fd f9fe 	bl	8007040 <ld_dword>
 8009c44:	4603      	mov	r3, r0
 8009c46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d102      	bne.n	8009c54 <f_getfree+0x128>
 8009c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c50:	3301      	adds	r3, #1
 8009c52:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c56:	3304      	adds	r3, #4
 8009c58:	633b      	str	r3, [r7, #48]	; 0x30
 8009c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5c:	3b04      	subs	r3, #4
 8009c5e:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c62:	3b01      	subs	r3, #1
 8009c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1bd      	bne.n	8009be8 <f_getfree+0xbc>
 8009c6c:	e000      	b.n	8009c70 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009c6e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c74:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c7a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7e:	791a      	ldrb	r2, [r3, #4]
 8009c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c82:	f042 0201 	orr.w	r2, r2, #1
 8009c86:	b2d2      	uxtb	r2, r2
 8009c88:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009c8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3748      	adds	r7, #72	; 0x48
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009ca2:	78fb      	ldrb	r3, [r7, #3]
 8009ca4:	2b0a      	cmp	r3, #10
 8009ca6:	d103      	bne.n	8009cb0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009ca8:	210d      	movs	r1, #13
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7ff fff3 	bl	8009c96 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	db25      	blt.n	8009d08 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	1c5a      	adds	r2, r3, #1
 8009cc0:	60fa      	str	r2, [r7, #12]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	78fa      	ldrb	r2, [r7, #3]
 8009cc8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b3c      	cmp	r3, #60	; 0x3c
 8009cce:	dd12      	ble.n	8009cf6 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6818      	ldr	r0, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f103 010c 	add.w	r1, r3, #12
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	f107 0308 	add.w	r3, r7, #8
 8009ce0:	f7ff fce8 	bl	80096b4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d101      	bne.n	8009cf0 <putc_bfd+0x5a>
 8009cec:	2300      	movs	r3, #0
 8009cee:	e001      	b.n	8009cf4 <putc_bfd+0x5e>
 8009cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf4:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	1c5a      	adds	r2, r3, #1
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	609a      	str	r2, [r3, #8]
 8009d06:	e000      	b.n	8009d0a <putc_bfd+0x74>
	if (i < 0) return;
 8009d08:	bf00      	nop
}
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	db16      	blt.n	8009d4e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6818      	ldr	r0, [r3, #0]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f103 010c 	add.w	r1, r3, #12
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	f107 030c 	add.w	r3, r7, #12
 8009d34:	f7ff fcbe 	bl	80096b4 <f_write>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d107      	bne.n	8009d4e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d102      	bne.n	8009d4e <putc_flush+0x3e>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	e001      	b.n	8009d52 <putc_flush+0x42>
	return EOF;
 8009d4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	605a      	str	r2, [r3, #4]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	609a      	str	r2, [r3, #8]
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b096      	sub	sp, #88	; 0x58
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009d8e:	f107 030c 	add.w	r3, r7, #12
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7ff ffe0 	bl	8009d5a <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009d9a:	e009      	b.n	8009db0 <f_puts+0x2c>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	1c5a      	adds	r2, r3, #1
 8009da0:	607a      	str	r2, [r7, #4]
 8009da2:	781a      	ldrb	r2, [r3, #0]
 8009da4:	f107 030c 	add.w	r3, r7, #12
 8009da8:	4611      	mov	r1, r2
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7ff ff73 	bl	8009c96 <putc_bfd>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1f1      	bne.n	8009d9c <f_puts+0x18>
	return putc_flush(&pb);
 8009db8:	f107 030c 	add.w	r3, r7, #12
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff ffa7 	bl	8009d10 <putc_flush>
 8009dc2:	4603      	mov	r3, r0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3758      	adds	r7, #88	; 0x58
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009dde:	2300      	movs	r3, #0
 8009de0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009de2:	4b1f      	ldr	r3, [pc, #124]	; (8009e60 <FATFS_LinkDriverEx+0x94>)
 8009de4:	7a5b      	ldrb	r3, [r3, #9]
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d131      	bne.n	8009e50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009dec:	4b1c      	ldr	r3, [pc, #112]	; (8009e60 <FATFS_LinkDriverEx+0x94>)
 8009dee:	7a5b      	ldrb	r3, [r3, #9]
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	461a      	mov	r2, r3
 8009df4:	4b1a      	ldr	r3, [pc, #104]	; (8009e60 <FATFS_LinkDriverEx+0x94>)
 8009df6:	2100      	movs	r1, #0
 8009df8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009dfa:	4b19      	ldr	r3, [pc, #100]	; (8009e60 <FATFS_LinkDriverEx+0x94>)
 8009dfc:	7a5b      	ldrb	r3, [r3, #9]
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	4a17      	ldr	r2, [pc, #92]	; (8009e60 <FATFS_LinkDriverEx+0x94>)
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009e0a:	4b15      	ldr	r3, [pc, #84]	; (8009e60 <FATFS_LinkDriverEx+0x94>)
 8009e0c:	7a5b      	ldrb	r3, [r3, #9]
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	461a      	mov	r2, r3
 8009e12:	4b13      	ldr	r3, [pc, #76]	; (8009e60 <FATFS_LinkDriverEx+0x94>)
 8009e14:	4413      	add	r3, r2
 8009e16:	79fa      	ldrb	r2, [r7, #7]
 8009e18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009e1a:	4b11      	ldr	r3, [pc, #68]	; (8009e60 <FATFS_LinkDriverEx+0x94>)
 8009e1c:	7a5b      	ldrb	r3, [r3, #9]
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	1c5a      	adds	r2, r3, #1
 8009e22:	b2d1      	uxtb	r1, r2
 8009e24:	4a0e      	ldr	r2, [pc, #56]	; (8009e60 <FATFS_LinkDriverEx+0x94>)
 8009e26:	7251      	strb	r1, [r2, #9]
 8009e28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009e2a:	7dbb      	ldrb	r3, [r7, #22]
 8009e2c:	3330      	adds	r3, #48	; 0x30
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	3301      	adds	r3, #1
 8009e38:	223a      	movs	r2, #58	; 0x3a
 8009e3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	3302      	adds	r3, #2
 8009e40:	222f      	movs	r2, #47	; 0x2f
 8009e42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	3303      	adds	r3, #3
 8009e48:	2200      	movs	r2, #0
 8009e4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	371c      	adds	r7, #28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	20000894 	.word	0x20000894

08009e64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009e6e:	2200      	movs	r2, #0
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7ff ffaa 	bl	8009dcc <FATFS_LinkDriverEx>
 8009e78:	4603      	mov	r3, r0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
	...

08009e84 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	6039      	str	r1, [r7, #0]
 8009e8e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009e90:	88fb      	ldrh	r3, [r7, #6]
 8009e92:	2b7f      	cmp	r3, #127	; 0x7f
 8009e94:	d802      	bhi.n	8009e9c <ff_convert+0x18>
		c = chr;
 8009e96:	88fb      	ldrh	r3, [r7, #6]
 8009e98:	81fb      	strh	r3, [r7, #14]
 8009e9a:	e025      	b.n	8009ee8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00b      	beq.n	8009eba <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009ea2:	88fb      	ldrh	r3, [r7, #6]
 8009ea4:	2bff      	cmp	r3, #255	; 0xff
 8009ea6:	d805      	bhi.n	8009eb4 <ff_convert+0x30>
 8009ea8:	88fb      	ldrh	r3, [r7, #6]
 8009eaa:	3b80      	subs	r3, #128	; 0x80
 8009eac:	4a12      	ldr	r2, [pc, #72]	; (8009ef8 <ff_convert+0x74>)
 8009eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009eb2:	e000      	b.n	8009eb6 <ff_convert+0x32>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	81fb      	strh	r3, [r7, #14]
 8009eb8:	e016      	b.n	8009ee8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009eba:	2300      	movs	r3, #0
 8009ebc:	81fb      	strh	r3, [r7, #14]
 8009ebe:	e009      	b.n	8009ed4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009ec0:	89fb      	ldrh	r3, [r7, #14]
 8009ec2:	4a0d      	ldr	r2, [pc, #52]	; (8009ef8 <ff_convert+0x74>)
 8009ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ec8:	88fa      	ldrh	r2, [r7, #6]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d006      	beq.n	8009edc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009ece:	89fb      	ldrh	r3, [r7, #14]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	81fb      	strh	r3, [r7, #14]
 8009ed4:	89fb      	ldrh	r3, [r7, #14]
 8009ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8009ed8:	d9f2      	bls.n	8009ec0 <ff_convert+0x3c>
 8009eda:	e000      	b.n	8009ede <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009edc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009ede:	89fb      	ldrh	r3, [r7, #14]
 8009ee0:	3380      	adds	r3, #128	; 0x80
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009ee8:	89fb      	ldrh	r3, [r7, #14]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	0800f16c 	.word	0x0800f16c

08009efc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	4603      	mov	r3, r0
 8009f04:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009f06:	88fb      	ldrh	r3, [r7, #6]
 8009f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f0c:	d201      	bcs.n	8009f12 <ff_wtoupper+0x16>
 8009f0e:	4b3e      	ldr	r3, [pc, #248]	; (800a008 <ff_wtoupper+0x10c>)
 8009f10:	e000      	b.n	8009f14 <ff_wtoupper+0x18>
 8009f12:	4b3e      	ldr	r3, [pc, #248]	; (800a00c <ff_wtoupper+0x110>)
 8009f14:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	1c9a      	adds	r2, r3, #2
 8009f1a:	617a      	str	r2, [r7, #20]
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009f20:	8a7b      	ldrh	r3, [r7, #18]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d068      	beq.n	8009ff8 <ff_wtoupper+0xfc>
 8009f26:	88fa      	ldrh	r2, [r7, #6]
 8009f28:	8a7b      	ldrh	r3, [r7, #18]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d364      	bcc.n	8009ff8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	1c9a      	adds	r2, r3, #2
 8009f32:	617a      	str	r2, [r7, #20]
 8009f34:	881b      	ldrh	r3, [r3, #0]
 8009f36:	823b      	strh	r3, [r7, #16]
 8009f38:	8a3b      	ldrh	r3, [r7, #16]
 8009f3a:	0a1b      	lsrs	r3, r3, #8
 8009f3c:	81fb      	strh	r3, [r7, #14]
 8009f3e:	8a3b      	ldrh	r3, [r7, #16]
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009f44:	88fa      	ldrh	r2, [r7, #6]
 8009f46:	8a79      	ldrh	r1, [r7, #18]
 8009f48:	8a3b      	ldrh	r3, [r7, #16]
 8009f4a:	440b      	add	r3, r1
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	da49      	bge.n	8009fe4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009f50:	89fb      	ldrh	r3, [r7, #14]
 8009f52:	2b08      	cmp	r3, #8
 8009f54:	d84f      	bhi.n	8009ff6 <ff_wtoupper+0xfa>
 8009f56:	a201      	add	r2, pc, #4	; (adr r2, 8009f5c <ff_wtoupper+0x60>)
 8009f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5c:	08009f81 	.word	0x08009f81
 8009f60:	08009f93 	.word	0x08009f93
 8009f64:	08009fa9 	.word	0x08009fa9
 8009f68:	08009fb1 	.word	0x08009fb1
 8009f6c:	08009fb9 	.word	0x08009fb9
 8009f70:	08009fc1 	.word	0x08009fc1
 8009f74:	08009fc9 	.word	0x08009fc9
 8009f78:	08009fd1 	.word	0x08009fd1
 8009f7c:	08009fd9 	.word	0x08009fd9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009f80:	88fa      	ldrh	r2, [r7, #6]
 8009f82:	8a7b      	ldrh	r3, [r7, #18]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	005b      	lsls	r3, r3, #1
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	80fb      	strh	r3, [r7, #6]
 8009f90:	e027      	b.n	8009fe2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009f92:	88fa      	ldrh	r2, [r7, #6]
 8009f94:	8a7b      	ldrh	r3, [r7, #18]
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	88fa      	ldrh	r2, [r7, #6]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	80fb      	strh	r3, [r7, #6]
 8009fa6:	e01c      	b.n	8009fe2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009fa8:	88fb      	ldrh	r3, [r7, #6]
 8009faa:	3b10      	subs	r3, #16
 8009fac:	80fb      	strh	r3, [r7, #6]
 8009fae:	e018      	b.n	8009fe2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009fb0:	88fb      	ldrh	r3, [r7, #6]
 8009fb2:	3b20      	subs	r3, #32
 8009fb4:	80fb      	strh	r3, [r7, #6]
 8009fb6:	e014      	b.n	8009fe2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009fb8:	88fb      	ldrh	r3, [r7, #6]
 8009fba:	3b30      	subs	r3, #48	; 0x30
 8009fbc:	80fb      	strh	r3, [r7, #6]
 8009fbe:	e010      	b.n	8009fe2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009fc0:	88fb      	ldrh	r3, [r7, #6]
 8009fc2:	3b1a      	subs	r3, #26
 8009fc4:	80fb      	strh	r3, [r7, #6]
 8009fc6:	e00c      	b.n	8009fe2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009fc8:	88fb      	ldrh	r3, [r7, #6]
 8009fca:	3308      	adds	r3, #8
 8009fcc:	80fb      	strh	r3, [r7, #6]
 8009fce:	e008      	b.n	8009fe2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009fd0:	88fb      	ldrh	r3, [r7, #6]
 8009fd2:	3b50      	subs	r3, #80	; 0x50
 8009fd4:	80fb      	strh	r3, [r7, #6]
 8009fd6:	e004      	b.n	8009fe2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009fd8:	88fb      	ldrh	r3, [r7, #6]
 8009fda:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8009fde:	80fb      	strh	r3, [r7, #6]
 8009fe0:	bf00      	nop
			}
			break;
 8009fe2:	e008      	b.n	8009ff6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009fe4:	89fb      	ldrh	r3, [r7, #14]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d195      	bne.n	8009f16 <ff_wtoupper+0x1a>
 8009fea:	8a3b      	ldrh	r3, [r7, #16]
 8009fec:	005b      	lsls	r3, r3, #1
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009ff4:	e78f      	b.n	8009f16 <ff_wtoupper+0x1a>
			break;
 8009ff6:	bf00      	nop
	}

	return chr;
 8009ff8:	88fb      	ldrh	r3, [r7, #6]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	371c      	adds	r7, #28
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	0800f26c 	.word	0x0800f26c
 800a00c:	0800f460 	.word	0x0800f460

0800a010 <__errno>:
 800a010:	4b01      	ldr	r3, [pc, #4]	; (800a018 <__errno+0x8>)
 800a012:	6818      	ldr	r0, [r3, #0]
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	20000028 	.word	0x20000028

0800a01c <__libc_init_array>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	4d0d      	ldr	r5, [pc, #52]	; (800a054 <__libc_init_array+0x38>)
 800a020:	4c0d      	ldr	r4, [pc, #52]	; (800a058 <__libc_init_array+0x3c>)
 800a022:	1b64      	subs	r4, r4, r5
 800a024:	10a4      	asrs	r4, r4, #2
 800a026:	2600      	movs	r6, #0
 800a028:	42a6      	cmp	r6, r4
 800a02a:	d109      	bne.n	800a040 <__libc_init_array+0x24>
 800a02c:	4d0b      	ldr	r5, [pc, #44]	; (800a05c <__libc_init_array+0x40>)
 800a02e:	4c0c      	ldr	r4, [pc, #48]	; (800a060 <__libc_init_array+0x44>)
 800a030:	f004 fe7c 	bl	800ed2c <_init>
 800a034:	1b64      	subs	r4, r4, r5
 800a036:	10a4      	asrs	r4, r4, #2
 800a038:	2600      	movs	r6, #0
 800a03a:	42a6      	cmp	r6, r4
 800a03c:	d105      	bne.n	800a04a <__libc_init_array+0x2e>
 800a03e:	bd70      	pop	{r4, r5, r6, pc}
 800a040:	f855 3b04 	ldr.w	r3, [r5], #4
 800a044:	4798      	blx	r3
 800a046:	3601      	adds	r6, #1
 800a048:	e7ee      	b.n	800a028 <__libc_init_array+0xc>
 800a04a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a04e:	4798      	blx	r3
 800a050:	3601      	adds	r6, #1
 800a052:	e7f2      	b.n	800a03a <__libc_init_array+0x1e>
 800a054:	0800f9dc 	.word	0x0800f9dc
 800a058:	0800f9dc 	.word	0x0800f9dc
 800a05c:	0800f9dc 	.word	0x0800f9dc
 800a060:	0800f9e0 	.word	0x0800f9e0

0800a064 <memset>:
 800a064:	4402      	add	r2, r0
 800a066:	4603      	mov	r3, r0
 800a068:	4293      	cmp	r3, r2
 800a06a:	d100      	bne.n	800a06e <memset+0xa>
 800a06c:	4770      	bx	lr
 800a06e:	f803 1b01 	strb.w	r1, [r3], #1
 800a072:	e7f9      	b.n	800a068 <memset+0x4>

0800a074 <__cvt>:
 800a074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a078:	ec55 4b10 	vmov	r4, r5, d0
 800a07c:	2d00      	cmp	r5, #0
 800a07e:	460e      	mov	r6, r1
 800a080:	4619      	mov	r1, r3
 800a082:	462b      	mov	r3, r5
 800a084:	bfbb      	ittet	lt
 800a086:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a08a:	461d      	movlt	r5, r3
 800a08c:	2300      	movge	r3, #0
 800a08e:	232d      	movlt	r3, #45	; 0x2d
 800a090:	700b      	strb	r3, [r1, #0]
 800a092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a094:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a098:	4691      	mov	r9, r2
 800a09a:	f023 0820 	bic.w	r8, r3, #32
 800a09e:	bfbc      	itt	lt
 800a0a0:	4622      	movlt	r2, r4
 800a0a2:	4614      	movlt	r4, r2
 800a0a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0a8:	d005      	beq.n	800a0b6 <__cvt+0x42>
 800a0aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a0ae:	d100      	bne.n	800a0b2 <__cvt+0x3e>
 800a0b0:	3601      	adds	r6, #1
 800a0b2:	2102      	movs	r1, #2
 800a0b4:	e000      	b.n	800a0b8 <__cvt+0x44>
 800a0b6:	2103      	movs	r1, #3
 800a0b8:	ab03      	add	r3, sp, #12
 800a0ba:	9301      	str	r3, [sp, #4]
 800a0bc:	ab02      	add	r3, sp, #8
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	ec45 4b10 	vmov	d0, r4, r5
 800a0c4:	4653      	mov	r3, sl
 800a0c6:	4632      	mov	r2, r6
 800a0c8:	f001 fdea 	bl	800bca0 <_dtoa_r>
 800a0cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a0d0:	4607      	mov	r7, r0
 800a0d2:	d102      	bne.n	800a0da <__cvt+0x66>
 800a0d4:	f019 0f01 	tst.w	r9, #1
 800a0d8:	d022      	beq.n	800a120 <__cvt+0xac>
 800a0da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0de:	eb07 0906 	add.w	r9, r7, r6
 800a0e2:	d110      	bne.n	800a106 <__cvt+0x92>
 800a0e4:	783b      	ldrb	r3, [r7, #0]
 800a0e6:	2b30      	cmp	r3, #48	; 0x30
 800a0e8:	d10a      	bne.n	800a100 <__cvt+0x8c>
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	f7f6 fd09 	bl	8000b08 <__aeabi_dcmpeq>
 800a0f6:	b918      	cbnz	r0, 800a100 <__cvt+0x8c>
 800a0f8:	f1c6 0601 	rsb	r6, r6, #1
 800a0fc:	f8ca 6000 	str.w	r6, [sl]
 800a100:	f8da 3000 	ldr.w	r3, [sl]
 800a104:	4499      	add	r9, r3
 800a106:	2200      	movs	r2, #0
 800a108:	2300      	movs	r3, #0
 800a10a:	4620      	mov	r0, r4
 800a10c:	4629      	mov	r1, r5
 800a10e:	f7f6 fcfb 	bl	8000b08 <__aeabi_dcmpeq>
 800a112:	b108      	cbz	r0, 800a118 <__cvt+0xa4>
 800a114:	f8cd 900c 	str.w	r9, [sp, #12]
 800a118:	2230      	movs	r2, #48	; 0x30
 800a11a:	9b03      	ldr	r3, [sp, #12]
 800a11c:	454b      	cmp	r3, r9
 800a11e:	d307      	bcc.n	800a130 <__cvt+0xbc>
 800a120:	9b03      	ldr	r3, [sp, #12]
 800a122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a124:	1bdb      	subs	r3, r3, r7
 800a126:	4638      	mov	r0, r7
 800a128:	6013      	str	r3, [r2, #0]
 800a12a:	b004      	add	sp, #16
 800a12c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a130:	1c59      	adds	r1, r3, #1
 800a132:	9103      	str	r1, [sp, #12]
 800a134:	701a      	strb	r2, [r3, #0]
 800a136:	e7f0      	b.n	800a11a <__cvt+0xa6>

0800a138 <__exponent>:
 800a138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a13a:	4603      	mov	r3, r0
 800a13c:	2900      	cmp	r1, #0
 800a13e:	bfb8      	it	lt
 800a140:	4249      	neglt	r1, r1
 800a142:	f803 2b02 	strb.w	r2, [r3], #2
 800a146:	bfb4      	ite	lt
 800a148:	222d      	movlt	r2, #45	; 0x2d
 800a14a:	222b      	movge	r2, #43	; 0x2b
 800a14c:	2909      	cmp	r1, #9
 800a14e:	7042      	strb	r2, [r0, #1]
 800a150:	dd2a      	ble.n	800a1a8 <__exponent+0x70>
 800a152:	f10d 0407 	add.w	r4, sp, #7
 800a156:	46a4      	mov	ip, r4
 800a158:	270a      	movs	r7, #10
 800a15a:	46a6      	mov	lr, r4
 800a15c:	460a      	mov	r2, r1
 800a15e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a162:	fb07 1516 	mls	r5, r7, r6, r1
 800a166:	3530      	adds	r5, #48	; 0x30
 800a168:	2a63      	cmp	r2, #99	; 0x63
 800a16a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a16e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a172:	4631      	mov	r1, r6
 800a174:	dcf1      	bgt.n	800a15a <__exponent+0x22>
 800a176:	3130      	adds	r1, #48	; 0x30
 800a178:	f1ae 0502 	sub.w	r5, lr, #2
 800a17c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a180:	1c44      	adds	r4, r0, #1
 800a182:	4629      	mov	r1, r5
 800a184:	4561      	cmp	r1, ip
 800a186:	d30a      	bcc.n	800a19e <__exponent+0x66>
 800a188:	f10d 0209 	add.w	r2, sp, #9
 800a18c:	eba2 020e 	sub.w	r2, r2, lr
 800a190:	4565      	cmp	r5, ip
 800a192:	bf88      	it	hi
 800a194:	2200      	movhi	r2, #0
 800a196:	4413      	add	r3, r2
 800a198:	1a18      	subs	r0, r3, r0
 800a19a:	b003      	add	sp, #12
 800a19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a19e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a1a6:	e7ed      	b.n	800a184 <__exponent+0x4c>
 800a1a8:	2330      	movs	r3, #48	; 0x30
 800a1aa:	3130      	adds	r1, #48	; 0x30
 800a1ac:	7083      	strb	r3, [r0, #2]
 800a1ae:	70c1      	strb	r1, [r0, #3]
 800a1b0:	1d03      	adds	r3, r0, #4
 800a1b2:	e7f1      	b.n	800a198 <__exponent+0x60>

0800a1b4 <_printf_float>:
 800a1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b8:	ed2d 8b02 	vpush	{d8}
 800a1bc:	b08d      	sub	sp, #52	; 0x34
 800a1be:	460c      	mov	r4, r1
 800a1c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a1c4:	4616      	mov	r6, r2
 800a1c6:	461f      	mov	r7, r3
 800a1c8:	4605      	mov	r5, r0
 800a1ca:	f002 fec5 	bl	800cf58 <_localeconv_r>
 800a1ce:	f8d0 a000 	ldr.w	sl, [r0]
 800a1d2:	4650      	mov	r0, sl
 800a1d4:	f7f6 f81c 	bl	8000210 <strlen>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	930a      	str	r3, [sp, #40]	; 0x28
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	9305      	str	r3, [sp, #20]
 800a1e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a1e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a1e8:	3307      	adds	r3, #7
 800a1ea:	f023 0307 	bic.w	r3, r3, #7
 800a1ee:	f103 0208 	add.w	r2, r3, #8
 800a1f2:	f8c8 2000 	str.w	r2, [r8]
 800a1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a1fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a202:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a206:	9307      	str	r3, [sp, #28]
 800a208:	f8cd 8018 	str.w	r8, [sp, #24]
 800a20c:	ee08 0a10 	vmov	s16, r0
 800a210:	4b9f      	ldr	r3, [pc, #636]	; (800a490 <_printf_float+0x2dc>)
 800a212:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a216:	f04f 32ff 	mov.w	r2, #4294967295
 800a21a:	f7f6 fca7 	bl	8000b6c <__aeabi_dcmpun>
 800a21e:	bb88      	cbnz	r0, 800a284 <_printf_float+0xd0>
 800a220:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a224:	4b9a      	ldr	r3, [pc, #616]	; (800a490 <_printf_float+0x2dc>)
 800a226:	f04f 32ff 	mov.w	r2, #4294967295
 800a22a:	f7f6 fc81 	bl	8000b30 <__aeabi_dcmple>
 800a22e:	bb48      	cbnz	r0, 800a284 <_printf_float+0xd0>
 800a230:	2200      	movs	r2, #0
 800a232:	2300      	movs	r3, #0
 800a234:	4640      	mov	r0, r8
 800a236:	4649      	mov	r1, r9
 800a238:	f7f6 fc70 	bl	8000b1c <__aeabi_dcmplt>
 800a23c:	b110      	cbz	r0, 800a244 <_printf_float+0x90>
 800a23e:	232d      	movs	r3, #45	; 0x2d
 800a240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a244:	4b93      	ldr	r3, [pc, #588]	; (800a494 <_printf_float+0x2e0>)
 800a246:	4894      	ldr	r0, [pc, #592]	; (800a498 <_printf_float+0x2e4>)
 800a248:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a24c:	bf94      	ite	ls
 800a24e:	4698      	movls	r8, r3
 800a250:	4680      	movhi	r8, r0
 800a252:	2303      	movs	r3, #3
 800a254:	6123      	str	r3, [r4, #16]
 800a256:	9b05      	ldr	r3, [sp, #20]
 800a258:	f023 0204 	bic.w	r2, r3, #4
 800a25c:	6022      	str	r2, [r4, #0]
 800a25e:	f04f 0900 	mov.w	r9, #0
 800a262:	9700      	str	r7, [sp, #0]
 800a264:	4633      	mov	r3, r6
 800a266:	aa0b      	add	r2, sp, #44	; 0x2c
 800a268:	4621      	mov	r1, r4
 800a26a:	4628      	mov	r0, r5
 800a26c:	f000 f9d8 	bl	800a620 <_printf_common>
 800a270:	3001      	adds	r0, #1
 800a272:	f040 8090 	bne.w	800a396 <_printf_float+0x1e2>
 800a276:	f04f 30ff 	mov.w	r0, #4294967295
 800a27a:	b00d      	add	sp, #52	; 0x34
 800a27c:	ecbd 8b02 	vpop	{d8}
 800a280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a284:	4642      	mov	r2, r8
 800a286:	464b      	mov	r3, r9
 800a288:	4640      	mov	r0, r8
 800a28a:	4649      	mov	r1, r9
 800a28c:	f7f6 fc6e 	bl	8000b6c <__aeabi_dcmpun>
 800a290:	b140      	cbz	r0, 800a2a4 <_printf_float+0xf0>
 800a292:	464b      	mov	r3, r9
 800a294:	2b00      	cmp	r3, #0
 800a296:	bfbc      	itt	lt
 800a298:	232d      	movlt	r3, #45	; 0x2d
 800a29a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a29e:	487f      	ldr	r0, [pc, #508]	; (800a49c <_printf_float+0x2e8>)
 800a2a0:	4b7f      	ldr	r3, [pc, #508]	; (800a4a0 <_printf_float+0x2ec>)
 800a2a2:	e7d1      	b.n	800a248 <_printf_float+0x94>
 800a2a4:	6863      	ldr	r3, [r4, #4]
 800a2a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a2aa:	9206      	str	r2, [sp, #24]
 800a2ac:	1c5a      	adds	r2, r3, #1
 800a2ae:	d13f      	bne.n	800a330 <_printf_float+0x17c>
 800a2b0:	2306      	movs	r3, #6
 800a2b2:	6063      	str	r3, [r4, #4]
 800a2b4:	9b05      	ldr	r3, [sp, #20]
 800a2b6:	6861      	ldr	r1, [r4, #4]
 800a2b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a2bc:	2300      	movs	r3, #0
 800a2be:	9303      	str	r3, [sp, #12]
 800a2c0:	ab0a      	add	r3, sp, #40	; 0x28
 800a2c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a2c6:	ab09      	add	r3, sp, #36	; 0x24
 800a2c8:	ec49 8b10 	vmov	d0, r8, r9
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	6022      	str	r2, [r4, #0]
 800a2d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f7ff fecd 	bl	800a074 <__cvt>
 800a2da:	9b06      	ldr	r3, [sp, #24]
 800a2dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2de:	2b47      	cmp	r3, #71	; 0x47
 800a2e0:	4680      	mov	r8, r0
 800a2e2:	d108      	bne.n	800a2f6 <_printf_float+0x142>
 800a2e4:	1cc8      	adds	r0, r1, #3
 800a2e6:	db02      	blt.n	800a2ee <_printf_float+0x13a>
 800a2e8:	6863      	ldr	r3, [r4, #4]
 800a2ea:	4299      	cmp	r1, r3
 800a2ec:	dd41      	ble.n	800a372 <_printf_float+0x1be>
 800a2ee:	f1ab 0b02 	sub.w	fp, fp, #2
 800a2f2:	fa5f fb8b 	uxtb.w	fp, fp
 800a2f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2fa:	d820      	bhi.n	800a33e <_printf_float+0x18a>
 800a2fc:	3901      	subs	r1, #1
 800a2fe:	465a      	mov	r2, fp
 800a300:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a304:	9109      	str	r1, [sp, #36]	; 0x24
 800a306:	f7ff ff17 	bl	800a138 <__exponent>
 800a30a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a30c:	1813      	adds	r3, r2, r0
 800a30e:	2a01      	cmp	r2, #1
 800a310:	4681      	mov	r9, r0
 800a312:	6123      	str	r3, [r4, #16]
 800a314:	dc02      	bgt.n	800a31c <_printf_float+0x168>
 800a316:	6822      	ldr	r2, [r4, #0]
 800a318:	07d2      	lsls	r2, r2, #31
 800a31a:	d501      	bpl.n	800a320 <_printf_float+0x16c>
 800a31c:	3301      	adds	r3, #1
 800a31e:	6123      	str	r3, [r4, #16]
 800a320:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a324:	2b00      	cmp	r3, #0
 800a326:	d09c      	beq.n	800a262 <_printf_float+0xae>
 800a328:	232d      	movs	r3, #45	; 0x2d
 800a32a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a32e:	e798      	b.n	800a262 <_printf_float+0xae>
 800a330:	9a06      	ldr	r2, [sp, #24]
 800a332:	2a47      	cmp	r2, #71	; 0x47
 800a334:	d1be      	bne.n	800a2b4 <_printf_float+0x100>
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1bc      	bne.n	800a2b4 <_printf_float+0x100>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e7b9      	b.n	800a2b2 <_printf_float+0xfe>
 800a33e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a342:	d118      	bne.n	800a376 <_printf_float+0x1c2>
 800a344:	2900      	cmp	r1, #0
 800a346:	6863      	ldr	r3, [r4, #4]
 800a348:	dd0b      	ble.n	800a362 <_printf_float+0x1ae>
 800a34a:	6121      	str	r1, [r4, #16]
 800a34c:	b913      	cbnz	r3, 800a354 <_printf_float+0x1a0>
 800a34e:	6822      	ldr	r2, [r4, #0]
 800a350:	07d0      	lsls	r0, r2, #31
 800a352:	d502      	bpl.n	800a35a <_printf_float+0x1a6>
 800a354:	3301      	adds	r3, #1
 800a356:	440b      	add	r3, r1
 800a358:	6123      	str	r3, [r4, #16]
 800a35a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a35c:	f04f 0900 	mov.w	r9, #0
 800a360:	e7de      	b.n	800a320 <_printf_float+0x16c>
 800a362:	b913      	cbnz	r3, 800a36a <_printf_float+0x1b6>
 800a364:	6822      	ldr	r2, [r4, #0]
 800a366:	07d2      	lsls	r2, r2, #31
 800a368:	d501      	bpl.n	800a36e <_printf_float+0x1ba>
 800a36a:	3302      	adds	r3, #2
 800a36c:	e7f4      	b.n	800a358 <_printf_float+0x1a4>
 800a36e:	2301      	movs	r3, #1
 800a370:	e7f2      	b.n	800a358 <_printf_float+0x1a4>
 800a372:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a378:	4299      	cmp	r1, r3
 800a37a:	db05      	blt.n	800a388 <_printf_float+0x1d4>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	6121      	str	r1, [r4, #16]
 800a380:	07d8      	lsls	r0, r3, #31
 800a382:	d5ea      	bpl.n	800a35a <_printf_float+0x1a6>
 800a384:	1c4b      	adds	r3, r1, #1
 800a386:	e7e7      	b.n	800a358 <_printf_float+0x1a4>
 800a388:	2900      	cmp	r1, #0
 800a38a:	bfd4      	ite	le
 800a38c:	f1c1 0202 	rsble	r2, r1, #2
 800a390:	2201      	movgt	r2, #1
 800a392:	4413      	add	r3, r2
 800a394:	e7e0      	b.n	800a358 <_printf_float+0x1a4>
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	055a      	lsls	r2, r3, #21
 800a39a:	d407      	bmi.n	800a3ac <_printf_float+0x1f8>
 800a39c:	6923      	ldr	r3, [r4, #16]
 800a39e:	4642      	mov	r2, r8
 800a3a0:	4631      	mov	r1, r6
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	47b8      	blx	r7
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	d12c      	bne.n	800a404 <_printf_float+0x250>
 800a3aa:	e764      	b.n	800a276 <_printf_float+0xc2>
 800a3ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a3b0:	f240 80e0 	bls.w	800a574 <_printf_float+0x3c0>
 800a3b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f7f6 fba4 	bl	8000b08 <__aeabi_dcmpeq>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d034      	beq.n	800a42e <_printf_float+0x27a>
 800a3c4:	4a37      	ldr	r2, [pc, #220]	; (800a4a4 <_printf_float+0x2f0>)
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	47b8      	blx	r7
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	f43f af51 	beq.w	800a276 <_printf_float+0xc2>
 800a3d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	db02      	blt.n	800a3e2 <_printf_float+0x22e>
 800a3dc:	6823      	ldr	r3, [r4, #0]
 800a3de:	07d8      	lsls	r0, r3, #31
 800a3e0:	d510      	bpl.n	800a404 <_printf_float+0x250>
 800a3e2:	ee18 3a10 	vmov	r3, s16
 800a3e6:	4652      	mov	r2, sl
 800a3e8:	4631      	mov	r1, r6
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	47b8      	blx	r7
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	f43f af41 	beq.w	800a276 <_printf_float+0xc2>
 800a3f4:	f04f 0800 	mov.w	r8, #0
 800a3f8:	f104 091a 	add.w	r9, r4, #26
 800a3fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3fe:	3b01      	subs	r3, #1
 800a400:	4543      	cmp	r3, r8
 800a402:	dc09      	bgt.n	800a418 <_printf_float+0x264>
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	079b      	lsls	r3, r3, #30
 800a408:	f100 8105 	bmi.w	800a616 <_printf_float+0x462>
 800a40c:	68e0      	ldr	r0, [r4, #12]
 800a40e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a410:	4298      	cmp	r0, r3
 800a412:	bfb8      	it	lt
 800a414:	4618      	movlt	r0, r3
 800a416:	e730      	b.n	800a27a <_printf_float+0xc6>
 800a418:	2301      	movs	r3, #1
 800a41a:	464a      	mov	r2, r9
 800a41c:	4631      	mov	r1, r6
 800a41e:	4628      	mov	r0, r5
 800a420:	47b8      	blx	r7
 800a422:	3001      	adds	r0, #1
 800a424:	f43f af27 	beq.w	800a276 <_printf_float+0xc2>
 800a428:	f108 0801 	add.w	r8, r8, #1
 800a42c:	e7e6      	b.n	800a3fc <_printf_float+0x248>
 800a42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a430:	2b00      	cmp	r3, #0
 800a432:	dc39      	bgt.n	800a4a8 <_printf_float+0x2f4>
 800a434:	4a1b      	ldr	r2, [pc, #108]	; (800a4a4 <_printf_float+0x2f0>)
 800a436:	2301      	movs	r3, #1
 800a438:	4631      	mov	r1, r6
 800a43a:	4628      	mov	r0, r5
 800a43c:	47b8      	blx	r7
 800a43e:	3001      	adds	r0, #1
 800a440:	f43f af19 	beq.w	800a276 <_printf_float+0xc2>
 800a444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a448:	4313      	orrs	r3, r2
 800a44a:	d102      	bne.n	800a452 <_printf_float+0x29e>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	07d9      	lsls	r1, r3, #31
 800a450:	d5d8      	bpl.n	800a404 <_printf_float+0x250>
 800a452:	ee18 3a10 	vmov	r3, s16
 800a456:	4652      	mov	r2, sl
 800a458:	4631      	mov	r1, r6
 800a45a:	4628      	mov	r0, r5
 800a45c:	47b8      	blx	r7
 800a45e:	3001      	adds	r0, #1
 800a460:	f43f af09 	beq.w	800a276 <_printf_float+0xc2>
 800a464:	f04f 0900 	mov.w	r9, #0
 800a468:	f104 0a1a 	add.w	sl, r4, #26
 800a46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46e:	425b      	negs	r3, r3
 800a470:	454b      	cmp	r3, r9
 800a472:	dc01      	bgt.n	800a478 <_printf_float+0x2c4>
 800a474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a476:	e792      	b.n	800a39e <_printf_float+0x1ea>
 800a478:	2301      	movs	r3, #1
 800a47a:	4652      	mov	r2, sl
 800a47c:	4631      	mov	r1, r6
 800a47e:	4628      	mov	r0, r5
 800a480:	47b8      	blx	r7
 800a482:	3001      	adds	r0, #1
 800a484:	f43f aef7 	beq.w	800a276 <_printf_float+0xc2>
 800a488:	f109 0901 	add.w	r9, r9, #1
 800a48c:	e7ee      	b.n	800a46c <_printf_float+0x2b8>
 800a48e:	bf00      	nop
 800a490:	7fefffff 	.word	0x7fefffff
 800a494:	0800f520 	.word	0x0800f520
 800a498:	0800f524 	.word	0x0800f524
 800a49c:	0800f52c 	.word	0x0800f52c
 800a4a0:	0800f528 	.word	0x0800f528
 800a4a4:	0800f530 	.word	0x0800f530
 800a4a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	bfa8      	it	ge
 800a4b0:	461a      	movge	r2, r3
 800a4b2:	2a00      	cmp	r2, #0
 800a4b4:	4691      	mov	r9, r2
 800a4b6:	dc37      	bgt.n	800a528 <_printf_float+0x374>
 800a4b8:	f04f 0b00 	mov.w	fp, #0
 800a4bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4c0:	f104 021a 	add.w	r2, r4, #26
 800a4c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4c6:	9305      	str	r3, [sp, #20]
 800a4c8:	eba3 0309 	sub.w	r3, r3, r9
 800a4cc:	455b      	cmp	r3, fp
 800a4ce:	dc33      	bgt.n	800a538 <_printf_float+0x384>
 800a4d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	db3b      	blt.n	800a550 <_printf_float+0x39c>
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	07da      	lsls	r2, r3, #31
 800a4dc:	d438      	bmi.n	800a550 <_printf_float+0x39c>
 800a4de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4e0:	9b05      	ldr	r3, [sp, #20]
 800a4e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	eba2 0901 	sub.w	r9, r2, r1
 800a4ea:	4599      	cmp	r9, r3
 800a4ec:	bfa8      	it	ge
 800a4ee:	4699      	movge	r9, r3
 800a4f0:	f1b9 0f00 	cmp.w	r9, #0
 800a4f4:	dc35      	bgt.n	800a562 <_printf_float+0x3ae>
 800a4f6:	f04f 0800 	mov.w	r8, #0
 800a4fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4fe:	f104 0a1a 	add.w	sl, r4, #26
 800a502:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a506:	1a9b      	subs	r3, r3, r2
 800a508:	eba3 0309 	sub.w	r3, r3, r9
 800a50c:	4543      	cmp	r3, r8
 800a50e:	f77f af79 	ble.w	800a404 <_printf_float+0x250>
 800a512:	2301      	movs	r3, #1
 800a514:	4652      	mov	r2, sl
 800a516:	4631      	mov	r1, r6
 800a518:	4628      	mov	r0, r5
 800a51a:	47b8      	blx	r7
 800a51c:	3001      	adds	r0, #1
 800a51e:	f43f aeaa 	beq.w	800a276 <_printf_float+0xc2>
 800a522:	f108 0801 	add.w	r8, r8, #1
 800a526:	e7ec      	b.n	800a502 <_printf_float+0x34e>
 800a528:	4613      	mov	r3, r2
 800a52a:	4631      	mov	r1, r6
 800a52c:	4642      	mov	r2, r8
 800a52e:	4628      	mov	r0, r5
 800a530:	47b8      	blx	r7
 800a532:	3001      	adds	r0, #1
 800a534:	d1c0      	bne.n	800a4b8 <_printf_float+0x304>
 800a536:	e69e      	b.n	800a276 <_printf_float+0xc2>
 800a538:	2301      	movs	r3, #1
 800a53a:	4631      	mov	r1, r6
 800a53c:	4628      	mov	r0, r5
 800a53e:	9205      	str	r2, [sp, #20]
 800a540:	47b8      	blx	r7
 800a542:	3001      	adds	r0, #1
 800a544:	f43f ae97 	beq.w	800a276 <_printf_float+0xc2>
 800a548:	9a05      	ldr	r2, [sp, #20]
 800a54a:	f10b 0b01 	add.w	fp, fp, #1
 800a54e:	e7b9      	b.n	800a4c4 <_printf_float+0x310>
 800a550:	ee18 3a10 	vmov	r3, s16
 800a554:	4652      	mov	r2, sl
 800a556:	4631      	mov	r1, r6
 800a558:	4628      	mov	r0, r5
 800a55a:	47b8      	blx	r7
 800a55c:	3001      	adds	r0, #1
 800a55e:	d1be      	bne.n	800a4de <_printf_float+0x32a>
 800a560:	e689      	b.n	800a276 <_printf_float+0xc2>
 800a562:	9a05      	ldr	r2, [sp, #20]
 800a564:	464b      	mov	r3, r9
 800a566:	4442      	add	r2, r8
 800a568:	4631      	mov	r1, r6
 800a56a:	4628      	mov	r0, r5
 800a56c:	47b8      	blx	r7
 800a56e:	3001      	adds	r0, #1
 800a570:	d1c1      	bne.n	800a4f6 <_printf_float+0x342>
 800a572:	e680      	b.n	800a276 <_printf_float+0xc2>
 800a574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a576:	2a01      	cmp	r2, #1
 800a578:	dc01      	bgt.n	800a57e <_printf_float+0x3ca>
 800a57a:	07db      	lsls	r3, r3, #31
 800a57c:	d538      	bpl.n	800a5f0 <_printf_float+0x43c>
 800a57e:	2301      	movs	r3, #1
 800a580:	4642      	mov	r2, r8
 800a582:	4631      	mov	r1, r6
 800a584:	4628      	mov	r0, r5
 800a586:	47b8      	blx	r7
 800a588:	3001      	adds	r0, #1
 800a58a:	f43f ae74 	beq.w	800a276 <_printf_float+0xc2>
 800a58e:	ee18 3a10 	vmov	r3, s16
 800a592:	4652      	mov	r2, sl
 800a594:	4631      	mov	r1, r6
 800a596:	4628      	mov	r0, r5
 800a598:	47b8      	blx	r7
 800a59a:	3001      	adds	r0, #1
 800a59c:	f43f ae6b 	beq.w	800a276 <_printf_float+0xc2>
 800a5a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f7f6 faae 	bl	8000b08 <__aeabi_dcmpeq>
 800a5ac:	b9d8      	cbnz	r0, 800a5e6 <_printf_float+0x432>
 800a5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b0:	f108 0201 	add.w	r2, r8, #1
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	47b8      	blx	r7
 800a5bc:	3001      	adds	r0, #1
 800a5be:	d10e      	bne.n	800a5de <_printf_float+0x42a>
 800a5c0:	e659      	b.n	800a276 <_printf_float+0xc2>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	4652      	mov	r2, sl
 800a5c6:	4631      	mov	r1, r6
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	47b8      	blx	r7
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	f43f ae52 	beq.w	800a276 <_printf_float+0xc2>
 800a5d2:	f108 0801 	add.w	r8, r8, #1
 800a5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	4543      	cmp	r3, r8
 800a5dc:	dcf1      	bgt.n	800a5c2 <_printf_float+0x40e>
 800a5de:	464b      	mov	r3, r9
 800a5e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a5e4:	e6dc      	b.n	800a3a0 <_printf_float+0x1ec>
 800a5e6:	f04f 0800 	mov.w	r8, #0
 800a5ea:	f104 0a1a 	add.w	sl, r4, #26
 800a5ee:	e7f2      	b.n	800a5d6 <_printf_float+0x422>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	4642      	mov	r2, r8
 800a5f4:	e7df      	b.n	800a5b6 <_printf_float+0x402>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	464a      	mov	r2, r9
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	47b8      	blx	r7
 800a600:	3001      	adds	r0, #1
 800a602:	f43f ae38 	beq.w	800a276 <_printf_float+0xc2>
 800a606:	f108 0801 	add.w	r8, r8, #1
 800a60a:	68e3      	ldr	r3, [r4, #12]
 800a60c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a60e:	1a5b      	subs	r3, r3, r1
 800a610:	4543      	cmp	r3, r8
 800a612:	dcf0      	bgt.n	800a5f6 <_printf_float+0x442>
 800a614:	e6fa      	b.n	800a40c <_printf_float+0x258>
 800a616:	f04f 0800 	mov.w	r8, #0
 800a61a:	f104 0919 	add.w	r9, r4, #25
 800a61e:	e7f4      	b.n	800a60a <_printf_float+0x456>

0800a620 <_printf_common>:
 800a620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a624:	4616      	mov	r6, r2
 800a626:	4699      	mov	r9, r3
 800a628:	688a      	ldr	r2, [r1, #8]
 800a62a:	690b      	ldr	r3, [r1, #16]
 800a62c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a630:	4293      	cmp	r3, r2
 800a632:	bfb8      	it	lt
 800a634:	4613      	movlt	r3, r2
 800a636:	6033      	str	r3, [r6, #0]
 800a638:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a63c:	4607      	mov	r7, r0
 800a63e:	460c      	mov	r4, r1
 800a640:	b10a      	cbz	r2, 800a646 <_printf_common+0x26>
 800a642:	3301      	adds	r3, #1
 800a644:	6033      	str	r3, [r6, #0]
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	0699      	lsls	r1, r3, #26
 800a64a:	bf42      	ittt	mi
 800a64c:	6833      	ldrmi	r3, [r6, #0]
 800a64e:	3302      	addmi	r3, #2
 800a650:	6033      	strmi	r3, [r6, #0]
 800a652:	6825      	ldr	r5, [r4, #0]
 800a654:	f015 0506 	ands.w	r5, r5, #6
 800a658:	d106      	bne.n	800a668 <_printf_common+0x48>
 800a65a:	f104 0a19 	add.w	sl, r4, #25
 800a65e:	68e3      	ldr	r3, [r4, #12]
 800a660:	6832      	ldr	r2, [r6, #0]
 800a662:	1a9b      	subs	r3, r3, r2
 800a664:	42ab      	cmp	r3, r5
 800a666:	dc26      	bgt.n	800a6b6 <_printf_common+0x96>
 800a668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a66c:	1e13      	subs	r3, r2, #0
 800a66e:	6822      	ldr	r2, [r4, #0]
 800a670:	bf18      	it	ne
 800a672:	2301      	movne	r3, #1
 800a674:	0692      	lsls	r2, r2, #26
 800a676:	d42b      	bmi.n	800a6d0 <_printf_common+0xb0>
 800a678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a67c:	4649      	mov	r1, r9
 800a67e:	4638      	mov	r0, r7
 800a680:	47c0      	blx	r8
 800a682:	3001      	adds	r0, #1
 800a684:	d01e      	beq.n	800a6c4 <_printf_common+0xa4>
 800a686:	6823      	ldr	r3, [r4, #0]
 800a688:	68e5      	ldr	r5, [r4, #12]
 800a68a:	6832      	ldr	r2, [r6, #0]
 800a68c:	f003 0306 	and.w	r3, r3, #6
 800a690:	2b04      	cmp	r3, #4
 800a692:	bf08      	it	eq
 800a694:	1aad      	subeq	r5, r5, r2
 800a696:	68a3      	ldr	r3, [r4, #8]
 800a698:	6922      	ldr	r2, [r4, #16]
 800a69a:	bf0c      	ite	eq
 800a69c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6a0:	2500      	movne	r5, #0
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	bfc4      	itt	gt
 800a6a6:	1a9b      	subgt	r3, r3, r2
 800a6a8:	18ed      	addgt	r5, r5, r3
 800a6aa:	2600      	movs	r6, #0
 800a6ac:	341a      	adds	r4, #26
 800a6ae:	42b5      	cmp	r5, r6
 800a6b0:	d11a      	bne.n	800a6e8 <_printf_common+0xc8>
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	e008      	b.n	800a6c8 <_printf_common+0xa8>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	4652      	mov	r2, sl
 800a6ba:	4649      	mov	r1, r9
 800a6bc:	4638      	mov	r0, r7
 800a6be:	47c0      	blx	r8
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	d103      	bne.n	800a6cc <_printf_common+0xac>
 800a6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6cc:	3501      	adds	r5, #1
 800a6ce:	e7c6      	b.n	800a65e <_printf_common+0x3e>
 800a6d0:	18e1      	adds	r1, r4, r3
 800a6d2:	1c5a      	adds	r2, r3, #1
 800a6d4:	2030      	movs	r0, #48	; 0x30
 800a6d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6da:	4422      	add	r2, r4
 800a6dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6e4:	3302      	adds	r3, #2
 800a6e6:	e7c7      	b.n	800a678 <_printf_common+0x58>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	4622      	mov	r2, r4
 800a6ec:	4649      	mov	r1, r9
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	47c0      	blx	r8
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	d0e6      	beq.n	800a6c4 <_printf_common+0xa4>
 800a6f6:	3601      	adds	r6, #1
 800a6f8:	e7d9      	b.n	800a6ae <_printf_common+0x8e>
	...

0800a6fc <_printf_i>:
 800a6fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a700:	460c      	mov	r4, r1
 800a702:	4691      	mov	r9, r2
 800a704:	7e27      	ldrb	r7, [r4, #24]
 800a706:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a708:	2f78      	cmp	r7, #120	; 0x78
 800a70a:	4680      	mov	r8, r0
 800a70c:	469a      	mov	sl, r3
 800a70e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a712:	d807      	bhi.n	800a724 <_printf_i+0x28>
 800a714:	2f62      	cmp	r7, #98	; 0x62
 800a716:	d80a      	bhi.n	800a72e <_printf_i+0x32>
 800a718:	2f00      	cmp	r7, #0
 800a71a:	f000 80d8 	beq.w	800a8ce <_printf_i+0x1d2>
 800a71e:	2f58      	cmp	r7, #88	; 0x58
 800a720:	f000 80a3 	beq.w	800a86a <_printf_i+0x16e>
 800a724:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a72c:	e03a      	b.n	800a7a4 <_printf_i+0xa8>
 800a72e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a732:	2b15      	cmp	r3, #21
 800a734:	d8f6      	bhi.n	800a724 <_printf_i+0x28>
 800a736:	a001      	add	r0, pc, #4	; (adr r0, 800a73c <_printf_i+0x40>)
 800a738:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a73c:	0800a795 	.word	0x0800a795
 800a740:	0800a7a9 	.word	0x0800a7a9
 800a744:	0800a725 	.word	0x0800a725
 800a748:	0800a725 	.word	0x0800a725
 800a74c:	0800a725 	.word	0x0800a725
 800a750:	0800a725 	.word	0x0800a725
 800a754:	0800a7a9 	.word	0x0800a7a9
 800a758:	0800a725 	.word	0x0800a725
 800a75c:	0800a725 	.word	0x0800a725
 800a760:	0800a725 	.word	0x0800a725
 800a764:	0800a725 	.word	0x0800a725
 800a768:	0800a8b5 	.word	0x0800a8b5
 800a76c:	0800a7d9 	.word	0x0800a7d9
 800a770:	0800a897 	.word	0x0800a897
 800a774:	0800a725 	.word	0x0800a725
 800a778:	0800a725 	.word	0x0800a725
 800a77c:	0800a8d7 	.word	0x0800a8d7
 800a780:	0800a725 	.word	0x0800a725
 800a784:	0800a7d9 	.word	0x0800a7d9
 800a788:	0800a725 	.word	0x0800a725
 800a78c:	0800a725 	.word	0x0800a725
 800a790:	0800a89f 	.word	0x0800a89f
 800a794:	680b      	ldr	r3, [r1, #0]
 800a796:	1d1a      	adds	r2, r3, #4
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	600a      	str	r2, [r1, #0]
 800a79c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a7a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e0a3      	b.n	800a8f0 <_printf_i+0x1f4>
 800a7a8:	6825      	ldr	r5, [r4, #0]
 800a7aa:	6808      	ldr	r0, [r1, #0]
 800a7ac:	062e      	lsls	r6, r5, #24
 800a7ae:	f100 0304 	add.w	r3, r0, #4
 800a7b2:	d50a      	bpl.n	800a7ca <_printf_i+0xce>
 800a7b4:	6805      	ldr	r5, [r0, #0]
 800a7b6:	600b      	str	r3, [r1, #0]
 800a7b8:	2d00      	cmp	r5, #0
 800a7ba:	da03      	bge.n	800a7c4 <_printf_i+0xc8>
 800a7bc:	232d      	movs	r3, #45	; 0x2d
 800a7be:	426d      	negs	r5, r5
 800a7c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7c4:	485e      	ldr	r0, [pc, #376]	; (800a940 <_printf_i+0x244>)
 800a7c6:	230a      	movs	r3, #10
 800a7c8:	e019      	b.n	800a7fe <_printf_i+0x102>
 800a7ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a7ce:	6805      	ldr	r5, [r0, #0]
 800a7d0:	600b      	str	r3, [r1, #0]
 800a7d2:	bf18      	it	ne
 800a7d4:	b22d      	sxthne	r5, r5
 800a7d6:	e7ef      	b.n	800a7b8 <_printf_i+0xbc>
 800a7d8:	680b      	ldr	r3, [r1, #0]
 800a7da:	6825      	ldr	r5, [r4, #0]
 800a7dc:	1d18      	adds	r0, r3, #4
 800a7de:	6008      	str	r0, [r1, #0]
 800a7e0:	0628      	lsls	r0, r5, #24
 800a7e2:	d501      	bpl.n	800a7e8 <_printf_i+0xec>
 800a7e4:	681d      	ldr	r5, [r3, #0]
 800a7e6:	e002      	b.n	800a7ee <_printf_i+0xf2>
 800a7e8:	0669      	lsls	r1, r5, #25
 800a7ea:	d5fb      	bpl.n	800a7e4 <_printf_i+0xe8>
 800a7ec:	881d      	ldrh	r5, [r3, #0]
 800a7ee:	4854      	ldr	r0, [pc, #336]	; (800a940 <_printf_i+0x244>)
 800a7f0:	2f6f      	cmp	r7, #111	; 0x6f
 800a7f2:	bf0c      	ite	eq
 800a7f4:	2308      	moveq	r3, #8
 800a7f6:	230a      	movne	r3, #10
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7fe:	6866      	ldr	r6, [r4, #4]
 800a800:	60a6      	str	r6, [r4, #8]
 800a802:	2e00      	cmp	r6, #0
 800a804:	bfa2      	ittt	ge
 800a806:	6821      	ldrge	r1, [r4, #0]
 800a808:	f021 0104 	bicge.w	r1, r1, #4
 800a80c:	6021      	strge	r1, [r4, #0]
 800a80e:	b90d      	cbnz	r5, 800a814 <_printf_i+0x118>
 800a810:	2e00      	cmp	r6, #0
 800a812:	d04d      	beq.n	800a8b0 <_printf_i+0x1b4>
 800a814:	4616      	mov	r6, r2
 800a816:	fbb5 f1f3 	udiv	r1, r5, r3
 800a81a:	fb03 5711 	mls	r7, r3, r1, r5
 800a81e:	5dc7      	ldrb	r7, [r0, r7]
 800a820:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a824:	462f      	mov	r7, r5
 800a826:	42bb      	cmp	r3, r7
 800a828:	460d      	mov	r5, r1
 800a82a:	d9f4      	bls.n	800a816 <_printf_i+0x11a>
 800a82c:	2b08      	cmp	r3, #8
 800a82e:	d10b      	bne.n	800a848 <_printf_i+0x14c>
 800a830:	6823      	ldr	r3, [r4, #0]
 800a832:	07df      	lsls	r7, r3, #31
 800a834:	d508      	bpl.n	800a848 <_printf_i+0x14c>
 800a836:	6923      	ldr	r3, [r4, #16]
 800a838:	6861      	ldr	r1, [r4, #4]
 800a83a:	4299      	cmp	r1, r3
 800a83c:	bfde      	ittt	le
 800a83e:	2330      	movle	r3, #48	; 0x30
 800a840:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a844:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a848:	1b92      	subs	r2, r2, r6
 800a84a:	6122      	str	r2, [r4, #16]
 800a84c:	f8cd a000 	str.w	sl, [sp]
 800a850:	464b      	mov	r3, r9
 800a852:	aa03      	add	r2, sp, #12
 800a854:	4621      	mov	r1, r4
 800a856:	4640      	mov	r0, r8
 800a858:	f7ff fee2 	bl	800a620 <_printf_common>
 800a85c:	3001      	adds	r0, #1
 800a85e:	d14c      	bne.n	800a8fa <_printf_i+0x1fe>
 800a860:	f04f 30ff 	mov.w	r0, #4294967295
 800a864:	b004      	add	sp, #16
 800a866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a86a:	4835      	ldr	r0, [pc, #212]	; (800a940 <_printf_i+0x244>)
 800a86c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a870:	6823      	ldr	r3, [r4, #0]
 800a872:	680e      	ldr	r6, [r1, #0]
 800a874:	061f      	lsls	r7, r3, #24
 800a876:	f856 5b04 	ldr.w	r5, [r6], #4
 800a87a:	600e      	str	r6, [r1, #0]
 800a87c:	d514      	bpl.n	800a8a8 <_printf_i+0x1ac>
 800a87e:	07d9      	lsls	r1, r3, #31
 800a880:	bf44      	itt	mi
 800a882:	f043 0320 	orrmi.w	r3, r3, #32
 800a886:	6023      	strmi	r3, [r4, #0]
 800a888:	b91d      	cbnz	r5, 800a892 <_printf_i+0x196>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	f023 0320 	bic.w	r3, r3, #32
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	2310      	movs	r3, #16
 800a894:	e7b0      	b.n	800a7f8 <_printf_i+0xfc>
 800a896:	6823      	ldr	r3, [r4, #0]
 800a898:	f043 0320 	orr.w	r3, r3, #32
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	2378      	movs	r3, #120	; 0x78
 800a8a0:	4828      	ldr	r0, [pc, #160]	; (800a944 <_printf_i+0x248>)
 800a8a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8a6:	e7e3      	b.n	800a870 <_printf_i+0x174>
 800a8a8:	065e      	lsls	r6, r3, #25
 800a8aa:	bf48      	it	mi
 800a8ac:	b2ad      	uxthmi	r5, r5
 800a8ae:	e7e6      	b.n	800a87e <_printf_i+0x182>
 800a8b0:	4616      	mov	r6, r2
 800a8b2:	e7bb      	b.n	800a82c <_printf_i+0x130>
 800a8b4:	680b      	ldr	r3, [r1, #0]
 800a8b6:	6826      	ldr	r6, [r4, #0]
 800a8b8:	6960      	ldr	r0, [r4, #20]
 800a8ba:	1d1d      	adds	r5, r3, #4
 800a8bc:	600d      	str	r5, [r1, #0]
 800a8be:	0635      	lsls	r5, r6, #24
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	d501      	bpl.n	800a8c8 <_printf_i+0x1cc>
 800a8c4:	6018      	str	r0, [r3, #0]
 800a8c6:	e002      	b.n	800a8ce <_printf_i+0x1d2>
 800a8c8:	0671      	lsls	r1, r6, #25
 800a8ca:	d5fb      	bpl.n	800a8c4 <_printf_i+0x1c8>
 800a8cc:	8018      	strh	r0, [r3, #0]
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	6123      	str	r3, [r4, #16]
 800a8d2:	4616      	mov	r6, r2
 800a8d4:	e7ba      	b.n	800a84c <_printf_i+0x150>
 800a8d6:	680b      	ldr	r3, [r1, #0]
 800a8d8:	1d1a      	adds	r2, r3, #4
 800a8da:	600a      	str	r2, [r1, #0]
 800a8dc:	681e      	ldr	r6, [r3, #0]
 800a8de:	6862      	ldr	r2, [r4, #4]
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f7f5 fc9c 	bl	8000220 <memchr>
 800a8e8:	b108      	cbz	r0, 800a8ee <_printf_i+0x1f2>
 800a8ea:	1b80      	subs	r0, r0, r6
 800a8ec:	6060      	str	r0, [r4, #4]
 800a8ee:	6863      	ldr	r3, [r4, #4]
 800a8f0:	6123      	str	r3, [r4, #16]
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8f8:	e7a8      	b.n	800a84c <_printf_i+0x150>
 800a8fa:	6923      	ldr	r3, [r4, #16]
 800a8fc:	4632      	mov	r2, r6
 800a8fe:	4649      	mov	r1, r9
 800a900:	4640      	mov	r0, r8
 800a902:	47d0      	blx	sl
 800a904:	3001      	adds	r0, #1
 800a906:	d0ab      	beq.n	800a860 <_printf_i+0x164>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	079b      	lsls	r3, r3, #30
 800a90c:	d413      	bmi.n	800a936 <_printf_i+0x23a>
 800a90e:	68e0      	ldr	r0, [r4, #12]
 800a910:	9b03      	ldr	r3, [sp, #12]
 800a912:	4298      	cmp	r0, r3
 800a914:	bfb8      	it	lt
 800a916:	4618      	movlt	r0, r3
 800a918:	e7a4      	b.n	800a864 <_printf_i+0x168>
 800a91a:	2301      	movs	r3, #1
 800a91c:	4632      	mov	r2, r6
 800a91e:	4649      	mov	r1, r9
 800a920:	4640      	mov	r0, r8
 800a922:	47d0      	blx	sl
 800a924:	3001      	adds	r0, #1
 800a926:	d09b      	beq.n	800a860 <_printf_i+0x164>
 800a928:	3501      	adds	r5, #1
 800a92a:	68e3      	ldr	r3, [r4, #12]
 800a92c:	9903      	ldr	r1, [sp, #12]
 800a92e:	1a5b      	subs	r3, r3, r1
 800a930:	42ab      	cmp	r3, r5
 800a932:	dcf2      	bgt.n	800a91a <_printf_i+0x21e>
 800a934:	e7eb      	b.n	800a90e <_printf_i+0x212>
 800a936:	2500      	movs	r5, #0
 800a938:	f104 0619 	add.w	r6, r4, #25
 800a93c:	e7f5      	b.n	800a92a <_printf_i+0x22e>
 800a93e:	bf00      	nop
 800a940:	0800f532 	.word	0x0800f532
 800a944:	0800f543 	.word	0x0800f543

0800a948 <_scanf_float>:
 800a948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94c:	b087      	sub	sp, #28
 800a94e:	4617      	mov	r7, r2
 800a950:	9303      	str	r3, [sp, #12]
 800a952:	688b      	ldr	r3, [r1, #8]
 800a954:	1e5a      	subs	r2, r3, #1
 800a956:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a95a:	bf83      	ittte	hi
 800a95c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a960:	195b      	addhi	r3, r3, r5
 800a962:	9302      	strhi	r3, [sp, #8]
 800a964:	2300      	movls	r3, #0
 800a966:	bf86      	itte	hi
 800a968:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a96c:	608b      	strhi	r3, [r1, #8]
 800a96e:	9302      	strls	r3, [sp, #8]
 800a970:	680b      	ldr	r3, [r1, #0]
 800a972:	468b      	mov	fp, r1
 800a974:	2500      	movs	r5, #0
 800a976:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a97a:	f84b 3b1c 	str.w	r3, [fp], #28
 800a97e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a982:	4680      	mov	r8, r0
 800a984:	460c      	mov	r4, r1
 800a986:	465e      	mov	r6, fp
 800a988:	46aa      	mov	sl, r5
 800a98a:	46a9      	mov	r9, r5
 800a98c:	9501      	str	r5, [sp, #4]
 800a98e:	68a2      	ldr	r2, [r4, #8]
 800a990:	b152      	cbz	r2, 800a9a8 <_scanf_float+0x60>
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	2b4e      	cmp	r3, #78	; 0x4e
 800a998:	d864      	bhi.n	800aa64 <_scanf_float+0x11c>
 800a99a:	2b40      	cmp	r3, #64	; 0x40
 800a99c:	d83c      	bhi.n	800aa18 <_scanf_float+0xd0>
 800a99e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a9a2:	b2c8      	uxtb	r0, r1
 800a9a4:	280e      	cmp	r0, #14
 800a9a6:	d93a      	bls.n	800aa1e <_scanf_float+0xd6>
 800a9a8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ac:	d003      	beq.n	800a9b6 <_scanf_float+0x6e>
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9ba:	f1ba 0f01 	cmp.w	sl, #1
 800a9be:	f200 8113 	bhi.w	800abe8 <_scanf_float+0x2a0>
 800a9c2:	455e      	cmp	r6, fp
 800a9c4:	f200 8105 	bhi.w	800abd2 <_scanf_float+0x28a>
 800a9c8:	2501      	movs	r5, #1
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	b007      	add	sp, #28
 800a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a9d6:	2a0d      	cmp	r2, #13
 800a9d8:	d8e6      	bhi.n	800a9a8 <_scanf_float+0x60>
 800a9da:	a101      	add	r1, pc, #4	; (adr r1, 800a9e0 <_scanf_float+0x98>)
 800a9dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a9e0:	0800ab1f 	.word	0x0800ab1f
 800a9e4:	0800a9a9 	.word	0x0800a9a9
 800a9e8:	0800a9a9 	.word	0x0800a9a9
 800a9ec:	0800a9a9 	.word	0x0800a9a9
 800a9f0:	0800ab7f 	.word	0x0800ab7f
 800a9f4:	0800ab57 	.word	0x0800ab57
 800a9f8:	0800a9a9 	.word	0x0800a9a9
 800a9fc:	0800a9a9 	.word	0x0800a9a9
 800aa00:	0800ab2d 	.word	0x0800ab2d
 800aa04:	0800a9a9 	.word	0x0800a9a9
 800aa08:	0800a9a9 	.word	0x0800a9a9
 800aa0c:	0800a9a9 	.word	0x0800a9a9
 800aa10:	0800a9a9 	.word	0x0800a9a9
 800aa14:	0800aae5 	.word	0x0800aae5
 800aa18:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800aa1c:	e7db      	b.n	800a9d6 <_scanf_float+0x8e>
 800aa1e:	290e      	cmp	r1, #14
 800aa20:	d8c2      	bhi.n	800a9a8 <_scanf_float+0x60>
 800aa22:	a001      	add	r0, pc, #4	; (adr r0, 800aa28 <_scanf_float+0xe0>)
 800aa24:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aa28:	0800aad7 	.word	0x0800aad7
 800aa2c:	0800a9a9 	.word	0x0800a9a9
 800aa30:	0800aad7 	.word	0x0800aad7
 800aa34:	0800ab6b 	.word	0x0800ab6b
 800aa38:	0800a9a9 	.word	0x0800a9a9
 800aa3c:	0800aa85 	.word	0x0800aa85
 800aa40:	0800aac1 	.word	0x0800aac1
 800aa44:	0800aac1 	.word	0x0800aac1
 800aa48:	0800aac1 	.word	0x0800aac1
 800aa4c:	0800aac1 	.word	0x0800aac1
 800aa50:	0800aac1 	.word	0x0800aac1
 800aa54:	0800aac1 	.word	0x0800aac1
 800aa58:	0800aac1 	.word	0x0800aac1
 800aa5c:	0800aac1 	.word	0x0800aac1
 800aa60:	0800aac1 	.word	0x0800aac1
 800aa64:	2b6e      	cmp	r3, #110	; 0x6e
 800aa66:	d809      	bhi.n	800aa7c <_scanf_float+0x134>
 800aa68:	2b60      	cmp	r3, #96	; 0x60
 800aa6a:	d8b2      	bhi.n	800a9d2 <_scanf_float+0x8a>
 800aa6c:	2b54      	cmp	r3, #84	; 0x54
 800aa6e:	d077      	beq.n	800ab60 <_scanf_float+0x218>
 800aa70:	2b59      	cmp	r3, #89	; 0x59
 800aa72:	d199      	bne.n	800a9a8 <_scanf_float+0x60>
 800aa74:	2d07      	cmp	r5, #7
 800aa76:	d197      	bne.n	800a9a8 <_scanf_float+0x60>
 800aa78:	2508      	movs	r5, #8
 800aa7a:	e029      	b.n	800aad0 <_scanf_float+0x188>
 800aa7c:	2b74      	cmp	r3, #116	; 0x74
 800aa7e:	d06f      	beq.n	800ab60 <_scanf_float+0x218>
 800aa80:	2b79      	cmp	r3, #121	; 0x79
 800aa82:	e7f6      	b.n	800aa72 <_scanf_float+0x12a>
 800aa84:	6821      	ldr	r1, [r4, #0]
 800aa86:	05c8      	lsls	r0, r1, #23
 800aa88:	d51a      	bpl.n	800aac0 <_scanf_float+0x178>
 800aa8a:	9b02      	ldr	r3, [sp, #8]
 800aa8c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800aa90:	6021      	str	r1, [r4, #0]
 800aa92:	f109 0901 	add.w	r9, r9, #1
 800aa96:	b11b      	cbz	r3, 800aaa0 <_scanf_float+0x158>
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	3201      	adds	r2, #1
 800aa9c:	9302      	str	r3, [sp, #8]
 800aa9e:	60a2      	str	r2, [r4, #8]
 800aaa0:	68a3      	ldr	r3, [r4, #8]
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	60a3      	str	r3, [r4, #8]
 800aaa6:	6923      	ldr	r3, [r4, #16]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	6123      	str	r3, [r4, #16]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	3b01      	subs	r3, #1
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	607b      	str	r3, [r7, #4]
 800aab4:	f340 8084 	ble.w	800abc0 <_scanf_float+0x278>
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	3301      	adds	r3, #1
 800aabc:	603b      	str	r3, [r7, #0]
 800aabe:	e766      	b.n	800a98e <_scanf_float+0x46>
 800aac0:	eb1a 0f05 	cmn.w	sl, r5
 800aac4:	f47f af70 	bne.w	800a9a8 <_scanf_float+0x60>
 800aac8:	6822      	ldr	r2, [r4, #0]
 800aaca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800aace:	6022      	str	r2, [r4, #0]
 800aad0:	f806 3b01 	strb.w	r3, [r6], #1
 800aad4:	e7e4      	b.n	800aaa0 <_scanf_float+0x158>
 800aad6:	6822      	ldr	r2, [r4, #0]
 800aad8:	0610      	lsls	r0, r2, #24
 800aada:	f57f af65 	bpl.w	800a9a8 <_scanf_float+0x60>
 800aade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aae2:	e7f4      	b.n	800aace <_scanf_float+0x186>
 800aae4:	f1ba 0f00 	cmp.w	sl, #0
 800aae8:	d10e      	bne.n	800ab08 <_scanf_float+0x1c0>
 800aaea:	f1b9 0f00 	cmp.w	r9, #0
 800aaee:	d10e      	bne.n	800ab0e <_scanf_float+0x1c6>
 800aaf0:	6822      	ldr	r2, [r4, #0]
 800aaf2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aaf6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aafa:	d108      	bne.n	800ab0e <_scanf_float+0x1c6>
 800aafc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab00:	6022      	str	r2, [r4, #0]
 800ab02:	f04f 0a01 	mov.w	sl, #1
 800ab06:	e7e3      	b.n	800aad0 <_scanf_float+0x188>
 800ab08:	f1ba 0f02 	cmp.w	sl, #2
 800ab0c:	d055      	beq.n	800abba <_scanf_float+0x272>
 800ab0e:	2d01      	cmp	r5, #1
 800ab10:	d002      	beq.n	800ab18 <_scanf_float+0x1d0>
 800ab12:	2d04      	cmp	r5, #4
 800ab14:	f47f af48 	bne.w	800a9a8 <_scanf_float+0x60>
 800ab18:	3501      	adds	r5, #1
 800ab1a:	b2ed      	uxtb	r5, r5
 800ab1c:	e7d8      	b.n	800aad0 <_scanf_float+0x188>
 800ab1e:	f1ba 0f01 	cmp.w	sl, #1
 800ab22:	f47f af41 	bne.w	800a9a8 <_scanf_float+0x60>
 800ab26:	f04f 0a02 	mov.w	sl, #2
 800ab2a:	e7d1      	b.n	800aad0 <_scanf_float+0x188>
 800ab2c:	b97d      	cbnz	r5, 800ab4e <_scanf_float+0x206>
 800ab2e:	f1b9 0f00 	cmp.w	r9, #0
 800ab32:	f47f af3c 	bne.w	800a9ae <_scanf_float+0x66>
 800ab36:	6822      	ldr	r2, [r4, #0]
 800ab38:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ab3c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ab40:	f47f af39 	bne.w	800a9b6 <_scanf_float+0x6e>
 800ab44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab48:	6022      	str	r2, [r4, #0]
 800ab4a:	2501      	movs	r5, #1
 800ab4c:	e7c0      	b.n	800aad0 <_scanf_float+0x188>
 800ab4e:	2d03      	cmp	r5, #3
 800ab50:	d0e2      	beq.n	800ab18 <_scanf_float+0x1d0>
 800ab52:	2d05      	cmp	r5, #5
 800ab54:	e7de      	b.n	800ab14 <_scanf_float+0x1cc>
 800ab56:	2d02      	cmp	r5, #2
 800ab58:	f47f af26 	bne.w	800a9a8 <_scanf_float+0x60>
 800ab5c:	2503      	movs	r5, #3
 800ab5e:	e7b7      	b.n	800aad0 <_scanf_float+0x188>
 800ab60:	2d06      	cmp	r5, #6
 800ab62:	f47f af21 	bne.w	800a9a8 <_scanf_float+0x60>
 800ab66:	2507      	movs	r5, #7
 800ab68:	e7b2      	b.n	800aad0 <_scanf_float+0x188>
 800ab6a:	6822      	ldr	r2, [r4, #0]
 800ab6c:	0591      	lsls	r1, r2, #22
 800ab6e:	f57f af1b 	bpl.w	800a9a8 <_scanf_float+0x60>
 800ab72:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ab76:	6022      	str	r2, [r4, #0]
 800ab78:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab7c:	e7a8      	b.n	800aad0 <_scanf_float+0x188>
 800ab7e:	6822      	ldr	r2, [r4, #0]
 800ab80:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ab84:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ab88:	d006      	beq.n	800ab98 <_scanf_float+0x250>
 800ab8a:	0550      	lsls	r0, r2, #21
 800ab8c:	f57f af0c 	bpl.w	800a9a8 <_scanf_float+0x60>
 800ab90:	f1b9 0f00 	cmp.w	r9, #0
 800ab94:	f43f af0f 	beq.w	800a9b6 <_scanf_float+0x6e>
 800ab98:	0591      	lsls	r1, r2, #22
 800ab9a:	bf58      	it	pl
 800ab9c:	9901      	ldrpl	r1, [sp, #4]
 800ab9e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aba2:	bf58      	it	pl
 800aba4:	eba9 0101 	subpl.w	r1, r9, r1
 800aba8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800abac:	bf58      	it	pl
 800abae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800abb2:	6022      	str	r2, [r4, #0]
 800abb4:	f04f 0900 	mov.w	r9, #0
 800abb8:	e78a      	b.n	800aad0 <_scanf_float+0x188>
 800abba:	f04f 0a03 	mov.w	sl, #3
 800abbe:	e787      	b.n	800aad0 <_scanf_float+0x188>
 800abc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800abc4:	4639      	mov	r1, r7
 800abc6:	4640      	mov	r0, r8
 800abc8:	4798      	blx	r3
 800abca:	2800      	cmp	r0, #0
 800abcc:	f43f aedf 	beq.w	800a98e <_scanf_float+0x46>
 800abd0:	e6ea      	b.n	800a9a8 <_scanf_float+0x60>
 800abd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800abda:	463a      	mov	r2, r7
 800abdc:	4640      	mov	r0, r8
 800abde:	4798      	blx	r3
 800abe0:	6923      	ldr	r3, [r4, #16]
 800abe2:	3b01      	subs	r3, #1
 800abe4:	6123      	str	r3, [r4, #16]
 800abe6:	e6ec      	b.n	800a9c2 <_scanf_float+0x7a>
 800abe8:	1e6b      	subs	r3, r5, #1
 800abea:	2b06      	cmp	r3, #6
 800abec:	d825      	bhi.n	800ac3a <_scanf_float+0x2f2>
 800abee:	2d02      	cmp	r5, #2
 800abf0:	d836      	bhi.n	800ac60 <_scanf_float+0x318>
 800abf2:	455e      	cmp	r6, fp
 800abf4:	f67f aee8 	bls.w	800a9c8 <_scanf_float+0x80>
 800abf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abfc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac00:	463a      	mov	r2, r7
 800ac02:	4640      	mov	r0, r8
 800ac04:	4798      	blx	r3
 800ac06:	6923      	ldr	r3, [r4, #16]
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	6123      	str	r3, [r4, #16]
 800ac0c:	e7f1      	b.n	800abf2 <_scanf_float+0x2aa>
 800ac0e:	9802      	ldr	r0, [sp, #8]
 800ac10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac14:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ac18:	9002      	str	r0, [sp, #8]
 800ac1a:	463a      	mov	r2, r7
 800ac1c:	4640      	mov	r0, r8
 800ac1e:	4798      	blx	r3
 800ac20:	6923      	ldr	r3, [r4, #16]
 800ac22:	3b01      	subs	r3, #1
 800ac24:	6123      	str	r3, [r4, #16]
 800ac26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac2a:	fa5f fa8a 	uxtb.w	sl, sl
 800ac2e:	f1ba 0f02 	cmp.w	sl, #2
 800ac32:	d1ec      	bne.n	800ac0e <_scanf_float+0x2c6>
 800ac34:	3d03      	subs	r5, #3
 800ac36:	b2ed      	uxtb	r5, r5
 800ac38:	1b76      	subs	r6, r6, r5
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	05da      	lsls	r2, r3, #23
 800ac3e:	d52f      	bpl.n	800aca0 <_scanf_float+0x358>
 800ac40:	055b      	lsls	r3, r3, #21
 800ac42:	d510      	bpl.n	800ac66 <_scanf_float+0x31e>
 800ac44:	455e      	cmp	r6, fp
 800ac46:	f67f aebf 	bls.w	800a9c8 <_scanf_float+0x80>
 800ac4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac52:	463a      	mov	r2, r7
 800ac54:	4640      	mov	r0, r8
 800ac56:	4798      	blx	r3
 800ac58:	6923      	ldr	r3, [r4, #16]
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	6123      	str	r3, [r4, #16]
 800ac5e:	e7f1      	b.n	800ac44 <_scanf_float+0x2fc>
 800ac60:	46aa      	mov	sl, r5
 800ac62:	9602      	str	r6, [sp, #8]
 800ac64:	e7df      	b.n	800ac26 <_scanf_float+0x2de>
 800ac66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ac6a:	6923      	ldr	r3, [r4, #16]
 800ac6c:	2965      	cmp	r1, #101	; 0x65
 800ac6e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac72:	f106 35ff 	add.w	r5, r6, #4294967295
 800ac76:	6123      	str	r3, [r4, #16]
 800ac78:	d00c      	beq.n	800ac94 <_scanf_float+0x34c>
 800ac7a:	2945      	cmp	r1, #69	; 0x45
 800ac7c:	d00a      	beq.n	800ac94 <_scanf_float+0x34c>
 800ac7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac82:	463a      	mov	r2, r7
 800ac84:	4640      	mov	r0, r8
 800ac86:	4798      	blx	r3
 800ac88:	6923      	ldr	r3, [r4, #16]
 800ac8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	1eb5      	subs	r5, r6, #2
 800ac92:	6123      	str	r3, [r4, #16]
 800ac94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac98:	463a      	mov	r2, r7
 800ac9a:	4640      	mov	r0, r8
 800ac9c:	4798      	blx	r3
 800ac9e:	462e      	mov	r6, r5
 800aca0:	6825      	ldr	r5, [r4, #0]
 800aca2:	f015 0510 	ands.w	r5, r5, #16
 800aca6:	d158      	bne.n	800ad5a <_scanf_float+0x412>
 800aca8:	7035      	strb	r5, [r6, #0]
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800acb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acb4:	d11c      	bne.n	800acf0 <_scanf_float+0x3a8>
 800acb6:	9b01      	ldr	r3, [sp, #4]
 800acb8:	454b      	cmp	r3, r9
 800acba:	eba3 0209 	sub.w	r2, r3, r9
 800acbe:	d124      	bne.n	800ad0a <_scanf_float+0x3c2>
 800acc0:	2200      	movs	r2, #0
 800acc2:	4659      	mov	r1, fp
 800acc4:	4640      	mov	r0, r8
 800acc6:	f000 fed1 	bl	800ba6c <_strtod_r>
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	6821      	ldr	r1, [r4, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f011 0f02 	tst.w	r1, #2
 800acd4:	ec57 6b10 	vmov	r6, r7, d0
 800acd8:	f103 0204 	add.w	r2, r3, #4
 800acdc:	d020      	beq.n	800ad20 <_scanf_float+0x3d8>
 800acde:	9903      	ldr	r1, [sp, #12]
 800ace0:	600a      	str	r2, [r1, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	e9c3 6700 	strd	r6, r7, [r3]
 800ace8:	68e3      	ldr	r3, [r4, #12]
 800acea:	3301      	adds	r3, #1
 800acec:	60e3      	str	r3, [r4, #12]
 800acee:	e66c      	b.n	800a9ca <_scanf_float+0x82>
 800acf0:	9b04      	ldr	r3, [sp, #16]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d0e4      	beq.n	800acc0 <_scanf_float+0x378>
 800acf6:	9905      	ldr	r1, [sp, #20]
 800acf8:	230a      	movs	r3, #10
 800acfa:	462a      	mov	r2, r5
 800acfc:	3101      	adds	r1, #1
 800acfe:	4640      	mov	r0, r8
 800ad00:	f000 ff3e 	bl	800bb80 <_strtol_r>
 800ad04:	9b04      	ldr	r3, [sp, #16]
 800ad06:	9e05      	ldr	r6, [sp, #20]
 800ad08:	1ac2      	subs	r2, r0, r3
 800ad0a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ad0e:	429e      	cmp	r6, r3
 800ad10:	bf28      	it	cs
 800ad12:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ad16:	4912      	ldr	r1, [pc, #72]	; (800ad60 <_scanf_float+0x418>)
 800ad18:	4630      	mov	r0, r6
 800ad1a:	f000 f82b 	bl	800ad74 <siprintf>
 800ad1e:	e7cf      	b.n	800acc0 <_scanf_float+0x378>
 800ad20:	f011 0f04 	tst.w	r1, #4
 800ad24:	9903      	ldr	r1, [sp, #12]
 800ad26:	600a      	str	r2, [r1, #0]
 800ad28:	d1db      	bne.n	800ace2 <_scanf_float+0x39a>
 800ad2a:	f8d3 8000 	ldr.w	r8, [r3]
 800ad2e:	ee10 2a10 	vmov	r2, s0
 800ad32:	ee10 0a10 	vmov	r0, s0
 800ad36:	463b      	mov	r3, r7
 800ad38:	4639      	mov	r1, r7
 800ad3a:	f7f5 ff17 	bl	8000b6c <__aeabi_dcmpun>
 800ad3e:	b128      	cbz	r0, 800ad4c <_scanf_float+0x404>
 800ad40:	4808      	ldr	r0, [pc, #32]	; (800ad64 <_scanf_float+0x41c>)
 800ad42:	f000 f811 	bl	800ad68 <nanf>
 800ad46:	ed88 0a00 	vstr	s0, [r8]
 800ad4a:	e7cd      	b.n	800ace8 <_scanf_float+0x3a0>
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	4639      	mov	r1, r7
 800ad50:	f7f5 ff6a 	bl	8000c28 <__aeabi_d2f>
 800ad54:	f8c8 0000 	str.w	r0, [r8]
 800ad58:	e7c6      	b.n	800ace8 <_scanf_float+0x3a0>
 800ad5a:	2500      	movs	r5, #0
 800ad5c:	e635      	b.n	800a9ca <_scanf_float+0x82>
 800ad5e:	bf00      	nop
 800ad60:	0800f554 	.word	0x0800f554
 800ad64:	0800f970 	.word	0x0800f970

0800ad68 <nanf>:
 800ad68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ad70 <nanf+0x8>
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	7fc00000 	.word	0x7fc00000

0800ad74 <siprintf>:
 800ad74:	b40e      	push	{r1, r2, r3}
 800ad76:	b500      	push	{lr}
 800ad78:	b09c      	sub	sp, #112	; 0x70
 800ad7a:	ab1d      	add	r3, sp, #116	; 0x74
 800ad7c:	9002      	str	r0, [sp, #8]
 800ad7e:	9006      	str	r0, [sp, #24]
 800ad80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad84:	4809      	ldr	r0, [pc, #36]	; (800adac <siprintf+0x38>)
 800ad86:	9107      	str	r1, [sp, #28]
 800ad88:	9104      	str	r1, [sp, #16]
 800ad8a:	4909      	ldr	r1, [pc, #36]	; (800adb0 <siprintf+0x3c>)
 800ad8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad90:	9105      	str	r1, [sp, #20]
 800ad92:	6800      	ldr	r0, [r0, #0]
 800ad94:	9301      	str	r3, [sp, #4]
 800ad96:	a902      	add	r1, sp, #8
 800ad98:	f002 feda 	bl	800db50 <_svfiprintf_r>
 800ad9c:	9b02      	ldr	r3, [sp, #8]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	701a      	strb	r2, [r3, #0]
 800ada2:	b01c      	add	sp, #112	; 0x70
 800ada4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ada8:	b003      	add	sp, #12
 800adaa:	4770      	bx	lr
 800adac:	20000028 	.word	0x20000028
 800adb0:	ffff0208 	.word	0xffff0208

0800adb4 <strcat>:
 800adb4:	b510      	push	{r4, lr}
 800adb6:	4602      	mov	r2, r0
 800adb8:	7814      	ldrb	r4, [r2, #0]
 800adba:	4613      	mov	r3, r2
 800adbc:	3201      	adds	r2, #1
 800adbe:	2c00      	cmp	r4, #0
 800adc0:	d1fa      	bne.n	800adb8 <strcat+0x4>
 800adc2:	3b01      	subs	r3, #1
 800adc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adc8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adcc:	2a00      	cmp	r2, #0
 800adce:	d1f9      	bne.n	800adc4 <strcat+0x10>
 800add0:	bd10      	pop	{r4, pc}

0800add2 <strchr>:
 800add2:	b2c9      	uxtb	r1, r1
 800add4:	4603      	mov	r3, r0
 800add6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adda:	b11a      	cbz	r2, 800ade4 <strchr+0x12>
 800addc:	428a      	cmp	r2, r1
 800adde:	d1f9      	bne.n	800add4 <strchr+0x2>
 800ade0:	4618      	mov	r0, r3
 800ade2:	4770      	bx	lr
 800ade4:	2900      	cmp	r1, #0
 800ade6:	bf18      	it	ne
 800ade8:	2300      	movne	r3, #0
 800adea:	e7f9      	b.n	800ade0 <strchr+0xe>

0800adec <strstr>:
 800adec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adee:	780c      	ldrb	r4, [r1, #0]
 800adf0:	b164      	cbz	r4, 800ae0c <strstr+0x20>
 800adf2:	4603      	mov	r3, r0
 800adf4:	781a      	ldrb	r2, [r3, #0]
 800adf6:	4618      	mov	r0, r3
 800adf8:	1c5e      	adds	r6, r3, #1
 800adfa:	b90a      	cbnz	r2, 800ae00 <strstr+0x14>
 800adfc:	4610      	mov	r0, r2
 800adfe:	e005      	b.n	800ae0c <strstr+0x20>
 800ae00:	4294      	cmp	r4, r2
 800ae02:	d108      	bne.n	800ae16 <strstr+0x2a>
 800ae04:	460d      	mov	r5, r1
 800ae06:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800ae0a:	b902      	cbnz	r2, 800ae0e <strstr+0x22>
 800ae0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae0e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800ae12:	4297      	cmp	r7, r2
 800ae14:	d0f7      	beq.n	800ae06 <strstr+0x1a>
 800ae16:	4633      	mov	r3, r6
 800ae18:	e7ec      	b.n	800adf4 <strstr+0x8>

0800ae1a <sulp>:
 800ae1a:	b570      	push	{r4, r5, r6, lr}
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	460d      	mov	r5, r1
 800ae20:	ec45 4b10 	vmov	d0, r4, r5
 800ae24:	4616      	mov	r6, r2
 800ae26:	f002 fc2f 	bl	800d688 <__ulp>
 800ae2a:	ec51 0b10 	vmov	r0, r1, d0
 800ae2e:	b17e      	cbz	r6, 800ae50 <sulp+0x36>
 800ae30:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	dd09      	ble.n	800ae50 <sulp+0x36>
 800ae3c:	051b      	lsls	r3, r3, #20
 800ae3e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ae42:	2400      	movs	r4, #0
 800ae44:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ae48:	4622      	mov	r2, r4
 800ae4a:	462b      	mov	r3, r5
 800ae4c:	f7f5 fbf4 	bl	8000638 <__aeabi_dmul>
 800ae50:	bd70      	pop	{r4, r5, r6, pc}
 800ae52:	0000      	movs	r0, r0
 800ae54:	0000      	movs	r0, r0
	...

0800ae58 <_strtod_l>:
 800ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5c:	b0a3      	sub	sp, #140	; 0x8c
 800ae5e:	461f      	mov	r7, r3
 800ae60:	2300      	movs	r3, #0
 800ae62:	931e      	str	r3, [sp, #120]	; 0x78
 800ae64:	4ba4      	ldr	r3, [pc, #656]	; (800b0f8 <_strtod_l+0x2a0>)
 800ae66:	9219      	str	r2, [sp, #100]	; 0x64
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	9307      	str	r3, [sp, #28]
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	4618      	mov	r0, r3
 800ae70:	4688      	mov	r8, r1
 800ae72:	f7f5 f9cd 	bl	8000210 <strlen>
 800ae76:	f04f 0a00 	mov.w	sl, #0
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	f04f 0b00 	mov.w	fp, #0
 800ae80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ae84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae86:	781a      	ldrb	r2, [r3, #0]
 800ae88:	2a2b      	cmp	r2, #43	; 0x2b
 800ae8a:	d04c      	beq.n	800af26 <_strtod_l+0xce>
 800ae8c:	d839      	bhi.n	800af02 <_strtod_l+0xaa>
 800ae8e:	2a0d      	cmp	r2, #13
 800ae90:	d832      	bhi.n	800aef8 <_strtod_l+0xa0>
 800ae92:	2a08      	cmp	r2, #8
 800ae94:	d832      	bhi.n	800aefc <_strtod_l+0xa4>
 800ae96:	2a00      	cmp	r2, #0
 800ae98:	d03c      	beq.n	800af14 <_strtod_l+0xbc>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	930e      	str	r3, [sp, #56]	; 0x38
 800ae9e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800aea0:	7833      	ldrb	r3, [r6, #0]
 800aea2:	2b30      	cmp	r3, #48	; 0x30
 800aea4:	f040 80b4 	bne.w	800b010 <_strtod_l+0x1b8>
 800aea8:	7873      	ldrb	r3, [r6, #1]
 800aeaa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aeae:	2b58      	cmp	r3, #88	; 0x58
 800aeb0:	d16c      	bne.n	800af8c <_strtod_l+0x134>
 800aeb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeb4:	9301      	str	r3, [sp, #4]
 800aeb6:	ab1e      	add	r3, sp, #120	; 0x78
 800aeb8:	9702      	str	r7, [sp, #8]
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	4a8f      	ldr	r2, [pc, #572]	; (800b0fc <_strtod_l+0x2a4>)
 800aebe:	ab1f      	add	r3, sp, #124	; 0x7c
 800aec0:	a91d      	add	r1, sp, #116	; 0x74
 800aec2:	4620      	mov	r0, r4
 800aec4:	f001 fd40 	bl	800c948 <__gethex>
 800aec8:	f010 0707 	ands.w	r7, r0, #7
 800aecc:	4605      	mov	r5, r0
 800aece:	d005      	beq.n	800aedc <_strtod_l+0x84>
 800aed0:	2f06      	cmp	r7, #6
 800aed2:	d12a      	bne.n	800af2a <_strtod_l+0xd2>
 800aed4:	3601      	adds	r6, #1
 800aed6:	2300      	movs	r3, #0
 800aed8:	961d      	str	r6, [sp, #116]	; 0x74
 800aeda:	930e      	str	r3, [sp, #56]	; 0x38
 800aedc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f040 8596 	bne.w	800ba10 <_strtod_l+0xbb8>
 800aee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aee6:	b1db      	cbz	r3, 800af20 <_strtod_l+0xc8>
 800aee8:	4652      	mov	r2, sl
 800aeea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aeee:	ec43 2b10 	vmov	d0, r2, r3
 800aef2:	b023      	add	sp, #140	; 0x8c
 800aef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef8:	2a20      	cmp	r2, #32
 800aefa:	d1ce      	bne.n	800ae9a <_strtod_l+0x42>
 800aefc:	3301      	adds	r3, #1
 800aefe:	931d      	str	r3, [sp, #116]	; 0x74
 800af00:	e7c0      	b.n	800ae84 <_strtod_l+0x2c>
 800af02:	2a2d      	cmp	r2, #45	; 0x2d
 800af04:	d1c9      	bne.n	800ae9a <_strtod_l+0x42>
 800af06:	2201      	movs	r2, #1
 800af08:	920e      	str	r2, [sp, #56]	; 0x38
 800af0a:	1c5a      	adds	r2, r3, #1
 800af0c:	921d      	str	r2, [sp, #116]	; 0x74
 800af0e:	785b      	ldrb	r3, [r3, #1]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1c4      	bne.n	800ae9e <_strtod_l+0x46>
 800af14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af16:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f040 8576 	bne.w	800ba0c <_strtod_l+0xbb4>
 800af20:	4652      	mov	r2, sl
 800af22:	465b      	mov	r3, fp
 800af24:	e7e3      	b.n	800aeee <_strtod_l+0x96>
 800af26:	2200      	movs	r2, #0
 800af28:	e7ee      	b.n	800af08 <_strtod_l+0xb0>
 800af2a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800af2c:	b13a      	cbz	r2, 800af3e <_strtod_l+0xe6>
 800af2e:	2135      	movs	r1, #53	; 0x35
 800af30:	a820      	add	r0, sp, #128	; 0x80
 800af32:	f002 fcb4 	bl	800d89e <__copybits>
 800af36:	991e      	ldr	r1, [sp, #120]	; 0x78
 800af38:	4620      	mov	r0, r4
 800af3a:	f002 f879 	bl	800d030 <_Bfree>
 800af3e:	3f01      	subs	r7, #1
 800af40:	2f05      	cmp	r7, #5
 800af42:	d807      	bhi.n	800af54 <_strtod_l+0xfc>
 800af44:	e8df f007 	tbb	[pc, r7]
 800af48:	1d180b0e 	.word	0x1d180b0e
 800af4c:	030e      	.short	0x030e
 800af4e:	f04f 0b00 	mov.w	fp, #0
 800af52:	46da      	mov	sl, fp
 800af54:	0728      	lsls	r0, r5, #28
 800af56:	d5c1      	bpl.n	800aedc <_strtod_l+0x84>
 800af58:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800af5c:	e7be      	b.n	800aedc <_strtod_l+0x84>
 800af5e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800af62:	e7f7      	b.n	800af54 <_strtod_l+0xfc>
 800af64:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800af68:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800af6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800af6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800af72:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800af76:	e7ed      	b.n	800af54 <_strtod_l+0xfc>
 800af78:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b100 <_strtod_l+0x2a8>
 800af7c:	f04f 0a00 	mov.w	sl, #0
 800af80:	e7e8      	b.n	800af54 <_strtod_l+0xfc>
 800af82:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800af86:	f04f 3aff 	mov.w	sl, #4294967295
 800af8a:	e7e3      	b.n	800af54 <_strtod_l+0xfc>
 800af8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	921d      	str	r2, [sp, #116]	; 0x74
 800af92:	785b      	ldrb	r3, [r3, #1]
 800af94:	2b30      	cmp	r3, #48	; 0x30
 800af96:	d0f9      	beq.n	800af8c <_strtod_l+0x134>
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d09f      	beq.n	800aedc <_strtod_l+0x84>
 800af9c:	2301      	movs	r3, #1
 800af9e:	f04f 0900 	mov.w	r9, #0
 800afa2:	9304      	str	r3, [sp, #16]
 800afa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800afa6:	930a      	str	r3, [sp, #40]	; 0x28
 800afa8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800afac:	464f      	mov	r7, r9
 800afae:	220a      	movs	r2, #10
 800afb0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800afb2:	7806      	ldrb	r6, [r0, #0]
 800afb4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800afb8:	b2d9      	uxtb	r1, r3
 800afba:	2909      	cmp	r1, #9
 800afbc:	d92a      	bls.n	800b014 <_strtod_l+0x1bc>
 800afbe:	9907      	ldr	r1, [sp, #28]
 800afc0:	462a      	mov	r2, r5
 800afc2:	f002 fedd 	bl	800dd80 <strncmp>
 800afc6:	b398      	cbz	r0, 800b030 <_strtod_l+0x1d8>
 800afc8:	2000      	movs	r0, #0
 800afca:	4633      	mov	r3, r6
 800afcc:	463d      	mov	r5, r7
 800afce:	9007      	str	r0, [sp, #28]
 800afd0:	4602      	mov	r2, r0
 800afd2:	2b65      	cmp	r3, #101	; 0x65
 800afd4:	d001      	beq.n	800afda <_strtod_l+0x182>
 800afd6:	2b45      	cmp	r3, #69	; 0x45
 800afd8:	d118      	bne.n	800b00c <_strtod_l+0x1b4>
 800afda:	b91d      	cbnz	r5, 800afe4 <_strtod_l+0x18c>
 800afdc:	9b04      	ldr	r3, [sp, #16]
 800afde:	4303      	orrs	r3, r0
 800afe0:	d098      	beq.n	800af14 <_strtod_l+0xbc>
 800afe2:	2500      	movs	r5, #0
 800afe4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800afe8:	f108 0301 	add.w	r3, r8, #1
 800afec:	931d      	str	r3, [sp, #116]	; 0x74
 800afee:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aff2:	2b2b      	cmp	r3, #43	; 0x2b
 800aff4:	d075      	beq.n	800b0e2 <_strtod_l+0x28a>
 800aff6:	2b2d      	cmp	r3, #45	; 0x2d
 800aff8:	d07b      	beq.n	800b0f2 <_strtod_l+0x29a>
 800affa:	f04f 0c00 	mov.w	ip, #0
 800affe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b002:	2909      	cmp	r1, #9
 800b004:	f240 8082 	bls.w	800b10c <_strtod_l+0x2b4>
 800b008:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b00c:	2600      	movs	r6, #0
 800b00e:	e09d      	b.n	800b14c <_strtod_l+0x2f4>
 800b010:	2300      	movs	r3, #0
 800b012:	e7c4      	b.n	800af9e <_strtod_l+0x146>
 800b014:	2f08      	cmp	r7, #8
 800b016:	bfd8      	it	le
 800b018:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b01a:	f100 0001 	add.w	r0, r0, #1
 800b01e:	bfda      	itte	le
 800b020:	fb02 3301 	mlale	r3, r2, r1, r3
 800b024:	9309      	strle	r3, [sp, #36]	; 0x24
 800b026:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b02a:	3701      	adds	r7, #1
 800b02c:	901d      	str	r0, [sp, #116]	; 0x74
 800b02e:	e7bf      	b.n	800afb0 <_strtod_l+0x158>
 800b030:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b032:	195a      	adds	r2, r3, r5
 800b034:	921d      	str	r2, [sp, #116]	; 0x74
 800b036:	5d5b      	ldrb	r3, [r3, r5]
 800b038:	2f00      	cmp	r7, #0
 800b03a:	d037      	beq.n	800b0ac <_strtod_l+0x254>
 800b03c:	9007      	str	r0, [sp, #28]
 800b03e:	463d      	mov	r5, r7
 800b040:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b044:	2a09      	cmp	r2, #9
 800b046:	d912      	bls.n	800b06e <_strtod_l+0x216>
 800b048:	2201      	movs	r2, #1
 800b04a:	e7c2      	b.n	800afd2 <_strtod_l+0x17a>
 800b04c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b04e:	1c5a      	adds	r2, r3, #1
 800b050:	921d      	str	r2, [sp, #116]	; 0x74
 800b052:	785b      	ldrb	r3, [r3, #1]
 800b054:	3001      	adds	r0, #1
 800b056:	2b30      	cmp	r3, #48	; 0x30
 800b058:	d0f8      	beq.n	800b04c <_strtod_l+0x1f4>
 800b05a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b05e:	2a08      	cmp	r2, #8
 800b060:	f200 84db 	bhi.w	800ba1a <_strtod_l+0xbc2>
 800b064:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b066:	9007      	str	r0, [sp, #28]
 800b068:	2000      	movs	r0, #0
 800b06a:	920a      	str	r2, [sp, #40]	; 0x28
 800b06c:	4605      	mov	r5, r0
 800b06e:	3b30      	subs	r3, #48	; 0x30
 800b070:	f100 0201 	add.w	r2, r0, #1
 800b074:	d014      	beq.n	800b0a0 <_strtod_l+0x248>
 800b076:	9907      	ldr	r1, [sp, #28]
 800b078:	4411      	add	r1, r2
 800b07a:	9107      	str	r1, [sp, #28]
 800b07c:	462a      	mov	r2, r5
 800b07e:	eb00 0e05 	add.w	lr, r0, r5
 800b082:	210a      	movs	r1, #10
 800b084:	4572      	cmp	r2, lr
 800b086:	d113      	bne.n	800b0b0 <_strtod_l+0x258>
 800b088:	182a      	adds	r2, r5, r0
 800b08a:	2a08      	cmp	r2, #8
 800b08c:	f105 0501 	add.w	r5, r5, #1
 800b090:	4405      	add	r5, r0
 800b092:	dc1c      	bgt.n	800b0ce <_strtod_l+0x276>
 800b094:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b096:	220a      	movs	r2, #10
 800b098:	fb02 3301 	mla	r3, r2, r1, r3
 800b09c:	9309      	str	r3, [sp, #36]	; 0x24
 800b09e:	2200      	movs	r2, #0
 800b0a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0a2:	1c59      	adds	r1, r3, #1
 800b0a4:	911d      	str	r1, [sp, #116]	; 0x74
 800b0a6:	785b      	ldrb	r3, [r3, #1]
 800b0a8:	4610      	mov	r0, r2
 800b0aa:	e7c9      	b.n	800b040 <_strtod_l+0x1e8>
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	e7d2      	b.n	800b056 <_strtod_l+0x1fe>
 800b0b0:	2a08      	cmp	r2, #8
 800b0b2:	dc04      	bgt.n	800b0be <_strtod_l+0x266>
 800b0b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b0b6:	434e      	muls	r6, r1
 800b0b8:	9609      	str	r6, [sp, #36]	; 0x24
 800b0ba:	3201      	adds	r2, #1
 800b0bc:	e7e2      	b.n	800b084 <_strtod_l+0x22c>
 800b0be:	f102 0c01 	add.w	ip, r2, #1
 800b0c2:	f1bc 0f10 	cmp.w	ip, #16
 800b0c6:	bfd8      	it	le
 800b0c8:	fb01 f909 	mulle.w	r9, r1, r9
 800b0cc:	e7f5      	b.n	800b0ba <_strtod_l+0x262>
 800b0ce:	2d10      	cmp	r5, #16
 800b0d0:	bfdc      	itt	le
 800b0d2:	220a      	movle	r2, #10
 800b0d4:	fb02 3909 	mlale	r9, r2, r9, r3
 800b0d8:	e7e1      	b.n	800b09e <_strtod_l+0x246>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	9307      	str	r3, [sp, #28]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	e77c      	b.n	800afdc <_strtod_l+0x184>
 800b0e2:	f04f 0c00 	mov.w	ip, #0
 800b0e6:	f108 0302 	add.w	r3, r8, #2
 800b0ea:	931d      	str	r3, [sp, #116]	; 0x74
 800b0ec:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b0f0:	e785      	b.n	800affe <_strtod_l+0x1a6>
 800b0f2:	f04f 0c01 	mov.w	ip, #1
 800b0f6:	e7f6      	b.n	800b0e6 <_strtod_l+0x28e>
 800b0f8:	0800f7b0 	.word	0x0800f7b0
 800b0fc:	0800f55c 	.word	0x0800f55c
 800b100:	7ff00000 	.word	0x7ff00000
 800b104:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b106:	1c59      	adds	r1, r3, #1
 800b108:	911d      	str	r1, [sp, #116]	; 0x74
 800b10a:	785b      	ldrb	r3, [r3, #1]
 800b10c:	2b30      	cmp	r3, #48	; 0x30
 800b10e:	d0f9      	beq.n	800b104 <_strtod_l+0x2ac>
 800b110:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b114:	2908      	cmp	r1, #8
 800b116:	f63f af79 	bhi.w	800b00c <_strtod_l+0x1b4>
 800b11a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b11e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b120:	9308      	str	r3, [sp, #32]
 800b122:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b124:	1c59      	adds	r1, r3, #1
 800b126:	911d      	str	r1, [sp, #116]	; 0x74
 800b128:	785b      	ldrb	r3, [r3, #1]
 800b12a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b12e:	2e09      	cmp	r6, #9
 800b130:	d937      	bls.n	800b1a2 <_strtod_l+0x34a>
 800b132:	9e08      	ldr	r6, [sp, #32]
 800b134:	1b89      	subs	r1, r1, r6
 800b136:	2908      	cmp	r1, #8
 800b138:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b13c:	dc02      	bgt.n	800b144 <_strtod_l+0x2ec>
 800b13e:	4576      	cmp	r6, lr
 800b140:	bfa8      	it	ge
 800b142:	4676      	movge	r6, lr
 800b144:	f1bc 0f00 	cmp.w	ip, #0
 800b148:	d000      	beq.n	800b14c <_strtod_l+0x2f4>
 800b14a:	4276      	negs	r6, r6
 800b14c:	2d00      	cmp	r5, #0
 800b14e:	d14f      	bne.n	800b1f0 <_strtod_l+0x398>
 800b150:	9904      	ldr	r1, [sp, #16]
 800b152:	4301      	orrs	r1, r0
 800b154:	f47f aec2 	bne.w	800aedc <_strtod_l+0x84>
 800b158:	2a00      	cmp	r2, #0
 800b15a:	f47f aedb 	bne.w	800af14 <_strtod_l+0xbc>
 800b15e:	2b69      	cmp	r3, #105	; 0x69
 800b160:	d027      	beq.n	800b1b2 <_strtod_l+0x35a>
 800b162:	dc24      	bgt.n	800b1ae <_strtod_l+0x356>
 800b164:	2b49      	cmp	r3, #73	; 0x49
 800b166:	d024      	beq.n	800b1b2 <_strtod_l+0x35a>
 800b168:	2b4e      	cmp	r3, #78	; 0x4e
 800b16a:	f47f aed3 	bne.w	800af14 <_strtod_l+0xbc>
 800b16e:	499e      	ldr	r1, [pc, #632]	; (800b3e8 <_strtod_l+0x590>)
 800b170:	a81d      	add	r0, sp, #116	; 0x74
 800b172:	f001 fe41 	bl	800cdf8 <__match>
 800b176:	2800      	cmp	r0, #0
 800b178:	f43f aecc 	beq.w	800af14 <_strtod_l+0xbc>
 800b17c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	2b28      	cmp	r3, #40	; 0x28
 800b182:	d12d      	bne.n	800b1e0 <_strtod_l+0x388>
 800b184:	4999      	ldr	r1, [pc, #612]	; (800b3ec <_strtod_l+0x594>)
 800b186:	aa20      	add	r2, sp, #128	; 0x80
 800b188:	a81d      	add	r0, sp, #116	; 0x74
 800b18a:	f001 fe49 	bl	800ce20 <__hexnan>
 800b18e:	2805      	cmp	r0, #5
 800b190:	d126      	bne.n	800b1e0 <_strtod_l+0x388>
 800b192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b194:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b198:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b19c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b1a0:	e69c      	b.n	800aedc <_strtod_l+0x84>
 800b1a2:	210a      	movs	r1, #10
 800b1a4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b1a8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b1ac:	e7b9      	b.n	800b122 <_strtod_l+0x2ca>
 800b1ae:	2b6e      	cmp	r3, #110	; 0x6e
 800b1b0:	e7db      	b.n	800b16a <_strtod_l+0x312>
 800b1b2:	498f      	ldr	r1, [pc, #572]	; (800b3f0 <_strtod_l+0x598>)
 800b1b4:	a81d      	add	r0, sp, #116	; 0x74
 800b1b6:	f001 fe1f 	bl	800cdf8 <__match>
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	f43f aeaa 	beq.w	800af14 <_strtod_l+0xbc>
 800b1c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1c2:	498c      	ldr	r1, [pc, #560]	; (800b3f4 <_strtod_l+0x59c>)
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	a81d      	add	r0, sp, #116	; 0x74
 800b1c8:	931d      	str	r3, [sp, #116]	; 0x74
 800b1ca:	f001 fe15 	bl	800cdf8 <__match>
 800b1ce:	b910      	cbnz	r0, 800b1d6 <_strtod_l+0x37e>
 800b1d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	931d      	str	r3, [sp, #116]	; 0x74
 800b1d6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b404 <_strtod_l+0x5ac>
 800b1da:	f04f 0a00 	mov.w	sl, #0
 800b1de:	e67d      	b.n	800aedc <_strtod_l+0x84>
 800b1e0:	4885      	ldr	r0, [pc, #532]	; (800b3f8 <_strtod_l+0x5a0>)
 800b1e2:	f002 fdb5 	bl	800dd50 <nan>
 800b1e6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b1ea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b1ee:	e675      	b.n	800aedc <_strtod_l+0x84>
 800b1f0:	9b07      	ldr	r3, [sp, #28]
 800b1f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1f4:	1af3      	subs	r3, r6, r3
 800b1f6:	2f00      	cmp	r7, #0
 800b1f8:	bf08      	it	eq
 800b1fa:	462f      	moveq	r7, r5
 800b1fc:	2d10      	cmp	r5, #16
 800b1fe:	9308      	str	r3, [sp, #32]
 800b200:	46a8      	mov	r8, r5
 800b202:	bfa8      	it	ge
 800b204:	f04f 0810 	movge.w	r8, #16
 800b208:	f7f5 f99c 	bl	8000544 <__aeabi_ui2d>
 800b20c:	2d09      	cmp	r5, #9
 800b20e:	4682      	mov	sl, r0
 800b210:	468b      	mov	fp, r1
 800b212:	dd13      	ble.n	800b23c <_strtod_l+0x3e4>
 800b214:	4b79      	ldr	r3, [pc, #484]	; (800b3fc <_strtod_l+0x5a4>)
 800b216:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b21a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b21e:	f7f5 fa0b 	bl	8000638 <__aeabi_dmul>
 800b222:	4682      	mov	sl, r0
 800b224:	4648      	mov	r0, r9
 800b226:	468b      	mov	fp, r1
 800b228:	f7f5 f98c 	bl	8000544 <__aeabi_ui2d>
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
 800b230:	4650      	mov	r0, sl
 800b232:	4659      	mov	r1, fp
 800b234:	f7f5 f84a 	bl	80002cc <__adddf3>
 800b238:	4682      	mov	sl, r0
 800b23a:	468b      	mov	fp, r1
 800b23c:	2d0f      	cmp	r5, #15
 800b23e:	dc38      	bgt.n	800b2b2 <_strtod_l+0x45a>
 800b240:	9b08      	ldr	r3, [sp, #32]
 800b242:	2b00      	cmp	r3, #0
 800b244:	f43f ae4a 	beq.w	800aedc <_strtod_l+0x84>
 800b248:	dd24      	ble.n	800b294 <_strtod_l+0x43c>
 800b24a:	2b16      	cmp	r3, #22
 800b24c:	dc0b      	bgt.n	800b266 <_strtod_l+0x40e>
 800b24e:	4d6b      	ldr	r5, [pc, #428]	; (800b3fc <_strtod_l+0x5a4>)
 800b250:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b254:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b258:	4652      	mov	r2, sl
 800b25a:	465b      	mov	r3, fp
 800b25c:	f7f5 f9ec 	bl	8000638 <__aeabi_dmul>
 800b260:	4682      	mov	sl, r0
 800b262:	468b      	mov	fp, r1
 800b264:	e63a      	b.n	800aedc <_strtod_l+0x84>
 800b266:	9a08      	ldr	r2, [sp, #32]
 800b268:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b26c:	4293      	cmp	r3, r2
 800b26e:	db20      	blt.n	800b2b2 <_strtod_l+0x45a>
 800b270:	4c62      	ldr	r4, [pc, #392]	; (800b3fc <_strtod_l+0x5a4>)
 800b272:	f1c5 050f 	rsb	r5, r5, #15
 800b276:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b27a:	4652      	mov	r2, sl
 800b27c:	465b      	mov	r3, fp
 800b27e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b282:	f7f5 f9d9 	bl	8000638 <__aeabi_dmul>
 800b286:	9b08      	ldr	r3, [sp, #32]
 800b288:	1b5d      	subs	r5, r3, r5
 800b28a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b28e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b292:	e7e3      	b.n	800b25c <_strtod_l+0x404>
 800b294:	9b08      	ldr	r3, [sp, #32]
 800b296:	3316      	adds	r3, #22
 800b298:	db0b      	blt.n	800b2b2 <_strtod_l+0x45a>
 800b29a:	9b07      	ldr	r3, [sp, #28]
 800b29c:	4a57      	ldr	r2, [pc, #348]	; (800b3fc <_strtod_l+0x5a4>)
 800b29e:	1b9e      	subs	r6, r3, r6
 800b2a0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b2a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2a8:	4650      	mov	r0, sl
 800b2aa:	4659      	mov	r1, fp
 800b2ac:	f7f5 faee 	bl	800088c <__aeabi_ddiv>
 800b2b0:	e7d6      	b.n	800b260 <_strtod_l+0x408>
 800b2b2:	9b08      	ldr	r3, [sp, #32]
 800b2b4:	eba5 0808 	sub.w	r8, r5, r8
 800b2b8:	4498      	add	r8, r3
 800b2ba:	f1b8 0f00 	cmp.w	r8, #0
 800b2be:	dd71      	ble.n	800b3a4 <_strtod_l+0x54c>
 800b2c0:	f018 030f 	ands.w	r3, r8, #15
 800b2c4:	d00a      	beq.n	800b2dc <_strtod_l+0x484>
 800b2c6:	494d      	ldr	r1, [pc, #308]	; (800b3fc <_strtod_l+0x5a4>)
 800b2c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2cc:	4652      	mov	r2, sl
 800b2ce:	465b      	mov	r3, fp
 800b2d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2d4:	f7f5 f9b0 	bl	8000638 <__aeabi_dmul>
 800b2d8:	4682      	mov	sl, r0
 800b2da:	468b      	mov	fp, r1
 800b2dc:	f038 080f 	bics.w	r8, r8, #15
 800b2e0:	d04d      	beq.n	800b37e <_strtod_l+0x526>
 800b2e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b2e6:	dd22      	ble.n	800b32e <_strtod_l+0x4d6>
 800b2e8:	2500      	movs	r5, #0
 800b2ea:	462e      	mov	r6, r5
 800b2ec:	9509      	str	r5, [sp, #36]	; 0x24
 800b2ee:	9507      	str	r5, [sp, #28]
 800b2f0:	2322      	movs	r3, #34	; 0x22
 800b2f2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b404 <_strtod_l+0x5ac>
 800b2f6:	6023      	str	r3, [r4, #0]
 800b2f8:	f04f 0a00 	mov.w	sl, #0
 800b2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f43f adec 	beq.w	800aedc <_strtod_l+0x84>
 800b304:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b306:	4620      	mov	r0, r4
 800b308:	f001 fe92 	bl	800d030 <_Bfree>
 800b30c:	9907      	ldr	r1, [sp, #28]
 800b30e:	4620      	mov	r0, r4
 800b310:	f001 fe8e 	bl	800d030 <_Bfree>
 800b314:	4631      	mov	r1, r6
 800b316:	4620      	mov	r0, r4
 800b318:	f001 fe8a 	bl	800d030 <_Bfree>
 800b31c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b31e:	4620      	mov	r0, r4
 800b320:	f001 fe86 	bl	800d030 <_Bfree>
 800b324:	4629      	mov	r1, r5
 800b326:	4620      	mov	r0, r4
 800b328:	f001 fe82 	bl	800d030 <_Bfree>
 800b32c:	e5d6      	b.n	800aedc <_strtod_l+0x84>
 800b32e:	2300      	movs	r3, #0
 800b330:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b334:	4650      	mov	r0, sl
 800b336:	4659      	mov	r1, fp
 800b338:	4699      	mov	r9, r3
 800b33a:	f1b8 0f01 	cmp.w	r8, #1
 800b33e:	dc21      	bgt.n	800b384 <_strtod_l+0x52c>
 800b340:	b10b      	cbz	r3, 800b346 <_strtod_l+0x4ee>
 800b342:	4682      	mov	sl, r0
 800b344:	468b      	mov	fp, r1
 800b346:	4b2e      	ldr	r3, [pc, #184]	; (800b400 <_strtod_l+0x5a8>)
 800b348:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b34c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b350:	4652      	mov	r2, sl
 800b352:	465b      	mov	r3, fp
 800b354:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b358:	f7f5 f96e 	bl	8000638 <__aeabi_dmul>
 800b35c:	4b29      	ldr	r3, [pc, #164]	; (800b404 <_strtod_l+0x5ac>)
 800b35e:	460a      	mov	r2, r1
 800b360:	400b      	ands	r3, r1
 800b362:	4929      	ldr	r1, [pc, #164]	; (800b408 <_strtod_l+0x5b0>)
 800b364:	428b      	cmp	r3, r1
 800b366:	4682      	mov	sl, r0
 800b368:	d8be      	bhi.n	800b2e8 <_strtod_l+0x490>
 800b36a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b36e:	428b      	cmp	r3, r1
 800b370:	bf86      	itte	hi
 800b372:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b40c <_strtod_l+0x5b4>
 800b376:	f04f 3aff 	movhi.w	sl, #4294967295
 800b37a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b37e:	2300      	movs	r3, #0
 800b380:	9304      	str	r3, [sp, #16]
 800b382:	e081      	b.n	800b488 <_strtod_l+0x630>
 800b384:	f018 0f01 	tst.w	r8, #1
 800b388:	d007      	beq.n	800b39a <_strtod_l+0x542>
 800b38a:	4b1d      	ldr	r3, [pc, #116]	; (800b400 <_strtod_l+0x5a8>)
 800b38c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b394:	f7f5 f950 	bl	8000638 <__aeabi_dmul>
 800b398:	2301      	movs	r3, #1
 800b39a:	f109 0901 	add.w	r9, r9, #1
 800b39e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b3a2:	e7ca      	b.n	800b33a <_strtod_l+0x4e2>
 800b3a4:	d0eb      	beq.n	800b37e <_strtod_l+0x526>
 800b3a6:	f1c8 0800 	rsb	r8, r8, #0
 800b3aa:	f018 020f 	ands.w	r2, r8, #15
 800b3ae:	d00a      	beq.n	800b3c6 <_strtod_l+0x56e>
 800b3b0:	4b12      	ldr	r3, [pc, #72]	; (800b3fc <_strtod_l+0x5a4>)
 800b3b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3b6:	4650      	mov	r0, sl
 800b3b8:	4659      	mov	r1, fp
 800b3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3be:	f7f5 fa65 	bl	800088c <__aeabi_ddiv>
 800b3c2:	4682      	mov	sl, r0
 800b3c4:	468b      	mov	fp, r1
 800b3c6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b3ca:	d0d8      	beq.n	800b37e <_strtod_l+0x526>
 800b3cc:	f1b8 0f1f 	cmp.w	r8, #31
 800b3d0:	dd1e      	ble.n	800b410 <_strtod_l+0x5b8>
 800b3d2:	2500      	movs	r5, #0
 800b3d4:	462e      	mov	r6, r5
 800b3d6:	9509      	str	r5, [sp, #36]	; 0x24
 800b3d8:	9507      	str	r5, [sp, #28]
 800b3da:	2322      	movs	r3, #34	; 0x22
 800b3dc:	f04f 0a00 	mov.w	sl, #0
 800b3e0:	f04f 0b00 	mov.w	fp, #0
 800b3e4:	6023      	str	r3, [r4, #0]
 800b3e6:	e789      	b.n	800b2fc <_strtod_l+0x4a4>
 800b3e8:	0800f52d 	.word	0x0800f52d
 800b3ec:	0800f570 	.word	0x0800f570
 800b3f0:	0800f525 	.word	0x0800f525
 800b3f4:	0800f6b4 	.word	0x0800f6b4
 800b3f8:	0800f970 	.word	0x0800f970
 800b3fc:	0800f850 	.word	0x0800f850
 800b400:	0800f828 	.word	0x0800f828
 800b404:	7ff00000 	.word	0x7ff00000
 800b408:	7ca00000 	.word	0x7ca00000
 800b40c:	7fefffff 	.word	0x7fefffff
 800b410:	f018 0310 	ands.w	r3, r8, #16
 800b414:	bf18      	it	ne
 800b416:	236a      	movne	r3, #106	; 0x6a
 800b418:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800b7d0 <_strtod_l+0x978>
 800b41c:	9304      	str	r3, [sp, #16]
 800b41e:	4650      	mov	r0, sl
 800b420:	4659      	mov	r1, fp
 800b422:	2300      	movs	r3, #0
 800b424:	f018 0f01 	tst.w	r8, #1
 800b428:	d004      	beq.n	800b434 <_strtod_l+0x5dc>
 800b42a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b42e:	f7f5 f903 	bl	8000638 <__aeabi_dmul>
 800b432:	2301      	movs	r3, #1
 800b434:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b438:	f109 0908 	add.w	r9, r9, #8
 800b43c:	d1f2      	bne.n	800b424 <_strtod_l+0x5cc>
 800b43e:	b10b      	cbz	r3, 800b444 <_strtod_l+0x5ec>
 800b440:	4682      	mov	sl, r0
 800b442:	468b      	mov	fp, r1
 800b444:	9b04      	ldr	r3, [sp, #16]
 800b446:	b1bb      	cbz	r3, 800b478 <_strtod_l+0x620>
 800b448:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b44c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b450:	2b00      	cmp	r3, #0
 800b452:	4659      	mov	r1, fp
 800b454:	dd10      	ble.n	800b478 <_strtod_l+0x620>
 800b456:	2b1f      	cmp	r3, #31
 800b458:	f340 8128 	ble.w	800b6ac <_strtod_l+0x854>
 800b45c:	2b34      	cmp	r3, #52	; 0x34
 800b45e:	bfde      	ittt	le
 800b460:	3b20      	suble	r3, #32
 800b462:	f04f 32ff 	movle.w	r2, #4294967295
 800b466:	fa02 f303 	lslle.w	r3, r2, r3
 800b46a:	f04f 0a00 	mov.w	sl, #0
 800b46e:	bfcc      	ite	gt
 800b470:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b474:	ea03 0b01 	andle.w	fp, r3, r1
 800b478:	2200      	movs	r2, #0
 800b47a:	2300      	movs	r3, #0
 800b47c:	4650      	mov	r0, sl
 800b47e:	4659      	mov	r1, fp
 800b480:	f7f5 fb42 	bl	8000b08 <__aeabi_dcmpeq>
 800b484:	2800      	cmp	r0, #0
 800b486:	d1a4      	bne.n	800b3d2 <_strtod_l+0x57a>
 800b488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b48e:	462b      	mov	r3, r5
 800b490:	463a      	mov	r2, r7
 800b492:	4620      	mov	r0, r4
 800b494:	f001 fe38 	bl	800d108 <__s2b>
 800b498:	9009      	str	r0, [sp, #36]	; 0x24
 800b49a:	2800      	cmp	r0, #0
 800b49c:	f43f af24 	beq.w	800b2e8 <_strtod_l+0x490>
 800b4a0:	9b07      	ldr	r3, [sp, #28]
 800b4a2:	1b9e      	subs	r6, r3, r6
 800b4a4:	9b08      	ldr	r3, [sp, #32]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	bfb4      	ite	lt
 800b4aa:	4633      	movlt	r3, r6
 800b4ac:	2300      	movge	r3, #0
 800b4ae:	9310      	str	r3, [sp, #64]	; 0x40
 800b4b0:	9b08      	ldr	r3, [sp, #32]
 800b4b2:	2500      	movs	r5, #0
 800b4b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b4b8:	9318      	str	r3, [sp, #96]	; 0x60
 800b4ba:	462e      	mov	r6, r5
 800b4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4be:	4620      	mov	r0, r4
 800b4c0:	6859      	ldr	r1, [r3, #4]
 800b4c2:	f001 fd75 	bl	800cfb0 <_Balloc>
 800b4c6:	9007      	str	r0, [sp, #28]
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	f43f af11 	beq.w	800b2f0 <_strtod_l+0x498>
 800b4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d0:	691a      	ldr	r2, [r3, #16]
 800b4d2:	3202      	adds	r2, #2
 800b4d4:	f103 010c 	add.w	r1, r3, #12
 800b4d8:	0092      	lsls	r2, r2, #2
 800b4da:	300c      	adds	r0, #12
 800b4dc:	f001 fd5a 	bl	800cf94 <memcpy>
 800b4e0:	ec4b ab10 	vmov	d0, sl, fp
 800b4e4:	aa20      	add	r2, sp, #128	; 0x80
 800b4e6:	a91f      	add	r1, sp, #124	; 0x7c
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b4ee:	f002 f947 	bl	800d780 <__d2b>
 800b4f2:	901e      	str	r0, [sp, #120]	; 0x78
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	f43f aefb 	beq.w	800b2f0 <_strtod_l+0x498>
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f001 fe9d 	bl	800d23c <__i2b>
 800b502:	4606      	mov	r6, r0
 800b504:	2800      	cmp	r0, #0
 800b506:	f43f aef3 	beq.w	800b2f0 <_strtod_l+0x498>
 800b50a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b50c:	9904      	ldr	r1, [sp, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	bfab      	itete	ge
 800b512:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b514:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b516:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b518:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b51c:	bfac      	ite	ge
 800b51e:	eb03 0902 	addge.w	r9, r3, r2
 800b522:	1ad7      	sublt	r7, r2, r3
 800b524:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b526:	eba3 0801 	sub.w	r8, r3, r1
 800b52a:	4490      	add	r8, r2
 800b52c:	4ba3      	ldr	r3, [pc, #652]	; (800b7bc <_strtod_l+0x964>)
 800b52e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b532:	4598      	cmp	r8, r3
 800b534:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b538:	f280 80cc 	bge.w	800b6d4 <_strtod_l+0x87c>
 800b53c:	eba3 0308 	sub.w	r3, r3, r8
 800b540:	2b1f      	cmp	r3, #31
 800b542:	eba2 0203 	sub.w	r2, r2, r3
 800b546:	f04f 0101 	mov.w	r1, #1
 800b54a:	f300 80b6 	bgt.w	800b6ba <_strtod_l+0x862>
 800b54e:	fa01 f303 	lsl.w	r3, r1, r3
 800b552:	9311      	str	r3, [sp, #68]	; 0x44
 800b554:	2300      	movs	r3, #0
 800b556:	930c      	str	r3, [sp, #48]	; 0x30
 800b558:	eb09 0802 	add.w	r8, r9, r2
 800b55c:	9b04      	ldr	r3, [sp, #16]
 800b55e:	45c1      	cmp	r9, r8
 800b560:	4417      	add	r7, r2
 800b562:	441f      	add	r7, r3
 800b564:	464b      	mov	r3, r9
 800b566:	bfa8      	it	ge
 800b568:	4643      	movge	r3, r8
 800b56a:	42bb      	cmp	r3, r7
 800b56c:	bfa8      	it	ge
 800b56e:	463b      	movge	r3, r7
 800b570:	2b00      	cmp	r3, #0
 800b572:	bfc2      	ittt	gt
 800b574:	eba8 0803 	subgt.w	r8, r8, r3
 800b578:	1aff      	subgt	r7, r7, r3
 800b57a:	eba9 0903 	subgt.w	r9, r9, r3
 800b57e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b580:	2b00      	cmp	r3, #0
 800b582:	dd17      	ble.n	800b5b4 <_strtod_l+0x75c>
 800b584:	4631      	mov	r1, r6
 800b586:	461a      	mov	r2, r3
 800b588:	4620      	mov	r0, r4
 800b58a:	f001 ff13 	bl	800d3b4 <__pow5mult>
 800b58e:	4606      	mov	r6, r0
 800b590:	2800      	cmp	r0, #0
 800b592:	f43f aead 	beq.w	800b2f0 <_strtod_l+0x498>
 800b596:	4601      	mov	r1, r0
 800b598:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b59a:	4620      	mov	r0, r4
 800b59c:	f001 fe64 	bl	800d268 <__multiply>
 800b5a0:	900f      	str	r0, [sp, #60]	; 0x3c
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	f43f aea4 	beq.w	800b2f0 <_strtod_l+0x498>
 800b5a8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f001 fd40 	bl	800d030 <_Bfree>
 800b5b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5b2:	931e      	str	r3, [sp, #120]	; 0x78
 800b5b4:	f1b8 0f00 	cmp.w	r8, #0
 800b5b8:	f300 8091 	bgt.w	800b6de <_strtod_l+0x886>
 800b5bc:	9b08      	ldr	r3, [sp, #32]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	dd08      	ble.n	800b5d4 <_strtod_l+0x77c>
 800b5c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b5c4:	9907      	ldr	r1, [sp, #28]
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f001 fef4 	bl	800d3b4 <__pow5mult>
 800b5cc:	9007      	str	r0, [sp, #28]
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	f43f ae8e 	beq.w	800b2f0 <_strtod_l+0x498>
 800b5d4:	2f00      	cmp	r7, #0
 800b5d6:	dd08      	ble.n	800b5ea <_strtod_l+0x792>
 800b5d8:	9907      	ldr	r1, [sp, #28]
 800b5da:	463a      	mov	r2, r7
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f001 ff43 	bl	800d468 <__lshift>
 800b5e2:	9007      	str	r0, [sp, #28]
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	f43f ae83 	beq.w	800b2f0 <_strtod_l+0x498>
 800b5ea:	f1b9 0f00 	cmp.w	r9, #0
 800b5ee:	dd08      	ble.n	800b602 <_strtod_l+0x7aa>
 800b5f0:	4631      	mov	r1, r6
 800b5f2:	464a      	mov	r2, r9
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	f001 ff37 	bl	800d468 <__lshift>
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	f43f ae77 	beq.w	800b2f0 <_strtod_l+0x498>
 800b602:	9a07      	ldr	r2, [sp, #28]
 800b604:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b606:	4620      	mov	r0, r4
 800b608:	f001 ffb6 	bl	800d578 <__mdiff>
 800b60c:	4605      	mov	r5, r0
 800b60e:	2800      	cmp	r0, #0
 800b610:	f43f ae6e 	beq.w	800b2f0 <_strtod_l+0x498>
 800b614:	68c3      	ldr	r3, [r0, #12]
 800b616:	930f      	str	r3, [sp, #60]	; 0x3c
 800b618:	2300      	movs	r3, #0
 800b61a:	60c3      	str	r3, [r0, #12]
 800b61c:	4631      	mov	r1, r6
 800b61e:	f001 ff8f 	bl	800d540 <__mcmp>
 800b622:	2800      	cmp	r0, #0
 800b624:	da65      	bge.n	800b6f2 <_strtod_l+0x89a>
 800b626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b628:	ea53 030a 	orrs.w	r3, r3, sl
 800b62c:	f040 8087 	bne.w	800b73e <_strtod_l+0x8e6>
 800b630:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b634:	2b00      	cmp	r3, #0
 800b636:	f040 8082 	bne.w	800b73e <_strtod_l+0x8e6>
 800b63a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b63e:	0d1b      	lsrs	r3, r3, #20
 800b640:	051b      	lsls	r3, r3, #20
 800b642:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b646:	d97a      	bls.n	800b73e <_strtod_l+0x8e6>
 800b648:	696b      	ldr	r3, [r5, #20]
 800b64a:	b913      	cbnz	r3, 800b652 <_strtod_l+0x7fa>
 800b64c:	692b      	ldr	r3, [r5, #16]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	dd75      	ble.n	800b73e <_strtod_l+0x8e6>
 800b652:	4629      	mov	r1, r5
 800b654:	2201      	movs	r2, #1
 800b656:	4620      	mov	r0, r4
 800b658:	f001 ff06 	bl	800d468 <__lshift>
 800b65c:	4631      	mov	r1, r6
 800b65e:	4605      	mov	r5, r0
 800b660:	f001 ff6e 	bl	800d540 <__mcmp>
 800b664:	2800      	cmp	r0, #0
 800b666:	dd6a      	ble.n	800b73e <_strtod_l+0x8e6>
 800b668:	9904      	ldr	r1, [sp, #16]
 800b66a:	4a55      	ldr	r2, [pc, #340]	; (800b7c0 <_strtod_l+0x968>)
 800b66c:	465b      	mov	r3, fp
 800b66e:	2900      	cmp	r1, #0
 800b670:	f000 8085 	beq.w	800b77e <_strtod_l+0x926>
 800b674:	ea02 010b 	and.w	r1, r2, fp
 800b678:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b67c:	dc7f      	bgt.n	800b77e <_strtod_l+0x926>
 800b67e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b682:	f77f aeaa 	ble.w	800b3da <_strtod_l+0x582>
 800b686:	4a4f      	ldr	r2, [pc, #316]	; (800b7c4 <_strtod_l+0x96c>)
 800b688:	2300      	movs	r3, #0
 800b68a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800b68e:	4650      	mov	r0, sl
 800b690:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800b694:	4659      	mov	r1, fp
 800b696:	f7f4 ffcf 	bl	8000638 <__aeabi_dmul>
 800b69a:	460b      	mov	r3, r1
 800b69c:	4303      	orrs	r3, r0
 800b69e:	bf08      	it	eq
 800b6a0:	2322      	moveq	r3, #34	; 0x22
 800b6a2:	4682      	mov	sl, r0
 800b6a4:	468b      	mov	fp, r1
 800b6a6:	bf08      	it	eq
 800b6a8:	6023      	streq	r3, [r4, #0]
 800b6aa:	e62b      	b.n	800b304 <_strtod_l+0x4ac>
 800b6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b4:	ea03 0a0a 	and.w	sl, r3, sl
 800b6b8:	e6de      	b.n	800b478 <_strtod_l+0x620>
 800b6ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b6be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b6c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b6c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b6ca:	fa01 f308 	lsl.w	r3, r1, r8
 800b6ce:	930c      	str	r3, [sp, #48]	; 0x30
 800b6d0:	9111      	str	r1, [sp, #68]	; 0x44
 800b6d2:	e741      	b.n	800b558 <_strtod_l+0x700>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	930c      	str	r3, [sp, #48]	; 0x30
 800b6d8:	2301      	movs	r3, #1
 800b6da:	9311      	str	r3, [sp, #68]	; 0x44
 800b6dc:	e73c      	b.n	800b558 <_strtod_l+0x700>
 800b6de:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b6e0:	4642      	mov	r2, r8
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f001 fec0 	bl	800d468 <__lshift>
 800b6e8:	901e      	str	r0, [sp, #120]	; 0x78
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	f47f af66 	bne.w	800b5bc <_strtod_l+0x764>
 800b6f0:	e5fe      	b.n	800b2f0 <_strtod_l+0x498>
 800b6f2:	465f      	mov	r7, fp
 800b6f4:	d16e      	bne.n	800b7d4 <_strtod_l+0x97c>
 800b6f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b6f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6fc:	b342      	cbz	r2, 800b750 <_strtod_l+0x8f8>
 800b6fe:	4a32      	ldr	r2, [pc, #200]	; (800b7c8 <_strtod_l+0x970>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d128      	bne.n	800b756 <_strtod_l+0x8fe>
 800b704:	9b04      	ldr	r3, [sp, #16]
 800b706:	4650      	mov	r0, sl
 800b708:	b1eb      	cbz	r3, 800b746 <_strtod_l+0x8ee>
 800b70a:	4a2d      	ldr	r2, [pc, #180]	; (800b7c0 <_strtod_l+0x968>)
 800b70c:	403a      	ands	r2, r7
 800b70e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b712:	f04f 31ff 	mov.w	r1, #4294967295
 800b716:	d819      	bhi.n	800b74c <_strtod_l+0x8f4>
 800b718:	0d12      	lsrs	r2, r2, #20
 800b71a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b71e:	fa01 f303 	lsl.w	r3, r1, r3
 800b722:	4298      	cmp	r0, r3
 800b724:	d117      	bne.n	800b756 <_strtod_l+0x8fe>
 800b726:	4b29      	ldr	r3, [pc, #164]	; (800b7cc <_strtod_l+0x974>)
 800b728:	429f      	cmp	r7, r3
 800b72a:	d102      	bne.n	800b732 <_strtod_l+0x8da>
 800b72c:	3001      	adds	r0, #1
 800b72e:	f43f addf 	beq.w	800b2f0 <_strtod_l+0x498>
 800b732:	4b23      	ldr	r3, [pc, #140]	; (800b7c0 <_strtod_l+0x968>)
 800b734:	403b      	ands	r3, r7
 800b736:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b73a:	f04f 0a00 	mov.w	sl, #0
 800b73e:	9b04      	ldr	r3, [sp, #16]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1a0      	bne.n	800b686 <_strtod_l+0x82e>
 800b744:	e5de      	b.n	800b304 <_strtod_l+0x4ac>
 800b746:	f04f 33ff 	mov.w	r3, #4294967295
 800b74a:	e7ea      	b.n	800b722 <_strtod_l+0x8ca>
 800b74c:	460b      	mov	r3, r1
 800b74e:	e7e8      	b.n	800b722 <_strtod_l+0x8ca>
 800b750:	ea53 030a 	orrs.w	r3, r3, sl
 800b754:	d088      	beq.n	800b668 <_strtod_l+0x810>
 800b756:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b758:	b1db      	cbz	r3, 800b792 <_strtod_l+0x93a>
 800b75a:	423b      	tst	r3, r7
 800b75c:	d0ef      	beq.n	800b73e <_strtod_l+0x8e6>
 800b75e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b760:	9a04      	ldr	r2, [sp, #16]
 800b762:	4650      	mov	r0, sl
 800b764:	4659      	mov	r1, fp
 800b766:	b1c3      	cbz	r3, 800b79a <_strtod_l+0x942>
 800b768:	f7ff fb57 	bl	800ae1a <sulp>
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b774:	f7f4 fdaa 	bl	80002cc <__adddf3>
 800b778:	4682      	mov	sl, r0
 800b77a:	468b      	mov	fp, r1
 800b77c:	e7df      	b.n	800b73e <_strtod_l+0x8e6>
 800b77e:	4013      	ands	r3, r2
 800b780:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b784:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b788:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b78c:	f04f 3aff 	mov.w	sl, #4294967295
 800b790:	e7d5      	b.n	800b73e <_strtod_l+0x8e6>
 800b792:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b794:	ea13 0f0a 	tst.w	r3, sl
 800b798:	e7e0      	b.n	800b75c <_strtod_l+0x904>
 800b79a:	f7ff fb3e 	bl	800ae1a <sulp>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b7a6:	f7f4 fd8f 	bl	80002c8 <__aeabi_dsub>
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4682      	mov	sl, r0
 800b7b0:	468b      	mov	fp, r1
 800b7b2:	f7f5 f9a9 	bl	8000b08 <__aeabi_dcmpeq>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d0c1      	beq.n	800b73e <_strtod_l+0x8e6>
 800b7ba:	e60e      	b.n	800b3da <_strtod_l+0x582>
 800b7bc:	fffffc02 	.word	0xfffffc02
 800b7c0:	7ff00000 	.word	0x7ff00000
 800b7c4:	39500000 	.word	0x39500000
 800b7c8:	000fffff 	.word	0x000fffff
 800b7cc:	7fefffff 	.word	0x7fefffff
 800b7d0:	0800f588 	.word	0x0800f588
 800b7d4:	4631      	mov	r1, r6
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	f002 f82e 	bl	800d838 <__ratio>
 800b7dc:	ec59 8b10 	vmov	r8, r9, d0
 800b7e0:	ee10 0a10 	vmov	r0, s0
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	f7f5 f9a0 	bl	8000b30 <__aeabi_dcmple>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d07c      	beq.n	800b8ee <_strtod_l+0xa96>
 800b7f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d04c      	beq.n	800b894 <_strtod_l+0xa3c>
 800b7fa:	4b95      	ldr	r3, [pc, #596]	; (800ba50 <_strtod_l+0xbf8>)
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b802:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ba50 <_strtod_l+0xbf8>
 800b806:	f04f 0800 	mov.w	r8, #0
 800b80a:	4b92      	ldr	r3, [pc, #584]	; (800ba54 <_strtod_l+0xbfc>)
 800b80c:	403b      	ands	r3, r7
 800b80e:	9311      	str	r3, [sp, #68]	; 0x44
 800b810:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b812:	4b91      	ldr	r3, [pc, #580]	; (800ba58 <_strtod_l+0xc00>)
 800b814:	429a      	cmp	r2, r3
 800b816:	f040 80b2 	bne.w	800b97e <_strtod_l+0xb26>
 800b81a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b81e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b822:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b826:	ec4b ab10 	vmov	d0, sl, fp
 800b82a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b82e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b832:	f001 ff29 	bl	800d688 <__ulp>
 800b836:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b83a:	ec53 2b10 	vmov	r2, r3, d0
 800b83e:	f7f4 fefb 	bl	8000638 <__aeabi_dmul>
 800b842:	4652      	mov	r2, sl
 800b844:	465b      	mov	r3, fp
 800b846:	f7f4 fd41 	bl	80002cc <__adddf3>
 800b84a:	460b      	mov	r3, r1
 800b84c:	4981      	ldr	r1, [pc, #516]	; (800ba54 <_strtod_l+0xbfc>)
 800b84e:	4a83      	ldr	r2, [pc, #524]	; (800ba5c <_strtod_l+0xc04>)
 800b850:	4019      	ands	r1, r3
 800b852:	4291      	cmp	r1, r2
 800b854:	4682      	mov	sl, r0
 800b856:	d95e      	bls.n	800b916 <_strtod_l+0xabe>
 800b858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b85a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b85e:	4293      	cmp	r3, r2
 800b860:	d103      	bne.n	800b86a <_strtod_l+0xa12>
 800b862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b864:	3301      	adds	r3, #1
 800b866:	f43f ad43 	beq.w	800b2f0 <_strtod_l+0x498>
 800b86a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800ba68 <_strtod_l+0xc10>
 800b86e:	f04f 3aff 	mov.w	sl, #4294967295
 800b872:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b874:	4620      	mov	r0, r4
 800b876:	f001 fbdb 	bl	800d030 <_Bfree>
 800b87a:	9907      	ldr	r1, [sp, #28]
 800b87c:	4620      	mov	r0, r4
 800b87e:	f001 fbd7 	bl	800d030 <_Bfree>
 800b882:	4631      	mov	r1, r6
 800b884:	4620      	mov	r0, r4
 800b886:	f001 fbd3 	bl	800d030 <_Bfree>
 800b88a:	4629      	mov	r1, r5
 800b88c:	4620      	mov	r0, r4
 800b88e:	f001 fbcf 	bl	800d030 <_Bfree>
 800b892:	e613      	b.n	800b4bc <_strtod_l+0x664>
 800b894:	f1ba 0f00 	cmp.w	sl, #0
 800b898:	d11b      	bne.n	800b8d2 <_strtod_l+0xa7a>
 800b89a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b89e:	b9f3      	cbnz	r3, 800b8de <_strtod_l+0xa86>
 800b8a0:	4b6b      	ldr	r3, [pc, #428]	; (800ba50 <_strtod_l+0xbf8>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	4640      	mov	r0, r8
 800b8a6:	4649      	mov	r1, r9
 800b8a8:	f7f5 f938 	bl	8000b1c <__aeabi_dcmplt>
 800b8ac:	b9d0      	cbnz	r0, 800b8e4 <_strtod_l+0xa8c>
 800b8ae:	4640      	mov	r0, r8
 800b8b0:	4649      	mov	r1, r9
 800b8b2:	4b6b      	ldr	r3, [pc, #428]	; (800ba60 <_strtod_l+0xc08>)
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f7f4 febf 	bl	8000638 <__aeabi_dmul>
 800b8ba:	4680      	mov	r8, r0
 800b8bc:	4689      	mov	r9, r1
 800b8be:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b8c2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b8c6:	931b      	str	r3, [sp, #108]	; 0x6c
 800b8c8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b8cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b8d0:	e79b      	b.n	800b80a <_strtod_l+0x9b2>
 800b8d2:	f1ba 0f01 	cmp.w	sl, #1
 800b8d6:	d102      	bne.n	800b8de <_strtod_l+0xa86>
 800b8d8:	2f00      	cmp	r7, #0
 800b8da:	f43f ad7e 	beq.w	800b3da <_strtod_l+0x582>
 800b8de:	4b61      	ldr	r3, [pc, #388]	; (800ba64 <_strtod_l+0xc0c>)
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	e78c      	b.n	800b7fe <_strtod_l+0x9a6>
 800b8e4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ba60 <_strtod_l+0xc08>
 800b8e8:	f04f 0800 	mov.w	r8, #0
 800b8ec:	e7e7      	b.n	800b8be <_strtod_l+0xa66>
 800b8ee:	4b5c      	ldr	r3, [pc, #368]	; (800ba60 <_strtod_l+0xc08>)
 800b8f0:	4640      	mov	r0, r8
 800b8f2:	4649      	mov	r1, r9
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f7f4 fe9f 	bl	8000638 <__aeabi_dmul>
 800b8fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8fc:	4680      	mov	r8, r0
 800b8fe:	4689      	mov	r9, r1
 800b900:	b933      	cbnz	r3, 800b910 <_strtod_l+0xab8>
 800b902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b906:	9012      	str	r0, [sp, #72]	; 0x48
 800b908:	9313      	str	r3, [sp, #76]	; 0x4c
 800b90a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b90e:	e7dd      	b.n	800b8cc <_strtod_l+0xa74>
 800b910:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b914:	e7f9      	b.n	800b90a <_strtod_l+0xab2>
 800b916:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b91a:	9b04      	ldr	r3, [sp, #16]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1a8      	bne.n	800b872 <_strtod_l+0xa1a>
 800b920:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b924:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b926:	0d1b      	lsrs	r3, r3, #20
 800b928:	051b      	lsls	r3, r3, #20
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d1a1      	bne.n	800b872 <_strtod_l+0xa1a>
 800b92e:	4640      	mov	r0, r8
 800b930:	4649      	mov	r1, r9
 800b932:	f7f5 f9e1 	bl	8000cf8 <__aeabi_d2lz>
 800b936:	f7f4 fe51 	bl	80005dc <__aeabi_l2d>
 800b93a:	4602      	mov	r2, r0
 800b93c:	460b      	mov	r3, r1
 800b93e:	4640      	mov	r0, r8
 800b940:	4649      	mov	r1, r9
 800b942:	f7f4 fcc1 	bl	80002c8 <__aeabi_dsub>
 800b946:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b948:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b94c:	ea43 030a 	orr.w	r3, r3, sl
 800b950:	4313      	orrs	r3, r2
 800b952:	4680      	mov	r8, r0
 800b954:	4689      	mov	r9, r1
 800b956:	d053      	beq.n	800ba00 <_strtod_l+0xba8>
 800b958:	a335      	add	r3, pc, #212	; (adr r3, 800ba30 <_strtod_l+0xbd8>)
 800b95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95e:	f7f5 f8dd 	bl	8000b1c <__aeabi_dcmplt>
 800b962:	2800      	cmp	r0, #0
 800b964:	f47f acce 	bne.w	800b304 <_strtod_l+0x4ac>
 800b968:	a333      	add	r3, pc, #204	; (adr r3, 800ba38 <_strtod_l+0xbe0>)
 800b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96e:	4640      	mov	r0, r8
 800b970:	4649      	mov	r1, r9
 800b972:	f7f5 f8f1 	bl	8000b58 <__aeabi_dcmpgt>
 800b976:	2800      	cmp	r0, #0
 800b978:	f43f af7b 	beq.w	800b872 <_strtod_l+0xa1a>
 800b97c:	e4c2      	b.n	800b304 <_strtod_l+0x4ac>
 800b97e:	9b04      	ldr	r3, [sp, #16]
 800b980:	b333      	cbz	r3, 800b9d0 <_strtod_l+0xb78>
 800b982:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b984:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b988:	d822      	bhi.n	800b9d0 <_strtod_l+0xb78>
 800b98a:	a32d      	add	r3, pc, #180	; (adr r3, 800ba40 <_strtod_l+0xbe8>)
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	4640      	mov	r0, r8
 800b992:	4649      	mov	r1, r9
 800b994:	f7f5 f8cc 	bl	8000b30 <__aeabi_dcmple>
 800b998:	b1a0      	cbz	r0, 800b9c4 <_strtod_l+0xb6c>
 800b99a:	4649      	mov	r1, r9
 800b99c:	4640      	mov	r0, r8
 800b99e:	f7f5 f923 	bl	8000be8 <__aeabi_d2uiz>
 800b9a2:	2801      	cmp	r0, #1
 800b9a4:	bf38      	it	cc
 800b9a6:	2001      	movcc	r0, #1
 800b9a8:	f7f4 fdcc 	bl	8000544 <__aeabi_ui2d>
 800b9ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9ae:	4680      	mov	r8, r0
 800b9b0:	4689      	mov	r9, r1
 800b9b2:	bb13      	cbnz	r3, 800b9fa <_strtod_l+0xba2>
 800b9b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9b8:	9014      	str	r0, [sp, #80]	; 0x50
 800b9ba:	9315      	str	r3, [sp, #84]	; 0x54
 800b9bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b9c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b9c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b9c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b9cc:	1a9b      	subs	r3, r3, r2
 800b9ce:	930d      	str	r3, [sp, #52]	; 0x34
 800b9d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9d4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b9d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b9dc:	f001 fe54 	bl	800d688 <__ulp>
 800b9e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9e4:	ec53 2b10 	vmov	r2, r3, d0
 800b9e8:	f7f4 fe26 	bl	8000638 <__aeabi_dmul>
 800b9ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b9f0:	f7f4 fc6c 	bl	80002cc <__adddf3>
 800b9f4:	4682      	mov	sl, r0
 800b9f6:	468b      	mov	fp, r1
 800b9f8:	e78f      	b.n	800b91a <_strtod_l+0xac2>
 800b9fa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b9fe:	e7dd      	b.n	800b9bc <_strtod_l+0xb64>
 800ba00:	a311      	add	r3, pc, #68	; (adr r3, 800ba48 <_strtod_l+0xbf0>)
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	f7f5 f889 	bl	8000b1c <__aeabi_dcmplt>
 800ba0a:	e7b4      	b.n	800b976 <_strtod_l+0xb1e>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	930e      	str	r3, [sp, #56]	; 0x38
 800ba10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ba12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ba14:	6013      	str	r3, [r2, #0]
 800ba16:	f7ff ba65 	b.w	800aee4 <_strtod_l+0x8c>
 800ba1a:	2b65      	cmp	r3, #101	; 0x65
 800ba1c:	f43f ab5d 	beq.w	800b0da <_strtod_l+0x282>
 800ba20:	2b45      	cmp	r3, #69	; 0x45
 800ba22:	f43f ab5a 	beq.w	800b0da <_strtod_l+0x282>
 800ba26:	2201      	movs	r2, #1
 800ba28:	f7ff bb92 	b.w	800b150 <_strtod_l+0x2f8>
 800ba2c:	f3af 8000 	nop.w
 800ba30:	94a03595 	.word	0x94a03595
 800ba34:	3fdfffff 	.word	0x3fdfffff
 800ba38:	35afe535 	.word	0x35afe535
 800ba3c:	3fe00000 	.word	0x3fe00000
 800ba40:	ffc00000 	.word	0xffc00000
 800ba44:	41dfffff 	.word	0x41dfffff
 800ba48:	94a03595 	.word	0x94a03595
 800ba4c:	3fcfffff 	.word	0x3fcfffff
 800ba50:	3ff00000 	.word	0x3ff00000
 800ba54:	7ff00000 	.word	0x7ff00000
 800ba58:	7fe00000 	.word	0x7fe00000
 800ba5c:	7c9fffff 	.word	0x7c9fffff
 800ba60:	3fe00000 	.word	0x3fe00000
 800ba64:	bff00000 	.word	0xbff00000
 800ba68:	7fefffff 	.word	0x7fefffff

0800ba6c <_strtod_r>:
 800ba6c:	4b01      	ldr	r3, [pc, #4]	; (800ba74 <_strtod_r+0x8>)
 800ba6e:	f7ff b9f3 	b.w	800ae58 <_strtod_l>
 800ba72:	bf00      	nop
 800ba74:	20000090 	.word	0x20000090

0800ba78 <_strtol_l.isra.0>:
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba7e:	d001      	beq.n	800ba84 <_strtol_l.isra.0+0xc>
 800ba80:	2b24      	cmp	r3, #36	; 0x24
 800ba82:	d906      	bls.n	800ba92 <_strtol_l.isra.0+0x1a>
 800ba84:	f7fe fac4 	bl	800a010 <__errno>
 800ba88:	2316      	movs	r3, #22
 800ba8a:	6003      	str	r3, [r0, #0]
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba92:	4f3a      	ldr	r7, [pc, #232]	; (800bb7c <_strtol_l.isra.0+0x104>)
 800ba94:	468e      	mov	lr, r1
 800ba96:	4676      	mov	r6, lr
 800ba98:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ba9c:	5de5      	ldrb	r5, [r4, r7]
 800ba9e:	f015 0508 	ands.w	r5, r5, #8
 800baa2:	d1f8      	bne.n	800ba96 <_strtol_l.isra.0+0x1e>
 800baa4:	2c2d      	cmp	r4, #45	; 0x2d
 800baa6:	d134      	bne.n	800bb12 <_strtol_l.isra.0+0x9a>
 800baa8:	f89e 4000 	ldrb.w	r4, [lr]
 800baac:	f04f 0801 	mov.w	r8, #1
 800bab0:	f106 0e02 	add.w	lr, r6, #2
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d05c      	beq.n	800bb72 <_strtol_l.isra.0+0xfa>
 800bab8:	2b10      	cmp	r3, #16
 800baba:	d10c      	bne.n	800bad6 <_strtol_l.isra.0+0x5e>
 800babc:	2c30      	cmp	r4, #48	; 0x30
 800babe:	d10a      	bne.n	800bad6 <_strtol_l.isra.0+0x5e>
 800bac0:	f89e 4000 	ldrb.w	r4, [lr]
 800bac4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bac8:	2c58      	cmp	r4, #88	; 0x58
 800baca:	d14d      	bne.n	800bb68 <_strtol_l.isra.0+0xf0>
 800bacc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800bad0:	2310      	movs	r3, #16
 800bad2:	f10e 0e02 	add.w	lr, lr, #2
 800bad6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800bada:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bade:	2600      	movs	r6, #0
 800bae0:	fbbc f9f3 	udiv	r9, ip, r3
 800bae4:	4635      	mov	r5, r6
 800bae6:	fb03 ca19 	mls	sl, r3, r9, ip
 800baea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800baee:	2f09      	cmp	r7, #9
 800baf0:	d818      	bhi.n	800bb24 <_strtol_l.isra.0+0xac>
 800baf2:	463c      	mov	r4, r7
 800baf4:	42a3      	cmp	r3, r4
 800baf6:	dd24      	ble.n	800bb42 <_strtol_l.isra.0+0xca>
 800baf8:	2e00      	cmp	r6, #0
 800bafa:	db1f      	blt.n	800bb3c <_strtol_l.isra.0+0xc4>
 800bafc:	45a9      	cmp	r9, r5
 800bafe:	d31d      	bcc.n	800bb3c <_strtol_l.isra.0+0xc4>
 800bb00:	d101      	bne.n	800bb06 <_strtol_l.isra.0+0x8e>
 800bb02:	45a2      	cmp	sl, r4
 800bb04:	db1a      	blt.n	800bb3c <_strtol_l.isra.0+0xc4>
 800bb06:	fb05 4503 	mla	r5, r5, r3, r4
 800bb0a:	2601      	movs	r6, #1
 800bb0c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bb10:	e7eb      	b.n	800baea <_strtol_l.isra.0+0x72>
 800bb12:	2c2b      	cmp	r4, #43	; 0x2b
 800bb14:	bf08      	it	eq
 800bb16:	f89e 4000 	ldrbeq.w	r4, [lr]
 800bb1a:	46a8      	mov	r8, r5
 800bb1c:	bf08      	it	eq
 800bb1e:	f106 0e02 	addeq.w	lr, r6, #2
 800bb22:	e7c7      	b.n	800bab4 <_strtol_l.isra.0+0x3c>
 800bb24:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800bb28:	2f19      	cmp	r7, #25
 800bb2a:	d801      	bhi.n	800bb30 <_strtol_l.isra.0+0xb8>
 800bb2c:	3c37      	subs	r4, #55	; 0x37
 800bb2e:	e7e1      	b.n	800baf4 <_strtol_l.isra.0+0x7c>
 800bb30:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800bb34:	2f19      	cmp	r7, #25
 800bb36:	d804      	bhi.n	800bb42 <_strtol_l.isra.0+0xca>
 800bb38:	3c57      	subs	r4, #87	; 0x57
 800bb3a:	e7db      	b.n	800baf4 <_strtol_l.isra.0+0x7c>
 800bb3c:	f04f 36ff 	mov.w	r6, #4294967295
 800bb40:	e7e4      	b.n	800bb0c <_strtol_l.isra.0+0x94>
 800bb42:	2e00      	cmp	r6, #0
 800bb44:	da05      	bge.n	800bb52 <_strtol_l.isra.0+0xda>
 800bb46:	2322      	movs	r3, #34	; 0x22
 800bb48:	6003      	str	r3, [r0, #0]
 800bb4a:	4665      	mov	r5, ip
 800bb4c:	b942      	cbnz	r2, 800bb60 <_strtol_l.isra.0+0xe8>
 800bb4e:	4628      	mov	r0, r5
 800bb50:	e79d      	b.n	800ba8e <_strtol_l.isra.0+0x16>
 800bb52:	f1b8 0f00 	cmp.w	r8, #0
 800bb56:	d000      	beq.n	800bb5a <_strtol_l.isra.0+0xe2>
 800bb58:	426d      	negs	r5, r5
 800bb5a:	2a00      	cmp	r2, #0
 800bb5c:	d0f7      	beq.n	800bb4e <_strtol_l.isra.0+0xd6>
 800bb5e:	b10e      	cbz	r6, 800bb64 <_strtol_l.isra.0+0xec>
 800bb60:	f10e 31ff 	add.w	r1, lr, #4294967295
 800bb64:	6011      	str	r1, [r2, #0]
 800bb66:	e7f2      	b.n	800bb4e <_strtol_l.isra.0+0xd6>
 800bb68:	2430      	movs	r4, #48	; 0x30
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1b3      	bne.n	800bad6 <_strtol_l.isra.0+0x5e>
 800bb6e:	2308      	movs	r3, #8
 800bb70:	e7b1      	b.n	800bad6 <_strtol_l.isra.0+0x5e>
 800bb72:	2c30      	cmp	r4, #48	; 0x30
 800bb74:	d0a4      	beq.n	800bac0 <_strtol_l.isra.0+0x48>
 800bb76:	230a      	movs	r3, #10
 800bb78:	e7ad      	b.n	800bad6 <_strtol_l.isra.0+0x5e>
 800bb7a:	bf00      	nop
 800bb7c:	0800f5b1 	.word	0x0800f5b1

0800bb80 <_strtol_r>:
 800bb80:	f7ff bf7a 	b.w	800ba78 <_strtol_l.isra.0>

0800bb84 <quorem>:
 800bb84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb88:	6903      	ldr	r3, [r0, #16]
 800bb8a:	690c      	ldr	r4, [r1, #16]
 800bb8c:	42a3      	cmp	r3, r4
 800bb8e:	4607      	mov	r7, r0
 800bb90:	f2c0 8081 	blt.w	800bc96 <quorem+0x112>
 800bb94:	3c01      	subs	r4, #1
 800bb96:	f101 0814 	add.w	r8, r1, #20
 800bb9a:	f100 0514 	add.w	r5, r0, #20
 800bb9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bba2:	9301      	str	r3, [sp, #4]
 800bba4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bba8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbac:	3301      	adds	r3, #1
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bbb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbb8:	fbb2 f6f3 	udiv	r6, r2, r3
 800bbbc:	d331      	bcc.n	800bc22 <quorem+0x9e>
 800bbbe:	f04f 0e00 	mov.w	lr, #0
 800bbc2:	4640      	mov	r0, r8
 800bbc4:	46ac      	mov	ip, r5
 800bbc6:	46f2      	mov	sl, lr
 800bbc8:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbcc:	b293      	uxth	r3, r2
 800bbce:	fb06 e303 	mla	r3, r6, r3, lr
 800bbd2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	ebaa 0303 	sub.w	r3, sl, r3
 800bbdc:	0c12      	lsrs	r2, r2, #16
 800bbde:	f8dc a000 	ldr.w	sl, [ip]
 800bbe2:	fb06 e202 	mla	r2, r6, r2, lr
 800bbe6:	fa13 f38a 	uxtah	r3, r3, sl
 800bbea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbee:	fa1f fa82 	uxth.w	sl, r2
 800bbf2:	f8dc 2000 	ldr.w	r2, [ip]
 800bbf6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bbfa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc04:	4581      	cmp	r9, r0
 800bc06:	f84c 3b04 	str.w	r3, [ip], #4
 800bc0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc0e:	d2db      	bcs.n	800bbc8 <quorem+0x44>
 800bc10:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc14:	b92b      	cbnz	r3, 800bc22 <quorem+0x9e>
 800bc16:	9b01      	ldr	r3, [sp, #4]
 800bc18:	3b04      	subs	r3, #4
 800bc1a:	429d      	cmp	r5, r3
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	d32e      	bcc.n	800bc7e <quorem+0xfa>
 800bc20:	613c      	str	r4, [r7, #16]
 800bc22:	4638      	mov	r0, r7
 800bc24:	f001 fc8c 	bl	800d540 <__mcmp>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	db24      	blt.n	800bc76 <quorem+0xf2>
 800bc2c:	3601      	adds	r6, #1
 800bc2e:	4628      	mov	r0, r5
 800bc30:	f04f 0c00 	mov.w	ip, #0
 800bc34:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc38:	f8d0 e000 	ldr.w	lr, [r0]
 800bc3c:	b293      	uxth	r3, r2
 800bc3e:	ebac 0303 	sub.w	r3, ip, r3
 800bc42:	0c12      	lsrs	r2, r2, #16
 800bc44:	fa13 f38e 	uxtah	r3, r3, lr
 800bc48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bc4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc56:	45c1      	cmp	r9, r8
 800bc58:	f840 3b04 	str.w	r3, [r0], #4
 800bc5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bc60:	d2e8      	bcs.n	800bc34 <quorem+0xb0>
 800bc62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc6a:	b922      	cbnz	r2, 800bc76 <quorem+0xf2>
 800bc6c:	3b04      	subs	r3, #4
 800bc6e:	429d      	cmp	r5, r3
 800bc70:	461a      	mov	r2, r3
 800bc72:	d30a      	bcc.n	800bc8a <quorem+0x106>
 800bc74:	613c      	str	r4, [r7, #16]
 800bc76:	4630      	mov	r0, r6
 800bc78:	b003      	add	sp, #12
 800bc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7e:	6812      	ldr	r2, [r2, #0]
 800bc80:	3b04      	subs	r3, #4
 800bc82:	2a00      	cmp	r2, #0
 800bc84:	d1cc      	bne.n	800bc20 <quorem+0x9c>
 800bc86:	3c01      	subs	r4, #1
 800bc88:	e7c7      	b.n	800bc1a <quorem+0x96>
 800bc8a:	6812      	ldr	r2, [r2, #0]
 800bc8c:	3b04      	subs	r3, #4
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	d1f0      	bne.n	800bc74 <quorem+0xf0>
 800bc92:	3c01      	subs	r4, #1
 800bc94:	e7eb      	b.n	800bc6e <quorem+0xea>
 800bc96:	2000      	movs	r0, #0
 800bc98:	e7ee      	b.n	800bc78 <quorem+0xf4>
 800bc9a:	0000      	movs	r0, r0
 800bc9c:	0000      	movs	r0, r0
	...

0800bca0 <_dtoa_r>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	ed2d 8b02 	vpush	{d8}
 800bca8:	ec57 6b10 	vmov	r6, r7, d0
 800bcac:	b095      	sub	sp, #84	; 0x54
 800bcae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bcb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bcb4:	9105      	str	r1, [sp, #20]
 800bcb6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bcba:	4604      	mov	r4, r0
 800bcbc:	9209      	str	r2, [sp, #36]	; 0x24
 800bcbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcc0:	b975      	cbnz	r5, 800bce0 <_dtoa_r+0x40>
 800bcc2:	2010      	movs	r0, #16
 800bcc4:	f001 f94c 	bl	800cf60 <malloc>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	6260      	str	r0, [r4, #36]	; 0x24
 800bccc:	b920      	cbnz	r0, 800bcd8 <_dtoa_r+0x38>
 800bcce:	4bb2      	ldr	r3, [pc, #712]	; (800bf98 <_dtoa_r+0x2f8>)
 800bcd0:	21ea      	movs	r1, #234	; 0xea
 800bcd2:	48b2      	ldr	r0, [pc, #712]	; (800bf9c <_dtoa_r+0x2fc>)
 800bcd4:	f002 f874 	bl	800ddc0 <__assert_func>
 800bcd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bcdc:	6005      	str	r5, [r0, #0]
 800bcde:	60c5      	str	r5, [r0, #12]
 800bce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bce2:	6819      	ldr	r1, [r3, #0]
 800bce4:	b151      	cbz	r1, 800bcfc <_dtoa_r+0x5c>
 800bce6:	685a      	ldr	r2, [r3, #4]
 800bce8:	604a      	str	r2, [r1, #4]
 800bcea:	2301      	movs	r3, #1
 800bcec:	4093      	lsls	r3, r2
 800bcee:	608b      	str	r3, [r1, #8]
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f001 f99d 	bl	800d030 <_Bfree>
 800bcf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	601a      	str	r2, [r3, #0]
 800bcfc:	1e3b      	subs	r3, r7, #0
 800bcfe:	bfb9      	ittee	lt
 800bd00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd04:	9303      	strlt	r3, [sp, #12]
 800bd06:	2300      	movge	r3, #0
 800bd08:	f8c8 3000 	strge.w	r3, [r8]
 800bd0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800bd10:	4ba3      	ldr	r3, [pc, #652]	; (800bfa0 <_dtoa_r+0x300>)
 800bd12:	bfbc      	itt	lt
 800bd14:	2201      	movlt	r2, #1
 800bd16:	f8c8 2000 	strlt.w	r2, [r8]
 800bd1a:	ea33 0309 	bics.w	r3, r3, r9
 800bd1e:	d11b      	bne.n	800bd58 <_dtoa_r+0xb8>
 800bd20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bd22:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd26:	6013      	str	r3, [r2, #0]
 800bd28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd2c:	4333      	orrs	r3, r6
 800bd2e:	f000 857a 	beq.w	800c826 <_dtoa_r+0xb86>
 800bd32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd34:	b963      	cbnz	r3, 800bd50 <_dtoa_r+0xb0>
 800bd36:	4b9b      	ldr	r3, [pc, #620]	; (800bfa4 <_dtoa_r+0x304>)
 800bd38:	e024      	b.n	800bd84 <_dtoa_r+0xe4>
 800bd3a:	4b9b      	ldr	r3, [pc, #620]	; (800bfa8 <_dtoa_r+0x308>)
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	3308      	adds	r3, #8
 800bd40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd42:	6013      	str	r3, [r2, #0]
 800bd44:	9800      	ldr	r0, [sp, #0]
 800bd46:	b015      	add	sp, #84	; 0x54
 800bd48:	ecbd 8b02 	vpop	{d8}
 800bd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd50:	4b94      	ldr	r3, [pc, #592]	; (800bfa4 <_dtoa_r+0x304>)
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	3303      	adds	r3, #3
 800bd56:	e7f3      	b.n	800bd40 <_dtoa_r+0xa0>
 800bd58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	ec51 0b17 	vmov	r0, r1, d7
 800bd62:	2300      	movs	r3, #0
 800bd64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bd68:	f7f4 fece 	bl	8000b08 <__aeabi_dcmpeq>
 800bd6c:	4680      	mov	r8, r0
 800bd6e:	b158      	cbz	r0, 800bd88 <_dtoa_r+0xe8>
 800bd70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bd72:	2301      	movs	r3, #1
 800bd74:	6013      	str	r3, [r2, #0]
 800bd76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f000 8551 	beq.w	800c820 <_dtoa_r+0xb80>
 800bd7e:	488b      	ldr	r0, [pc, #556]	; (800bfac <_dtoa_r+0x30c>)
 800bd80:	6018      	str	r0, [r3, #0]
 800bd82:	1e43      	subs	r3, r0, #1
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	e7dd      	b.n	800bd44 <_dtoa_r+0xa4>
 800bd88:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bd8c:	aa12      	add	r2, sp, #72	; 0x48
 800bd8e:	a913      	add	r1, sp, #76	; 0x4c
 800bd90:	4620      	mov	r0, r4
 800bd92:	f001 fcf5 	bl	800d780 <__d2b>
 800bd96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd9a:	4683      	mov	fp, r0
 800bd9c:	2d00      	cmp	r5, #0
 800bd9e:	d07c      	beq.n	800be9a <_dtoa_r+0x1fa>
 800bda0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bda2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800bda6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdaa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800bdae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bdb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bdb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bdba:	4b7d      	ldr	r3, [pc, #500]	; (800bfb0 <_dtoa_r+0x310>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	4639      	mov	r1, r7
 800bdc2:	f7f4 fa81 	bl	80002c8 <__aeabi_dsub>
 800bdc6:	a36e      	add	r3, pc, #440	; (adr r3, 800bf80 <_dtoa_r+0x2e0>)
 800bdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdcc:	f7f4 fc34 	bl	8000638 <__aeabi_dmul>
 800bdd0:	a36d      	add	r3, pc, #436	; (adr r3, 800bf88 <_dtoa_r+0x2e8>)
 800bdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd6:	f7f4 fa79 	bl	80002cc <__adddf3>
 800bdda:	4606      	mov	r6, r0
 800bddc:	4628      	mov	r0, r5
 800bdde:	460f      	mov	r7, r1
 800bde0:	f7f4 fbc0 	bl	8000564 <__aeabi_i2d>
 800bde4:	a36a      	add	r3, pc, #424	; (adr r3, 800bf90 <_dtoa_r+0x2f0>)
 800bde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdea:	f7f4 fc25 	bl	8000638 <__aeabi_dmul>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	4639      	mov	r1, r7
 800bdf6:	f7f4 fa69 	bl	80002cc <__adddf3>
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	460f      	mov	r7, r1
 800bdfe:	f7f4 fecb 	bl	8000b98 <__aeabi_d2iz>
 800be02:	2200      	movs	r2, #0
 800be04:	4682      	mov	sl, r0
 800be06:	2300      	movs	r3, #0
 800be08:	4630      	mov	r0, r6
 800be0a:	4639      	mov	r1, r7
 800be0c:	f7f4 fe86 	bl	8000b1c <__aeabi_dcmplt>
 800be10:	b148      	cbz	r0, 800be26 <_dtoa_r+0x186>
 800be12:	4650      	mov	r0, sl
 800be14:	f7f4 fba6 	bl	8000564 <__aeabi_i2d>
 800be18:	4632      	mov	r2, r6
 800be1a:	463b      	mov	r3, r7
 800be1c:	f7f4 fe74 	bl	8000b08 <__aeabi_dcmpeq>
 800be20:	b908      	cbnz	r0, 800be26 <_dtoa_r+0x186>
 800be22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be26:	f1ba 0f16 	cmp.w	sl, #22
 800be2a:	d854      	bhi.n	800bed6 <_dtoa_r+0x236>
 800be2c:	4b61      	ldr	r3, [pc, #388]	; (800bfb4 <_dtoa_r+0x314>)
 800be2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800be32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800be3a:	f7f4 fe6f 	bl	8000b1c <__aeabi_dcmplt>
 800be3e:	2800      	cmp	r0, #0
 800be40:	d04b      	beq.n	800beda <_dtoa_r+0x23a>
 800be42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be46:	2300      	movs	r3, #0
 800be48:	930e      	str	r3, [sp, #56]	; 0x38
 800be4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be4c:	1b5d      	subs	r5, r3, r5
 800be4e:	1e6b      	subs	r3, r5, #1
 800be50:	9304      	str	r3, [sp, #16]
 800be52:	bf43      	ittte	mi
 800be54:	2300      	movmi	r3, #0
 800be56:	f1c5 0801 	rsbmi	r8, r5, #1
 800be5a:	9304      	strmi	r3, [sp, #16]
 800be5c:	f04f 0800 	movpl.w	r8, #0
 800be60:	f1ba 0f00 	cmp.w	sl, #0
 800be64:	db3b      	blt.n	800bede <_dtoa_r+0x23e>
 800be66:	9b04      	ldr	r3, [sp, #16]
 800be68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800be6c:	4453      	add	r3, sl
 800be6e:	9304      	str	r3, [sp, #16]
 800be70:	2300      	movs	r3, #0
 800be72:	9306      	str	r3, [sp, #24]
 800be74:	9b05      	ldr	r3, [sp, #20]
 800be76:	2b09      	cmp	r3, #9
 800be78:	d869      	bhi.n	800bf4e <_dtoa_r+0x2ae>
 800be7a:	2b05      	cmp	r3, #5
 800be7c:	bfc4      	itt	gt
 800be7e:	3b04      	subgt	r3, #4
 800be80:	9305      	strgt	r3, [sp, #20]
 800be82:	9b05      	ldr	r3, [sp, #20]
 800be84:	f1a3 0302 	sub.w	r3, r3, #2
 800be88:	bfcc      	ite	gt
 800be8a:	2500      	movgt	r5, #0
 800be8c:	2501      	movle	r5, #1
 800be8e:	2b03      	cmp	r3, #3
 800be90:	d869      	bhi.n	800bf66 <_dtoa_r+0x2c6>
 800be92:	e8df f003 	tbb	[pc, r3]
 800be96:	4e2c      	.short	0x4e2c
 800be98:	5a4c      	.short	0x5a4c
 800be9a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800be9e:	441d      	add	r5, r3
 800bea0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bea4:	2b20      	cmp	r3, #32
 800bea6:	bfc1      	itttt	gt
 800bea8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800beac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800beb0:	fa09 f303 	lslgt.w	r3, r9, r3
 800beb4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800beb8:	bfda      	itte	le
 800beba:	f1c3 0320 	rsble	r3, r3, #32
 800bebe:	fa06 f003 	lslle.w	r0, r6, r3
 800bec2:	4318      	orrgt	r0, r3
 800bec4:	f7f4 fb3e 	bl	8000544 <__aeabi_ui2d>
 800bec8:	2301      	movs	r3, #1
 800beca:	4606      	mov	r6, r0
 800becc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bed0:	3d01      	subs	r5, #1
 800bed2:	9310      	str	r3, [sp, #64]	; 0x40
 800bed4:	e771      	b.n	800bdba <_dtoa_r+0x11a>
 800bed6:	2301      	movs	r3, #1
 800bed8:	e7b6      	b.n	800be48 <_dtoa_r+0x1a8>
 800beda:	900e      	str	r0, [sp, #56]	; 0x38
 800bedc:	e7b5      	b.n	800be4a <_dtoa_r+0x1aa>
 800bede:	f1ca 0300 	rsb	r3, sl, #0
 800bee2:	9306      	str	r3, [sp, #24]
 800bee4:	2300      	movs	r3, #0
 800bee6:	eba8 080a 	sub.w	r8, r8, sl
 800beea:	930d      	str	r3, [sp, #52]	; 0x34
 800beec:	e7c2      	b.n	800be74 <_dtoa_r+0x1d4>
 800beee:	2300      	movs	r3, #0
 800bef0:	9308      	str	r3, [sp, #32]
 800bef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	dc39      	bgt.n	800bf6c <_dtoa_r+0x2cc>
 800bef8:	f04f 0901 	mov.w	r9, #1
 800befc:	f8cd 9004 	str.w	r9, [sp, #4]
 800bf00:	464b      	mov	r3, r9
 800bf02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bf06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bf08:	2200      	movs	r2, #0
 800bf0a:	6042      	str	r2, [r0, #4]
 800bf0c:	2204      	movs	r2, #4
 800bf0e:	f102 0614 	add.w	r6, r2, #20
 800bf12:	429e      	cmp	r6, r3
 800bf14:	6841      	ldr	r1, [r0, #4]
 800bf16:	d92f      	bls.n	800bf78 <_dtoa_r+0x2d8>
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f001 f849 	bl	800cfb0 <_Balloc>
 800bf1e:	9000      	str	r0, [sp, #0]
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d14b      	bne.n	800bfbc <_dtoa_r+0x31c>
 800bf24:	4b24      	ldr	r3, [pc, #144]	; (800bfb8 <_dtoa_r+0x318>)
 800bf26:	4602      	mov	r2, r0
 800bf28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bf2c:	e6d1      	b.n	800bcd2 <_dtoa_r+0x32>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e7de      	b.n	800bef0 <_dtoa_r+0x250>
 800bf32:	2300      	movs	r3, #0
 800bf34:	9308      	str	r3, [sp, #32]
 800bf36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf38:	eb0a 0903 	add.w	r9, sl, r3
 800bf3c:	f109 0301 	add.w	r3, r9, #1
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	9301      	str	r3, [sp, #4]
 800bf44:	bfb8      	it	lt
 800bf46:	2301      	movlt	r3, #1
 800bf48:	e7dd      	b.n	800bf06 <_dtoa_r+0x266>
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	e7f2      	b.n	800bf34 <_dtoa_r+0x294>
 800bf4e:	2501      	movs	r5, #1
 800bf50:	2300      	movs	r3, #0
 800bf52:	9305      	str	r3, [sp, #20]
 800bf54:	9508      	str	r5, [sp, #32]
 800bf56:	f04f 39ff 	mov.w	r9, #4294967295
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f8cd 9004 	str.w	r9, [sp, #4]
 800bf60:	2312      	movs	r3, #18
 800bf62:	9209      	str	r2, [sp, #36]	; 0x24
 800bf64:	e7cf      	b.n	800bf06 <_dtoa_r+0x266>
 800bf66:	2301      	movs	r3, #1
 800bf68:	9308      	str	r3, [sp, #32]
 800bf6a:	e7f4      	b.n	800bf56 <_dtoa_r+0x2b6>
 800bf6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bf70:	f8cd 9004 	str.w	r9, [sp, #4]
 800bf74:	464b      	mov	r3, r9
 800bf76:	e7c6      	b.n	800bf06 <_dtoa_r+0x266>
 800bf78:	3101      	adds	r1, #1
 800bf7a:	6041      	str	r1, [r0, #4]
 800bf7c:	0052      	lsls	r2, r2, #1
 800bf7e:	e7c6      	b.n	800bf0e <_dtoa_r+0x26e>
 800bf80:	636f4361 	.word	0x636f4361
 800bf84:	3fd287a7 	.word	0x3fd287a7
 800bf88:	8b60c8b3 	.word	0x8b60c8b3
 800bf8c:	3fc68a28 	.word	0x3fc68a28
 800bf90:	509f79fb 	.word	0x509f79fb
 800bf94:	3fd34413 	.word	0x3fd34413
 800bf98:	0800f6be 	.word	0x0800f6be
 800bf9c:	0800f6d5 	.word	0x0800f6d5
 800bfa0:	7ff00000 	.word	0x7ff00000
 800bfa4:	0800f6ba 	.word	0x0800f6ba
 800bfa8:	0800f6b1 	.word	0x0800f6b1
 800bfac:	0800f531 	.word	0x0800f531
 800bfb0:	3ff80000 	.word	0x3ff80000
 800bfb4:	0800f850 	.word	0x0800f850
 800bfb8:	0800f734 	.word	0x0800f734
 800bfbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfbe:	9a00      	ldr	r2, [sp, #0]
 800bfc0:	601a      	str	r2, [r3, #0]
 800bfc2:	9b01      	ldr	r3, [sp, #4]
 800bfc4:	2b0e      	cmp	r3, #14
 800bfc6:	f200 80ad 	bhi.w	800c124 <_dtoa_r+0x484>
 800bfca:	2d00      	cmp	r5, #0
 800bfcc:	f000 80aa 	beq.w	800c124 <_dtoa_r+0x484>
 800bfd0:	f1ba 0f00 	cmp.w	sl, #0
 800bfd4:	dd36      	ble.n	800c044 <_dtoa_r+0x3a4>
 800bfd6:	4ac3      	ldr	r2, [pc, #780]	; (800c2e4 <_dtoa_r+0x644>)
 800bfd8:	f00a 030f 	and.w	r3, sl, #15
 800bfdc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bfe0:	ed93 7b00 	vldr	d7, [r3]
 800bfe4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bfe8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800bfec:	eeb0 8a47 	vmov.f32	s16, s14
 800bff0:	eef0 8a67 	vmov.f32	s17, s15
 800bff4:	d016      	beq.n	800c024 <_dtoa_r+0x384>
 800bff6:	4bbc      	ldr	r3, [pc, #752]	; (800c2e8 <_dtoa_r+0x648>)
 800bff8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bffc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c000:	f7f4 fc44 	bl	800088c <__aeabi_ddiv>
 800c004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c008:	f007 070f 	and.w	r7, r7, #15
 800c00c:	2503      	movs	r5, #3
 800c00e:	4eb6      	ldr	r6, [pc, #728]	; (800c2e8 <_dtoa_r+0x648>)
 800c010:	b957      	cbnz	r7, 800c028 <_dtoa_r+0x388>
 800c012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c016:	ec53 2b18 	vmov	r2, r3, d8
 800c01a:	f7f4 fc37 	bl	800088c <__aeabi_ddiv>
 800c01e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c022:	e029      	b.n	800c078 <_dtoa_r+0x3d8>
 800c024:	2502      	movs	r5, #2
 800c026:	e7f2      	b.n	800c00e <_dtoa_r+0x36e>
 800c028:	07f9      	lsls	r1, r7, #31
 800c02a:	d508      	bpl.n	800c03e <_dtoa_r+0x39e>
 800c02c:	ec51 0b18 	vmov	r0, r1, d8
 800c030:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c034:	f7f4 fb00 	bl	8000638 <__aeabi_dmul>
 800c038:	ec41 0b18 	vmov	d8, r0, r1
 800c03c:	3501      	adds	r5, #1
 800c03e:	107f      	asrs	r7, r7, #1
 800c040:	3608      	adds	r6, #8
 800c042:	e7e5      	b.n	800c010 <_dtoa_r+0x370>
 800c044:	f000 80a6 	beq.w	800c194 <_dtoa_r+0x4f4>
 800c048:	f1ca 0600 	rsb	r6, sl, #0
 800c04c:	4ba5      	ldr	r3, [pc, #660]	; (800c2e4 <_dtoa_r+0x644>)
 800c04e:	4fa6      	ldr	r7, [pc, #664]	; (800c2e8 <_dtoa_r+0x648>)
 800c050:	f006 020f 	and.w	r2, r6, #15
 800c054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c060:	f7f4 faea 	bl	8000638 <__aeabi_dmul>
 800c064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c068:	1136      	asrs	r6, r6, #4
 800c06a:	2300      	movs	r3, #0
 800c06c:	2502      	movs	r5, #2
 800c06e:	2e00      	cmp	r6, #0
 800c070:	f040 8085 	bne.w	800c17e <_dtoa_r+0x4de>
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1d2      	bne.n	800c01e <_dtoa_r+0x37e>
 800c078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	f000 808c 	beq.w	800c198 <_dtoa_r+0x4f8>
 800c080:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c084:	4b99      	ldr	r3, [pc, #612]	; (800c2ec <_dtoa_r+0x64c>)
 800c086:	2200      	movs	r2, #0
 800c088:	4630      	mov	r0, r6
 800c08a:	4639      	mov	r1, r7
 800c08c:	f7f4 fd46 	bl	8000b1c <__aeabi_dcmplt>
 800c090:	2800      	cmp	r0, #0
 800c092:	f000 8081 	beq.w	800c198 <_dtoa_r+0x4f8>
 800c096:	9b01      	ldr	r3, [sp, #4]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d07d      	beq.n	800c198 <_dtoa_r+0x4f8>
 800c09c:	f1b9 0f00 	cmp.w	r9, #0
 800c0a0:	dd3c      	ble.n	800c11c <_dtoa_r+0x47c>
 800c0a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c0a6:	9307      	str	r3, [sp, #28]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	4b91      	ldr	r3, [pc, #580]	; (800c2f0 <_dtoa_r+0x650>)
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	4639      	mov	r1, r7
 800c0b0:	f7f4 fac2 	bl	8000638 <__aeabi_dmul>
 800c0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0b8:	3501      	adds	r5, #1
 800c0ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c0be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	f7f4 fa4e 	bl	8000564 <__aeabi_i2d>
 800c0c8:	4632      	mov	r2, r6
 800c0ca:	463b      	mov	r3, r7
 800c0cc:	f7f4 fab4 	bl	8000638 <__aeabi_dmul>
 800c0d0:	4b88      	ldr	r3, [pc, #544]	; (800c2f4 <_dtoa_r+0x654>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f7f4 f8fa 	bl	80002cc <__adddf3>
 800c0d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0e0:	9303      	str	r3, [sp, #12]
 800c0e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d15c      	bne.n	800c1a2 <_dtoa_r+0x502>
 800c0e8:	4b83      	ldr	r3, [pc, #524]	; (800c2f8 <_dtoa_r+0x658>)
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	4639      	mov	r1, r7
 800c0f0:	f7f4 f8ea 	bl	80002c8 <__aeabi_dsub>
 800c0f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0f8:	4606      	mov	r6, r0
 800c0fa:	460f      	mov	r7, r1
 800c0fc:	f7f4 fd2c 	bl	8000b58 <__aeabi_dcmpgt>
 800c100:	2800      	cmp	r0, #0
 800c102:	f040 8296 	bne.w	800c632 <_dtoa_r+0x992>
 800c106:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c10a:	4630      	mov	r0, r6
 800c10c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c110:	4639      	mov	r1, r7
 800c112:	f7f4 fd03 	bl	8000b1c <__aeabi_dcmplt>
 800c116:	2800      	cmp	r0, #0
 800c118:	f040 8288 	bne.w	800c62c <_dtoa_r+0x98c>
 800c11c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c120:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c124:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c126:	2b00      	cmp	r3, #0
 800c128:	f2c0 8158 	blt.w	800c3dc <_dtoa_r+0x73c>
 800c12c:	f1ba 0f0e 	cmp.w	sl, #14
 800c130:	f300 8154 	bgt.w	800c3dc <_dtoa_r+0x73c>
 800c134:	4b6b      	ldr	r3, [pc, #428]	; (800c2e4 <_dtoa_r+0x644>)
 800c136:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c13a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c140:	2b00      	cmp	r3, #0
 800c142:	f280 80e3 	bge.w	800c30c <_dtoa_r+0x66c>
 800c146:	9b01      	ldr	r3, [sp, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f300 80df 	bgt.w	800c30c <_dtoa_r+0x66c>
 800c14e:	f040 826d 	bne.w	800c62c <_dtoa_r+0x98c>
 800c152:	4b69      	ldr	r3, [pc, #420]	; (800c2f8 <_dtoa_r+0x658>)
 800c154:	2200      	movs	r2, #0
 800c156:	4640      	mov	r0, r8
 800c158:	4649      	mov	r1, r9
 800c15a:	f7f4 fa6d 	bl	8000638 <__aeabi_dmul>
 800c15e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c162:	f7f4 fcef 	bl	8000b44 <__aeabi_dcmpge>
 800c166:	9e01      	ldr	r6, [sp, #4]
 800c168:	4637      	mov	r7, r6
 800c16a:	2800      	cmp	r0, #0
 800c16c:	f040 8243 	bne.w	800c5f6 <_dtoa_r+0x956>
 800c170:	9d00      	ldr	r5, [sp, #0]
 800c172:	2331      	movs	r3, #49	; 0x31
 800c174:	f805 3b01 	strb.w	r3, [r5], #1
 800c178:	f10a 0a01 	add.w	sl, sl, #1
 800c17c:	e23f      	b.n	800c5fe <_dtoa_r+0x95e>
 800c17e:	07f2      	lsls	r2, r6, #31
 800c180:	d505      	bpl.n	800c18e <_dtoa_r+0x4ee>
 800c182:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c186:	f7f4 fa57 	bl	8000638 <__aeabi_dmul>
 800c18a:	3501      	adds	r5, #1
 800c18c:	2301      	movs	r3, #1
 800c18e:	1076      	asrs	r6, r6, #1
 800c190:	3708      	adds	r7, #8
 800c192:	e76c      	b.n	800c06e <_dtoa_r+0x3ce>
 800c194:	2502      	movs	r5, #2
 800c196:	e76f      	b.n	800c078 <_dtoa_r+0x3d8>
 800c198:	9b01      	ldr	r3, [sp, #4]
 800c19a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c19e:	930c      	str	r3, [sp, #48]	; 0x30
 800c1a0:	e78d      	b.n	800c0be <_dtoa_r+0x41e>
 800c1a2:	9900      	ldr	r1, [sp, #0]
 800c1a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c1a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1a8:	4b4e      	ldr	r3, [pc, #312]	; (800c2e4 <_dtoa_r+0x644>)
 800c1aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1ae:	4401      	add	r1, r0
 800c1b0:	9102      	str	r1, [sp, #8]
 800c1b2:	9908      	ldr	r1, [sp, #32]
 800c1b4:	eeb0 8a47 	vmov.f32	s16, s14
 800c1b8:	eef0 8a67 	vmov.f32	s17, s15
 800c1bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c1c4:	2900      	cmp	r1, #0
 800c1c6:	d045      	beq.n	800c254 <_dtoa_r+0x5b4>
 800c1c8:	494c      	ldr	r1, [pc, #304]	; (800c2fc <_dtoa_r+0x65c>)
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	f7f4 fb5e 	bl	800088c <__aeabi_ddiv>
 800c1d0:	ec53 2b18 	vmov	r2, r3, d8
 800c1d4:	f7f4 f878 	bl	80002c8 <__aeabi_dsub>
 800c1d8:	9d00      	ldr	r5, [sp, #0]
 800c1da:	ec41 0b18 	vmov	d8, r0, r1
 800c1de:	4639      	mov	r1, r7
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	f7f4 fcd9 	bl	8000b98 <__aeabi_d2iz>
 800c1e6:	900c      	str	r0, [sp, #48]	; 0x30
 800c1e8:	f7f4 f9bc 	bl	8000564 <__aeabi_i2d>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	4639      	mov	r1, r7
 800c1f4:	f7f4 f868 	bl	80002c8 <__aeabi_dsub>
 800c1f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1fa:	3330      	adds	r3, #48	; 0x30
 800c1fc:	f805 3b01 	strb.w	r3, [r5], #1
 800c200:	ec53 2b18 	vmov	r2, r3, d8
 800c204:	4606      	mov	r6, r0
 800c206:	460f      	mov	r7, r1
 800c208:	f7f4 fc88 	bl	8000b1c <__aeabi_dcmplt>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	d165      	bne.n	800c2dc <_dtoa_r+0x63c>
 800c210:	4632      	mov	r2, r6
 800c212:	463b      	mov	r3, r7
 800c214:	4935      	ldr	r1, [pc, #212]	; (800c2ec <_dtoa_r+0x64c>)
 800c216:	2000      	movs	r0, #0
 800c218:	f7f4 f856 	bl	80002c8 <__aeabi_dsub>
 800c21c:	ec53 2b18 	vmov	r2, r3, d8
 800c220:	f7f4 fc7c 	bl	8000b1c <__aeabi_dcmplt>
 800c224:	2800      	cmp	r0, #0
 800c226:	f040 80b9 	bne.w	800c39c <_dtoa_r+0x6fc>
 800c22a:	9b02      	ldr	r3, [sp, #8]
 800c22c:	429d      	cmp	r5, r3
 800c22e:	f43f af75 	beq.w	800c11c <_dtoa_r+0x47c>
 800c232:	4b2f      	ldr	r3, [pc, #188]	; (800c2f0 <_dtoa_r+0x650>)
 800c234:	ec51 0b18 	vmov	r0, r1, d8
 800c238:	2200      	movs	r2, #0
 800c23a:	f7f4 f9fd 	bl	8000638 <__aeabi_dmul>
 800c23e:	4b2c      	ldr	r3, [pc, #176]	; (800c2f0 <_dtoa_r+0x650>)
 800c240:	ec41 0b18 	vmov	d8, r0, r1
 800c244:	2200      	movs	r2, #0
 800c246:	4630      	mov	r0, r6
 800c248:	4639      	mov	r1, r7
 800c24a:	f7f4 f9f5 	bl	8000638 <__aeabi_dmul>
 800c24e:	4606      	mov	r6, r0
 800c250:	460f      	mov	r7, r1
 800c252:	e7c4      	b.n	800c1de <_dtoa_r+0x53e>
 800c254:	ec51 0b17 	vmov	r0, r1, d7
 800c258:	f7f4 f9ee 	bl	8000638 <__aeabi_dmul>
 800c25c:	9b02      	ldr	r3, [sp, #8]
 800c25e:	9d00      	ldr	r5, [sp, #0]
 800c260:	930c      	str	r3, [sp, #48]	; 0x30
 800c262:	ec41 0b18 	vmov	d8, r0, r1
 800c266:	4639      	mov	r1, r7
 800c268:	4630      	mov	r0, r6
 800c26a:	f7f4 fc95 	bl	8000b98 <__aeabi_d2iz>
 800c26e:	9011      	str	r0, [sp, #68]	; 0x44
 800c270:	f7f4 f978 	bl	8000564 <__aeabi_i2d>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	4630      	mov	r0, r6
 800c27a:	4639      	mov	r1, r7
 800c27c:	f7f4 f824 	bl	80002c8 <__aeabi_dsub>
 800c280:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c282:	3330      	adds	r3, #48	; 0x30
 800c284:	f805 3b01 	strb.w	r3, [r5], #1
 800c288:	9b02      	ldr	r3, [sp, #8]
 800c28a:	429d      	cmp	r5, r3
 800c28c:	4606      	mov	r6, r0
 800c28e:	460f      	mov	r7, r1
 800c290:	f04f 0200 	mov.w	r2, #0
 800c294:	d134      	bne.n	800c300 <_dtoa_r+0x660>
 800c296:	4b19      	ldr	r3, [pc, #100]	; (800c2fc <_dtoa_r+0x65c>)
 800c298:	ec51 0b18 	vmov	r0, r1, d8
 800c29c:	f7f4 f816 	bl	80002cc <__adddf3>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	4639      	mov	r1, r7
 800c2a8:	f7f4 fc56 	bl	8000b58 <__aeabi_dcmpgt>
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	d175      	bne.n	800c39c <_dtoa_r+0x6fc>
 800c2b0:	ec53 2b18 	vmov	r2, r3, d8
 800c2b4:	4911      	ldr	r1, [pc, #68]	; (800c2fc <_dtoa_r+0x65c>)
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	f7f4 f806 	bl	80002c8 <__aeabi_dsub>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	4639      	mov	r1, r7
 800c2c4:	f7f4 fc2a 	bl	8000b1c <__aeabi_dcmplt>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	f43f af27 	beq.w	800c11c <_dtoa_r+0x47c>
 800c2ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c2d0:	1e6b      	subs	r3, r5, #1
 800c2d2:	930c      	str	r3, [sp, #48]	; 0x30
 800c2d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2d8:	2b30      	cmp	r3, #48	; 0x30
 800c2da:	d0f8      	beq.n	800c2ce <_dtoa_r+0x62e>
 800c2dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c2e0:	e04a      	b.n	800c378 <_dtoa_r+0x6d8>
 800c2e2:	bf00      	nop
 800c2e4:	0800f850 	.word	0x0800f850
 800c2e8:	0800f828 	.word	0x0800f828
 800c2ec:	3ff00000 	.word	0x3ff00000
 800c2f0:	40240000 	.word	0x40240000
 800c2f4:	401c0000 	.word	0x401c0000
 800c2f8:	40140000 	.word	0x40140000
 800c2fc:	3fe00000 	.word	0x3fe00000
 800c300:	4baf      	ldr	r3, [pc, #700]	; (800c5c0 <_dtoa_r+0x920>)
 800c302:	f7f4 f999 	bl	8000638 <__aeabi_dmul>
 800c306:	4606      	mov	r6, r0
 800c308:	460f      	mov	r7, r1
 800c30a:	e7ac      	b.n	800c266 <_dtoa_r+0x5c6>
 800c30c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c310:	9d00      	ldr	r5, [sp, #0]
 800c312:	4642      	mov	r2, r8
 800c314:	464b      	mov	r3, r9
 800c316:	4630      	mov	r0, r6
 800c318:	4639      	mov	r1, r7
 800c31a:	f7f4 fab7 	bl	800088c <__aeabi_ddiv>
 800c31e:	f7f4 fc3b 	bl	8000b98 <__aeabi_d2iz>
 800c322:	9002      	str	r0, [sp, #8]
 800c324:	f7f4 f91e 	bl	8000564 <__aeabi_i2d>
 800c328:	4642      	mov	r2, r8
 800c32a:	464b      	mov	r3, r9
 800c32c:	f7f4 f984 	bl	8000638 <__aeabi_dmul>
 800c330:	4602      	mov	r2, r0
 800c332:	460b      	mov	r3, r1
 800c334:	4630      	mov	r0, r6
 800c336:	4639      	mov	r1, r7
 800c338:	f7f3 ffc6 	bl	80002c8 <__aeabi_dsub>
 800c33c:	9e02      	ldr	r6, [sp, #8]
 800c33e:	9f01      	ldr	r7, [sp, #4]
 800c340:	3630      	adds	r6, #48	; 0x30
 800c342:	f805 6b01 	strb.w	r6, [r5], #1
 800c346:	9e00      	ldr	r6, [sp, #0]
 800c348:	1bae      	subs	r6, r5, r6
 800c34a:	42b7      	cmp	r7, r6
 800c34c:	4602      	mov	r2, r0
 800c34e:	460b      	mov	r3, r1
 800c350:	d137      	bne.n	800c3c2 <_dtoa_r+0x722>
 800c352:	f7f3 ffbb 	bl	80002cc <__adddf3>
 800c356:	4642      	mov	r2, r8
 800c358:	464b      	mov	r3, r9
 800c35a:	4606      	mov	r6, r0
 800c35c:	460f      	mov	r7, r1
 800c35e:	f7f4 fbfb 	bl	8000b58 <__aeabi_dcmpgt>
 800c362:	b9c8      	cbnz	r0, 800c398 <_dtoa_r+0x6f8>
 800c364:	4642      	mov	r2, r8
 800c366:	464b      	mov	r3, r9
 800c368:	4630      	mov	r0, r6
 800c36a:	4639      	mov	r1, r7
 800c36c:	f7f4 fbcc 	bl	8000b08 <__aeabi_dcmpeq>
 800c370:	b110      	cbz	r0, 800c378 <_dtoa_r+0x6d8>
 800c372:	9b02      	ldr	r3, [sp, #8]
 800c374:	07d9      	lsls	r1, r3, #31
 800c376:	d40f      	bmi.n	800c398 <_dtoa_r+0x6f8>
 800c378:	4620      	mov	r0, r4
 800c37a:	4659      	mov	r1, fp
 800c37c:	f000 fe58 	bl	800d030 <_Bfree>
 800c380:	2300      	movs	r3, #0
 800c382:	702b      	strb	r3, [r5, #0]
 800c384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c386:	f10a 0001 	add.w	r0, sl, #1
 800c38a:	6018      	str	r0, [r3, #0]
 800c38c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f43f acd8 	beq.w	800bd44 <_dtoa_r+0xa4>
 800c394:	601d      	str	r5, [r3, #0]
 800c396:	e4d5      	b.n	800bd44 <_dtoa_r+0xa4>
 800c398:	f8cd a01c 	str.w	sl, [sp, #28]
 800c39c:	462b      	mov	r3, r5
 800c39e:	461d      	mov	r5, r3
 800c3a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3a4:	2a39      	cmp	r2, #57	; 0x39
 800c3a6:	d108      	bne.n	800c3ba <_dtoa_r+0x71a>
 800c3a8:	9a00      	ldr	r2, [sp, #0]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d1f7      	bne.n	800c39e <_dtoa_r+0x6fe>
 800c3ae:	9a07      	ldr	r2, [sp, #28]
 800c3b0:	9900      	ldr	r1, [sp, #0]
 800c3b2:	3201      	adds	r2, #1
 800c3b4:	9207      	str	r2, [sp, #28]
 800c3b6:	2230      	movs	r2, #48	; 0x30
 800c3b8:	700a      	strb	r2, [r1, #0]
 800c3ba:	781a      	ldrb	r2, [r3, #0]
 800c3bc:	3201      	adds	r2, #1
 800c3be:	701a      	strb	r2, [r3, #0]
 800c3c0:	e78c      	b.n	800c2dc <_dtoa_r+0x63c>
 800c3c2:	4b7f      	ldr	r3, [pc, #508]	; (800c5c0 <_dtoa_r+0x920>)
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f7f4 f937 	bl	8000638 <__aeabi_dmul>
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	4606      	mov	r6, r0
 800c3d0:	460f      	mov	r7, r1
 800c3d2:	f7f4 fb99 	bl	8000b08 <__aeabi_dcmpeq>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d09b      	beq.n	800c312 <_dtoa_r+0x672>
 800c3da:	e7cd      	b.n	800c378 <_dtoa_r+0x6d8>
 800c3dc:	9a08      	ldr	r2, [sp, #32]
 800c3de:	2a00      	cmp	r2, #0
 800c3e0:	f000 80c4 	beq.w	800c56c <_dtoa_r+0x8cc>
 800c3e4:	9a05      	ldr	r2, [sp, #20]
 800c3e6:	2a01      	cmp	r2, #1
 800c3e8:	f300 80a8 	bgt.w	800c53c <_dtoa_r+0x89c>
 800c3ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c3ee:	2a00      	cmp	r2, #0
 800c3f0:	f000 80a0 	beq.w	800c534 <_dtoa_r+0x894>
 800c3f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3f8:	9e06      	ldr	r6, [sp, #24]
 800c3fa:	4645      	mov	r5, r8
 800c3fc:	9a04      	ldr	r2, [sp, #16]
 800c3fe:	2101      	movs	r1, #1
 800c400:	441a      	add	r2, r3
 800c402:	4620      	mov	r0, r4
 800c404:	4498      	add	r8, r3
 800c406:	9204      	str	r2, [sp, #16]
 800c408:	f000 ff18 	bl	800d23c <__i2b>
 800c40c:	4607      	mov	r7, r0
 800c40e:	2d00      	cmp	r5, #0
 800c410:	dd0b      	ble.n	800c42a <_dtoa_r+0x78a>
 800c412:	9b04      	ldr	r3, [sp, #16]
 800c414:	2b00      	cmp	r3, #0
 800c416:	dd08      	ble.n	800c42a <_dtoa_r+0x78a>
 800c418:	42ab      	cmp	r3, r5
 800c41a:	9a04      	ldr	r2, [sp, #16]
 800c41c:	bfa8      	it	ge
 800c41e:	462b      	movge	r3, r5
 800c420:	eba8 0803 	sub.w	r8, r8, r3
 800c424:	1aed      	subs	r5, r5, r3
 800c426:	1ad3      	subs	r3, r2, r3
 800c428:	9304      	str	r3, [sp, #16]
 800c42a:	9b06      	ldr	r3, [sp, #24]
 800c42c:	b1fb      	cbz	r3, 800c46e <_dtoa_r+0x7ce>
 800c42e:	9b08      	ldr	r3, [sp, #32]
 800c430:	2b00      	cmp	r3, #0
 800c432:	f000 809f 	beq.w	800c574 <_dtoa_r+0x8d4>
 800c436:	2e00      	cmp	r6, #0
 800c438:	dd11      	ble.n	800c45e <_dtoa_r+0x7be>
 800c43a:	4639      	mov	r1, r7
 800c43c:	4632      	mov	r2, r6
 800c43e:	4620      	mov	r0, r4
 800c440:	f000 ffb8 	bl	800d3b4 <__pow5mult>
 800c444:	465a      	mov	r2, fp
 800c446:	4601      	mov	r1, r0
 800c448:	4607      	mov	r7, r0
 800c44a:	4620      	mov	r0, r4
 800c44c:	f000 ff0c 	bl	800d268 <__multiply>
 800c450:	4659      	mov	r1, fp
 800c452:	9007      	str	r0, [sp, #28]
 800c454:	4620      	mov	r0, r4
 800c456:	f000 fdeb 	bl	800d030 <_Bfree>
 800c45a:	9b07      	ldr	r3, [sp, #28]
 800c45c:	469b      	mov	fp, r3
 800c45e:	9b06      	ldr	r3, [sp, #24]
 800c460:	1b9a      	subs	r2, r3, r6
 800c462:	d004      	beq.n	800c46e <_dtoa_r+0x7ce>
 800c464:	4659      	mov	r1, fp
 800c466:	4620      	mov	r0, r4
 800c468:	f000 ffa4 	bl	800d3b4 <__pow5mult>
 800c46c:	4683      	mov	fp, r0
 800c46e:	2101      	movs	r1, #1
 800c470:	4620      	mov	r0, r4
 800c472:	f000 fee3 	bl	800d23c <__i2b>
 800c476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c478:	2b00      	cmp	r3, #0
 800c47a:	4606      	mov	r6, r0
 800c47c:	dd7c      	ble.n	800c578 <_dtoa_r+0x8d8>
 800c47e:	461a      	mov	r2, r3
 800c480:	4601      	mov	r1, r0
 800c482:	4620      	mov	r0, r4
 800c484:	f000 ff96 	bl	800d3b4 <__pow5mult>
 800c488:	9b05      	ldr	r3, [sp, #20]
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	4606      	mov	r6, r0
 800c48e:	dd76      	ble.n	800c57e <_dtoa_r+0x8de>
 800c490:	2300      	movs	r3, #0
 800c492:	9306      	str	r3, [sp, #24]
 800c494:	6933      	ldr	r3, [r6, #16]
 800c496:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c49a:	6918      	ldr	r0, [r3, #16]
 800c49c:	f000 fe7e 	bl	800d19c <__hi0bits>
 800c4a0:	f1c0 0020 	rsb	r0, r0, #32
 800c4a4:	9b04      	ldr	r3, [sp, #16]
 800c4a6:	4418      	add	r0, r3
 800c4a8:	f010 001f 	ands.w	r0, r0, #31
 800c4ac:	f000 8086 	beq.w	800c5bc <_dtoa_r+0x91c>
 800c4b0:	f1c0 0320 	rsb	r3, r0, #32
 800c4b4:	2b04      	cmp	r3, #4
 800c4b6:	dd7f      	ble.n	800c5b8 <_dtoa_r+0x918>
 800c4b8:	f1c0 001c 	rsb	r0, r0, #28
 800c4bc:	9b04      	ldr	r3, [sp, #16]
 800c4be:	4403      	add	r3, r0
 800c4c0:	4480      	add	r8, r0
 800c4c2:	4405      	add	r5, r0
 800c4c4:	9304      	str	r3, [sp, #16]
 800c4c6:	f1b8 0f00 	cmp.w	r8, #0
 800c4ca:	dd05      	ble.n	800c4d8 <_dtoa_r+0x838>
 800c4cc:	4659      	mov	r1, fp
 800c4ce:	4642      	mov	r2, r8
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f000 ffc9 	bl	800d468 <__lshift>
 800c4d6:	4683      	mov	fp, r0
 800c4d8:	9b04      	ldr	r3, [sp, #16]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	dd05      	ble.n	800c4ea <_dtoa_r+0x84a>
 800c4de:	4631      	mov	r1, r6
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	f000 ffc0 	bl	800d468 <__lshift>
 800c4e8:	4606      	mov	r6, r0
 800c4ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d069      	beq.n	800c5c4 <_dtoa_r+0x924>
 800c4f0:	4631      	mov	r1, r6
 800c4f2:	4658      	mov	r0, fp
 800c4f4:	f001 f824 	bl	800d540 <__mcmp>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	da63      	bge.n	800c5c4 <_dtoa_r+0x924>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	4659      	mov	r1, fp
 800c500:	220a      	movs	r2, #10
 800c502:	4620      	mov	r0, r4
 800c504:	f000 fdb6 	bl	800d074 <__multadd>
 800c508:	9b08      	ldr	r3, [sp, #32]
 800c50a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c50e:	4683      	mov	fp, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	f000 818f 	beq.w	800c834 <_dtoa_r+0xb94>
 800c516:	4639      	mov	r1, r7
 800c518:	2300      	movs	r3, #0
 800c51a:	220a      	movs	r2, #10
 800c51c:	4620      	mov	r0, r4
 800c51e:	f000 fda9 	bl	800d074 <__multadd>
 800c522:	f1b9 0f00 	cmp.w	r9, #0
 800c526:	4607      	mov	r7, r0
 800c528:	f300 808e 	bgt.w	800c648 <_dtoa_r+0x9a8>
 800c52c:	9b05      	ldr	r3, [sp, #20]
 800c52e:	2b02      	cmp	r3, #2
 800c530:	dc50      	bgt.n	800c5d4 <_dtoa_r+0x934>
 800c532:	e089      	b.n	800c648 <_dtoa_r+0x9a8>
 800c534:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c53a:	e75d      	b.n	800c3f8 <_dtoa_r+0x758>
 800c53c:	9b01      	ldr	r3, [sp, #4]
 800c53e:	1e5e      	subs	r6, r3, #1
 800c540:	9b06      	ldr	r3, [sp, #24]
 800c542:	42b3      	cmp	r3, r6
 800c544:	bfbf      	itttt	lt
 800c546:	9b06      	ldrlt	r3, [sp, #24]
 800c548:	9606      	strlt	r6, [sp, #24]
 800c54a:	1af2      	sublt	r2, r6, r3
 800c54c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c54e:	bfb6      	itet	lt
 800c550:	189b      	addlt	r3, r3, r2
 800c552:	1b9e      	subge	r6, r3, r6
 800c554:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c556:	9b01      	ldr	r3, [sp, #4]
 800c558:	bfb8      	it	lt
 800c55a:	2600      	movlt	r6, #0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	bfb5      	itete	lt
 800c560:	eba8 0503 	sublt.w	r5, r8, r3
 800c564:	9b01      	ldrge	r3, [sp, #4]
 800c566:	2300      	movlt	r3, #0
 800c568:	4645      	movge	r5, r8
 800c56a:	e747      	b.n	800c3fc <_dtoa_r+0x75c>
 800c56c:	9e06      	ldr	r6, [sp, #24]
 800c56e:	9f08      	ldr	r7, [sp, #32]
 800c570:	4645      	mov	r5, r8
 800c572:	e74c      	b.n	800c40e <_dtoa_r+0x76e>
 800c574:	9a06      	ldr	r2, [sp, #24]
 800c576:	e775      	b.n	800c464 <_dtoa_r+0x7c4>
 800c578:	9b05      	ldr	r3, [sp, #20]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	dc18      	bgt.n	800c5b0 <_dtoa_r+0x910>
 800c57e:	9b02      	ldr	r3, [sp, #8]
 800c580:	b9b3      	cbnz	r3, 800c5b0 <_dtoa_r+0x910>
 800c582:	9b03      	ldr	r3, [sp, #12]
 800c584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c588:	b9a3      	cbnz	r3, 800c5b4 <_dtoa_r+0x914>
 800c58a:	9b03      	ldr	r3, [sp, #12]
 800c58c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c590:	0d1b      	lsrs	r3, r3, #20
 800c592:	051b      	lsls	r3, r3, #20
 800c594:	b12b      	cbz	r3, 800c5a2 <_dtoa_r+0x902>
 800c596:	9b04      	ldr	r3, [sp, #16]
 800c598:	3301      	adds	r3, #1
 800c59a:	9304      	str	r3, [sp, #16]
 800c59c:	f108 0801 	add.w	r8, r8, #1
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	9306      	str	r3, [sp, #24]
 800c5a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	f47f af74 	bne.w	800c494 <_dtoa_r+0x7f4>
 800c5ac:	2001      	movs	r0, #1
 800c5ae:	e779      	b.n	800c4a4 <_dtoa_r+0x804>
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	e7f6      	b.n	800c5a2 <_dtoa_r+0x902>
 800c5b4:	9b02      	ldr	r3, [sp, #8]
 800c5b6:	e7f4      	b.n	800c5a2 <_dtoa_r+0x902>
 800c5b8:	d085      	beq.n	800c4c6 <_dtoa_r+0x826>
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	301c      	adds	r0, #28
 800c5be:	e77d      	b.n	800c4bc <_dtoa_r+0x81c>
 800c5c0:	40240000 	.word	0x40240000
 800c5c4:	9b01      	ldr	r3, [sp, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	dc38      	bgt.n	800c63c <_dtoa_r+0x99c>
 800c5ca:	9b05      	ldr	r3, [sp, #20]
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	dd35      	ble.n	800c63c <_dtoa_r+0x99c>
 800c5d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c5d4:	f1b9 0f00 	cmp.w	r9, #0
 800c5d8:	d10d      	bne.n	800c5f6 <_dtoa_r+0x956>
 800c5da:	4631      	mov	r1, r6
 800c5dc:	464b      	mov	r3, r9
 800c5de:	2205      	movs	r2, #5
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f000 fd47 	bl	800d074 <__multadd>
 800c5e6:	4601      	mov	r1, r0
 800c5e8:	4606      	mov	r6, r0
 800c5ea:	4658      	mov	r0, fp
 800c5ec:	f000 ffa8 	bl	800d540 <__mcmp>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	f73f adbd 	bgt.w	800c170 <_dtoa_r+0x4d0>
 800c5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5f8:	9d00      	ldr	r5, [sp, #0]
 800c5fa:	ea6f 0a03 	mvn.w	sl, r3
 800c5fe:	f04f 0800 	mov.w	r8, #0
 800c602:	4631      	mov	r1, r6
 800c604:	4620      	mov	r0, r4
 800c606:	f000 fd13 	bl	800d030 <_Bfree>
 800c60a:	2f00      	cmp	r7, #0
 800c60c:	f43f aeb4 	beq.w	800c378 <_dtoa_r+0x6d8>
 800c610:	f1b8 0f00 	cmp.w	r8, #0
 800c614:	d005      	beq.n	800c622 <_dtoa_r+0x982>
 800c616:	45b8      	cmp	r8, r7
 800c618:	d003      	beq.n	800c622 <_dtoa_r+0x982>
 800c61a:	4641      	mov	r1, r8
 800c61c:	4620      	mov	r0, r4
 800c61e:	f000 fd07 	bl	800d030 <_Bfree>
 800c622:	4639      	mov	r1, r7
 800c624:	4620      	mov	r0, r4
 800c626:	f000 fd03 	bl	800d030 <_Bfree>
 800c62a:	e6a5      	b.n	800c378 <_dtoa_r+0x6d8>
 800c62c:	2600      	movs	r6, #0
 800c62e:	4637      	mov	r7, r6
 800c630:	e7e1      	b.n	800c5f6 <_dtoa_r+0x956>
 800c632:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c634:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c638:	4637      	mov	r7, r6
 800c63a:	e599      	b.n	800c170 <_dtoa_r+0x4d0>
 800c63c:	9b08      	ldr	r3, [sp, #32]
 800c63e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	f000 80fd 	beq.w	800c842 <_dtoa_r+0xba2>
 800c648:	2d00      	cmp	r5, #0
 800c64a:	dd05      	ble.n	800c658 <_dtoa_r+0x9b8>
 800c64c:	4639      	mov	r1, r7
 800c64e:	462a      	mov	r2, r5
 800c650:	4620      	mov	r0, r4
 800c652:	f000 ff09 	bl	800d468 <__lshift>
 800c656:	4607      	mov	r7, r0
 800c658:	9b06      	ldr	r3, [sp, #24]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d05c      	beq.n	800c718 <_dtoa_r+0xa78>
 800c65e:	6879      	ldr	r1, [r7, #4]
 800c660:	4620      	mov	r0, r4
 800c662:	f000 fca5 	bl	800cfb0 <_Balloc>
 800c666:	4605      	mov	r5, r0
 800c668:	b928      	cbnz	r0, 800c676 <_dtoa_r+0x9d6>
 800c66a:	4b80      	ldr	r3, [pc, #512]	; (800c86c <_dtoa_r+0xbcc>)
 800c66c:	4602      	mov	r2, r0
 800c66e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c672:	f7ff bb2e 	b.w	800bcd2 <_dtoa_r+0x32>
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	3202      	adds	r2, #2
 800c67a:	0092      	lsls	r2, r2, #2
 800c67c:	f107 010c 	add.w	r1, r7, #12
 800c680:	300c      	adds	r0, #12
 800c682:	f000 fc87 	bl	800cf94 <memcpy>
 800c686:	2201      	movs	r2, #1
 800c688:	4629      	mov	r1, r5
 800c68a:	4620      	mov	r0, r4
 800c68c:	f000 feec 	bl	800d468 <__lshift>
 800c690:	9b00      	ldr	r3, [sp, #0]
 800c692:	3301      	adds	r3, #1
 800c694:	9301      	str	r3, [sp, #4]
 800c696:	9b00      	ldr	r3, [sp, #0]
 800c698:	444b      	add	r3, r9
 800c69a:	9307      	str	r3, [sp, #28]
 800c69c:	9b02      	ldr	r3, [sp, #8]
 800c69e:	f003 0301 	and.w	r3, r3, #1
 800c6a2:	46b8      	mov	r8, r7
 800c6a4:	9306      	str	r3, [sp, #24]
 800c6a6:	4607      	mov	r7, r0
 800c6a8:	9b01      	ldr	r3, [sp, #4]
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	4658      	mov	r0, fp
 800c6b0:	9302      	str	r3, [sp, #8]
 800c6b2:	f7ff fa67 	bl	800bb84 <quorem>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	3330      	adds	r3, #48	; 0x30
 800c6ba:	9004      	str	r0, [sp, #16]
 800c6bc:	4641      	mov	r1, r8
 800c6be:	4658      	mov	r0, fp
 800c6c0:	9308      	str	r3, [sp, #32]
 800c6c2:	f000 ff3d 	bl	800d540 <__mcmp>
 800c6c6:	463a      	mov	r2, r7
 800c6c8:	4681      	mov	r9, r0
 800c6ca:	4631      	mov	r1, r6
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	f000 ff53 	bl	800d578 <__mdiff>
 800c6d2:	68c2      	ldr	r2, [r0, #12]
 800c6d4:	9b08      	ldr	r3, [sp, #32]
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	bb02      	cbnz	r2, 800c71c <_dtoa_r+0xa7c>
 800c6da:	4601      	mov	r1, r0
 800c6dc:	4658      	mov	r0, fp
 800c6de:	f000 ff2f 	bl	800d540 <__mcmp>
 800c6e2:	9b08      	ldr	r3, [sp, #32]
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c6ee:	f000 fc9f 	bl	800d030 <_Bfree>
 800c6f2:	9b05      	ldr	r3, [sp, #20]
 800c6f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6f6:	9d01      	ldr	r5, [sp, #4]
 800c6f8:	ea43 0102 	orr.w	r1, r3, r2
 800c6fc:	9b06      	ldr	r3, [sp, #24]
 800c6fe:	430b      	orrs	r3, r1
 800c700:	9b08      	ldr	r3, [sp, #32]
 800c702:	d10d      	bne.n	800c720 <_dtoa_r+0xa80>
 800c704:	2b39      	cmp	r3, #57	; 0x39
 800c706:	d029      	beq.n	800c75c <_dtoa_r+0xabc>
 800c708:	f1b9 0f00 	cmp.w	r9, #0
 800c70c:	dd01      	ble.n	800c712 <_dtoa_r+0xa72>
 800c70e:	9b04      	ldr	r3, [sp, #16]
 800c710:	3331      	adds	r3, #49	; 0x31
 800c712:	9a02      	ldr	r2, [sp, #8]
 800c714:	7013      	strb	r3, [r2, #0]
 800c716:	e774      	b.n	800c602 <_dtoa_r+0x962>
 800c718:	4638      	mov	r0, r7
 800c71a:	e7b9      	b.n	800c690 <_dtoa_r+0x9f0>
 800c71c:	2201      	movs	r2, #1
 800c71e:	e7e2      	b.n	800c6e6 <_dtoa_r+0xa46>
 800c720:	f1b9 0f00 	cmp.w	r9, #0
 800c724:	db06      	blt.n	800c734 <_dtoa_r+0xa94>
 800c726:	9905      	ldr	r1, [sp, #20]
 800c728:	ea41 0909 	orr.w	r9, r1, r9
 800c72c:	9906      	ldr	r1, [sp, #24]
 800c72e:	ea59 0101 	orrs.w	r1, r9, r1
 800c732:	d120      	bne.n	800c776 <_dtoa_r+0xad6>
 800c734:	2a00      	cmp	r2, #0
 800c736:	ddec      	ble.n	800c712 <_dtoa_r+0xa72>
 800c738:	4659      	mov	r1, fp
 800c73a:	2201      	movs	r2, #1
 800c73c:	4620      	mov	r0, r4
 800c73e:	9301      	str	r3, [sp, #4]
 800c740:	f000 fe92 	bl	800d468 <__lshift>
 800c744:	4631      	mov	r1, r6
 800c746:	4683      	mov	fp, r0
 800c748:	f000 fefa 	bl	800d540 <__mcmp>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	9b01      	ldr	r3, [sp, #4]
 800c750:	dc02      	bgt.n	800c758 <_dtoa_r+0xab8>
 800c752:	d1de      	bne.n	800c712 <_dtoa_r+0xa72>
 800c754:	07da      	lsls	r2, r3, #31
 800c756:	d5dc      	bpl.n	800c712 <_dtoa_r+0xa72>
 800c758:	2b39      	cmp	r3, #57	; 0x39
 800c75a:	d1d8      	bne.n	800c70e <_dtoa_r+0xa6e>
 800c75c:	9a02      	ldr	r2, [sp, #8]
 800c75e:	2339      	movs	r3, #57	; 0x39
 800c760:	7013      	strb	r3, [r2, #0]
 800c762:	462b      	mov	r3, r5
 800c764:	461d      	mov	r5, r3
 800c766:	3b01      	subs	r3, #1
 800c768:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c76c:	2a39      	cmp	r2, #57	; 0x39
 800c76e:	d050      	beq.n	800c812 <_dtoa_r+0xb72>
 800c770:	3201      	adds	r2, #1
 800c772:	701a      	strb	r2, [r3, #0]
 800c774:	e745      	b.n	800c602 <_dtoa_r+0x962>
 800c776:	2a00      	cmp	r2, #0
 800c778:	dd03      	ble.n	800c782 <_dtoa_r+0xae2>
 800c77a:	2b39      	cmp	r3, #57	; 0x39
 800c77c:	d0ee      	beq.n	800c75c <_dtoa_r+0xabc>
 800c77e:	3301      	adds	r3, #1
 800c780:	e7c7      	b.n	800c712 <_dtoa_r+0xa72>
 800c782:	9a01      	ldr	r2, [sp, #4]
 800c784:	9907      	ldr	r1, [sp, #28]
 800c786:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c78a:	428a      	cmp	r2, r1
 800c78c:	d02a      	beq.n	800c7e4 <_dtoa_r+0xb44>
 800c78e:	4659      	mov	r1, fp
 800c790:	2300      	movs	r3, #0
 800c792:	220a      	movs	r2, #10
 800c794:	4620      	mov	r0, r4
 800c796:	f000 fc6d 	bl	800d074 <__multadd>
 800c79a:	45b8      	cmp	r8, r7
 800c79c:	4683      	mov	fp, r0
 800c79e:	f04f 0300 	mov.w	r3, #0
 800c7a2:	f04f 020a 	mov.w	r2, #10
 800c7a6:	4641      	mov	r1, r8
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	d107      	bne.n	800c7bc <_dtoa_r+0xb1c>
 800c7ac:	f000 fc62 	bl	800d074 <__multadd>
 800c7b0:	4680      	mov	r8, r0
 800c7b2:	4607      	mov	r7, r0
 800c7b4:	9b01      	ldr	r3, [sp, #4]
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	9301      	str	r3, [sp, #4]
 800c7ba:	e775      	b.n	800c6a8 <_dtoa_r+0xa08>
 800c7bc:	f000 fc5a 	bl	800d074 <__multadd>
 800c7c0:	4639      	mov	r1, r7
 800c7c2:	4680      	mov	r8, r0
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	220a      	movs	r2, #10
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	f000 fc53 	bl	800d074 <__multadd>
 800c7ce:	4607      	mov	r7, r0
 800c7d0:	e7f0      	b.n	800c7b4 <_dtoa_r+0xb14>
 800c7d2:	f1b9 0f00 	cmp.w	r9, #0
 800c7d6:	9a00      	ldr	r2, [sp, #0]
 800c7d8:	bfcc      	ite	gt
 800c7da:	464d      	movgt	r5, r9
 800c7dc:	2501      	movle	r5, #1
 800c7de:	4415      	add	r5, r2
 800c7e0:	f04f 0800 	mov.w	r8, #0
 800c7e4:	4659      	mov	r1, fp
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	9301      	str	r3, [sp, #4]
 800c7ec:	f000 fe3c 	bl	800d468 <__lshift>
 800c7f0:	4631      	mov	r1, r6
 800c7f2:	4683      	mov	fp, r0
 800c7f4:	f000 fea4 	bl	800d540 <__mcmp>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	dcb2      	bgt.n	800c762 <_dtoa_r+0xac2>
 800c7fc:	d102      	bne.n	800c804 <_dtoa_r+0xb64>
 800c7fe:	9b01      	ldr	r3, [sp, #4]
 800c800:	07db      	lsls	r3, r3, #31
 800c802:	d4ae      	bmi.n	800c762 <_dtoa_r+0xac2>
 800c804:	462b      	mov	r3, r5
 800c806:	461d      	mov	r5, r3
 800c808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c80c:	2a30      	cmp	r2, #48	; 0x30
 800c80e:	d0fa      	beq.n	800c806 <_dtoa_r+0xb66>
 800c810:	e6f7      	b.n	800c602 <_dtoa_r+0x962>
 800c812:	9a00      	ldr	r2, [sp, #0]
 800c814:	429a      	cmp	r2, r3
 800c816:	d1a5      	bne.n	800c764 <_dtoa_r+0xac4>
 800c818:	f10a 0a01 	add.w	sl, sl, #1
 800c81c:	2331      	movs	r3, #49	; 0x31
 800c81e:	e779      	b.n	800c714 <_dtoa_r+0xa74>
 800c820:	4b13      	ldr	r3, [pc, #76]	; (800c870 <_dtoa_r+0xbd0>)
 800c822:	f7ff baaf 	b.w	800bd84 <_dtoa_r+0xe4>
 800c826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f47f aa86 	bne.w	800bd3a <_dtoa_r+0x9a>
 800c82e:	4b11      	ldr	r3, [pc, #68]	; (800c874 <_dtoa_r+0xbd4>)
 800c830:	f7ff baa8 	b.w	800bd84 <_dtoa_r+0xe4>
 800c834:	f1b9 0f00 	cmp.w	r9, #0
 800c838:	dc03      	bgt.n	800c842 <_dtoa_r+0xba2>
 800c83a:	9b05      	ldr	r3, [sp, #20]
 800c83c:	2b02      	cmp	r3, #2
 800c83e:	f73f aec9 	bgt.w	800c5d4 <_dtoa_r+0x934>
 800c842:	9d00      	ldr	r5, [sp, #0]
 800c844:	4631      	mov	r1, r6
 800c846:	4658      	mov	r0, fp
 800c848:	f7ff f99c 	bl	800bb84 <quorem>
 800c84c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c850:	f805 3b01 	strb.w	r3, [r5], #1
 800c854:	9a00      	ldr	r2, [sp, #0]
 800c856:	1aaa      	subs	r2, r5, r2
 800c858:	4591      	cmp	r9, r2
 800c85a:	ddba      	ble.n	800c7d2 <_dtoa_r+0xb32>
 800c85c:	4659      	mov	r1, fp
 800c85e:	2300      	movs	r3, #0
 800c860:	220a      	movs	r2, #10
 800c862:	4620      	mov	r0, r4
 800c864:	f000 fc06 	bl	800d074 <__multadd>
 800c868:	4683      	mov	fp, r0
 800c86a:	e7eb      	b.n	800c844 <_dtoa_r+0xba4>
 800c86c:	0800f734 	.word	0x0800f734
 800c870:	0800f530 	.word	0x0800f530
 800c874:	0800f6b1 	.word	0x0800f6b1

0800c878 <rshift>:
 800c878:	6903      	ldr	r3, [r0, #16]
 800c87a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c87e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c882:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c886:	f100 0414 	add.w	r4, r0, #20
 800c88a:	dd45      	ble.n	800c918 <rshift+0xa0>
 800c88c:	f011 011f 	ands.w	r1, r1, #31
 800c890:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c894:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c898:	d10c      	bne.n	800c8b4 <rshift+0x3c>
 800c89a:	f100 0710 	add.w	r7, r0, #16
 800c89e:	4629      	mov	r1, r5
 800c8a0:	42b1      	cmp	r1, r6
 800c8a2:	d334      	bcc.n	800c90e <rshift+0x96>
 800c8a4:	1a9b      	subs	r3, r3, r2
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	1eea      	subs	r2, r5, #3
 800c8aa:	4296      	cmp	r6, r2
 800c8ac:	bf38      	it	cc
 800c8ae:	2300      	movcc	r3, #0
 800c8b0:	4423      	add	r3, r4
 800c8b2:	e015      	b.n	800c8e0 <rshift+0x68>
 800c8b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c8b8:	f1c1 0820 	rsb	r8, r1, #32
 800c8bc:	40cf      	lsrs	r7, r1
 800c8be:	f105 0e04 	add.w	lr, r5, #4
 800c8c2:	46a1      	mov	r9, r4
 800c8c4:	4576      	cmp	r6, lr
 800c8c6:	46f4      	mov	ip, lr
 800c8c8:	d815      	bhi.n	800c8f6 <rshift+0x7e>
 800c8ca:	1a9b      	subs	r3, r3, r2
 800c8cc:	009a      	lsls	r2, r3, #2
 800c8ce:	3a04      	subs	r2, #4
 800c8d0:	3501      	adds	r5, #1
 800c8d2:	42ae      	cmp	r6, r5
 800c8d4:	bf38      	it	cc
 800c8d6:	2200      	movcc	r2, #0
 800c8d8:	18a3      	adds	r3, r4, r2
 800c8da:	50a7      	str	r7, [r4, r2]
 800c8dc:	b107      	cbz	r7, 800c8e0 <rshift+0x68>
 800c8de:	3304      	adds	r3, #4
 800c8e0:	1b1a      	subs	r2, r3, r4
 800c8e2:	42a3      	cmp	r3, r4
 800c8e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c8e8:	bf08      	it	eq
 800c8ea:	2300      	moveq	r3, #0
 800c8ec:	6102      	str	r2, [r0, #16]
 800c8ee:	bf08      	it	eq
 800c8f0:	6143      	streq	r3, [r0, #20]
 800c8f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8f6:	f8dc c000 	ldr.w	ip, [ip]
 800c8fa:	fa0c fc08 	lsl.w	ip, ip, r8
 800c8fe:	ea4c 0707 	orr.w	r7, ip, r7
 800c902:	f849 7b04 	str.w	r7, [r9], #4
 800c906:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c90a:	40cf      	lsrs	r7, r1
 800c90c:	e7da      	b.n	800c8c4 <rshift+0x4c>
 800c90e:	f851 cb04 	ldr.w	ip, [r1], #4
 800c912:	f847 cf04 	str.w	ip, [r7, #4]!
 800c916:	e7c3      	b.n	800c8a0 <rshift+0x28>
 800c918:	4623      	mov	r3, r4
 800c91a:	e7e1      	b.n	800c8e0 <rshift+0x68>

0800c91c <__hexdig_fun>:
 800c91c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c920:	2b09      	cmp	r3, #9
 800c922:	d802      	bhi.n	800c92a <__hexdig_fun+0xe>
 800c924:	3820      	subs	r0, #32
 800c926:	b2c0      	uxtb	r0, r0
 800c928:	4770      	bx	lr
 800c92a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c92e:	2b05      	cmp	r3, #5
 800c930:	d801      	bhi.n	800c936 <__hexdig_fun+0x1a>
 800c932:	3847      	subs	r0, #71	; 0x47
 800c934:	e7f7      	b.n	800c926 <__hexdig_fun+0xa>
 800c936:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c93a:	2b05      	cmp	r3, #5
 800c93c:	d801      	bhi.n	800c942 <__hexdig_fun+0x26>
 800c93e:	3827      	subs	r0, #39	; 0x27
 800c940:	e7f1      	b.n	800c926 <__hexdig_fun+0xa>
 800c942:	2000      	movs	r0, #0
 800c944:	4770      	bx	lr
	...

0800c948 <__gethex>:
 800c948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94c:	ed2d 8b02 	vpush	{d8}
 800c950:	b089      	sub	sp, #36	; 0x24
 800c952:	ee08 0a10 	vmov	s16, r0
 800c956:	9304      	str	r3, [sp, #16]
 800c958:	4bbc      	ldr	r3, [pc, #752]	; (800cc4c <__gethex+0x304>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	9301      	str	r3, [sp, #4]
 800c95e:	4618      	mov	r0, r3
 800c960:	468b      	mov	fp, r1
 800c962:	4690      	mov	r8, r2
 800c964:	f7f3 fc54 	bl	8000210 <strlen>
 800c968:	9b01      	ldr	r3, [sp, #4]
 800c96a:	f8db 2000 	ldr.w	r2, [fp]
 800c96e:	4403      	add	r3, r0
 800c970:	4682      	mov	sl, r0
 800c972:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c976:	9305      	str	r3, [sp, #20]
 800c978:	1c93      	adds	r3, r2, #2
 800c97a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c97e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c982:	32fe      	adds	r2, #254	; 0xfe
 800c984:	18d1      	adds	r1, r2, r3
 800c986:	461f      	mov	r7, r3
 800c988:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c98c:	9100      	str	r1, [sp, #0]
 800c98e:	2830      	cmp	r0, #48	; 0x30
 800c990:	d0f8      	beq.n	800c984 <__gethex+0x3c>
 800c992:	f7ff ffc3 	bl	800c91c <__hexdig_fun>
 800c996:	4604      	mov	r4, r0
 800c998:	2800      	cmp	r0, #0
 800c99a:	d13a      	bne.n	800ca12 <__gethex+0xca>
 800c99c:	9901      	ldr	r1, [sp, #4]
 800c99e:	4652      	mov	r2, sl
 800c9a0:	4638      	mov	r0, r7
 800c9a2:	f001 f9ed 	bl	800dd80 <strncmp>
 800c9a6:	4605      	mov	r5, r0
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	d168      	bne.n	800ca7e <__gethex+0x136>
 800c9ac:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c9b0:	eb07 060a 	add.w	r6, r7, sl
 800c9b4:	f7ff ffb2 	bl	800c91c <__hexdig_fun>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d062      	beq.n	800ca82 <__gethex+0x13a>
 800c9bc:	4633      	mov	r3, r6
 800c9be:	7818      	ldrb	r0, [r3, #0]
 800c9c0:	2830      	cmp	r0, #48	; 0x30
 800c9c2:	461f      	mov	r7, r3
 800c9c4:	f103 0301 	add.w	r3, r3, #1
 800c9c8:	d0f9      	beq.n	800c9be <__gethex+0x76>
 800c9ca:	f7ff ffa7 	bl	800c91c <__hexdig_fun>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	fab0 f480 	clz	r4, r0
 800c9d4:	0964      	lsrs	r4, r4, #5
 800c9d6:	4635      	mov	r5, r6
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	463a      	mov	r2, r7
 800c9dc:	4616      	mov	r6, r2
 800c9de:	3201      	adds	r2, #1
 800c9e0:	7830      	ldrb	r0, [r6, #0]
 800c9e2:	f7ff ff9b 	bl	800c91c <__hexdig_fun>
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	d1f8      	bne.n	800c9dc <__gethex+0x94>
 800c9ea:	9901      	ldr	r1, [sp, #4]
 800c9ec:	4652      	mov	r2, sl
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	f001 f9c6 	bl	800dd80 <strncmp>
 800c9f4:	b980      	cbnz	r0, 800ca18 <__gethex+0xd0>
 800c9f6:	b94d      	cbnz	r5, 800ca0c <__gethex+0xc4>
 800c9f8:	eb06 050a 	add.w	r5, r6, sl
 800c9fc:	462a      	mov	r2, r5
 800c9fe:	4616      	mov	r6, r2
 800ca00:	3201      	adds	r2, #1
 800ca02:	7830      	ldrb	r0, [r6, #0]
 800ca04:	f7ff ff8a 	bl	800c91c <__hexdig_fun>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	d1f8      	bne.n	800c9fe <__gethex+0xb6>
 800ca0c:	1bad      	subs	r5, r5, r6
 800ca0e:	00ad      	lsls	r5, r5, #2
 800ca10:	e004      	b.n	800ca1c <__gethex+0xd4>
 800ca12:	2400      	movs	r4, #0
 800ca14:	4625      	mov	r5, r4
 800ca16:	e7e0      	b.n	800c9da <__gethex+0x92>
 800ca18:	2d00      	cmp	r5, #0
 800ca1a:	d1f7      	bne.n	800ca0c <__gethex+0xc4>
 800ca1c:	7833      	ldrb	r3, [r6, #0]
 800ca1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ca22:	2b50      	cmp	r3, #80	; 0x50
 800ca24:	d13b      	bne.n	800ca9e <__gethex+0x156>
 800ca26:	7873      	ldrb	r3, [r6, #1]
 800ca28:	2b2b      	cmp	r3, #43	; 0x2b
 800ca2a:	d02c      	beq.n	800ca86 <__gethex+0x13e>
 800ca2c:	2b2d      	cmp	r3, #45	; 0x2d
 800ca2e:	d02e      	beq.n	800ca8e <__gethex+0x146>
 800ca30:	1c71      	adds	r1, r6, #1
 800ca32:	f04f 0900 	mov.w	r9, #0
 800ca36:	7808      	ldrb	r0, [r1, #0]
 800ca38:	f7ff ff70 	bl	800c91c <__hexdig_fun>
 800ca3c:	1e43      	subs	r3, r0, #1
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	2b18      	cmp	r3, #24
 800ca42:	d82c      	bhi.n	800ca9e <__gethex+0x156>
 800ca44:	f1a0 0210 	sub.w	r2, r0, #16
 800ca48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca4c:	f7ff ff66 	bl	800c91c <__hexdig_fun>
 800ca50:	1e43      	subs	r3, r0, #1
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	2b18      	cmp	r3, #24
 800ca56:	d91d      	bls.n	800ca94 <__gethex+0x14c>
 800ca58:	f1b9 0f00 	cmp.w	r9, #0
 800ca5c:	d000      	beq.n	800ca60 <__gethex+0x118>
 800ca5e:	4252      	negs	r2, r2
 800ca60:	4415      	add	r5, r2
 800ca62:	f8cb 1000 	str.w	r1, [fp]
 800ca66:	b1e4      	cbz	r4, 800caa2 <__gethex+0x15a>
 800ca68:	9b00      	ldr	r3, [sp, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	bf14      	ite	ne
 800ca6e:	2700      	movne	r7, #0
 800ca70:	2706      	moveq	r7, #6
 800ca72:	4638      	mov	r0, r7
 800ca74:	b009      	add	sp, #36	; 0x24
 800ca76:	ecbd 8b02 	vpop	{d8}
 800ca7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca7e:	463e      	mov	r6, r7
 800ca80:	4625      	mov	r5, r4
 800ca82:	2401      	movs	r4, #1
 800ca84:	e7ca      	b.n	800ca1c <__gethex+0xd4>
 800ca86:	f04f 0900 	mov.w	r9, #0
 800ca8a:	1cb1      	adds	r1, r6, #2
 800ca8c:	e7d3      	b.n	800ca36 <__gethex+0xee>
 800ca8e:	f04f 0901 	mov.w	r9, #1
 800ca92:	e7fa      	b.n	800ca8a <__gethex+0x142>
 800ca94:	230a      	movs	r3, #10
 800ca96:	fb03 0202 	mla	r2, r3, r2, r0
 800ca9a:	3a10      	subs	r2, #16
 800ca9c:	e7d4      	b.n	800ca48 <__gethex+0x100>
 800ca9e:	4631      	mov	r1, r6
 800caa0:	e7df      	b.n	800ca62 <__gethex+0x11a>
 800caa2:	1bf3      	subs	r3, r6, r7
 800caa4:	3b01      	subs	r3, #1
 800caa6:	4621      	mov	r1, r4
 800caa8:	2b07      	cmp	r3, #7
 800caaa:	dc0b      	bgt.n	800cac4 <__gethex+0x17c>
 800caac:	ee18 0a10 	vmov	r0, s16
 800cab0:	f000 fa7e 	bl	800cfb0 <_Balloc>
 800cab4:	4604      	mov	r4, r0
 800cab6:	b940      	cbnz	r0, 800caca <__gethex+0x182>
 800cab8:	4b65      	ldr	r3, [pc, #404]	; (800cc50 <__gethex+0x308>)
 800caba:	4602      	mov	r2, r0
 800cabc:	21de      	movs	r1, #222	; 0xde
 800cabe:	4865      	ldr	r0, [pc, #404]	; (800cc54 <__gethex+0x30c>)
 800cac0:	f001 f97e 	bl	800ddc0 <__assert_func>
 800cac4:	3101      	adds	r1, #1
 800cac6:	105b      	asrs	r3, r3, #1
 800cac8:	e7ee      	b.n	800caa8 <__gethex+0x160>
 800caca:	f100 0914 	add.w	r9, r0, #20
 800cace:	f04f 0b00 	mov.w	fp, #0
 800cad2:	f1ca 0301 	rsb	r3, sl, #1
 800cad6:	f8cd 9008 	str.w	r9, [sp, #8]
 800cada:	f8cd b000 	str.w	fp, [sp]
 800cade:	9306      	str	r3, [sp, #24]
 800cae0:	42b7      	cmp	r7, r6
 800cae2:	d340      	bcc.n	800cb66 <__gethex+0x21e>
 800cae4:	9802      	ldr	r0, [sp, #8]
 800cae6:	9b00      	ldr	r3, [sp, #0]
 800cae8:	f840 3b04 	str.w	r3, [r0], #4
 800caec:	eba0 0009 	sub.w	r0, r0, r9
 800caf0:	1080      	asrs	r0, r0, #2
 800caf2:	0146      	lsls	r6, r0, #5
 800caf4:	6120      	str	r0, [r4, #16]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 fb50 	bl	800d19c <__hi0bits>
 800cafc:	1a30      	subs	r0, r6, r0
 800cafe:	f8d8 6000 	ldr.w	r6, [r8]
 800cb02:	42b0      	cmp	r0, r6
 800cb04:	dd63      	ble.n	800cbce <__gethex+0x286>
 800cb06:	1b87      	subs	r7, r0, r6
 800cb08:	4639      	mov	r1, r7
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f000 feea 	bl	800d8e4 <__any_on>
 800cb10:	4682      	mov	sl, r0
 800cb12:	b1a8      	cbz	r0, 800cb40 <__gethex+0x1f8>
 800cb14:	1e7b      	subs	r3, r7, #1
 800cb16:	1159      	asrs	r1, r3, #5
 800cb18:	f003 021f 	and.w	r2, r3, #31
 800cb1c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cb20:	f04f 0a01 	mov.w	sl, #1
 800cb24:	fa0a f202 	lsl.w	r2, sl, r2
 800cb28:	420a      	tst	r2, r1
 800cb2a:	d009      	beq.n	800cb40 <__gethex+0x1f8>
 800cb2c:	4553      	cmp	r3, sl
 800cb2e:	dd05      	ble.n	800cb3c <__gethex+0x1f4>
 800cb30:	1eb9      	subs	r1, r7, #2
 800cb32:	4620      	mov	r0, r4
 800cb34:	f000 fed6 	bl	800d8e4 <__any_on>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	d145      	bne.n	800cbc8 <__gethex+0x280>
 800cb3c:	f04f 0a02 	mov.w	sl, #2
 800cb40:	4639      	mov	r1, r7
 800cb42:	4620      	mov	r0, r4
 800cb44:	f7ff fe98 	bl	800c878 <rshift>
 800cb48:	443d      	add	r5, r7
 800cb4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb4e:	42ab      	cmp	r3, r5
 800cb50:	da4c      	bge.n	800cbec <__gethex+0x2a4>
 800cb52:	ee18 0a10 	vmov	r0, s16
 800cb56:	4621      	mov	r1, r4
 800cb58:	f000 fa6a 	bl	800d030 <_Bfree>
 800cb5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb5e:	2300      	movs	r3, #0
 800cb60:	6013      	str	r3, [r2, #0]
 800cb62:	27a3      	movs	r7, #163	; 0xa3
 800cb64:	e785      	b.n	800ca72 <__gethex+0x12a>
 800cb66:	1e73      	subs	r3, r6, #1
 800cb68:	9a05      	ldr	r2, [sp, #20]
 800cb6a:	9303      	str	r3, [sp, #12]
 800cb6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d019      	beq.n	800cba8 <__gethex+0x260>
 800cb74:	f1bb 0f20 	cmp.w	fp, #32
 800cb78:	d107      	bne.n	800cb8a <__gethex+0x242>
 800cb7a:	9b02      	ldr	r3, [sp, #8]
 800cb7c:	9a00      	ldr	r2, [sp, #0]
 800cb7e:	f843 2b04 	str.w	r2, [r3], #4
 800cb82:	9302      	str	r3, [sp, #8]
 800cb84:	2300      	movs	r3, #0
 800cb86:	9300      	str	r3, [sp, #0]
 800cb88:	469b      	mov	fp, r3
 800cb8a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cb8e:	f7ff fec5 	bl	800c91c <__hexdig_fun>
 800cb92:	9b00      	ldr	r3, [sp, #0]
 800cb94:	f000 000f 	and.w	r0, r0, #15
 800cb98:	fa00 f00b 	lsl.w	r0, r0, fp
 800cb9c:	4303      	orrs	r3, r0
 800cb9e:	9300      	str	r3, [sp, #0]
 800cba0:	f10b 0b04 	add.w	fp, fp, #4
 800cba4:	9b03      	ldr	r3, [sp, #12]
 800cba6:	e00d      	b.n	800cbc4 <__gethex+0x27c>
 800cba8:	9b03      	ldr	r3, [sp, #12]
 800cbaa:	9a06      	ldr	r2, [sp, #24]
 800cbac:	4413      	add	r3, r2
 800cbae:	42bb      	cmp	r3, r7
 800cbb0:	d3e0      	bcc.n	800cb74 <__gethex+0x22c>
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	9901      	ldr	r1, [sp, #4]
 800cbb6:	9307      	str	r3, [sp, #28]
 800cbb8:	4652      	mov	r2, sl
 800cbba:	f001 f8e1 	bl	800dd80 <strncmp>
 800cbbe:	9b07      	ldr	r3, [sp, #28]
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	d1d7      	bne.n	800cb74 <__gethex+0x22c>
 800cbc4:	461e      	mov	r6, r3
 800cbc6:	e78b      	b.n	800cae0 <__gethex+0x198>
 800cbc8:	f04f 0a03 	mov.w	sl, #3
 800cbcc:	e7b8      	b.n	800cb40 <__gethex+0x1f8>
 800cbce:	da0a      	bge.n	800cbe6 <__gethex+0x29e>
 800cbd0:	1a37      	subs	r7, r6, r0
 800cbd2:	4621      	mov	r1, r4
 800cbd4:	ee18 0a10 	vmov	r0, s16
 800cbd8:	463a      	mov	r2, r7
 800cbda:	f000 fc45 	bl	800d468 <__lshift>
 800cbde:	1bed      	subs	r5, r5, r7
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	f100 0914 	add.w	r9, r0, #20
 800cbe6:	f04f 0a00 	mov.w	sl, #0
 800cbea:	e7ae      	b.n	800cb4a <__gethex+0x202>
 800cbec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cbf0:	42a8      	cmp	r0, r5
 800cbf2:	dd72      	ble.n	800ccda <__gethex+0x392>
 800cbf4:	1b45      	subs	r5, r0, r5
 800cbf6:	42ae      	cmp	r6, r5
 800cbf8:	dc36      	bgt.n	800cc68 <__gethex+0x320>
 800cbfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cbfe:	2b02      	cmp	r3, #2
 800cc00:	d02a      	beq.n	800cc58 <__gethex+0x310>
 800cc02:	2b03      	cmp	r3, #3
 800cc04:	d02c      	beq.n	800cc60 <__gethex+0x318>
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d115      	bne.n	800cc36 <__gethex+0x2ee>
 800cc0a:	42ae      	cmp	r6, r5
 800cc0c:	d113      	bne.n	800cc36 <__gethex+0x2ee>
 800cc0e:	2e01      	cmp	r6, #1
 800cc10:	d10b      	bne.n	800cc2a <__gethex+0x2e2>
 800cc12:	9a04      	ldr	r2, [sp, #16]
 800cc14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cc18:	6013      	str	r3, [r2, #0]
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	6123      	str	r3, [r4, #16]
 800cc1e:	f8c9 3000 	str.w	r3, [r9]
 800cc22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc24:	2762      	movs	r7, #98	; 0x62
 800cc26:	601c      	str	r4, [r3, #0]
 800cc28:	e723      	b.n	800ca72 <__gethex+0x12a>
 800cc2a:	1e71      	subs	r1, r6, #1
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f000 fe59 	bl	800d8e4 <__any_on>
 800cc32:	2800      	cmp	r0, #0
 800cc34:	d1ed      	bne.n	800cc12 <__gethex+0x2ca>
 800cc36:	ee18 0a10 	vmov	r0, s16
 800cc3a:	4621      	mov	r1, r4
 800cc3c:	f000 f9f8 	bl	800d030 <_Bfree>
 800cc40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc42:	2300      	movs	r3, #0
 800cc44:	6013      	str	r3, [r2, #0]
 800cc46:	2750      	movs	r7, #80	; 0x50
 800cc48:	e713      	b.n	800ca72 <__gethex+0x12a>
 800cc4a:	bf00      	nop
 800cc4c:	0800f7b0 	.word	0x0800f7b0
 800cc50:	0800f734 	.word	0x0800f734
 800cc54:	0800f745 	.word	0x0800f745
 800cc58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d1eb      	bne.n	800cc36 <__gethex+0x2ee>
 800cc5e:	e7d8      	b.n	800cc12 <__gethex+0x2ca>
 800cc60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d1d5      	bne.n	800cc12 <__gethex+0x2ca>
 800cc66:	e7e6      	b.n	800cc36 <__gethex+0x2ee>
 800cc68:	1e6f      	subs	r7, r5, #1
 800cc6a:	f1ba 0f00 	cmp.w	sl, #0
 800cc6e:	d131      	bne.n	800ccd4 <__gethex+0x38c>
 800cc70:	b127      	cbz	r7, 800cc7c <__gethex+0x334>
 800cc72:	4639      	mov	r1, r7
 800cc74:	4620      	mov	r0, r4
 800cc76:	f000 fe35 	bl	800d8e4 <__any_on>
 800cc7a:	4682      	mov	sl, r0
 800cc7c:	117b      	asrs	r3, r7, #5
 800cc7e:	2101      	movs	r1, #1
 800cc80:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cc84:	f007 071f 	and.w	r7, r7, #31
 800cc88:	fa01 f707 	lsl.w	r7, r1, r7
 800cc8c:	421f      	tst	r7, r3
 800cc8e:	4629      	mov	r1, r5
 800cc90:	4620      	mov	r0, r4
 800cc92:	bf18      	it	ne
 800cc94:	f04a 0a02 	orrne.w	sl, sl, #2
 800cc98:	1b76      	subs	r6, r6, r5
 800cc9a:	f7ff fded 	bl	800c878 <rshift>
 800cc9e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cca2:	2702      	movs	r7, #2
 800cca4:	f1ba 0f00 	cmp.w	sl, #0
 800cca8:	d048      	beq.n	800cd3c <__gethex+0x3f4>
 800ccaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	d015      	beq.n	800ccde <__gethex+0x396>
 800ccb2:	2b03      	cmp	r3, #3
 800ccb4:	d017      	beq.n	800cce6 <__gethex+0x39e>
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d109      	bne.n	800ccce <__gethex+0x386>
 800ccba:	f01a 0f02 	tst.w	sl, #2
 800ccbe:	d006      	beq.n	800ccce <__gethex+0x386>
 800ccc0:	f8d9 0000 	ldr.w	r0, [r9]
 800ccc4:	ea4a 0a00 	orr.w	sl, sl, r0
 800ccc8:	f01a 0f01 	tst.w	sl, #1
 800cccc:	d10e      	bne.n	800ccec <__gethex+0x3a4>
 800ccce:	f047 0710 	orr.w	r7, r7, #16
 800ccd2:	e033      	b.n	800cd3c <__gethex+0x3f4>
 800ccd4:	f04f 0a01 	mov.w	sl, #1
 800ccd8:	e7d0      	b.n	800cc7c <__gethex+0x334>
 800ccda:	2701      	movs	r7, #1
 800ccdc:	e7e2      	b.n	800cca4 <__gethex+0x35c>
 800ccde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cce0:	f1c3 0301 	rsb	r3, r3, #1
 800cce4:	9315      	str	r3, [sp, #84]	; 0x54
 800cce6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d0f0      	beq.n	800ccce <__gethex+0x386>
 800ccec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ccf0:	f104 0314 	add.w	r3, r4, #20
 800ccf4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ccf8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ccfc:	f04f 0c00 	mov.w	ip, #0
 800cd00:	4618      	mov	r0, r3
 800cd02:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd06:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cd0a:	d01c      	beq.n	800cd46 <__gethex+0x3fe>
 800cd0c:	3201      	adds	r2, #1
 800cd0e:	6002      	str	r2, [r0, #0]
 800cd10:	2f02      	cmp	r7, #2
 800cd12:	f104 0314 	add.w	r3, r4, #20
 800cd16:	d13f      	bne.n	800cd98 <__gethex+0x450>
 800cd18:	f8d8 2000 	ldr.w	r2, [r8]
 800cd1c:	3a01      	subs	r2, #1
 800cd1e:	42b2      	cmp	r2, r6
 800cd20:	d10a      	bne.n	800cd38 <__gethex+0x3f0>
 800cd22:	1171      	asrs	r1, r6, #5
 800cd24:	2201      	movs	r2, #1
 800cd26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd2a:	f006 061f 	and.w	r6, r6, #31
 800cd2e:	fa02 f606 	lsl.w	r6, r2, r6
 800cd32:	421e      	tst	r6, r3
 800cd34:	bf18      	it	ne
 800cd36:	4617      	movne	r7, r2
 800cd38:	f047 0720 	orr.w	r7, r7, #32
 800cd3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd3e:	601c      	str	r4, [r3, #0]
 800cd40:	9b04      	ldr	r3, [sp, #16]
 800cd42:	601d      	str	r5, [r3, #0]
 800cd44:	e695      	b.n	800ca72 <__gethex+0x12a>
 800cd46:	4299      	cmp	r1, r3
 800cd48:	f843 cc04 	str.w	ip, [r3, #-4]
 800cd4c:	d8d8      	bhi.n	800cd00 <__gethex+0x3b8>
 800cd4e:	68a3      	ldr	r3, [r4, #8]
 800cd50:	459b      	cmp	fp, r3
 800cd52:	db19      	blt.n	800cd88 <__gethex+0x440>
 800cd54:	6861      	ldr	r1, [r4, #4]
 800cd56:	ee18 0a10 	vmov	r0, s16
 800cd5a:	3101      	adds	r1, #1
 800cd5c:	f000 f928 	bl	800cfb0 <_Balloc>
 800cd60:	4681      	mov	r9, r0
 800cd62:	b918      	cbnz	r0, 800cd6c <__gethex+0x424>
 800cd64:	4b1a      	ldr	r3, [pc, #104]	; (800cdd0 <__gethex+0x488>)
 800cd66:	4602      	mov	r2, r0
 800cd68:	2184      	movs	r1, #132	; 0x84
 800cd6a:	e6a8      	b.n	800cabe <__gethex+0x176>
 800cd6c:	6922      	ldr	r2, [r4, #16]
 800cd6e:	3202      	adds	r2, #2
 800cd70:	f104 010c 	add.w	r1, r4, #12
 800cd74:	0092      	lsls	r2, r2, #2
 800cd76:	300c      	adds	r0, #12
 800cd78:	f000 f90c 	bl	800cf94 <memcpy>
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	ee18 0a10 	vmov	r0, s16
 800cd82:	f000 f955 	bl	800d030 <_Bfree>
 800cd86:	464c      	mov	r4, r9
 800cd88:	6923      	ldr	r3, [r4, #16]
 800cd8a:	1c5a      	adds	r2, r3, #1
 800cd8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd90:	6122      	str	r2, [r4, #16]
 800cd92:	2201      	movs	r2, #1
 800cd94:	615a      	str	r2, [r3, #20]
 800cd96:	e7bb      	b.n	800cd10 <__gethex+0x3c8>
 800cd98:	6922      	ldr	r2, [r4, #16]
 800cd9a:	455a      	cmp	r2, fp
 800cd9c:	dd0b      	ble.n	800cdb6 <__gethex+0x46e>
 800cd9e:	2101      	movs	r1, #1
 800cda0:	4620      	mov	r0, r4
 800cda2:	f7ff fd69 	bl	800c878 <rshift>
 800cda6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cdaa:	3501      	adds	r5, #1
 800cdac:	42ab      	cmp	r3, r5
 800cdae:	f6ff aed0 	blt.w	800cb52 <__gethex+0x20a>
 800cdb2:	2701      	movs	r7, #1
 800cdb4:	e7c0      	b.n	800cd38 <__gethex+0x3f0>
 800cdb6:	f016 061f 	ands.w	r6, r6, #31
 800cdba:	d0fa      	beq.n	800cdb2 <__gethex+0x46a>
 800cdbc:	449a      	add	sl, r3
 800cdbe:	f1c6 0620 	rsb	r6, r6, #32
 800cdc2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cdc6:	f000 f9e9 	bl	800d19c <__hi0bits>
 800cdca:	42b0      	cmp	r0, r6
 800cdcc:	dbe7      	blt.n	800cd9e <__gethex+0x456>
 800cdce:	e7f0      	b.n	800cdb2 <__gethex+0x46a>
 800cdd0:	0800f734 	.word	0x0800f734

0800cdd4 <L_shift>:
 800cdd4:	f1c2 0208 	rsb	r2, r2, #8
 800cdd8:	0092      	lsls	r2, r2, #2
 800cdda:	b570      	push	{r4, r5, r6, lr}
 800cddc:	f1c2 0620 	rsb	r6, r2, #32
 800cde0:	6843      	ldr	r3, [r0, #4]
 800cde2:	6804      	ldr	r4, [r0, #0]
 800cde4:	fa03 f506 	lsl.w	r5, r3, r6
 800cde8:	432c      	orrs	r4, r5
 800cdea:	40d3      	lsrs	r3, r2
 800cdec:	6004      	str	r4, [r0, #0]
 800cdee:	f840 3f04 	str.w	r3, [r0, #4]!
 800cdf2:	4288      	cmp	r0, r1
 800cdf4:	d3f4      	bcc.n	800cde0 <L_shift+0xc>
 800cdf6:	bd70      	pop	{r4, r5, r6, pc}

0800cdf8 <__match>:
 800cdf8:	b530      	push	{r4, r5, lr}
 800cdfa:	6803      	ldr	r3, [r0, #0]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce02:	b914      	cbnz	r4, 800ce0a <__match+0x12>
 800ce04:	6003      	str	r3, [r0, #0]
 800ce06:	2001      	movs	r0, #1
 800ce08:	bd30      	pop	{r4, r5, pc}
 800ce0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ce12:	2d19      	cmp	r5, #25
 800ce14:	bf98      	it	ls
 800ce16:	3220      	addls	r2, #32
 800ce18:	42a2      	cmp	r2, r4
 800ce1a:	d0f0      	beq.n	800cdfe <__match+0x6>
 800ce1c:	2000      	movs	r0, #0
 800ce1e:	e7f3      	b.n	800ce08 <__match+0x10>

0800ce20 <__hexnan>:
 800ce20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce24:	680b      	ldr	r3, [r1, #0]
 800ce26:	6801      	ldr	r1, [r0, #0]
 800ce28:	115e      	asrs	r6, r3, #5
 800ce2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce2e:	f013 031f 	ands.w	r3, r3, #31
 800ce32:	b087      	sub	sp, #28
 800ce34:	bf18      	it	ne
 800ce36:	3604      	addne	r6, #4
 800ce38:	2500      	movs	r5, #0
 800ce3a:	1f37      	subs	r7, r6, #4
 800ce3c:	4682      	mov	sl, r0
 800ce3e:	4690      	mov	r8, r2
 800ce40:	9301      	str	r3, [sp, #4]
 800ce42:	f846 5c04 	str.w	r5, [r6, #-4]
 800ce46:	46b9      	mov	r9, r7
 800ce48:	463c      	mov	r4, r7
 800ce4a:	9502      	str	r5, [sp, #8]
 800ce4c:	46ab      	mov	fp, r5
 800ce4e:	784a      	ldrb	r2, [r1, #1]
 800ce50:	1c4b      	adds	r3, r1, #1
 800ce52:	9303      	str	r3, [sp, #12]
 800ce54:	b342      	cbz	r2, 800cea8 <__hexnan+0x88>
 800ce56:	4610      	mov	r0, r2
 800ce58:	9105      	str	r1, [sp, #20]
 800ce5a:	9204      	str	r2, [sp, #16]
 800ce5c:	f7ff fd5e 	bl	800c91c <__hexdig_fun>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	d14f      	bne.n	800cf04 <__hexnan+0xe4>
 800ce64:	9a04      	ldr	r2, [sp, #16]
 800ce66:	9905      	ldr	r1, [sp, #20]
 800ce68:	2a20      	cmp	r2, #32
 800ce6a:	d818      	bhi.n	800ce9e <__hexnan+0x7e>
 800ce6c:	9b02      	ldr	r3, [sp, #8]
 800ce6e:	459b      	cmp	fp, r3
 800ce70:	dd13      	ble.n	800ce9a <__hexnan+0x7a>
 800ce72:	454c      	cmp	r4, r9
 800ce74:	d206      	bcs.n	800ce84 <__hexnan+0x64>
 800ce76:	2d07      	cmp	r5, #7
 800ce78:	dc04      	bgt.n	800ce84 <__hexnan+0x64>
 800ce7a:	462a      	mov	r2, r5
 800ce7c:	4649      	mov	r1, r9
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f7ff ffa8 	bl	800cdd4 <L_shift>
 800ce84:	4544      	cmp	r4, r8
 800ce86:	d950      	bls.n	800cf2a <__hexnan+0x10a>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	f1a4 0904 	sub.w	r9, r4, #4
 800ce8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce92:	f8cd b008 	str.w	fp, [sp, #8]
 800ce96:	464c      	mov	r4, r9
 800ce98:	461d      	mov	r5, r3
 800ce9a:	9903      	ldr	r1, [sp, #12]
 800ce9c:	e7d7      	b.n	800ce4e <__hexnan+0x2e>
 800ce9e:	2a29      	cmp	r2, #41	; 0x29
 800cea0:	d156      	bne.n	800cf50 <__hexnan+0x130>
 800cea2:	3102      	adds	r1, #2
 800cea4:	f8ca 1000 	str.w	r1, [sl]
 800cea8:	f1bb 0f00 	cmp.w	fp, #0
 800ceac:	d050      	beq.n	800cf50 <__hexnan+0x130>
 800ceae:	454c      	cmp	r4, r9
 800ceb0:	d206      	bcs.n	800cec0 <__hexnan+0xa0>
 800ceb2:	2d07      	cmp	r5, #7
 800ceb4:	dc04      	bgt.n	800cec0 <__hexnan+0xa0>
 800ceb6:	462a      	mov	r2, r5
 800ceb8:	4649      	mov	r1, r9
 800ceba:	4620      	mov	r0, r4
 800cebc:	f7ff ff8a 	bl	800cdd4 <L_shift>
 800cec0:	4544      	cmp	r4, r8
 800cec2:	d934      	bls.n	800cf2e <__hexnan+0x10e>
 800cec4:	f1a8 0204 	sub.w	r2, r8, #4
 800cec8:	4623      	mov	r3, r4
 800ceca:	f853 1b04 	ldr.w	r1, [r3], #4
 800cece:	f842 1f04 	str.w	r1, [r2, #4]!
 800ced2:	429f      	cmp	r7, r3
 800ced4:	d2f9      	bcs.n	800ceca <__hexnan+0xaa>
 800ced6:	1b3b      	subs	r3, r7, r4
 800ced8:	f023 0303 	bic.w	r3, r3, #3
 800cedc:	3304      	adds	r3, #4
 800cede:	3401      	adds	r4, #1
 800cee0:	3e03      	subs	r6, #3
 800cee2:	42b4      	cmp	r4, r6
 800cee4:	bf88      	it	hi
 800cee6:	2304      	movhi	r3, #4
 800cee8:	4443      	add	r3, r8
 800ceea:	2200      	movs	r2, #0
 800ceec:	f843 2b04 	str.w	r2, [r3], #4
 800cef0:	429f      	cmp	r7, r3
 800cef2:	d2fb      	bcs.n	800ceec <__hexnan+0xcc>
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	b91b      	cbnz	r3, 800cf00 <__hexnan+0xe0>
 800cef8:	4547      	cmp	r7, r8
 800cefa:	d127      	bne.n	800cf4c <__hexnan+0x12c>
 800cefc:	2301      	movs	r3, #1
 800cefe:	603b      	str	r3, [r7, #0]
 800cf00:	2005      	movs	r0, #5
 800cf02:	e026      	b.n	800cf52 <__hexnan+0x132>
 800cf04:	3501      	adds	r5, #1
 800cf06:	2d08      	cmp	r5, #8
 800cf08:	f10b 0b01 	add.w	fp, fp, #1
 800cf0c:	dd06      	ble.n	800cf1c <__hexnan+0xfc>
 800cf0e:	4544      	cmp	r4, r8
 800cf10:	d9c3      	bls.n	800ce9a <__hexnan+0x7a>
 800cf12:	2300      	movs	r3, #0
 800cf14:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf18:	2501      	movs	r5, #1
 800cf1a:	3c04      	subs	r4, #4
 800cf1c:	6822      	ldr	r2, [r4, #0]
 800cf1e:	f000 000f 	and.w	r0, r0, #15
 800cf22:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cf26:	6022      	str	r2, [r4, #0]
 800cf28:	e7b7      	b.n	800ce9a <__hexnan+0x7a>
 800cf2a:	2508      	movs	r5, #8
 800cf2c:	e7b5      	b.n	800ce9a <__hexnan+0x7a>
 800cf2e:	9b01      	ldr	r3, [sp, #4]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d0df      	beq.n	800cef4 <__hexnan+0xd4>
 800cf34:	f04f 32ff 	mov.w	r2, #4294967295
 800cf38:	f1c3 0320 	rsb	r3, r3, #32
 800cf3c:	fa22 f303 	lsr.w	r3, r2, r3
 800cf40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cf44:	401a      	ands	r2, r3
 800cf46:	f846 2c04 	str.w	r2, [r6, #-4]
 800cf4a:	e7d3      	b.n	800cef4 <__hexnan+0xd4>
 800cf4c:	3f04      	subs	r7, #4
 800cf4e:	e7d1      	b.n	800cef4 <__hexnan+0xd4>
 800cf50:	2004      	movs	r0, #4
 800cf52:	b007      	add	sp, #28
 800cf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf58 <_localeconv_r>:
 800cf58:	4800      	ldr	r0, [pc, #0]	; (800cf5c <_localeconv_r+0x4>)
 800cf5a:	4770      	bx	lr
 800cf5c:	20000180 	.word	0x20000180

0800cf60 <malloc>:
 800cf60:	4b02      	ldr	r3, [pc, #8]	; (800cf6c <malloc+0xc>)
 800cf62:	4601      	mov	r1, r0
 800cf64:	6818      	ldr	r0, [r3, #0]
 800cf66:	f000 bd3d 	b.w	800d9e4 <_malloc_r>
 800cf6a:	bf00      	nop
 800cf6c:	20000028 	.word	0x20000028

0800cf70 <__ascii_mbtowc>:
 800cf70:	b082      	sub	sp, #8
 800cf72:	b901      	cbnz	r1, 800cf76 <__ascii_mbtowc+0x6>
 800cf74:	a901      	add	r1, sp, #4
 800cf76:	b142      	cbz	r2, 800cf8a <__ascii_mbtowc+0x1a>
 800cf78:	b14b      	cbz	r3, 800cf8e <__ascii_mbtowc+0x1e>
 800cf7a:	7813      	ldrb	r3, [r2, #0]
 800cf7c:	600b      	str	r3, [r1, #0]
 800cf7e:	7812      	ldrb	r2, [r2, #0]
 800cf80:	1e10      	subs	r0, r2, #0
 800cf82:	bf18      	it	ne
 800cf84:	2001      	movne	r0, #1
 800cf86:	b002      	add	sp, #8
 800cf88:	4770      	bx	lr
 800cf8a:	4610      	mov	r0, r2
 800cf8c:	e7fb      	b.n	800cf86 <__ascii_mbtowc+0x16>
 800cf8e:	f06f 0001 	mvn.w	r0, #1
 800cf92:	e7f8      	b.n	800cf86 <__ascii_mbtowc+0x16>

0800cf94 <memcpy>:
 800cf94:	440a      	add	r2, r1
 800cf96:	4291      	cmp	r1, r2
 800cf98:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf9c:	d100      	bne.n	800cfa0 <memcpy+0xc>
 800cf9e:	4770      	bx	lr
 800cfa0:	b510      	push	{r4, lr}
 800cfa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfaa:	4291      	cmp	r1, r2
 800cfac:	d1f9      	bne.n	800cfa2 <memcpy+0xe>
 800cfae:	bd10      	pop	{r4, pc}

0800cfb0 <_Balloc>:
 800cfb0:	b570      	push	{r4, r5, r6, lr}
 800cfb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	460d      	mov	r5, r1
 800cfb8:	b976      	cbnz	r6, 800cfd8 <_Balloc+0x28>
 800cfba:	2010      	movs	r0, #16
 800cfbc:	f7ff ffd0 	bl	800cf60 <malloc>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	6260      	str	r0, [r4, #36]	; 0x24
 800cfc4:	b920      	cbnz	r0, 800cfd0 <_Balloc+0x20>
 800cfc6:	4b18      	ldr	r3, [pc, #96]	; (800d028 <_Balloc+0x78>)
 800cfc8:	4818      	ldr	r0, [pc, #96]	; (800d02c <_Balloc+0x7c>)
 800cfca:	2166      	movs	r1, #102	; 0x66
 800cfcc:	f000 fef8 	bl	800ddc0 <__assert_func>
 800cfd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfd4:	6006      	str	r6, [r0, #0]
 800cfd6:	60c6      	str	r6, [r0, #12]
 800cfd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cfda:	68f3      	ldr	r3, [r6, #12]
 800cfdc:	b183      	cbz	r3, 800d000 <_Balloc+0x50>
 800cfde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cfe6:	b9b8      	cbnz	r0, 800d018 <_Balloc+0x68>
 800cfe8:	2101      	movs	r1, #1
 800cfea:	fa01 f605 	lsl.w	r6, r1, r5
 800cfee:	1d72      	adds	r2, r6, #5
 800cff0:	0092      	lsls	r2, r2, #2
 800cff2:	4620      	mov	r0, r4
 800cff4:	f000 fc97 	bl	800d926 <_calloc_r>
 800cff8:	b160      	cbz	r0, 800d014 <_Balloc+0x64>
 800cffa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cffe:	e00e      	b.n	800d01e <_Balloc+0x6e>
 800d000:	2221      	movs	r2, #33	; 0x21
 800d002:	2104      	movs	r1, #4
 800d004:	4620      	mov	r0, r4
 800d006:	f000 fc8e 	bl	800d926 <_calloc_r>
 800d00a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d00c:	60f0      	str	r0, [r6, #12]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d1e4      	bne.n	800cfde <_Balloc+0x2e>
 800d014:	2000      	movs	r0, #0
 800d016:	bd70      	pop	{r4, r5, r6, pc}
 800d018:	6802      	ldr	r2, [r0, #0]
 800d01a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d01e:	2300      	movs	r3, #0
 800d020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d024:	e7f7      	b.n	800d016 <_Balloc+0x66>
 800d026:	bf00      	nop
 800d028:	0800f6be 	.word	0x0800f6be
 800d02c:	0800f7c4 	.word	0x0800f7c4

0800d030 <_Bfree>:
 800d030:	b570      	push	{r4, r5, r6, lr}
 800d032:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d034:	4605      	mov	r5, r0
 800d036:	460c      	mov	r4, r1
 800d038:	b976      	cbnz	r6, 800d058 <_Bfree+0x28>
 800d03a:	2010      	movs	r0, #16
 800d03c:	f7ff ff90 	bl	800cf60 <malloc>
 800d040:	4602      	mov	r2, r0
 800d042:	6268      	str	r0, [r5, #36]	; 0x24
 800d044:	b920      	cbnz	r0, 800d050 <_Bfree+0x20>
 800d046:	4b09      	ldr	r3, [pc, #36]	; (800d06c <_Bfree+0x3c>)
 800d048:	4809      	ldr	r0, [pc, #36]	; (800d070 <_Bfree+0x40>)
 800d04a:	218a      	movs	r1, #138	; 0x8a
 800d04c:	f000 feb8 	bl	800ddc0 <__assert_func>
 800d050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d054:	6006      	str	r6, [r0, #0]
 800d056:	60c6      	str	r6, [r0, #12]
 800d058:	b13c      	cbz	r4, 800d06a <_Bfree+0x3a>
 800d05a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d05c:	6862      	ldr	r2, [r4, #4]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d064:	6021      	str	r1, [r4, #0]
 800d066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d06a:	bd70      	pop	{r4, r5, r6, pc}
 800d06c:	0800f6be 	.word	0x0800f6be
 800d070:	0800f7c4 	.word	0x0800f7c4

0800d074 <__multadd>:
 800d074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d078:	690e      	ldr	r6, [r1, #16]
 800d07a:	4607      	mov	r7, r0
 800d07c:	4698      	mov	r8, r3
 800d07e:	460c      	mov	r4, r1
 800d080:	f101 0014 	add.w	r0, r1, #20
 800d084:	2300      	movs	r3, #0
 800d086:	6805      	ldr	r5, [r0, #0]
 800d088:	b2a9      	uxth	r1, r5
 800d08a:	fb02 8101 	mla	r1, r2, r1, r8
 800d08e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d092:	0c2d      	lsrs	r5, r5, #16
 800d094:	fb02 c505 	mla	r5, r2, r5, ip
 800d098:	b289      	uxth	r1, r1
 800d09a:	3301      	adds	r3, #1
 800d09c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d0a0:	429e      	cmp	r6, r3
 800d0a2:	f840 1b04 	str.w	r1, [r0], #4
 800d0a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d0aa:	dcec      	bgt.n	800d086 <__multadd+0x12>
 800d0ac:	f1b8 0f00 	cmp.w	r8, #0
 800d0b0:	d022      	beq.n	800d0f8 <__multadd+0x84>
 800d0b2:	68a3      	ldr	r3, [r4, #8]
 800d0b4:	42b3      	cmp	r3, r6
 800d0b6:	dc19      	bgt.n	800d0ec <__multadd+0x78>
 800d0b8:	6861      	ldr	r1, [r4, #4]
 800d0ba:	4638      	mov	r0, r7
 800d0bc:	3101      	adds	r1, #1
 800d0be:	f7ff ff77 	bl	800cfb0 <_Balloc>
 800d0c2:	4605      	mov	r5, r0
 800d0c4:	b928      	cbnz	r0, 800d0d2 <__multadd+0x5e>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	4b0d      	ldr	r3, [pc, #52]	; (800d100 <__multadd+0x8c>)
 800d0ca:	480e      	ldr	r0, [pc, #56]	; (800d104 <__multadd+0x90>)
 800d0cc:	21b5      	movs	r1, #181	; 0xb5
 800d0ce:	f000 fe77 	bl	800ddc0 <__assert_func>
 800d0d2:	6922      	ldr	r2, [r4, #16]
 800d0d4:	3202      	adds	r2, #2
 800d0d6:	f104 010c 	add.w	r1, r4, #12
 800d0da:	0092      	lsls	r2, r2, #2
 800d0dc:	300c      	adds	r0, #12
 800d0de:	f7ff ff59 	bl	800cf94 <memcpy>
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	4638      	mov	r0, r7
 800d0e6:	f7ff ffa3 	bl	800d030 <_Bfree>
 800d0ea:	462c      	mov	r4, r5
 800d0ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d0f0:	3601      	adds	r6, #1
 800d0f2:	f8c3 8014 	str.w	r8, [r3, #20]
 800d0f6:	6126      	str	r6, [r4, #16]
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0fe:	bf00      	nop
 800d100:	0800f734 	.word	0x0800f734
 800d104:	0800f7c4 	.word	0x0800f7c4

0800d108 <__s2b>:
 800d108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d10c:	460c      	mov	r4, r1
 800d10e:	4615      	mov	r5, r2
 800d110:	461f      	mov	r7, r3
 800d112:	2209      	movs	r2, #9
 800d114:	3308      	adds	r3, #8
 800d116:	4606      	mov	r6, r0
 800d118:	fb93 f3f2 	sdiv	r3, r3, r2
 800d11c:	2100      	movs	r1, #0
 800d11e:	2201      	movs	r2, #1
 800d120:	429a      	cmp	r2, r3
 800d122:	db09      	blt.n	800d138 <__s2b+0x30>
 800d124:	4630      	mov	r0, r6
 800d126:	f7ff ff43 	bl	800cfb0 <_Balloc>
 800d12a:	b940      	cbnz	r0, 800d13e <__s2b+0x36>
 800d12c:	4602      	mov	r2, r0
 800d12e:	4b19      	ldr	r3, [pc, #100]	; (800d194 <__s2b+0x8c>)
 800d130:	4819      	ldr	r0, [pc, #100]	; (800d198 <__s2b+0x90>)
 800d132:	21ce      	movs	r1, #206	; 0xce
 800d134:	f000 fe44 	bl	800ddc0 <__assert_func>
 800d138:	0052      	lsls	r2, r2, #1
 800d13a:	3101      	adds	r1, #1
 800d13c:	e7f0      	b.n	800d120 <__s2b+0x18>
 800d13e:	9b08      	ldr	r3, [sp, #32]
 800d140:	6143      	str	r3, [r0, #20]
 800d142:	2d09      	cmp	r5, #9
 800d144:	f04f 0301 	mov.w	r3, #1
 800d148:	6103      	str	r3, [r0, #16]
 800d14a:	dd16      	ble.n	800d17a <__s2b+0x72>
 800d14c:	f104 0909 	add.w	r9, r4, #9
 800d150:	46c8      	mov	r8, r9
 800d152:	442c      	add	r4, r5
 800d154:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d158:	4601      	mov	r1, r0
 800d15a:	3b30      	subs	r3, #48	; 0x30
 800d15c:	220a      	movs	r2, #10
 800d15e:	4630      	mov	r0, r6
 800d160:	f7ff ff88 	bl	800d074 <__multadd>
 800d164:	45a0      	cmp	r8, r4
 800d166:	d1f5      	bne.n	800d154 <__s2b+0x4c>
 800d168:	f1a5 0408 	sub.w	r4, r5, #8
 800d16c:	444c      	add	r4, r9
 800d16e:	1b2d      	subs	r5, r5, r4
 800d170:	1963      	adds	r3, r4, r5
 800d172:	42bb      	cmp	r3, r7
 800d174:	db04      	blt.n	800d180 <__s2b+0x78>
 800d176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d17a:	340a      	adds	r4, #10
 800d17c:	2509      	movs	r5, #9
 800d17e:	e7f6      	b.n	800d16e <__s2b+0x66>
 800d180:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d184:	4601      	mov	r1, r0
 800d186:	3b30      	subs	r3, #48	; 0x30
 800d188:	220a      	movs	r2, #10
 800d18a:	4630      	mov	r0, r6
 800d18c:	f7ff ff72 	bl	800d074 <__multadd>
 800d190:	e7ee      	b.n	800d170 <__s2b+0x68>
 800d192:	bf00      	nop
 800d194:	0800f734 	.word	0x0800f734
 800d198:	0800f7c4 	.word	0x0800f7c4

0800d19c <__hi0bits>:
 800d19c:	0c03      	lsrs	r3, r0, #16
 800d19e:	041b      	lsls	r3, r3, #16
 800d1a0:	b9d3      	cbnz	r3, 800d1d8 <__hi0bits+0x3c>
 800d1a2:	0400      	lsls	r0, r0, #16
 800d1a4:	2310      	movs	r3, #16
 800d1a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d1aa:	bf04      	itt	eq
 800d1ac:	0200      	lsleq	r0, r0, #8
 800d1ae:	3308      	addeq	r3, #8
 800d1b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d1b4:	bf04      	itt	eq
 800d1b6:	0100      	lsleq	r0, r0, #4
 800d1b8:	3304      	addeq	r3, #4
 800d1ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d1be:	bf04      	itt	eq
 800d1c0:	0080      	lsleq	r0, r0, #2
 800d1c2:	3302      	addeq	r3, #2
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	db05      	blt.n	800d1d4 <__hi0bits+0x38>
 800d1c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d1cc:	f103 0301 	add.w	r3, r3, #1
 800d1d0:	bf08      	it	eq
 800d1d2:	2320      	moveq	r3, #32
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	4770      	bx	lr
 800d1d8:	2300      	movs	r3, #0
 800d1da:	e7e4      	b.n	800d1a6 <__hi0bits+0xa>

0800d1dc <__lo0bits>:
 800d1dc:	6803      	ldr	r3, [r0, #0]
 800d1de:	f013 0207 	ands.w	r2, r3, #7
 800d1e2:	4601      	mov	r1, r0
 800d1e4:	d00b      	beq.n	800d1fe <__lo0bits+0x22>
 800d1e6:	07da      	lsls	r2, r3, #31
 800d1e8:	d424      	bmi.n	800d234 <__lo0bits+0x58>
 800d1ea:	0798      	lsls	r0, r3, #30
 800d1ec:	bf49      	itett	mi
 800d1ee:	085b      	lsrmi	r3, r3, #1
 800d1f0:	089b      	lsrpl	r3, r3, #2
 800d1f2:	2001      	movmi	r0, #1
 800d1f4:	600b      	strmi	r3, [r1, #0]
 800d1f6:	bf5c      	itt	pl
 800d1f8:	600b      	strpl	r3, [r1, #0]
 800d1fa:	2002      	movpl	r0, #2
 800d1fc:	4770      	bx	lr
 800d1fe:	b298      	uxth	r0, r3
 800d200:	b9b0      	cbnz	r0, 800d230 <__lo0bits+0x54>
 800d202:	0c1b      	lsrs	r3, r3, #16
 800d204:	2010      	movs	r0, #16
 800d206:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d20a:	bf04      	itt	eq
 800d20c:	0a1b      	lsreq	r3, r3, #8
 800d20e:	3008      	addeq	r0, #8
 800d210:	071a      	lsls	r2, r3, #28
 800d212:	bf04      	itt	eq
 800d214:	091b      	lsreq	r3, r3, #4
 800d216:	3004      	addeq	r0, #4
 800d218:	079a      	lsls	r2, r3, #30
 800d21a:	bf04      	itt	eq
 800d21c:	089b      	lsreq	r3, r3, #2
 800d21e:	3002      	addeq	r0, #2
 800d220:	07da      	lsls	r2, r3, #31
 800d222:	d403      	bmi.n	800d22c <__lo0bits+0x50>
 800d224:	085b      	lsrs	r3, r3, #1
 800d226:	f100 0001 	add.w	r0, r0, #1
 800d22a:	d005      	beq.n	800d238 <__lo0bits+0x5c>
 800d22c:	600b      	str	r3, [r1, #0]
 800d22e:	4770      	bx	lr
 800d230:	4610      	mov	r0, r2
 800d232:	e7e8      	b.n	800d206 <__lo0bits+0x2a>
 800d234:	2000      	movs	r0, #0
 800d236:	4770      	bx	lr
 800d238:	2020      	movs	r0, #32
 800d23a:	4770      	bx	lr

0800d23c <__i2b>:
 800d23c:	b510      	push	{r4, lr}
 800d23e:	460c      	mov	r4, r1
 800d240:	2101      	movs	r1, #1
 800d242:	f7ff feb5 	bl	800cfb0 <_Balloc>
 800d246:	4602      	mov	r2, r0
 800d248:	b928      	cbnz	r0, 800d256 <__i2b+0x1a>
 800d24a:	4b05      	ldr	r3, [pc, #20]	; (800d260 <__i2b+0x24>)
 800d24c:	4805      	ldr	r0, [pc, #20]	; (800d264 <__i2b+0x28>)
 800d24e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d252:	f000 fdb5 	bl	800ddc0 <__assert_func>
 800d256:	2301      	movs	r3, #1
 800d258:	6144      	str	r4, [r0, #20]
 800d25a:	6103      	str	r3, [r0, #16]
 800d25c:	bd10      	pop	{r4, pc}
 800d25e:	bf00      	nop
 800d260:	0800f734 	.word	0x0800f734
 800d264:	0800f7c4 	.word	0x0800f7c4

0800d268 <__multiply>:
 800d268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26c:	4614      	mov	r4, r2
 800d26e:	690a      	ldr	r2, [r1, #16]
 800d270:	6923      	ldr	r3, [r4, #16]
 800d272:	429a      	cmp	r2, r3
 800d274:	bfb8      	it	lt
 800d276:	460b      	movlt	r3, r1
 800d278:	460d      	mov	r5, r1
 800d27a:	bfbc      	itt	lt
 800d27c:	4625      	movlt	r5, r4
 800d27e:	461c      	movlt	r4, r3
 800d280:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d284:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d288:	68ab      	ldr	r3, [r5, #8]
 800d28a:	6869      	ldr	r1, [r5, #4]
 800d28c:	eb0a 0709 	add.w	r7, sl, r9
 800d290:	42bb      	cmp	r3, r7
 800d292:	b085      	sub	sp, #20
 800d294:	bfb8      	it	lt
 800d296:	3101      	addlt	r1, #1
 800d298:	f7ff fe8a 	bl	800cfb0 <_Balloc>
 800d29c:	b930      	cbnz	r0, 800d2ac <__multiply+0x44>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	4b42      	ldr	r3, [pc, #264]	; (800d3ac <__multiply+0x144>)
 800d2a2:	4843      	ldr	r0, [pc, #268]	; (800d3b0 <__multiply+0x148>)
 800d2a4:	f240 115d 	movw	r1, #349	; 0x15d
 800d2a8:	f000 fd8a 	bl	800ddc0 <__assert_func>
 800d2ac:	f100 0614 	add.w	r6, r0, #20
 800d2b0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d2b4:	4633      	mov	r3, r6
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	4543      	cmp	r3, r8
 800d2ba:	d31e      	bcc.n	800d2fa <__multiply+0x92>
 800d2bc:	f105 0c14 	add.w	ip, r5, #20
 800d2c0:	f104 0314 	add.w	r3, r4, #20
 800d2c4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d2c8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d2cc:	9202      	str	r2, [sp, #8]
 800d2ce:	ebac 0205 	sub.w	r2, ip, r5
 800d2d2:	3a15      	subs	r2, #21
 800d2d4:	f022 0203 	bic.w	r2, r2, #3
 800d2d8:	3204      	adds	r2, #4
 800d2da:	f105 0115 	add.w	r1, r5, #21
 800d2de:	458c      	cmp	ip, r1
 800d2e0:	bf38      	it	cc
 800d2e2:	2204      	movcc	r2, #4
 800d2e4:	9201      	str	r2, [sp, #4]
 800d2e6:	9a02      	ldr	r2, [sp, #8]
 800d2e8:	9303      	str	r3, [sp, #12]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d808      	bhi.n	800d300 <__multiply+0x98>
 800d2ee:	2f00      	cmp	r7, #0
 800d2f0:	dc55      	bgt.n	800d39e <__multiply+0x136>
 800d2f2:	6107      	str	r7, [r0, #16]
 800d2f4:	b005      	add	sp, #20
 800d2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2fa:	f843 2b04 	str.w	r2, [r3], #4
 800d2fe:	e7db      	b.n	800d2b8 <__multiply+0x50>
 800d300:	f8b3 a000 	ldrh.w	sl, [r3]
 800d304:	f1ba 0f00 	cmp.w	sl, #0
 800d308:	d020      	beq.n	800d34c <__multiply+0xe4>
 800d30a:	f105 0e14 	add.w	lr, r5, #20
 800d30e:	46b1      	mov	r9, r6
 800d310:	2200      	movs	r2, #0
 800d312:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d316:	f8d9 b000 	ldr.w	fp, [r9]
 800d31a:	b2a1      	uxth	r1, r4
 800d31c:	fa1f fb8b 	uxth.w	fp, fp
 800d320:	fb0a b101 	mla	r1, sl, r1, fp
 800d324:	4411      	add	r1, r2
 800d326:	f8d9 2000 	ldr.w	r2, [r9]
 800d32a:	0c24      	lsrs	r4, r4, #16
 800d32c:	0c12      	lsrs	r2, r2, #16
 800d32e:	fb0a 2404 	mla	r4, sl, r4, r2
 800d332:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d336:	b289      	uxth	r1, r1
 800d338:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d33c:	45f4      	cmp	ip, lr
 800d33e:	f849 1b04 	str.w	r1, [r9], #4
 800d342:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d346:	d8e4      	bhi.n	800d312 <__multiply+0xaa>
 800d348:	9901      	ldr	r1, [sp, #4]
 800d34a:	5072      	str	r2, [r6, r1]
 800d34c:	9a03      	ldr	r2, [sp, #12]
 800d34e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d352:	3304      	adds	r3, #4
 800d354:	f1b9 0f00 	cmp.w	r9, #0
 800d358:	d01f      	beq.n	800d39a <__multiply+0x132>
 800d35a:	6834      	ldr	r4, [r6, #0]
 800d35c:	f105 0114 	add.w	r1, r5, #20
 800d360:	46b6      	mov	lr, r6
 800d362:	f04f 0a00 	mov.w	sl, #0
 800d366:	880a      	ldrh	r2, [r1, #0]
 800d368:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d36c:	fb09 b202 	mla	r2, r9, r2, fp
 800d370:	4492      	add	sl, r2
 800d372:	b2a4      	uxth	r4, r4
 800d374:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d378:	f84e 4b04 	str.w	r4, [lr], #4
 800d37c:	f851 4b04 	ldr.w	r4, [r1], #4
 800d380:	f8be 2000 	ldrh.w	r2, [lr]
 800d384:	0c24      	lsrs	r4, r4, #16
 800d386:	fb09 2404 	mla	r4, r9, r4, r2
 800d38a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d38e:	458c      	cmp	ip, r1
 800d390:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d394:	d8e7      	bhi.n	800d366 <__multiply+0xfe>
 800d396:	9a01      	ldr	r2, [sp, #4]
 800d398:	50b4      	str	r4, [r6, r2]
 800d39a:	3604      	adds	r6, #4
 800d39c:	e7a3      	b.n	800d2e6 <__multiply+0x7e>
 800d39e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1a5      	bne.n	800d2f2 <__multiply+0x8a>
 800d3a6:	3f01      	subs	r7, #1
 800d3a8:	e7a1      	b.n	800d2ee <__multiply+0x86>
 800d3aa:	bf00      	nop
 800d3ac:	0800f734 	.word	0x0800f734
 800d3b0:	0800f7c4 	.word	0x0800f7c4

0800d3b4 <__pow5mult>:
 800d3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b8:	4615      	mov	r5, r2
 800d3ba:	f012 0203 	ands.w	r2, r2, #3
 800d3be:	4606      	mov	r6, r0
 800d3c0:	460f      	mov	r7, r1
 800d3c2:	d007      	beq.n	800d3d4 <__pow5mult+0x20>
 800d3c4:	4c25      	ldr	r4, [pc, #148]	; (800d45c <__pow5mult+0xa8>)
 800d3c6:	3a01      	subs	r2, #1
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3ce:	f7ff fe51 	bl	800d074 <__multadd>
 800d3d2:	4607      	mov	r7, r0
 800d3d4:	10ad      	asrs	r5, r5, #2
 800d3d6:	d03d      	beq.n	800d454 <__pow5mult+0xa0>
 800d3d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d3da:	b97c      	cbnz	r4, 800d3fc <__pow5mult+0x48>
 800d3dc:	2010      	movs	r0, #16
 800d3de:	f7ff fdbf 	bl	800cf60 <malloc>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	6270      	str	r0, [r6, #36]	; 0x24
 800d3e6:	b928      	cbnz	r0, 800d3f4 <__pow5mult+0x40>
 800d3e8:	4b1d      	ldr	r3, [pc, #116]	; (800d460 <__pow5mult+0xac>)
 800d3ea:	481e      	ldr	r0, [pc, #120]	; (800d464 <__pow5mult+0xb0>)
 800d3ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d3f0:	f000 fce6 	bl	800ddc0 <__assert_func>
 800d3f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3f8:	6004      	str	r4, [r0, #0]
 800d3fa:	60c4      	str	r4, [r0, #12]
 800d3fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d400:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d404:	b94c      	cbnz	r4, 800d41a <__pow5mult+0x66>
 800d406:	f240 2171 	movw	r1, #625	; 0x271
 800d40a:	4630      	mov	r0, r6
 800d40c:	f7ff ff16 	bl	800d23c <__i2b>
 800d410:	2300      	movs	r3, #0
 800d412:	f8c8 0008 	str.w	r0, [r8, #8]
 800d416:	4604      	mov	r4, r0
 800d418:	6003      	str	r3, [r0, #0]
 800d41a:	f04f 0900 	mov.w	r9, #0
 800d41e:	07eb      	lsls	r3, r5, #31
 800d420:	d50a      	bpl.n	800d438 <__pow5mult+0x84>
 800d422:	4639      	mov	r1, r7
 800d424:	4622      	mov	r2, r4
 800d426:	4630      	mov	r0, r6
 800d428:	f7ff ff1e 	bl	800d268 <__multiply>
 800d42c:	4639      	mov	r1, r7
 800d42e:	4680      	mov	r8, r0
 800d430:	4630      	mov	r0, r6
 800d432:	f7ff fdfd 	bl	800d030 <_Bfree>
 800d436:	4647      	mov	r7, r8
 800d438:	106d      	asrs	r5, r5, #1
 800d43a:	d00b      	beq.n	800d454 <__pow5mult+0xa0>
 800d43c:	6820      	ldr	r0, [r4, #0]
 800d43e:	b938      	cbnz	r0, 800d450 <__pow5mult+0x9c>
 800d440:	4622      	mov	r2, r4
 800d442:	4621      	mov	r1, r4
 800d444:	4630      	mov	r0, r6
 800d446:	f7ff ff0f 	bl	800d268 <__multiply>
 800d44a:	6020      	str	r0, [r4, #0]
 800d44c:	f8c0 9000 	str.w	r9, [r0]
 800d450:	4604      	mov	r4, r0
 800d452:	e7e4      	b.n	800d41e <__pow5mult+0x6a>
 800d454:	4638      	mov	r0, r7
 800d456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d45a:	bf00      	nop
 800d45c:	0800f918 	.word	0x0800f918
 800d460:	0800f6be 	.word	0x0800f6be
 800d464:	0800f7c4 	.word	0x0800f7c4

0800d468 <__lshift>:
 800d468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d46c:	460c      	mov	r4, r1
 800d46e:	6849      	ldr	r1, [r1, #4]
 800d470:	6923      	ldr	r3, [r4, #16]
 800d472:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d476:	68a3      	ldr	r3, [r4, #8]
 800d478:	4607      	mov	r7, r0
 800d47a:	4691      	mov	r9, r2
 800d47c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d480:	f108 0601 	add.w	r6, r8, #1
 800d484:	42b3      	cmp	r3, r6
 800d486:	db0b      	blt.n	800d4a0 <__lshift+0x38>
 800d488:	4638      	mov	r0, r7
 800d48a:	f7ff fd91 	bl	800cfb0 <_Balloc>
 800d48e:	4605      	mov	r5, r0
 800d490:	b948      	cbnz	r0, 800d4a6 <__lshift+0x3e>
 800d492:	4602      	mov	r2, r0
 800d494:	4b28      	ldr	r3, [pc, #160]	; (800d538 <__lshift+0xd0>)
 800d496:	4829      	ldr	r0, [pc, #164]	; (800d53c <__lshift+0xd4>)
 800d498:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d49c:	f000 fc90 	bl	800ddc0 <__assert_func>
 800d4a0:	3101      	adds	r1, #1
 800d4a2:	005b      	lsls	r3, r3, #1
 800d4a4:	e7ee      	b.n	800d484 <__lshift+0x1c>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	f100 0114 	add.w	r1, r0, #20
 800d4ac:	f100 0210 	add.w	r2, r0, #16
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	4553      	cmp	r3, sl
 800d4b4:	db33      	blt.n	800d51e <__lshift+0xb6>
 800d4b6:	6920      	ldr	r0, [r4, #16]
 800d4b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4bc:	f104 0314 	add.w	r3, r4, #20
 800d4c0:	f019 091f 	ands.w	r9, r9, #31
 800d4c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4cc:	d02b      	beq.n	800d526 <__lshift+0xbe>
 800d4ce:	f1c9 0e20 	rsb	lr, r9, #32
 800d4d2:	468a      	mov	sl, r1
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	6818      	ldr	r0, [r3, #0]
 800d4d8:	fa00 f009 	lsl.w	r0, r0, r9
 800d4dc:	4302      	orrs	r2, r0
 800d4de:	f84a 2b04 	str.w	r2, [sl], #4
 800d4e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4e6:	459c      	cmp	ip, r3
 800d4e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4ec:	d8f3      	bhi.n	800d4d6 <__lshift+0x6e>
 800d4ee:	ebac 0304 	sub.w	r3, ip, r4
 800d4f2:	3b15      	subs	r3, #21
 800d4f4:	f023 0303 	bic.w	r3, r3, #3
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	f104 0015 	add.w	r0, r4, #21
 800d4fe:	4584      	cmp	ip, r0
 800d500:	bf38      	it	cc
 800d502:	2304      	movcc	r3, #4
 800d504:	50ca      	str	r2, [r1, r3]
 800d506:	b10a      	cbz	r2, 800d50c <__lshift+0xa4>
 800d508:	f108 0602 	add.w	r6, r8, #2
 800d50c:	3e01      	subs	r6, #1
 800d50e:	4638      	mov	r0, r7
 800d510:	612e      	str	r6, [r5, #16]
 800d512:	4621      	mov	r1, r4
 800d514:	f7ff fd8c 	bl	800d030 <_Bfree>
 800d518:	4628      	mov	r0, r5
 800d51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d51e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d522:	3301      	adds	r3, #1
 800d524:	e7c5      	b.n	800d4b2 <__lshift+0x4a>
 800d526:	3904      	subs	r1, #4
 800d528:	f853 2b04 	ldr.w	r2, [r3], #4
 800d52c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d530:	459c      	cmp	ip, r3
 800d532:	d8f9      	bhi.n	800d528 <__lshift+0xc0>
 800d534:	e7ea      	b.n	800d50c <__lshift+0xa4>
 800d536:	bf00      	nop
 800d538:	0800f734 	.word	0x0800f734
 800d53c:	0800f7c4 	.word	0x0800f7c4

0800d540 <__mcmp>:
 800d540:	b530      	push	{r4, r5, lr}
 800d542:	6902      	ldr	r2, [r0, #16]
 800d544:	690c      	ldr	r4, [r1, #16]
 800d546:	1b12      	subs	r2, r2, r4
 800d548:	d10e      	bne.n	800d568 <__mcmp+0x28>
 800d54a:	f100 0314 	add.w	r3, r0, #20
 800d54e:	3114      	adds	r1, #20
 800d550:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d554:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d558:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d55c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d560:	42a5      	cmp	r5, r4
 800d562:	d003      	beq.n	800d56c <__mcmp+0x2c>
 800d564:	d305      	bcc.n	800d572 <__mcmp+0x32>
 800d566:	2201      	movs	r2, #1
 800d568:	4610      	mov	r0, r2
 800d56a:	bd30      	pop	{r4, r5, pc}
 800d56c:	4283      	cmp	r3, r0
 800d56e:	d3f3      	bcc.n	800d558 <__mcmp+0x18>
 800d570:	e7fa      	b.n	800d568 <__mcmp+0x28>
 800d572:	f04f 32ff 	mov.w	r2, #4294967295
 800d576:	e7f7      	b.n	800d568 <__mcmp+0x28>

0800d578 <__mdiff>:
 800d578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d57c:	460c      	mov	r4, r1
 800d57e:	4606      	mov	r6, r0
 800d580:	4611      	mov	r1, r2
 800d582:	4620      	mov	r0, r4
 800d584:	4617      	mov	r7, r2
 800d586:	f7ff ffdb 	bl	800d540 <__mcmp>
 800d58a:	1e05      	subs	r5, r0, #0
 800d58c:	d110      	bne.n	800d5b0 <__mdiff+0x38>
 800d58e:	4629      	mov	r1, r5
 800d590:	4630      	mov	r0, r6
 800d592:	f7ff fd0d 	bl	800cfb0 <_Balloc>
 800d596:	b930      	cbnz	r0, 800d5a6 <__mdiff+0x2e>
 800d598:	4b39      	ldr	r3, [pc, #228]	; (800d680 <__mdiff+0x108>)
 800d59a:	4602      	mov	r2, r0
 800d59c:	f240 2132 	movw	r1, #562	; 0x232
 800d5a0:	4838      	ldr	r0, [pc, #224]	; (800d684 <__mdiff+0x10c>)
 800d5a2:	f000 fc0d 	bl	800ddc0 <__assert_func>
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d5ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b0:	bfa4      	itt	ge
 800d5b2:	463b      	movge	r3, r7
 800d5b4:	4627      	movge	r7, r4
 800d5b6:	4630      	mov	r0, r6
 800d5b8:	6879      	ldr	r1, [r7, #4]
 800d5ba:	bfa6      	itte	ge
 800d5bc:	461c      	movge	r4, r3
 800d5be:	2500      	movge	r5, #0
 800d5c0:	2501      	movlt	r5, #1
 800d5c2:	f7ff fcf5 	bl	800cfb0 <_Balloc>
 800d5c6:	b920      	cbnz	r0, 800d5d2 <__mdiff+0x5a>
 800d5c8:	4b2d      	ldr	r3, [pc, #180]	; (800d680 <__mdiff+0x108>)
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d5d0:	e7e6      	b.n	800d5a0 <__mdiff+0x28>
 800d5d2:	693e      	ldr	r6, [r7, #16]
 800d5d4:	60c5      	str	r5, [r0, #12]
 800d5d6:	6925      	ldr	r5, [r4, #16]
 800d5d8:	f107 0114 	add.w	r1, r7, #20
 800d5dc:	f104 0914 	add.w	r9, r4, #20
 800d5e0:	f100 0e14 	add.w	lr, r0, #20
 800d5e4:	f107 0210 	add.w	r2, r7, #16
 800d5e8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d5ec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d5f0:	46f2      	mov	sl, lr
 800d5f2:	2700      	movs	r7, #0
 800d5f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d5f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d5fc:	fa1f f883 	uxth.w	r8, r3
 800d600:	fa17 f78b 	uxtah	r7, r7, fp
 800d604:	0c1b      	lsrs	r3, r3, #16
 800d606:	eba7 0808 	sub.w	r8, r7, r8
 800d60a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d60e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d612:	fa1f f888 	uxth.w	r8, r8
 800d616:	141f      	asrs	r7, r3, #16
 800d618:	454d      	cmp	r5, r9
 800d61a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d61e:	f84a 3b04 	str.w	r3, [sl], #4
 800d622:	d8e7      	bhi.n	800d5f4 <__mdiff+0x7c>
 800d624:	1b2b      	subs	r3, r5, r4
 800d626:	3b15      	subs	r3, #21
 800d628:	f023 0303 	bic.w	r3, r3, #3
 800d62c:	3304      	adds	r3, #4
 800d62e:	3415      	adds	r4, #21
 800d630:	42a5      	cmp	r5, r4
 800d632:	bf38      	it	cc
 800d634:	2304      	movcc	r3, #4
 800d636:	4419      	add	r1, r3
 800d638:	4473      	add	r3, lr
 800d63a:	469e      	mov	lr, r3
 800d63c:	460d      	mov	r5, r1
 800d63e:	4565      	cmp	r5, ip
 800d640:	d30e      	bcc.n	800d660 <__mdiff+0xe8>
 800d642:	f10c 0203 	add.w	r2, ip, #3
 800d646:	1a52      	subs	r2, r2, r1
 800d648:	f022 0203 	bic.w	r2, r2, #3
 800d64c:	3903      	subs	r1, #3
 800d64e:	458c      	cmp	ip, r1
 800d650:	bf38      	it	cc
 800d652:	2200      	movcc	r2, #0
 800d654:	441a      	add	r2, r3
 800d656:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d65a:	b17b      	cbz	r3, 800d67c <__mdiff+0x104>
 800d65c:	6106      	str	r6, [r0, #16]
 800d65e:	e7a5      	b.n	800d5ac <__mdiff+0x34>
 800d660:	f855 8b04 	ldr.w	r8, [r5], #4
 800d664:	fa17 f488 	uxtah	r4, r7, r8
 800d668:	1422      	asrs	r2, r4, #16
 800d66a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d66e:	b2a4      	uxth	r4, r4
 800d670:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d674:	f84e 4b04 	str.w	r4, [lr], #4
 800d678:	1417      	asrs	r7, r2, #16
 800d67a:	e7e0      	b.n	800d63e <__mdiff+0xc6>
 800d67c:	3e01      	subs	r6, #1
 800d67e:	e7ea      	b.n	800d656 <__mdiff+0xde>
 800d680:	0800f734 	.word	0x0800f734
 800d684:	0800f7c4 	.word	0x0800f7c4

0800d688 <__ulp>:
 800d688:	b082      	sub	sp, #8
 800d68a:	ed8d 0b00 	vstr	d0, [sp]
 800d68e:	9b01      	ldr	r3, [sp, #4]
 800d690:	4912      	ldr	r1, [pc, #72]	; (800d6dc <__ulp+0x54>)
 800d692:	4019      	ands	r1, r3
 800d694:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d698:	2900      	cmp	r1, #0
 800d69a:	dd05      	ble.n	800d6a8 <__ulp+0x20>
 800d69c:	2200      	movs	r2, #0
 800d69e:	460b      	mov	r3, r1
 800d6a0:	ec43 2b10 	vmov	d0, r2, r3
 800d6a4:	b002      	add	sp, #8
 800d6a6:	4770      	bx	lr
 800d6a8:	4249      	negs	r1, r1
 800d6aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d6ae:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d6b2:	f04f 0200 	mov.w	r2, #0
 800d6b6:	f04f 0300 	mov.w	r3, #0
 800d6ba:	da04      	bge.n	800d6c6 <__ulp+0x3e>
 800d6bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d6c0:	fa41 f300 	asr.w	r3, r1, r0
 800d6c4:	e7ec      	b.n	800d6a0 <__ulp+0x18>
 800d6c6:	f1a0 0114 	sub.w	r1, r0, #20
 800d6ca:	291e      	cmp	r1, #30
 800d6cc:	bfda      	itte	le
 800d6ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d6d2:	fa20 f101 	lsrle.w	r1, r0, r1
 800d6d6:	2101      	movgt	r1, #1
 800d6d8:	460a      	mov	r2, r1
 800d6da:	e7e1      	b.n	800d6a0 <__ulp+0x18>
 800d6dc:	7ff00000 	.word	0x7ff00000

0800d6e0 <__b2d>:
 800d6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e2:	6905      	ldr	r5, [r0, #16]
 800d6e4:	f100 0714 	add.w	r7, r0, #20
 800d6e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d6ec:	1f2e      	subs	r6, r5, #4
 800d6ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	f7ff fd52 	bl	800d19c <__hi0bits>
 800d6f8:	f1c0 0320 	rsb	r3, r0, #32
 800d6fc:	280a      	cmp	r0, #10
 800d6fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d77c <__b2d+0x9c>
 800d702:	600b      	str	r3, [r1, #0]
 800d704:	dc14      	bgt.n	800d730 <__b2d+0x50>
 800d706:	f1c0 0e0b 	rsb	lr, r0, #11
 800d70a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d70e:	42b7      	cmp	r7, r6
 800d710:	ea41 030c 	orr.w	r3, r1, ip
 800d714:	bf34      	ite	cc
 800d716:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d71a:	2100      	movcs	r1, #0
 800d71c:	3015      	adds	r0, #21
 800d71e:	fa04 f000 	lsl.w	r0, r4, r0
 800d722:	fa21 f10e 	lsr.w	r1, r1, lr
 800d726:	ea40 0201 	orr.w	r2, r0, r1
 800d72a:	ec43 2b10 	vmov	d0, r2, r3
 800d72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d730:	42b7      	cmp	r7, r6
 800d732:	bf3a      	itte	cc
 800d734:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d738:	f1a5 0608 	subcc.w	r6, r5, #8
 800d73c:	2100      	movcs	r1, #0
 800d73e:	380b      	subs	r0, #11
 800d740:	d017      	beq.n	800d772 <__b2d+0x92>
 800d742:	f1c0 0c20 	rsb	ip, r0, #32
 800d746:	fa04 f500 	lsl.w	r5, r4, r0
 800d74a:	42be      	cmp	r6, r7
 800d74c:	fa21 f40c 	lsr.w	r4, r1, ip
 800d750:	ea45 0504 	orr.w	r5, r5, r4
 800d754:	bf8c      	ite	hi
 800d756:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d75a:	2400      	movls	r4, #0
 800d75c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d760:	fa01 f000 	lsl.w	r0, r1, r0
 800d764:	fa24 f40c 	lsr.w	r4, r4, ip
 800d768:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d76c:	ea40 0204 	orr.w	r2, r0, r4
 800d770:	e7db      	b.n	800d72a <__b2d+0x4a>
 800d772:	ea44 030c 	orr.w	r3, r4, ip
 800d776:	460a      	mov	r2, r1
 800d778:	e7d7      	b.n	800d72a <__b2d+0x4a>
 800d77a:	bf00      	nop
 800d77c:	3ff00000 	.word	0x3ff00000

0800d780 <__d2b>:
 800d780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d784:	4689      	mov	r9, r1
 800d786:	2101      	movs	r1, #1
 800d788:	ec57 6b10 	vmov	r6, r7, d0
 800d78c:	4690      	mov	r8, r2
 800d78e:	f7ff fc0f 	bl	800cfb0 <_Balloc>
 800d792:	4604      	mov	r4, r0
 800d794:	b930      	cbnz	r0, 800d7a4 <__d2b+0x24>
 800d796:	4602      	mov	r2, r0
 800d798:	4b25      	ldr	r3, [pc, #148]	; (800d830 <__d2b+0xb0>)
 800d79a:	4826      	ldr	r0, [pc, #152]	; (800d834 <__d2b+0xb4>)
 800d79c:	f240 310a 	movw	r1, #778	; 0x30a
 800d7a0:	f000 fb0e 	bl	800ddc0 <__assert_func>
 800d7a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d7a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d7ac:	bb35      	cbnz	r5, 800d7fc <__d2b+0x7c>
 800d7ae:	2e00      	cmp	r6, #0
 800d7b0:	9301      	str	r3, [sp, #4]
 800d7b2:	d028      	beq.n	800d806 <__d2b+0x86>
 800d7b4:	4668      	mov	r0, sp
 800d7b6:	9600      	str	r6, [sp, #0]
 800d7b8:	f7ff fd10 	bl	800d1dc <__lo0bits>
 800d7bc:	9900      	ldr	r1, [sp, #0]
 800d7be:	b300      	cbz	r0, 800d802 <__d2b+0x82>
 800d7c0:	9a01      	ldr	r2, [sp, #4]
 800d7c2:	f1c0 0320 	rsb	r3, r0, #32
 800d7c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7ca:	430b      	orrs	r3, r1
 800d7cc:	40c2      	lsrs	r2, r0
 800d7ce:	6163      	str	r3, [r4, #20]
 800d7d0:	9201      	str	r2, [sp, #4]
 800d7d2:	9b01      	ldr	r3, [sp, #4]
 800d7d4:	61a3      	str	r3, [r4, #24]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	bf14      	ite	ne
 800d7da:	2202      	movne	r2, #2
 800d7dc:	2201      	moveq	r2, #1
 800d7de:	6122      	str	r2, [r4, #16]
 800d7e0:	b1d5      	cbz	r5, 800d818 <__d2b+0x98>
 800d7e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d7e6:	4405      	add	r5, r0
 800d7e8:	f8c9 5000 	str.w	r5, [r9]
 800d7ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7f0:	f8c8 0000 	str.w	r0, [r8]
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	b003      	add	sp, #12
 800d7f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d800:	e7d5      	b.n	800d7ae <__d2b+0x2e>
 800d802:	6161      	str	r1, [r4, #20]
 800d804:	e7e5      	b.n	800d7d2 <__d2b+0x52>
 800d806:	a801      	add	r0, sp, #4
 800d808:	f7ff fce8 	bl	800d1dc <__lo0bits>
 800d80c:	9b01      	ldr	r3, [sp, #4]
 800d80e:	6163      	str	r3, [r4, #20]
 800d810:	2201      	movs	r2, #1
 800d812:	6122      	str	r2, [r4, #16]
 800d814:	3020      	adds	r0, #32
 800d816:	e7e3      	b.n	800d7e0 <__d2b+0x60>
 800d818:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d81c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d820:	f8c9 0000 	str.w	r0, [r9]
 800d824:	6918      	ldr	r0, [r3, #16]
 800d826:	f7ff fcb9 	bl	800d19c <__hi0bits>
 800d82a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d82e:	e7df      	b.n	800d7f0 <__d2b+0x70>
 800d830:	0800f734 	.word	0x0800f734
 800d834:	0800f7c4 	.word	0x0800f7c4

0800d838 <__ratio>:
 800d838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d83c:	4688      	mov	r8, r1
 800d83e:	4669      	mov	r1, sp
 800d840:	4681      	mov	r9, r0
 800d842:	f7ff ff4d 	bl	800d6e0 <__b2d>
 800d846:	a901      	add	r1, sp, #4
 800d848:	4640      	mov	r0, r8
 800d84a:	ec55 4b10 	vmov	r4, r5, d0
 800d84e:	f7ff ff47 	bl	800d6e0 <__b2d>
 800d852:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d856:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d85a:	eba3 0c02 	sub.w	ip, r3, r2
 800d85e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d862:	1a9b      	subs	r3, r3, r2
 800d864:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d868:	ec51 0b10 	vmov	r0, r1, d0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	bfd6      	itet	le
 800d870:	460a      	movle	r2, r1
 800d872:	462a      	movgt	r2, r5
 800d874:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d878:	468b      	mov	fp, r1
 800d87a:	462f      	mov	r7, r5
 800d87c:	bfd4      	ite	le
 800d87e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d882:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d886:	4620      	mov	r0, r4
 800d888:	ee10 2a10 	vmov	r2, s0
 800d88c:	465b      	mov	r3, fp
 800d88e:	4639      	mov	r1, r7
 800d890:	f7f2 fffc 	bl	800088c <__aeabi_ddiv>
 800d894:	ec41 0b10 	vmov	d0, r0, r1
 800d898:	b003      	add	sp, #12
 800d89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d89e <__copybits>:
 800d89e:	3901      	subs	r1, #1
 800d8a0:	b570      	push	{r4, r5, r6, lr}
 800d8a2:	1149      	asrs	r1, r1, #5
 800d8a4:	6914      	ldr	r4, [r2, #16]
 800d8a6:	3101      	adds	r1, #1
 800d8a8:	f102 0314 	add.w	r3, r2, #20
 800d8ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d8b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d8b4:	1f05      	subs	r5, r0, #4
 800d8b6:	42a3      	cmp	r3, r4
 800d8b8:	d30c      	bcc.n	800d8d4 <__copybits+0x36>
 800d8ba:	1aa3      	subs	r3, r4, r2
 800d8bc:	3b11      	subs	r3, #17
 800d8be:	f023 0303 	bic.w	r3, r3, #3
 800d8c2:	3211      	adds	r2, #17
 800d8c4:	42a2      	cmp	r2, r4
 800d8c6:	bf88      	it	hi
 800d8c8:	2300      	movhi	r3, #0
 800d8ca:	4418      	add	r0, r3
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	4288      	cmp	r0, r1
 800d8d0:	d305      	bcc.n	800d8de <__copybits+0x40>
 800d8d2:	bd70      	pop	{r4, r5, r6, pc}
 800d8d4:	f853 6b04 	ldr.w	r6, [r3], #4
 800d8d8:	f845 6f04 	str.w	r6, [r5, #4]!
 800d8dc:	e7eb      	b.n	800d8b6 <__copybits+0x18>
 800d8de:	f840 3b04 	str.w	r3, [r0], #4
 800d8e2:	e7f4      	b.n	800d8ce <__copybits+0x30>

0800d8e4 <__any_on>:
 800d8e4:	f100 0214 	add.w	r2, r0, #20
 800d8e8:	6900      	ldr	r0, [r0, #16]
 800d8ea:	114b      	asrs	r3, r1, #5
 800d8ec:	4298      	cmp	r0, r3
 800d8ee:	b510      	push	{r4, lr}
 800d8f0:	db11      	blt.n	800d916 <__any_on+0x32>
 800d8f2:	dd0a      	ble.n	800d90a <__any_on+0x26>
 800d8f4:	f011 011f 	ands.w	r1, r1, #31
 800d8f8:	d007      	beq.n	800d90a <__any_on+0x26>
 800d8fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d8fe:	fa24 f001 	lsr.w	r0, r4, r1
 800d902:	fa00 f101 	lsl.w	r1, r0, r1
 800d906:	428c      	cmp	r4, r1
 800d908:	d10b      	bne.n	800d922 <__any_on+0x3e>
 800d90a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d90e:	4293      	cmp	r3, r2
 800d910:	d803      	bhi.n	800d91a <__any_on+0x36>
 800d912:	2000      	movs	r0, #0
 800d914:	bd10      	pop	{r4, pc}
 800d916:	4603      	mov	r3, r0
 800d918:	e7f7      	b.n	800d90a <__any_on+0x26>
 800d91a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d91e:	2900      	cmp	r1, #0
 800d920:	d0f5      	beq.n	800d90e <__any_on+0x2a>
 800d922:	2001      	movs	r0, #1
 800d924:	e7f6      	b.n	800d914 <__any_on+0x30>

0800d926 <_calloc_r>:
 800d926:	b513      	push	{r0, r1, r4, lr}
 800d928:	434a      	muls	r2, r1
 800d92a:	4611      	mov	r1, r2
 800d92c:	9201      	str	r2, [sp, #4]
 800d92e:	f000 f859 	bl	800d9e4 <_malloc_r>
 800d932:	4604      	mov	r4, r0
 800d934:	b118      	cbz	r0, 800d93e <_calloc_r+0x18>
 800d936:	9a01      	ldr	r2, [sp, #4]
 800d938:	2100      	movs	r1, #0
 800d93a:	f7fc fb93 	bl	800a064 <memset>
 800d93e:	4620      	mov	r0, r4
 800d940:	b002      	add	sp, #8
 800d942:	bd10      	pop	{r4, pc}

0800d944 <_free_r>:
 800d944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d946:	2900      	cmp	r1, #0
 800d948:	d048      	beq.n	800d9dc <_free_r+0x98>
 800d94a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d94e:	9001      	str	r0, [sp, #4]
 800d950:	2b00      	cmp	r3, #0
 800d952:	f1a1 0404 	sub.w	r4, r1, #4
 800d956:	bfb8      	it	lt
 800d958:	18e4      	addlt	r4, r4, r3
 800d95a:	f000 fa7b 	bl	800de54 <__malloc_lock>
 800d95e:	4a20      	ldr	r2, [pc, #128]	; (800d9e0 <_free_r+0x9c>)
 800d960:	9801      	ldr	r0, [sp, #4]
 800d962:	6813      	ldr	r3, [r2, #0]
 800d964:	4615      	mov	r5, r2
 800d966:	b933      	cbnz	r3, 800d976 <_free_r+0x32>
 800d968:	6063      	str	r3, [r4, #4]
 800d96a:	6014      	str	r4, [r2, #0]
 800d96c:	b003      	add	sp, #12
 800d96e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d972:	f000 ba75 	b.w	800de60 <__malloc_unlock>
 800d976:	42a3      	cmp	r3, r4
 800d978:	d90b      	bls.n	800d992 <_free_r+0x4e>
 800d97a:	6821      	ldr	r1, [r4, #0]
 800d97c:	1862      	adds	r2, r4, r1
 800d97e:	4293      	cmp	r3, r2
 800d980:	bf04      	itt	eq
 800d982:	681a      	ldreq	r2, [r3, #0]
 800d984:	685b      	ldreq	r3, [r3, #4]
 800d986:	6063      	str	r3, [r4, #4]
 800d988:	bf04      	itt	eq
 800d98a:	1852      	addeq	r2, r2, r1
 800d98c:	6022      	streq	r2, [r4, #0]
 800d98e:	602c      	str	r4, [r5, #0]
 800d990:	e7ec      	b.n	800d96c <_free_r+0x28>
 800d992:	461a      	mov	r2, r3
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	b10b      	cbz	r3, 800d99c <_free_r+0x58>
 800d998:	42a3      	cmp	r3, r4
 800d99a:	d9fa      	bls.n	800d992 <_free_r+0x4e>
 800d99c:	6811      	ldr	r1, [r2, #0]
 800d99e:	1855      	adds	r5, r2, r1
 800d9a0:	42a5      	cmp	r5, r4
 800d9a2:	d10b      	bne.n	800d9bc <_free_r+0x78>
 800d9a4:	6824      	ldr	r4, [r4, #0]
 800d9a6:	4421      	add	r1, r4
 800d9a8:	1854      	adds	r4, r2, r1
 800d9aa:	42a3      	cmp	r3, r4
 800d9ac:	6011      	str	r1, [r2, #0]
 800d9ae:	d1dd      	bne.n	800d96c <_free_r+0x28>
 800d9b0:	681c      	ldr	r4, [r3, #0]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	6053      	str	r3, [r2, #4]
 800d9b6:	4421      	add	r1, r4
 800d9b8:	6011      	str	r1, [r2, #0]
 800d9ba:	e7d7      	b.n	800d96c <_free_r+0x28>
 800d9bc:	d902      	bls.n	800d9c4 <_free_r+0x80>
 800d9be:	230c      	movs	r3, #12
 800d9c0:	6003      	str	r3, [r0, #0]
 800d9c2:	e7d3      	b.n	800d96c <_free_r+0x28>
 800d9c4:	6825      	ldr	r5, [r4, #0]
 800d9c6:	1961      	adds	r1, r4, r5
 800d9c8:	428b      	cmp	r3, r1
 800d9ca:	bf04      	itt	eq
 800d9cc:	6819      	ldreq	r1, [r3, #0]
 800d9ce:	685b      	ldreq	r3, [r3, #4]
 800d9d0:	6063      	str	r3, [r4, #4]
 800d9d2:	bf04      	itt	eq
 800d9d4:	1949      	addeq	r1, r1, r5
 800d9d6:	6021      	streq	r1, [r4, #0]
 800d9d8:	6054      	str	r4, [r2, #4]
 800d9da:	e7c7      	b.n	800d96c <_free_r+0x28>
 800d9dc:	b003      	add	sp, #12
 800d9de:	bd30      	pop	{r4, r5, pc}
 800d9e0:	200008a0 	.word	0x200008a0

0800d9e4 <_malloc_r>:
 800d9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e6:	1ccd      	adds	r5, r1, #3
 800d9e8:	f025 0503 	bic.w	r5, r5, #3
 800d9ec:	3508      	adds	r5, #8
 800d9ee:	2d0c      	cmp	r5, #12
 800d9f0:	bf38      	it	cc
 800d9f2:	250c      	movcc	r5, #12
 800d9f4:	2d00      	cmp	r5, #0
 800d9f6:	4606      	mov	r6, r0
 800d9f8:	db01      	blt.n	800d9fe <_malloc_r+0x1a>
 800d9fa:	42a9      	cmp	r1, r5
 800d9fc:	d903      	bls.n	800da06 <_malloc_r+0x22>
 800d9fe:	230c      	movs	r3, #12
 800da00:	6033      	str	r3, [r6, #0]
 800da02:	2000      	movs	r0, #0
 800da04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da06:	f000 fa25 	bl	800de54 <__malloc_lock>
 800da0a:	4921      	ldr	r1, [pc, #132]	; (800da90 <_malloc_r+0xac>)
 800da0c:	680a      	ldr	r2, [r1, #0]
 800da0e:	4614      	mov	r4, r2
 800da10:	b99c      	cbnz	r4, 800da3a <_malloc_r+0x56>
 800da12:	4f20      	ldr	r7, [pc, #128]	; (800da94 <_malloc_r+0xb0>)
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	b923      	cbnz	r3, 800da22 <_malloc_r+0x3e>
 800da18:	4621      	mov	r1, r4
 800da1a:	4630      	mov	r0, r6
 800da1c:	f000 f9a0 	bl	800dd60 <_sbrk_r>
 800da20:	6038      	str	r0, [r7, #0]
 800da22:	4629      	mov	r1, r5
 800da24:	4630      	mov	r0, r6
 800da26:	f000 f99b 	bl	800dd60 <_sbrk_r>
 800da2a:	1c43      	adds	r3, r0, #1
 800da2c:	d123      	bne.n	800da76 <_malloc_r+0x92>
 800da2e:	230c      	movs	r3, #12
 800da30:	6033      	str	r3, [r6, #0]
 800da32:	4630      	mov	r0, r6
 800da34:	f000 fa14 	bl	800de60 <__malloc_unlock>
 800da38:	e7e3      	b.n	800da02 <_malloc_r+0x1e>
 800da3a:	6823      	ldr	r3, [r4, #0]
 800da3c:	1b5b      	subs	r3, r3, r5
 800da3e:	d417      	bmi.n	800da70 <_malloc_r+0x8c>
 800da40:	2b0b      	cmp	r3, #11
 800da42:	d903      	bls.n	800da4c <_malloc_r+0x68>
 800da44:	6023      	str	r3, [r4, #0]
 800da46:	441c      	add	r4, r3
 800da48:	6025      	str	r5, [r4, #0]
 800da4a:	e004      	b.n	800da56 <_malloc_r+0x72>
 800da4c:	6863      	ldr	r3, [r4, #4]
 800da4e:	42a2      	cmp	r2, r4
 800da50:	bf0c      	ite	eq
 800da52:	600b      	streq	r3, [r1, #0]
 800da54:	6053      	strne	r3, [r2, #4]
 800da56:	4630      	mov	r0, r6
 800da58:	f000 fa02 	bl	800de60 <__malloc_unlock>
 800da5c:	f104 000b 	add.w	r0, r4, #11
 800da60:	1d23      	adds	r3, r4, #4
 800da62:	f020 0007 	bic.w	r0, r0, #7
 800da66:	1ac2      	subs	r2, r0, r3
 800da68:	d0cc      	beq.n	800da04 <_malloc_r+0x20>
 800da6a:	1a1b      	subs	r3, r3, r0
 800da6c:	50a3      	str	r3, [r4, r2]
 800da6e:	e7c9      	b.n	800da04 <_malloc_r+0x20>
 800da70:	4622      	mov	r2, r4
 800da72:	6864      	ldr	r4, [r4, #4]
 800da74:	e7cc      	b.n	800da10 <_malloc_r+0x2c>
 800da76:	1cc4      	adds	r4, r0, #3
 800da78:	f024 0403 	bic.w	r4, r4, #3
 800da7c:	42a0      	cmp	r0, r4
 800da7e:	d0e3      	beq.n	800da48 <_malloc_r+0x64>
 800da80:	1a21      	subs	r1, r4, r0
 800da82:	4630      	mov	r0, r6
 800da84:	f000 f96c 	bl	800dd60 <_sbrk_r>
 800da88:	3001      	adds	r0, #1
 800da8a:	d1dd      	bne.n	800da48 <_malloc_r+0x64>
 800da8c:	e7cf      	b.n	800da2e <_malloc_r+0x4a>
 800da8e:	bf00      	nop
 800da90:	200008a0 	.word	0x200008a0
 800da94:	200008a4 	.word	0x200008a4

0800da98 <__ssputs_r>:
 800da98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da9c:	688e      	ldr	r6, [r1, #8]
 800da9e:	429e      	cmp	r6, r3
 800daa0:	4682      	mov	sl, r0
 800daa2:	460c      	mov	r4, r1
 800daa4:	4690      	mov	r8, r2
 800daa6:	461f      	mov	r7, r3
 800daa8:	d838      	bhi.n	800db1c <__ssputs_r+0x84>
 800daaa:	898a      	ldrh	r2, [r1, #12]
 800daac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dab0:	d032      	beq.n	800db18 <__ssputs_r+0x80>
 800dab2:	6825      	ldr	r5, [r4, #0]
 800dab4:	6909      	ldr	r1, [r1, #16]
 800dab6:	eba5 0901 	sub.w	r9, r5, r1
 800daba:	6965      	ldr	r5, [r4, #20]
 800dabc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dac0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dac4:	3301      	adds	r3, #1
 800dac6:	444b      	add	r3, r9
 800dac8:	106d      	asrs	r5, r5, #1
 800daca:	429d      	cmp	r5, r3
 800dacc:	bf38      	it	cc
 800dace:	461d      	movcc	r5, r3
 800dad0:	0553      	lsls	r3, r2, #21
 800dad2:	d531      	bpl.n	800db38 <__ssputs_r+0xa0>
 800dad4:	4629      	mov	r1, r5
 800dad6:	f7ff ff85 	bl	800d9e4 <_malloc_r>
 800dada:	4606      	mov	r6, r0
 800dadc:	b950      	cbnz	r0, 800daf4 <__ssputs_r+0x5c>
 800dade:	230c      	movs	r3, #12
 800dae0:	f8ca 3000 	str.w	r3, [sl]
 800dae4:	89a3      	ldrh	r3, [r4, #12]
 800dae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daea:	81a3      	strh	r3, [r4, #12]
 800daec:	f04f 30ff 	mov.w	r0, #4294967295
 800daf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daf4:	6921      	ldr	r1, [r4, #16]
 800daf6:	464a      	mov	r2, r9
 800daf8:	f7ff fa4c 	bl	800cf94 <memcpy>
 800dafc:	89a3      	ldrh	r3, [r4, #12]
 800dafe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db06:	81a3      	strh	r3, [r4, #12]
 800db08:	6126      	str	r6, [r4, #16]
 800db0a:	6165      	str	r5, [r4, #20]
 800db0c:	444e      	add	r6, r9
 800db0e:	eba5 0509 	sub.w	r5, r5, r9
 800db12:	6026      	str	r6, [r4, #0]
 800db14:	60a5      	str	r5, [r4, #8]
 800db16:	463e      	mov	r6, r7
 800db18:	42be      	cmp	r6, r7
 800db1a:	d900      	bls.n	800db1e <__ssputs_r+0x86>
 800db1c:	463e      	mov	r6, r7
 800db1e:	4632      	mov	r2, r6
 800db20:	6820      	ldr	r0, [r4, #0]
 800db22:	4641      	mov	r1, r8
 800db24:	f000 f97c 	bl	800de20 <memmove>
 800db28:	68a3      	ldr	r3, [r4, #8]
 800db2a:	6822      	ldr	r2, [r4, #0]
 800db2c:	1b9b      	subs	r3, r3, r6
 800db2e:	4432      	add	r2, r6
 800db30:	60a3      	str	r3, [r4, #8]
 800db32:	6022      	str	r2, [r4, #0]
 800db34:	2000      	movs	r0, #0
 800db36:	e7db      	b.n	800daf0 <__ssputs_r+0x58>
 800db38:	462a      	mov	r2, r5
 800db3a:	f000 f997 	bl	800de6c <_realloc_r>
 800db3e:	4606      	mov	r6, r0
 800db40:	2800      	cmp	r0, #0
 800db42:	d1e1      	bne.n	800db08 <__ssputs_r+0x70>
 800db44:	6921      	ldr	r1, [r4, #16]
 800db46:	4650      	mov	r0, sl
 800db48:	f7ff fefc 	bl	800d944 <_free_r>
 800db4c:	e7c7      	b.n	800dade <__ssputs_r+0x46>
	...

0800db50 <_svfiprintf_r>:
 800db50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db54:	4698      	mov	r8, r3
 800db56:	898b      	ldrh	r3, [r1, #12]
 800db58:	061b      	lsls	r3, r3, #24
 800db5a:	b09d      	sub	sp, #116	; 0x74
 800db5c:	4607      	mov	r7, r0
 800db5e:	460d      	mov	r5, r1
 800db60:	4614      	mov	r4, r2
 800db62:	d50e      	bpl.n	800db82 <_svfiprintf_r+0x32>
 800db64:	690b      	ldr	r3, [r1, #16]
 800db66:	b963      	cbnz	r3, 800db82 <_svfiprintf_r+0x32>
 800db68:	2140      	movs	r1, #64	; 0x40
 800db6a:	f7ff ff3b 	bl	800d9e4 <_malloc_r>
 800db6e:	6028      	str	r0, [r5, #0]
 800db70:	6128      	str	r0, [r5, #16]
 800db72:	b920      	cbnz	r0, 800db7e <_svfiprintf_r+0x2e>
 800db74:	230c      	movs	r3, #12
 800db76:	603b      	str	r3, [r7, #0]
 800db78:	f04f 30ff 	mov.w	r0, #4294967295
 800db7c:	e0d1      	b.n	800dd22 <_svfiprintf_r+0x1d2>
 800db7e:	2340      	movs	r3, #64	; 0x40
 800db80:	616b      	str	r3, [r5, #20]
 800db82:	2300      	movs	r3, #0
 800db84:	9309      	str	r3, [sp, #36]	; 0x24
 800db86:	2320      	movs	r3, #32
 800db88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800db90:	2330      	movs	r3, #48	; 0x30
 800db92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd3c <_svfiprintf_r+0x1ec>
 800db96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db9a:	f04f 0901 	mov.w	r9, #1
 800db9e:	4623      	mov	r3, r4
 800dba0:	469a      	mov	sl, r3
 800dba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dba6:	b10a      	cbz	r2, 800dbac <_svfiprintf_r+0x5c>
 800dba8:	2a25      	cmp	r2, #37	; 0x25
 800dbaa:	d1f9      	bne.n	800dba0 <_svfiprintf_r+0x50>
 800dbac:	ebba 0b04 	subs.w	fp, sl, r4
 800dbb0:	d00b      	beq.n	800dbca <_svfiprintf_r+0x7a>
 800dbb2:	465b      	mov	r3, fp
 800dbb4:	4622      	mov	r2, r4
 800dbb6:	4629      	mov	r1, r5
 800dbb8:	4638      	mov	r0, r7
 800dbba:	f7ff ff6d 	bl	800da98 <__ssputs_r>
 800dbbe:	3001      	adds	r0, #1
 800dbc0:	f000 80aa 	beq.w	800dd18 <_svfiprintf_r+0x1c8>
 800dbc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbc6:	445a      	add	r2, fp
 800dbc8:	9209      	str	r2, [sp, #36]	; 0x24
 800dbca:	f89a 3000 	ldrb.w	r3, [sl]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	f000 80a2 	beq.w	800dd18 <_svfiprintf_r+0x1c8>
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbde:	f10a 0a01 	add.w	sl, sl, #1
 800dbe2:	9304      	str	r3, [sp, #16]
 800dbe4:	9307      	str	r3, [sp, #28]
 800dbe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbea:	931a      	str	r3, [sp, #104]	; 0x68
 800dbec:	4654      	mov	r4, sl
 800dbee:	2205      	movs	r2, #5
 800dbf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbf4:	4851      	ldr	r0, [pc, #324]	; (800dd3c <_svfiprintf_r+0x1ec>)
 800dbf6:	f7f2 fb13 	bl	8000220 <memchr>
 800dbfa:	9a04      	ldr	r2, [sp, #16]
 800dbfc:	b9d8      	cbnz	r0, 800dc36 <_svfiprintf_r+0xe6>
 800dbfe:	06d0      	lsls	r0, r2, #27
 800dc00:	bf44      	itt	mi
 800dc02:	2320      	movmi	r3, #32
 800dc04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc08:	0711      	lsls	r1, r2, #28
 800dc0a:	bf44      	itt	mi
 800dc0c:	232b      	movmi	r3, #43	; 0x2b
 800dc0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc12:	f89a 3000 	ldrb.w	r3, [sl]
 800dc16:	2b2a      	cmp	r3, #42	; 0x2a
 800dc18:	d015      	beq.n	800dc46 <_svfiprintf_r+0xf6>
 800dc1a:	9a07      	ldr	r2, [sp, #28]
 800dc1c:	4654      	mov	r4, sl
 800dc1e:	2000      	movs	r0, #0
 800dc20:	f04f 0c0a 	mov.w	ip, #10
 800dc24:	4621      	mov	r1, r4
 800dc26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc2a:	3b30      	subs	r3, #48	; 0x30
 800dc2c:	2b09      	cmp	r3, #9
 800dc2e:	d94e      	bls.n	800dcce <_svfiprintf_r+0x17e>
 800dc30:	b1b0      	cbz	r0, 800dc60 <_svfiprintf_r+0x110>
 800dc32:	9207      	str	r2, [sp, #28]
 800dc34:	e014      	b.n	800dc60 <_svfiprintf_r+0x110>
 800dc36:	eba0 0308 	sub.w	r3, r0, r8
 800dc3a:	fa09 f303 	lsl.w	r3, r9, r3
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	9304      	str	r3, [sp, #16]
 800dc42:	46a2      	mov	sl, r4
 800dc44:	e7d2      	b.n	800dbec <_svfiprintf_r+0x9c>
 800dc46:	9b03      	ldr	r3, [sp, #12]
 800dc48:	1d19      	adds	r1, r3, #4
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	9103      	str	r1, [sp, #12]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	bfbb      	ittet	lt
 800dc52:	425b      	neglt	r3, r3
 800dc54:	f042 0202 	orrlt.w	r2, r2, #2
 800dc58:	9307      	strge	r3, [sp, #28]
 800dc5a:	9307      	strlt	r3, [sp, #28]
 800dc5c:	bfb8      	it	lt
 800dc5e:	9204      	strlt	r2, [sp, #16]
 800dc60:	7823      	ldrb	r3, [r4, #0]
 800dc62:	2b2e      	cmp	r3, #46	; 0x2e
 800dc64:	d10c      	bne.n	800dc80 <_svfiprintf_r+0x130>
 800dc66:	7863      	ldrb	r3, [r4, #1]
 800dc68:	2b2a      	cmp	r3, #42	; 0x2a
 800dc6a:	d135      	bne.n	800dcd8 <_svfiprintf_r+0x188>
 800dc6c:	9b03      	ldr	r3, [sp, #12]
 800dc6e:	1d1a      	adds	r2, r3, #4
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	9203      	str	r2, [sp, #12]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	bfb8      	it	lt
 800dc78:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc7c:	3402      	adds	r4, #2
 800dc7e:	9305      	str	r3, [sp, #20]
 800dc80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dd4c <_svfiprintf_r+0x1fc>
 800dc84:	7821      	ldrb	r1, [r4, #0]
 800dc86:	2203      	movs	r2, #3
 800dc88:	4650      	mov	r0, sl
 800dc8a:	f7f2 fac9 	bl	8000220 <memchr>
 800dc8e:	b140      	cbz	r0, 800dca2 <_svfiprintf_r+0x152>
 800dc90:	2340      	movs	r3, #64	; 0x40
 800dc92:	eba0 000a 	sub.w	r0, r0, sl
 800dc96:	fa03 f000 	lsl.w	r0, r3, r0
 800dc9a:	9b04      	ldr	r3, [sp, #16]
 800dc9c:	4303      	orrs	r3, r0
 800dc9e:	3401      	adds	r4, #1
 800dca0:	9304      	str	r3, [sp, #16]
 800dca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dca6:	4826      	ldr	r0, [pc, #152]	; (800dd40 <_svfiprintf_r+0x1f0>)
 800dca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcac:	2206      	movs	r2, #6
 800dcae:	f7f2 fab7 	bl	8000220 <memchr>
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	d038      	beq.n	800dd28 <_svfiprintf_r+0x1d8>
 800dcb6:	4b23      	ldr	r3, [pc, #140]	; (800dd44 <_svfiprintf_r+0x1f4>)
 800dcb8:	bb1b      	cbnz	r3, 800dd02 <_svfiprintf_r+0x1b2>
 800dcba:	9b03      	ldr	r3, [sp, #12]
 800dcbc:	3307      	adds	r3, #7
 800dcbe:	f023 0307 	bic.w	r3, r3, #7
 800dcc2:	3308      	adds	r3, #8
 800dcc4:	9303      	str	r3, [sp, #12]
 800dcc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcc8:	4433      	add	r3, r6
 800dcca:	9309      	str	r3, [sp, #36]	; 0x24
 800dccc:	e767      	b.n	800db9e <_svfiprintf_r+0x4e>
 800dcce:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcd2:	460c      	mov	r4, r1
 800dcd4:	2001      	movs	r0, #1
 800dcd6:	e7a5      	b.n	800dc24 <_svfiprintf_r+0xd4>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	3401      	adds	r4, #1
 800dcdc:	9305      	str	r3, [sp, #20]
 800dcde:	4619      	mov	r1, r3
 800dce0:	f04f 0c0a 	mov.w	ip, #10
 800dce4:	4620      	mov	r0, r4
 800dce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcea:	3a30      	subs	r2, #48	; 0x30
 800dcec:	2a09      	cmp	r2, #9
 800dcee:	d903      	bls.n	800dcf8 <_svfiprintf_r+0x1a8>
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d0c5      	beq.n	800dc80 <_svfiprintf_r+0x130>
 800dcf4:	9105      	str	r1, [sp, #20]
 800dcf6:	e7c3      	b.n	800dc80 <_svfiprintf_r+0x130>
 800dcf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e7f0      	b.n	800dce4 <_svfiprintf_r+0x194>
 800dd02:	ab03      	add	r3, sp, #12
 800dd04:	9300      	str	r3, [sp, #0]
 800dd06:	462a      	mov	r2, r5
 800dd08:	4b0f      	ldr	r3, [pc, #60]	; (800dd48 <_svfiprintf_r+0x1f8>)
 800dd0a:	a904      	add	r1, sp, #16
 800dd0c:	4638      	mov	r0, r7
 800dd0e:	f7fc fa51 	bl	800a1b4 <_printf_float>
 800dd12:	1c42      	adds	r2, r0, #1
 800dd14:	4606      	mov	r6, r0
 800dd16:	d1d6      	bne.n	800dcc6 <_svfiprintf_r+0x176>
 800dd18:	89ab      	ldrh	r3, [r5, #12]
 800dd1a:	065b      	lsls	r3, r3, #25
 800dd1c:	f53f af2c 	bmi.w	800db78 <_svfiprintf_r+0x28>
 800dd20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd22:	b01d      	add	sp, #116	; 0x74
 800dd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd28:	ab03      	add	r3, sp, #12
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	462a      	mov	r2, r5
 800dd2e:	4b06      	ldr	r3, [pc, #24]	; (800dd48 <_svfiprintf_r+0x1f8>)
 800dd30:	a904      	add	r1, sp, #16
 800dd32:	4638      	mov	r0, r7
 800dd34:	f7fc fce2 	bl	800a6fc <_printf_i>
 800dd38:	e7eb      	b.n	800dd12 <_svfiprintf_r+0x1c2>
 800dd3a:	bf00      	nop
 800dd3c:	0800f924 	.word	0x0800f924
 800dd40:	0800f92e 	.word	0x0800f92e
 800dd44:	0800a1b5 	.word	0x0800a1b5
 800dd48:	0800da99 	.word	0x0800da99
 800dd4c:	0800f92a 	.word	0x0800f92a

0800dd50 <nan>:
 800dd50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dd58 <nan+0x8>
 800dd54:	4770      	bx	lr
 800dd56:	bf00      	nop
 800dd58:	00000000 	.word	0x00000000
 800dd5c:	7ff80000 	.word	0x7ff80000

0800dd60 <_sbrk_r>:
 800dd60:	b538      	push	{r3, r4, r5, lr}
 800dd62:	4d06      	ldr	r5, [pc, #24]	; (800dd7c <_sbrk_r+0x1c>)
 800dd64:	2300      	movs	r3, #0
 800dd66:	4604      	mov	r4, r0
 800dd68:	4608      	mov	r0, r1
 800dd6a:	602b      	str	r3, [r5, #0]
 800dd6c:	f7f5 fb5a 	bl	8003424 <_sbrk>
 800dd70:	1c43      	adds	r3, r0, #1
 800dd72:	d102      	bne.n	800dd7a <_sbrk_r+0x1a>
 800dd74:	682b      	ldr	r3, [r5, #0]
 800dd76:	b103      	cbz	r3, 800dd7a <_sbrk_r+0x1a>
 800dd78:	6023      	str	r3, [r4, #0]
 800dd7a:	bd38      	pop	{r3, r4, r5, pc}
 800dd7c:	200050a8 	.word	0x200050a8

0800dd80 <strncmp>:
 800dd80:	b510      	push	{r4, lr}
 800dd82:	b16a      	cbz	r2, 800dda0 <strncmp+0x20>
 800dd84:	3901      	subs	r1, #1
 800dd86:	1884      	adds	r4, r0, r2
 800dd88:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dd8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d103      	bne.n	800dd9c <strncmp+0x1c>
 800dd94:	42a0      	cmp	r0, r4
 800dd96:	d001      	beq.n	800dd9c <strncmp+0x1c>
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d1f5      	bne.n	800dd88 <strncmp+0x8>
 800dd9c:	1a98      	subs	r0, r3, r2
 800dd9e:	bd10      	pop	{r4, pc}
 800dda0:	4610      	mov	r0, r2
 800dda2:	e7fc      	b.n	800dd9e <strncmp+0x1e>

0800dda4 <__ascii_wctomb>:
 800dda4:	b149      	cbz	r1, 800ddba <__ascii_wctomb+0x16>
 800dda6:	2aff      	cmp	r2, #255	; 0xff
 800dda8:	bf85      	ittet	hi
 800ddaa:	238a      	movhi	r3, #138	; 0x8a
 800ddac:	6003      	strhi	r3, [r0, #0]
 800ddae:	700a      	strbls	r2, [r1, #0]
 800ddb0:	f04f 30ff 	movhi.w	r0, #4294967295
 800ddb4:	bf98      	it	ls
 800ddb6:	2001      	movls	r0, #1
 800ddb8:	4770      	bx	lr
 800ddba:	4608      	mov	r0, r1
 800ddbc:	4770      	bx	lr
	...

0800ddc0 <__assert_func>:
 800ddc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddc2:	4614      	mov	r4, r2
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	4b09      	ldr	r3, [pc, #36]	; (800ddec <__assert_func+0x2c>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4605      	mov	r5, r0
 800ddcc:	68d8      	ldr	r0, [r3, #12]
 800ddce:	b14c      	cbz	r4, 800dde4 <__assert_func+0x24>
 800ddd0:	4b07      	ldr	r3, [pc, #28]	; (800ddf0 <__assert_func+0x30>)
 800ddd2:	9100      	str	r1, [sp, #0]
 800ddd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddd8:	4906      	ldr	r1, [pc, #24]	; (800ddf4 <__assert_func+0x34>)
 800ddda:	462b      	mov	r3, r5
 800dddc:	f000 f80e 	bl	800ddfc <fiprintf>
 800dde0:	f000 fa84 	bl	800e2ec <abort>
 800dde4:	4b04      	ldr	r3, [pc, #16]	; (800ddf8 <__assert_func+0x38>)
 800dde6:	461c      	mov	r4, r3
 800dde8:	e7f3      	b.n	800ddd2 <__assert_func+0x12>
 800ddea:	bf00      	nop
 800ddec:	20000028 	.word	0x20000028
 800ddf0:	0800f935 	.word	0x0800f935
 800ddf4:	0800f942 	.word	0x0800f942
 800ddf8:	0800f970 	.word	0x0800f970

0800ddfc <fiprintf>:
 800ddfc:	b40e      	push	{r1, r2, r3}
 800ddfe:	b503      	push	{r0, r1, lr}
 800de00:	4601      	mov	r1, r0
 800de02:	ab03      	add	r3, sp, #12
 800de04:	4805      	ldr	r0, [pc, #20]	; (800de1c <fiprintf+0x20>)
 800de06:	f853 2b04 	ldr.w	r2, [r3], #4
 800de0a:	6800      	ldr	r0, [r0, #0]
 800de0c:	9301      	str	r3, [sp, #4]
 800de0e:	f000 f87d 	bl	800df0c <_vfiprintf_r>
 800de12:	b002      	add	sp, #8
 800de14:	f85d eb04 	ldr.w	lr, [sp], #4
 800de18:	b003      	add	sp, #12
 800de1a:	4770      	bx	lr
 800de1c:	20000028 	.word	0x20000028

0800de20 <memmove>:
 800de20:	4288      	cmp	r0, r1
 800de22:	b510      	push	{r4, lr}
 800de24:	eb01 0402 	add.w	r4, r1, r2
 800de28:	d902      	bls.n	800de30 <memmove+0x10>
 800de2a:	4284      	cmp	r4, r0
 800de2c:	4623      	mov	r3, r4
 800de2e:	d807      	bhi.n	800de40 <memmove+0x20>
 800de30:	1e43      	subs	r3, r0, #1
 800de32:	42a1      	cmp	r1, r4
 800de34:	d008      	beq.n	800de48 <memmove+0x28>
 800de36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de3e:	e7f8      	b.n	800de32 <memmove+0x12>
 800de40:	4402      	add	r2, r0
 800de42:	4601      	mov	r1, r0
 800de44:	428a      	cmp	r2, r1
 800de46:	d100      	bne.n	800de4a <memmove+0x2a>
 800de48:	bd10      	pop	{r4, pc}
 800de4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de52:	e7f7      	b.n	800de44 <memmove+0x24>

0800de54 <__malloc_lock>:
 800de54:	4801      	ldr	r0, [pc, #4]	; (800de5c <__malloc_lock+0x8>)
 800de56:	f000 bc09 	b.w	800e66c <__retarget_lock_acquire_recursive>
 800de5a:	bf00      	nop
 800de5c:	200050b0 	.word	0x200050b0

0800de60 <__malloc_unlock>:
 800de60:	4801      	ldr	r0, [pc, #4]	; (800de68 <__malloc_unlock+0x8>)
 800de62:	f000 bc04 	b.w	800e66e <__retarget_lock_release_recursive>
 800de66:	bf00      	nop
 800de68:	200050b0 	.word	0x200050b0

0800de6c <_realloc_r>:
 800de6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de6e:	4607      	mov	r7, r0
 800de70:	4614      	mov	r4, r2
 800de72:	460e      	mov	r6, r1
 800de74:	b921      	cbnz	r1, 800de80 <_realloc_r+0x14>
 800de76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800de7a:	4611      	mov	r1, r2
 800de7c:	f7ff bdb2 	b.w	800d9e4 <_malloc_r>
 800de80:	b922      	cbnz	r2, 800de8c <_realloc_r+0x20>
 800de82:	f7ff fd5f 	bl	800d944 <_free_r>
 800de86:	4625      	mov	r5, r4
 800de88:	4628      	mov	r0, r5
 800de8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de8c:	f000 fc54 	bl	800e738 <_malloc_usable_size_r>
 800de90:	42a0      	cmp	r0, r4
 800de92:	d20f      	bcs.n	800deb4 <_realloc_r+0x48>
 800de94:	4621      	mov	r1, r4
 800de96:	4638      	mov	r0, r7
 800de98:	f7ff fda4 	bl	800d9e4 <_malloc_r>
 800de9c:	4605      	mov	r5, r0
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d0f2      	beq.n	800de88 <_realloc_r+0x1c>
 800dea2:	4631      	mov	r1, r6
 800dea4:	4622      	mov	r2, r4
 800dea6:	f7ff f875 	bl	800cf94 <memcpy>
 800deaa:	4631      	mov	r1, r6
 800deac:	4638      	mov	r0, r7
 800deae:	f7ff fd49 	bl	800d944 <_free_r>
 800deb2:	e7e9      	b.n	800de88 <_realloc_r+0x1c>
 800deb4:	4635      	mov	r5, r6
 800deb6:	e7e7      	b.n	800de88 <_realloc_r+0x1c>

0800deb8 <__sfputc_r>:
 800deb8:	6893      	ldr	r3, [r2, #8]
 800deba:	3b01      	subs	r3, #1
 800debc:	2b00      	cmp	r3, #0
 800debe:	b410      	push	{r4}
 800dec0:	6093      	str	r3, [r2, #8]
 800dec2:	da08      	bge.n	800ded6 <__sfputc_r+0x1e>
 800dec4:	6994      	ldr	r4, [r2, #24]
 800dec6:	42a3      	cmp	r3, r4
 800dec8:	db01      	blt.n	800dece <__sfputc_r+0x16>
 800deca:	290a      	cmp	r1, #10
 800decc:	d103      	bne.n	800ded6 <__sfputc_r+0x1e>
 800dece:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ded2:	f000 b94b 	b.w	800e16c <__swbuf_r>
 800ded6:	6813      	ldr	r3, [r2, #0]
 800ded8:	1c58      	adds	r0, r3, #1
 800deda:	6010      	str	r0, [r2, #0]
 800dedc:	7019      	strb	r1, [r3, #0]
 800dede:	4608      	mov	r0, r1
 800dee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dee4:	4770      	bx	lr

0800dee6 <__sfputs_r>:
 800dee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee8:	4606      	mov	r6, r0
 800deea:	460f      	mov	r7, r1
 800deec:	4614      	mov	r4, r2
 800deee:	18d5      	adds	r5, r2, r3
 800def0:	42ac      	cmp	r4, r5
 800def2:	d101      	bne.n	800def8 <__sfputs_r+0x12>
 800def4:	2000      	movs	r0, #0
 800def6:	e007      	b.n	800df08 <__sfputs_r+0x22>
 800def8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800defc:	463a      	mov	r2, r7
 800defe:	4630      	mov	r0, r6
 800df00:	f7ff ffda 	bl	800deb8 <__sfputc_r>
 800df04:	1c43      	adds	r3, r0, #1
 800df06:	d1f3      	bne.n	800def0 <__sfputs_r+0xa>
 800df08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df0c <_vfiprintf_r>:
 800df0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df10:	460d      	mov	r5, r1
 800df12:	b09d      	sub	sp, #116	; 0x74
 800df14:	4614      	mov	r4, r2
 800df16:	4698      	mov	r8, r3
 800df18:	4606      	mov	r6, r0
 800df1a:	b118      	cbz	r0, 800df24 <_vfiprintf_r+0x18>
 800df1c:	6983      	ldr	r3, [r0, #24]
 800df1e:	b90b      	cbnz	r3, 800df24 <_vfiprintf_r+0x18>
 800df20:	f000 fb06 	bl	800e530 <__sinit>
 800df24:	4b89      	ldr	r3, [pc, #548]	; (800e14c <_vfiprintf_r+0x240>)
 800df26:	429d      	cmp	r5, r3
 800df28:	d11b      	bne.n	800df62 <_vfiprintf_r+0x56>
 800df2a:	6875      	ldr	r5, [r6, #4]
 800df2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df2e:	07d9      	lsls	r1, r3, #31
 800df30:	d405      	bmi.n	800df3e <_vfiprintf_r+0x32>
 800df32:	89ab      	ldrh	r3, [r5, #12]
 800df34:	059a      	lsls	r2, r3, #22
 800df36:	d402      	bmi.n	800df3e <_vfiprintf_r+0x32>
 800df38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df3a:	f000 fb97 	bl	800e66c <__retarget_lock_acquire_recursive>
 800df3e:	89ab      	ldrh	r3, [r5, #12]
 800df40:	071b      	lsls	r3, r3, #28
 800df42:	d501      	bpl.n	800df48 <_vfiprintf_r+0x3c>
 800df44:	692b      	ldr	r3, [r5, #16]
 800df46:	b9eb      	cbnz	r3, 800df84 <_vfiprintf_r+0x78>
 800df48:	4629      	mov	r1, r5
 800df4a:	4630      	mov	r0, r6
 800df4c:	f000 f960 	bl	800e210 <__swsetup_r>
 800df50:	b1c0      	cbz	r0, 800df84 <_vfiprintf_r+0x78>
 800df52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df54:	07dc      	lsls	r4, r3, #31
 800df56:	d50e      	bpl.n	800df76 <_vfiprintf_r+0x6a>
 800df58:	f04f 30ff 	mov.w	r0, #4294967295
 800df5c:	b01d      	add	sp, #116	; 0x74
 800df5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df62:	4b7b      	ldr	r3, [pc, #492]	; (800e150 <_vfiprintf_r+0x244>)
 800df64:	429d      	cmp	r5, r3
 800df66:	d101      	bne.n	800df6c <_vfiprintf_r+0x60>
 800df68:	68b5      	ldr	r5, [r6, #8]
 800df6a:	e7df      	b.n	800df2c <_vfiprintf_r+0x20>
 800df6c:	4b79      	ldr	r3, [pc, #484]	; (800e154 <_vfiprintf_r+0x248>)
 800df6e:	429d      	cmp	r5, r3
 800df70:	bf08      	it	eq
 800df72:	68f5      	ldreq	r5, [r6, #12]
 800df74:	e7da      	b.n	800df2c <_vfiprintf_r+0x20>
 800df76:	89ab      	ldrh	r3, [r5, #12]
 800df78:	0598      	lsls	r0, r3, #22
 800df7a:	d4ed      	bmi.n	800df58 <_vfiprintf_r+0x4c>
 800df7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df7e:	f000 fb76 	bl	800e66e <__retarget_lock_release_recursive>
 800df82:	e7e9      	b.n	800df58 <_vfiprintf_r+0x4c>
 800df84:	2300      	movs	r3, #0
 800df86:	9309      	str	r3, [sp, #36]	; 0x24
 800df88:	2320      	movs	r3, #32
 800df8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800df92:	2330      	movs	r3, #48	; 0x30
 800df94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e158 <_vfiprintf_r+0x24c>
 800df98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df9c:	f04f 0901 	mov.w	r9, #1
 800dfa0:	4623      	mov	r3, r4
 800dfa2:	469a      	mov	sl, r3
 800dfa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfa8:	b10a      	cbz	r2, 800dfae <_vfiprintf_r+0xa2>
 800dfaa:	2a25      	cmp	r2, #37	; 0x25
 800dfac:	d1f9      	bne.n	800dfa2 <_vfiprintf_r+0x96>
 800dfae:	ebba 0b04 	subs.w	fp, sl, r4
 800dfb2:	d00b      	beq.n	800dfcc <_vfiprintf_r+0xc0>
 800dfb4:	465b      	mov	r3, fp
 800dfb6:	4622      	mov	r2, r4
 800dfb8:	4629      	mov	r1, r5
 800dfba:	4630      	mov	r0, r6
 800dfbc:	f7ff ff93 	bl	800dee6 <__sfputs_r>
 800dfc0:	3001      	adds	r0, #1
 800dfc2:	f000 80aa 	beq.w	800e11a <_vfiprintf_r+0x20e>
 800dfc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfc8:	445a      	add	r2, fp
 800dfca:	9209      	str	r2, [sp, #36]	; 0x24
 800dfcc:	f89a 3000 	ldrb.w	r3, [sl]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	f000 80a2 	beq.w	800e11a <_vfiprintf_r+0x20e>
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	f04f 32ff 	mov.w	r2, #4294967295
 800dfdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfe0:	f10a 0a01 	add.w	sl, sl, #1
 800dfe4:	9304      	str	r3, [sp, #16]
 800dfe6:	9307      	str	r3, [sp, #28]
 800dfe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfec:	931a      	str	r3, [sp, #104]	; 0x68
 800dfee:	4654      	mov	r4, sl
 800dff0:	2205      	movs	r2, #5
 800dff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dff6:	4858      	ldr	r0, [pc, #352]	; (800e158 <_vfiprintf_r+0x24c>)
 800dff8:	f7f2 f912 	bl	8000220 <memchr>
 800dffc:	9a04      	ldr	r2, [sp, #16]
 800dffe:	b9d8      	cbnz	r0, 800e038 <_vfiprintf_r+0x12c>
 800e000:	06d1      	lsls	r1, r2, #27
 800e002:	bf44      	itt	mi
 800e004:	2320      	movmi	r3, #32
 800e006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e00a:	0713      	lsls	r3, r2, #28
 800e00c:	bf44      	itt	mi
 800e00e:	232b      	movmi	r3, #43	; 0x2b
 800e010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e014:	f89a 3000 	ldrb.w	r3, [sl]
 800e018:	2b2a      	cmp	r3, #42	; 0x2a
 800e01a:	d015      	beq.n	800e048 <_vfiprintf_r+0x13c>
 800e01c:	9a07      	ldr	r2, [sp, #28]
 800e01e:	4654      	mov	r4, sl
 800e020:	2000      	movs	r0, #0
 800e022:	f04f 0c0a 	mov.w	ip, #10
 800e026:	4621      	mov	r1, r4
 800e028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e02c:	3b30      	subs	r3, #48	; 0x30
 800e02e:	2b09      	cmp	r3, #9
 800e030:	d94e      	bls.n	800e0d0 <_vfiprintf_r+0x1c4>
 800e032:	b1b0      	cbz	r0, 800e062 <_vfiprintf_r+0x156>
 800e034:	9207      	str	r2, [sp, #28]
 800e036:	e014      	b.n	800e062 <_vfiprintf_r+0x156>
 800e038:	eba0 0308 	sub.w	r3, r0, r8
 800e03c:	fa09 f303 	lsl.w	r3, r9, r3
 800e040:	4313      	orrs	r3, r2
 800e042:	9304      	str	r3, [sp, #16]
 800e044:	46a2      	mov	sl, r4
 800e046:	e7d2      	b.n	800dfee <_vfiprintf_r+0xe2>
 800e048:	9b03      	ldr	r3, [sp, #12]
 800e04a:	1d19      	adds	r1, r3, #4
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	9103      	str	r1, [sp, #12]
 800e050:	2b00      	cmp	r3, #0
 800e052:	bfbb      	ittet	lt
 800e054:	425b      	neglt	r3, r3
 800e056:	f042 0202 	orrlt.w	r2, r2, #2
 800e05a:	9307      	strge	r3, [sp, #28]
 800e05c:	9307      	strlt	r3, [sp, #28]
 800e05e:	bfb8      	it	lt
 800e060:	9204      	strlt	r2, [sp, #16]
 800e062:	7823      	ldrb	r3, [r4, #0]
 800e064:	2b2e      	cmp	r3, #46	; 0x2e
 800e066:	d10c      	bne.n	800e082 <_vfiprintf_r+0x176>
 800e068:	7863      	ldrb	r3, [r4, #1]
 800e06a:	2b2a      	cmp	r3, #42	; 0x2a
 800e06c:	d135      	bne.n	800e0da <_vfiprintf_r+0x1ce>
 800e06e:	9b03      	ldr	r3, [sp, #12]
 800e070:	1d1a      	adds	r2, r3, #4
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	9203      	str	r2, [sp, #12]
 800e076:	2b00      	cmp	r3, #0
 800e078:	bfb8      	it	lt
 800e07a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e07e:	3402      	adds	r4, #2
 800e080:	9305      	str	r3, [sp, #20]
 800e082:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e168 <_vfiprintf_r+0x25c>
 800e086:	7821      	ldrb	r1, [r4, #0]
 800e088:	2203      	movs	r2, #3
 800e08a:	4650      	mov	r0, sl
 800e08c:	f7f2 f8c8 	bl	8000220 <memchr>
 800e090:	b140      	cbz	r0, 800e0a4 <_vfiprintf_r+0x198>
 800e092:	2340      	movs	r3, #64	; 0x40
 800e094:	eba0 000a 	sub.w	r0, r0, sl
 800e098:	fa03 f000 	lsl.w	r0, r3, r0
 800e09c:	9b04      	ldr	r3, [sp, #16]
 800e09e:	4303      	orrs	r3, r0
 800e0a0:	3401      	adds	r4, #1
 800e0a2:	9304      	str	r3, [sp, #16]
 800e0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0a8:	482c      	ldr	r0, [pc, #176]	; (800e15c <_vfiprintf_r+0x250>)
 800e0aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0ae:	2206      	movs	r2, #6
 800e0b0:	f7f2 f8b6 	bl	8000220 <memchr>
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	d03f      	beq.n	800e138 <_vfiprintf_r+0x22c>
 800e0b8:	4b29      	ldr	r3, [pc, #164]	; (800e160 <_vfiprintf_r+0x254>)
 800e0ba:	bb1b      	cbnz	r3, 800e104 <_vfiprintf_r+0x1f8>
 800e0bc:	9b03      	ldr	r3, [sp, #12]
 800e0be:	3307      	adds	r3, #7
 800e0c0:	f023 0307 	bic.w	r3, r3, #7
 800e0c4:	3308      	adds	r3, #8
 800e0c6:	9303      	str	r3, [sp, #12]
 800e0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ca:	443b      	add	r3, r7
 800e0cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e0ce:	e767      	b.n	800dfa0 <_vfiprintf_r+0x94>
 800e0d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0d4:	460c      	mov	r4, r1
 800e0d6:	2001      	movs	r0, #1
 800e0d8:	e7a5      	b.n	800e026 <_vfiprintf_r+0x11a>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	3401      	adds	r4, #1
 800e0de:	9305      	str	r3, [sp, #20]
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	f04f 0c0a 	mov.w	ip, #10
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0ec:	3a30      	subs	r2, #48	; 0x30
 800e0ee:	2a09      	cmp	r2, #9
 800e0f0:	d903      	bls.n	800e0fa <_vfiprintf_r+0x1ee>
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d0c5      	beq.n	800e082 <_vfiprintf_r+0x176>
 800e0f6:	9105      	str	r1, [sp, #20]
 800e0f8:	e7c3      	b.n	800e082 <_vfiprintf_r+0x176>
 800e0fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0fe:	4604      	mov	r4, r0
 800e100:	2301      	movs	r3, #1
 800e102:	e7f0      	b.n	800e0e6 <_vfiprintf_r+0x1da>
 800e104:	ab03      	add	r3, sp, #12
 800e106:	9300      	str	r3, [sp, #0]
 800e108:	462a      	mov	r2, r5
 800e10a:	4b16      	ldr	r3, [pc, #88]	; (800e164 <_vfiprintf_r+0x258>)
 800e10c:	a904      	add	r1, sp, #16
 800e10e:	4630      	mov	r0, r6
 800e110:	f7fc f850 	bl	800a1b4 <_printf_float>
 800e114:	4607      	mov	r7, r0
 800e116:	1c78      	adds	r0, r7, #1
 800e118:	d1d6      	bne.n	800e0c8 <_vfiprintf_r+0x1bc>
 800e11a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e11c:	07d9      	lsls	r1, r3, #31
 800e11e:	d405      	bmi.n	800e12c <_vfiprintf_r+0x220>
 800e120:	89ab      	ldrh	r3, [r5, #12]
 800e122:	059a      	lsls	r2, r3, #22
 800e124:	d402      	bmi.n	800e12c <_vfiprintf_r+0x220>
 800e126:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e128:	f000 faa1 	bl	800e66e <__retarget_lock_release_recursive>
 800e12c:	89ab      	ldrh	r3, [r5, #12]
 800e12e:	065b      	lsls	r3, r3, #25
 800e130:	f53f af12 	bmi.w	800df58 <_vfiprintf_r+0x4c>
 800e134:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e136:	e711      	b.n	800df5c <_vfiprintf_r+0x50>
 800e138:	ab03      	add	r3, sp, #12
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	462a      	mov	r2, r5
 800e13e:	4b09      	ldr	r3, [pc, #36]	; (800e164 <_vfiprintf_r+0x258>)
 800e140:	a904      	add	r1, sp, #16
 800e142:	4630      	mov	r0, r6
 800e144:	f7fc fada 	bl	800a6fc <_printf_i>
 800e148:	e7e4      	b.n	800e114 <_vfiprintf_r+0x208>
 800e14a:	bf00      	nop
 800e14c:	0800f994 	.word	0x0800f994
 800e150:	0800f9b4 	.word	0x0800f9b4
 800e154:	0800f974 	.word	0x0800f974
 800e158:	0800f924 	.word	0x0800f924
 800e15c:	0800f92e 	.word	0x0800f92e
 800e160:	0800a1b5 	.word	0x0800a1b5
 800e164:	0800dee7 	.word	0x0800dee7
 800e168:	0800f92a 	.word	0x0800f92a

0800e16c <__swbuf_r>:
 800e16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e16e:	460e      	mov	r6, r1
 800e170:	4614      	mov	r4, r2
 800e172:	4605      	mov	r5, r0
 800e174:	b118      	cbz	r0, 800e17e <__swbuf_r+0x12>
 800e176:	6983      	ldr	r3, [r0, #24]
 800e178:	b90b      	cbnz	r3, 800e17e <__swbuf_r+0x12>
 800e17a:	f000 f9d9 	bl	800e530 <__sinit>
 800e17e:	4b21      	ldr	r3, [pc, #132]	; (800e204 <__swbuf_r+0x98>)
 800e180:	429c      	cmp	r4, r3
 800e182:	d12b      	bne.n	800e1dc <__swbuf_r+0x70>
 800e184:	686c      	ldr	r4, [r5, #4]
 800e186:	69a3      	ldr	r3, [r4, #24]
 800e188:	60a3      	str	r3, [r4, #8]
 800e18a:	89a3      	ldrh	r3, [r4, #12]
 800e18c:	071a      	lsls	r2, r3, #28
 800e18e:	d52f      	bpl.n	800e1f0 <__swbuf_r+0x84>
 800e190:	6923      	ldr	r3, [r4, #16]
 800e192:	b36b      	cbz	r3, 800e1f0 <__swbuf_r+0x84>
 800e194:	6923      	ldr	r3, [r4, #16]
 800e196:	6820      	ldr	r0, [r4, #0]
 800e198:	1ac0      	subs	r0, r0, r3
 800e19a:	6963      	ldr	r3, [r4, #20]
 800e19c:	b2f6      	uxtb	r6, r6
 800e19e:	4283      	cmp	r3, r0
 800e1a0:	4637      	mov	r7, r6
 800e1a2:	dc04      	bgt.n	800e1ae <__swbuf_r+0x42>
 800e1a4:	4621      	mov	r1, r4
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f000 f92e 	bl	800e408 <_fflush_r>
 800e1ac:	bb30      	cbnz	r0, 800e1fc <__swbuf_r+0x90>
 800e1ae:	68a3      	ldr	r3, [r4, #8]
 800e1b0:	3b01      	subs	r3, #1
 800e1b2:	60a3      	str	r3, [r4, #8]
 800e1b4:	6823      	ldr	r3, [r4, #0]
 800e1b6:	1c5a      	adds	r2, r3, #1
 800e1b8:	6022      	str	r2, [r4, #0]
 800e1ba:	701e      	strb	r6, [r3, #0]
 800e1bc:	6963      	ldr	r3, [r4, #20]
 800e1be:	3001      	adds	r0, #1
 800e1c0:	4283      	cmp	r3, r0
 800e1c2:	d004      	beq.n	800e1ce <__swbuf_r+0x62>
 800e1c4:	89a3      	ldrh	r3, [r4, #12]
 800e1c6:	07db      	lsls	r3, r3, #31
 800e1c8:	d506      	bpl.n	800e1d8 <__swbuf_r+0x6c>
 800e1ca:	2e0a      	cmp	r6, #10
 800e1cc:	d104      	bne.n	800e1d8 <__swbuf_r+0x6c>
 800e1ce:	4621      	mov	r1, r4
 800e1d0:	4628      	mov	r0, r5
 800e1d2:	f000 f919 	bl	800e408 <_fflush_r>
 800e1d6:	b988      	cbnz	r0, 800e1fc <__swbuf_r+0x90>
 800e1d8:	4638      	mov	r0, r7
 800e1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1dc:	4b0a      	ldr	r3, [pc, #40]	; (800e208 <__swbuf_r+0x9c>)
 800e1de:	429c      	cmp	r4, r3
 800e1e0:	d101      	bne.n	800e1e6 <__swbuf_r+0x7a>
 800e1e2:	68ac      	ldr	r4, [r5, #8]
 800e1e4:	e7cf      	b.n	800e186 <__swbuf_r+0x1a>
 800e1e6:	4b09      	ldr	r3, [pc, #36]	; (800e20c <__swbuf_r+0xa0>)
 800e1e8:	429c      	cmp	r4, r3
 800e1ea:	bf08      	it	eq
 800e1ec:	68ec      	ldreq	r4, [r5, #12]
 800e1ee:	e7ca      	b.n	800e186 <__swbuf_r+0x1a>
 800e1f0:	4621      	mov	r1, r4
 800e1f2:	4628      	mov	r0, r5
 800e1f4:	f000 f80c 	bl	800e210 <__swsetup_r>
 800e1f8:	2800      	cmp	r0, #0
 800e1fa:	d0cb      	beq.n	800e194 <__swbuf_r+0x28>
 800e1fc:	f04f 37ff 	mov.w	r7, #4294967295
 800e200:	e7ea      	b.n	800e1d8 <__swbuf_r+0x6c>
 800e202:	bf00      	nop
 800e204:	0800f994 	.word	0x0800f994
 800e208:	0800f9b4 	.word	0x0800f9b4
 800e20c:	0800f974 	.word	0x0800f974

0800e210 <__swsetup_r>:
 800e210:	4b32      	ldr	r3, [pc, #200]	; (800e2dc <__swsetup_r+0xcc>)
 800e212:	b570      	push	{r4, r5, r6, lr}
 800e214:	681d      	ldr	r5, [r3, #0]
 800e216:	4606      	mov	r6, r0
 800e218:	460c      	mov	r4, r1
 800e21a:	b125      	cbz	r5, 800e226 <__swsetup_r+0x16>
 800e21c:	69ab      	ldr	r3, [r5, #24]
 800e21e:	b913      	cbnz	r3, 800e226 <__swsetup_r+0x16>
 800e220:	4628      	mov	r0, r5
 800e222:	f000 f985 	bl	800e530 <__sinit>
 800e226:	4b2e      	ldr	r3, [pc, #184]	; (800e2e0 <__swsetup_r+0xd0>)
 800e228:	429c      	cmp	r4, r3
 800e22a:	d10f      	bne.n	800e24c <__swsetup_r+0x3c>
 800e22c:	686c      	ldr	r4, [r5, #4]
 800e22e:	89a3      	ldrh	r3, [r4, #12]
 800e230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e234:	0719      	lsls	r1, r3, #28
 800e236:	d42c      	bmi.n	800e292 <__swsetup_r+0x82>
 800e238:	06dd      	lsls	r5, r3, #27
 800e23a:	d411      	bmi.n	800e260 <__swsetup_r+0x50>
 800e23c:	2309      	movs	r3, #9
 800e23e:	6033      	str	r3, [r6, #0]
 800e240:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e244:	81a3      	strh	r3, [r4, #12]
 800e246:	f04f 30ff 	mov.w	r0, #4294967295
 800e24a:	e03e      	b.n	800e2ca <__swsetup_r+0xba>
 800e24c:	4b25      	ldr	r3, [pc, #148]	; (800e2e4 <__swsetup_r+0xd4>)
 800e24e:	429c      	cmp	r4, r3
 800e250:	d101      	bne.n	800e256 <__swsetup_r+0x46>
 800e252:	68ac      	ldr	r4, [r5, #8]
 800e254:	e7eb      	b.n	800e22e <__swsetup_r+0x1e>
 800e256:	4b24      	ldr	r3, [pc, #144]	; (800e2e8 <__swsetup_r+0xd8>)
 800e258:	429c      	cmp	r4, r3
 800e25a:	bf08      	it	eq
 800e25c:	68ec      	ldreq	r4, [r5, #12]
 800e25e:	e7e6      	b.n	800e22e <__swsetup_r+0x1e>
 800e260:	0758      	lsls	r0, r3, #29
 800e262:	d512      	bpl.n	800e28a <__swsetup_r+0x7a>
 800e264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e266:	b141      	cbz	r1, 800e27a <__swsetup_r+0x6a>
 800e268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e26c:	4299      	cmp	r1, r3
 800e26e:	d002      	beq.n	800e276 <__swsetup_r+0x66>
 800e270:	4630      	mov	r0, r6
 800e272:	f7ff fb67 	bl	800d944 <_free_r>
 800e276:	2300      	movs	r3, #0
 800e278:	6363      	str	r3, [r4, #52]	; 0x34
 800e27a:	89a3      	ldrh	r3, [r4, #12]
 800e27c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e280:	81a3      	strh	r3, [r4, #12]
 800e282:	2300      	movs	r3, #0
 800e284:	6063      	str	r3, [r4, #4]
 800e286:	6923      	ldr	r3, [r4, #16]
 800e288:	6023      	str	r3, [r4, #0]
 800e28a:	89a3      	ldrh	r3, [r4, #12]
 800e28c:	f043 0308 	orr.w	r3, r3, #8
 800e290:	81a3      	strh	r3, [r4, #12]
 800e292:	6923      	ldr	r3, [r4, #16]
 800e294:	b94b      	cbnz	r3, 800e2aa <__swsetup_r+0x9a>
 800e296:	89a3      	ldrh	r3, [r4, #12]
 800e298:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e29c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2a0:	d003      	beq.n	800e2aa <__swsetup_r+0x9a>
 800e2a2:	4621      	mov	r1, r4
 800e2a4:	4630      	mov	r0, r6
 800e2a6:	f000 fa07 	bl	800e6b8 <__smakebuf_r>
 800e2aa:	89a0      	ldrh	r0, [r4, #12]
 800e2ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2b0:	f010 0301 	ands.w	r3, r0, #1
 800e2b4:	d00a      	beq.n	800e2cc <__swsetup_r+0xbc>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	60a3      	str	r3, [r4, #8]
 800e2ba:	6963      	ldr	r3, [r4, #20]
 800e2bc:	425b      	negs	r3, r3
 800e2be:	61a3      	str	r3, [r4, #24]
 800e2c0:	6923      	ldr	r3, [r4, #16]
 800e2c2:	b943      	cbnz	r3, 800e2d6 <__swsetup_r+0xc6>
 800e2c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e2c8:	d1ba      	bne.n	800e240 <__swsetup_r+0x30>
 800e2ca:	bd70      	pop	{r4, r5, r6, pc}
 800e2cc:	0781      	lsls	r1, r0, #30
 800e2ce:	bf58      	it	pl
 800e2d0:	6963      	ldrpl	r3, [r4, #20]
 800e2d2:	60a3      	str	r3, [r4, #8]
 800e2d4:	e7f4      	b.n	800e2c0 <__swsetup_r+0xb0>
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	e7f7      	b.n	800e2ca <__swsetup_r+0xba>
 800e2da:	bf00      	nop
 800e2dc:	20000028 	.word	0x20000028
 800e2e0:	0800f994 	.word	0x0800f994
 800e2e4:	0800f9b4 	.word	0x0800f9b4
 800e2e8:	0800f974 	.word	0x0800f974

0800e2ec <abort>:
 800e2ec:	b508      	push	{r3, lr}
 800e2ee:	2006      	movs	r0, #6
 800e2f0:	f000 fa52 	bl	800e798 <raise>
 800e2f4:	2001      	movs	r0, #1
 800e2f6:	f7f5 f81d 	bl	8003334 <_exit>
	...

0800e2fc <__sflush_r>:
 800e2fc:	898a      	ldrh	r2, [r1, #12]
 800e2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e302:	4605      	mov	r5, r0
 800e304:	0710      	lsls	r0, r2, #28
 800e306:	460c      	mov	r4, r1
 800e308:	d458      	bmi.n	800e3bc <__sflush_r+0xc0>
 800e30a:	684b      	ldr	r3, [r1, #4]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	dc05      	bgt.n	800e31c <__sflush_r+0x20>
 800e310:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e312:	2b00      	cmp	r3, #0
 800e314:	dc02      	bgt.n	800e31c <__sflush_r+0x20>
 800e316:	2000      	movs	r0, #0
 800e318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e31c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e31e:	2e00      	cmp	r6, #0
 800e320:	d0f9      	beq.n	800e316 <__sflush_r+0x1a>
 800e322:	2300      	movs	r3, #0
 800e324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e328:	682f      	ldr	r7, [r5, #0]
 800e32a:	602b      	str	r3, [r5, #0]
 800e32c:	d032      	beq.n	800e394 <__sflush_r+0x98>
 800e32e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e330:	89a3      	ldrh	r3, [r4, #12]
 800e332:	075a      	lsls	r2, r3, #29
 800e334:	d505      	bpl.n	800e342 <__sflush_r+0x46>
 800e336:	6863      	ldr	r3, [r4, #4]
 800e338:	1ac0      	subs	r0, r0, r3
 800e33a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e33c:	b10b      	cbz	r3, 800e342 <__sflush_r+0x46>
 800e33e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e340:	1ac0      	subs	r0, r0, r3
 800e342:	2300      	movs	r3, #0
 800e344:	4602      	mov	r2, r0
 800e346:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e348:	6a21      	ldr	r1, [r4, #32]
 800e34a:	4628      	mov	r0, r5
 800e34c:	47b0      	blx	r6
 800e34e:	1c43      	adds	r3, r0, #1
 800e350:	89a3      	ldrh	r3, [r4, #12]
 800e352:	d106      	bne.n	800e362 <__sflush_r+0x66>
 800e354:	6829      	ldr	r1, [r5, #0]
 800e356:	291d      	cmp	r1, #29
 800e358:	d82c      	bhi.n	800e3b4 <__sflush_r+0xb8>
 800e35a:	4a2a      	ldr	r2, [pc, #168]	; (800e404 <__sflush_r+0x108>)
 800e35c:	40ca      	lsrs	r2, r1
 800e35e:	07d6      	lsls	r6, r2, #31
 800e360:	d528      	bpl.n	800e3b4 <__sflush_r+0xb8>
 800e362:	2200      	movs	r2, #0
 800e364:	6062      	str	r2, [r4, #4]
 800e366:	04d9      	lsls	r1, r3, #19
 800e368:	6922      	ldr	r2, [r4, #16]
 800e36a:	6022      	str	r2, [r4, #0]
 800e36c:	d504      	bpl.n	800e378 <__sflush_r+0x7c>
 800e36e:	1c42      	adds	r2, r0, #1
 800e370:	d101      	bne.n	800e376 <__sflush_r+0x7a>
 800e372:	682b      	ldr	r3, [r5, #0]
 800e374:	b903      	cbnz	r3, 800e378 <__sflush_r+0x7c>
 800e376:	6560      	str	r0, [r4, #84]	; 0x54
 800e378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e37a:	602f      	str	r7, [r5, #0]
 800e37c:	2900      	cmp	r1, #0
 800e37e:	d0ca      	beq.n	800e316 <__sflush_r+0x1a>
 800e380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e384:	4299      	cmp	r1, r3
 800e386:	d002      	beq.n	800e38e <__sflush_r+0x92>
 800e388:	4628      	mov	r0, r5
 800e38a:	f7ff fadb 	bl	800d944 <_free_r>
 800e38e:	2000      	movs	r0, #0
 800e390:	6360      	str	r0, [r4, #52]	; 0x34
 800e392:	e7c1      	b.n	800e318 <__sflush_r+0x1c>
 800e394:	6a21      	ldr	r1, [r4, #32]
 800e396:	2301      	movs	r3, #1
 800e398:	4628      	mov	r0, r5
 800e39a:	47b0      	blx	r6
 800e39c:	1c41      	adds	r1, r0, #1
 800e39e:	d1c7      	bne.n	800e330 <__sflush_r+0x34>
 800e3a0:	682b      	ldr	r3, [r5, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d0c4      	beq.n	800e330 <__sflush_r+0x34>
 800e3a6:	2b1d      	cmp	r3, #29
 800e3a8:	d001      	beq.n	800e3ae <__sflush_r+0xb2>
 800e3aa:	2b16      	cmp	r3, #22
 800e3ac:	d101      	bne.n	800e3b2 <__sflush_r+0xb6>
 800e3ae:	602f      	str	r7, [r5, #0]
 800e3b0:	e7b1      	b.n	800e316 <__sflush_r+0x1a>
 800e3b2:	89a3      	ldrh	r3, [r4, #12]
 800e3b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3b8:	81a3      	strh	r3, [r4, #12]
 800e3ba:	e7ad      	b.n	800e318 <__sflush_r+0x1c>
 800e3bc:	690f      	ldr	r7, [r1, #16]
 800e3be:	2f00      	cmp	r7, #0
 800e3c0:	d0a9      	beq.n	800e316 <__sflush_r+0x1a>
 800e3c2:	0793      	lsls	r3, r2, #30
 800e3c4:	680e      	ldr	r6, [r1, #0]
 800e3c6:	bf08      	it	eq
 800e3c8:	694b      	ldreq	r3, [r1, #20]
 800e3ca:	600f      	str	r7, [r1, #0]
 800e3cc:	bf18      	it	ne
 800e3ce:	2300      	movne	r3, #0
 800e3d0:	eba6 0807 	sub.w	r8, r6, r7
 800e3d4:	608b      	str	r3, [r1, #8]
 800e3d6:	f1b8 0f00 	cmp.w	r8, #0
 800e3da:	dd9c      	ble.n	800e316 <__sflush_r+0x1a>
 800e3dc:	6a21      	ldr	r1, [r4, #32]
 800e3de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e3e0:	4643      	mov	r3, r8
 800e3e2:	463a      	mov	r2, r7
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	47b0      	blx	r6
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	dc06      	bgt.n	800e3fa <__sflush_r+0xfe>
 800e3ec:	89a3      	ldrh	r3, [r4, #12]
 800e3ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3f2:	81a3      	strh	r3, [r4, #12]
 800e3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f8:	e78e      	b.n	800e318 <__sflush_r+0x1c>
 800e3fa:	4407      	add	r7, r0
 800e3fc:	eba8 0800 	sub.w	r8, r8, r0
 800e400:	e7e9      	b.n	800e3d6 <__sflush_r+0xda>
 800e402:	bf00      	nop
 800e404:	20400001 	.word	0x20400001

0800e408 <_fflush_r>:
 800e408:	b538      	push	{r3, r4, r5, lr}
 800e40a:	690b      	ldr	r3, [r1, #16]
 800e40c:	4605      	mov	r5, r0
 800e40e:	460c      	mov	r4, r1
 800e410:	b913      	cbnz	r3, 800e418 <_fflush_r+0x10>
 800e412:	2500      	movs	r5, #0
 800e414:	4628      	mov	r0, r5
 800e416:	bd38      	pop	{r3, r4, r5, pc}
 800e418:	b118      	cbz	r0, 800e422 <_fflush_r+0x1a>
 800e41a:	6983      	ldr	r3, [r0, #24]
 800e41c:	b90b      	cbnz	r3, 800e422 <_fflush_r+0x1a>
 800e41e:	f000 f887 	bl	800e530 <__sinit>
 800e422:	4b14      	ldr	r3, [pc, #80]	; (800e474 <_fflush_r+0x6c>)
 800e424:	429c      	cmp	r4, r3
 800e426:	d11b      	bne.n	800e460 <_fflush_r+0x58>
 800e428:	686c      	ldr	r4, [r5, #4]
 800e42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d0ef      	beq.n	800e412 <_fflush_r+0xa>
 800e432:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e434:	07d0      	lsls	r0, r2, #31
 800e436:	d404      	bmi.n	800e442 <_fflush_r+0x3a>
 800e438:	0599      	lsls	r1, r3, #22
 800e43a:	d402      	bmi.n	800e442 <_fflush_r+0x3a>
 800e43c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e43e:	f000 f915 	bl	800e66c <__retarget_lock_acquire_recursive>
 800e442:	4628      	mov	r0, r5
 800e444:	4621      	mov	r1, r4
 800e446:	f7ff ff59 	bl	800e2fc <__sflush_r>
 800e44a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e44c:	07da      	lsls	r2, r3, #31
 800e44e:	4605      	mov	r5, r0
 800e450:	d4e0      	bmi.n	800e414 <_fflush_r+0xc>
 800e452:	89a3      	ldrh	r3, [r4, #12]
 800e454:	059b      	lsls	r3, r3, #22
 800e456:	d4dd      	bmi.n	800e414 <_fflush_r+0xc>
 800e458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e45a:	f000 f908 	bl	800e66e <__retarget_lock_release_recursive>
 800e45e:	e7d9      	b.n	800e414 <_fflush_r+0xc>
 800e460:	4b05      	ldr	r3, [pc, #20]	; (800e478 <_fflush_r+0x70>)
 800e462:	429c      	cmp	r4, r3
 800e464:	d101      	bne.n	800e46a <_fflush_r+0x62>
 800e466:	68ac      	ldr	r4, [r5, #8]
 800e468:	e7df      	b.n	800e42a <_fflush_r+0x22>
 800e46a:	4b04      	ldr	r3, [pc, #16]	; (800e47c <_fflush_r+0x74>)
 800e46c:	429c      	cmp	r4, r3
 800e46e:	bf08      	it	eq
 800e470:	68ec      	ldreq	r4, [r5, #12]
 800e472:	e7da      	b.n	800e42a <_fflush_r+0x22>
 800e474:	0800f994 	.word	0x0800f994
 800e478:	0800f9b4 	.word	0x0800f9b4
 800e47c:	0800f974 	.word	0x0800f974

0800e480 <std>:
 800e480:	2300      	movs	r3, #0
 800e482:	b510      	push	{r4, lr}
 800e484:	4604      	mov	r4, r0
 800e486:	e9c0 3300 	strd	r3, r3, [r0]
 800e48a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e48e:	6083      	str	r3, [r0, #8]
 800e490:	8181      	strh	r1, [r0, #12]
 800e492:	6643      	str	r3, [r0, #100]	; 0x64
 800e494:	81c2      	strh	r2, [r0, #14]
 800e496:	6183      	str	r3, [r0, #24]
 800e498:	4619      	mov	r1, r3
 800e49a:	2208      	movs	r2, #8
 800e49c:	305c      	adds	r0, #92	; 0x5c
 800e49e:	f7fb fde1 	bl	800a064 <memset>
 800e4a2:	4b05      	ldr	r3, [pc, #20]	; (800e4b8 <std+0x38>)
 800e4a4:	6263      	str	r3, [r4, #36]	; 0x24
 800e4a6:	4b05      	ldr	r3, [pc, #20]	; (800e4bc <std+0x3c>)
 800e4a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4aa:	4b05      	ldr	r3, [pc, #20]	; (800e4c0 <std+0x40>)
 800e4ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4ae:	4b05      	ldr	r3, [pc, #20]	; (800e4c4 <std+0x44>)
 800e4b0:	6224      	str	r4, [r4, #32]
 800e4b2:	6323      	str	r3, [r4, #48]	; 0x30
 800e4b4:	bd10      	pop	{r4, pc}
 800e4b6:	bf00      	nop
 800e4b8:	0800e7d1 	.word	0x0800e7d1
 800e4bc:	0800e7f3 	.word	0x0800e7f3
 800e4c0:	0800e82b 	.word	0x0800e82b
 800e4c4:	0800e84f 	.word	0x0800e84f

0800e4c8 <_cleanup_r>:
 800e4c8:	4901      	ldr	r1, [pc, #4]	; (800e4d0 <_cleanup_r+0x8>)
 800e4ca:	f000 b8af 	b.w	800e62c <_fwalk_reent>
 800e4ce:	bf00      	nop
 800e4d0:	0800e409 	.word	0x0800e409

0800e4d4 <__sfmoreglue>:
 800e4d4:	b570      	push	{r4, r5, r6, lr}
 800e4d6:	1e4a      	subs	r2, r1, #1
 800e4d8:	2568      	movs	r5, #104	; 0x68
 800e4da:	4355      	muls	r5, r2
 800e4dc:	460e      	mov	r6, r1
 800e4de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e4e2:	f7ff fa7f 	bl	800d9e4 <_malloc_r>
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	b140      	cbz	r0, 800e4fc <__sfmoreglue+0x28>
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	e9c0 1600 	strd	r1, r6, [r0]
 800e4f0:	300c      	adds	r0, #12
 800e4f2:	60a0      	str	r0, [r4, #8]
 800e4f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e4f8:	f7fb fdb4 	bl	800a064 <memset>
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}

0800e500 <__sfp_lock_acquire>:
 800e500:	4801      	ldr	r0, [pc, #4]	; (800e508 <__sfp_lock_acquire+0x8>)
 800e502:	f000 b8b3 	b.w	800e66c <__retarget_lock_acquire_recursive>
 800e506:	bf00      	nop
 800e508:	200050b4 	.word	0x200050b4

0800e50c <__sfp_lock_release>:
 800e50c:	4801      	ldr	r0, [pc, #4]	; (800e514 <__sfp_lock_release+0x8>)
 800e50e:	f000 b8ae 	b.w	800e66e <__retarget_lock_release_recursive>
 800e512:	bf00      	nop
 800e514:	200050b4 	.word	0x200050b4

0800e518 <__sinit_lock_acquire>:
 800e518:	4801      	ldr	r0, [pc, #4]	; (800e520 <__sinit_lock_acquire+0x8>)
 800e51a:	f000 b8a7 	b.w	800e66c <__retarget_lock_acquire_recursive>
 800e51e:	bf00      	nop
 800e520:	200050af 	.word	0x200050af

0800e524 <__sinit_lock_release>:
 800e524:	4801      	ldr	r0, [pc, #4]	; (800e52c <__sinit_lock_release+0x8>)
 800e526:	f000 b8a2 	b.w	800e66e <__retarget_lock_release_recursive>
 800e52a:	bf00      	nop
 800e52c:	200050af 	.word	0x200050af

0800e530 <__sinit>:
 800e530:	b510      	push	{r4, lr}
 800e532:	4604      	mov	r4, r0
 800e534:	f7ff fff0 	bl	800e518 <__sinit_lock_acquire>
 800e538:	69a3      	ldr	r3, [r4, #24]
 800e53a:	b11b      	cbz	r3, 800e544 <__sinit+0x14>
 800e53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e540:	f7ff bff0 	b.w	800e524 <__sinit_lock_release>
 800e544:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e548:	6523      	str	r3, [r4, #80]	; 0x50
 800e54a:	4b13      	ldr	r3, [pc, #76]	; (800e598 <__sinit+0x68>)
 800e54c:	4a13      	ldr	r2, [pc, #76]	; (800e59c <__sinit+0x6c>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	62a2      	str	r2, [r4, #40]	; 0x28
 800e552:	42a3      	cmp	r3, r4
 800e554:	bf04      	itt	eq
 800e556:	2301      	moveq	r3, #1
 800e558:	61a3      	streq	r3, [r4, #24]
 800e55a:	4620      	mov	r0, r4
 800e55c:	f000 f820 	bl	800e5a0 <__sfp>
 800e560:	6060      	str	r0, [r4, #4]
 800e562:	4620      	mov	r0, r4
 800e564:	f000 f81c 	bl	800e5a0 <__sfp>
 800e568:	60a0      	str	r0, [r4, #8]
 800e56a:	4620      	mov	r0, r4
 800e56c:	f000 f818 	bl	800e5a0 <__sfp>
 800e570:	2200      	movs	r2, #0
 800e572:	60e0      	str	r0, [r4, #12]
 800e574:	2104      	movs	r1, #4
 800e576:	6860      	ldr	r0, [r4, #4]
 800e578:	f7ff ff82 	bl	800e480 <std>
 800e57c:	68a0      	ldr	r0, [r4, #8]
 800e57e:	2201      	movs	r2, #1
 800e580:	2109      	movs	r1, #9
 800e582:	f7ff ff7d 	bl	800e480 <std>
 800e586:	68e0      	ldr	r0, [r4, #12]
 800e588:	2202      	movs	r2, #2
 800e58a:	2112      	movs	r1, #18
 800e58c:	f7ff ff78 	bl	800e480 <std>
 800e590:	2301      	movs	r3, #1
 800e592:	61a3      	str	r3, [r4, #24]
 800e594:	e7d2      	b.n	800e53c <__sinit+0xc>
 800e596:	bf00      	nop
 800e598:	0800f51c 	.word	0x0800f51c
 800e59c:	0800e4c9 	.word	0x0800e4c9

0800e5a0 <__sfp>:
 800e5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a2:	4607      	mov	r7, r0
 800e5a4:	f7ff ffac 	bl	800e500 <__sfp_lock_acquire>
 800e5a8:	4b1e      	ldr	r3, [pc, #120]	; (800e624 <__sfp+0x84>)
 800e5aa:	681e      	ldr	r6, [r3, #0]
 800e5ac:	69b3      	ldr	r3, [r6, #24]
 800e5ae:	b913      	cbnz	r3, 800e5b6 <__sfp+0x16>
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	f7ff ffbd 	bl	800e530 <__sinit>
 800e5b6:	3648      	adds	r6, #72	; 0x48
 800e5b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e5bc:	3b01      	subs	r3, #1
 800e5be:	d503      	bpl.n	800e5c8 <__sfp+0x28>
 800e5c0:	6833      	ldr	r3, [r6, #0]
 800e5c2:	b30b      	cbz	r3, 800e608 <__sfp+0x68>
 800e5c4:	6836      	ldr	r6, [r6, #0]
 800e5c6:	e7f7      	b.n	800e5b8 <__sfp+0x18>
 800e5c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e5cc:	b9d5      	cbnz	r5, 800e604 <__sfp+0x64>
 800e5ce:	4b16      	ldr	r3, [pc, #88]	; (800e628 <__sfp+0x88>)
 800e5d0:	60e3      	str	r3, [r4, #12]
 800e5d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e5d6:	6665      	str	r5, [r4, #100]	; 0x64
 800e5d8:	f000 f847 	bl	800e66a <__retarget_lock_init_recursive>
 800e5dc:	f7ff ff96 	bl	800e50c <__sfp_lock_release>
 800e5e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e5e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e5e8:	6025      	str	r5, [r4, #0]
 800e5ea:	61a5      	str	r5, [r4, #24]
 800e5ec:	2208      	movs	r2, #8
 800e5ee:	4629      	mov	r1, r5
 800e5f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e5f4:	f7fb fd36 	bl	800a064 <memset>
 800e5f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e600:	4620      	mov	r0, r4
 800e602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e604:	3468      	adds	r4, #104	; 0x68
 800e606:	e7d9      	b.n	800e5bc <__sfp+0x1c>
 800e608:	2104      	movs	r1, #4
 800e60a:	4638      	mov	r0, r7
 800e60c:	f7ff ff62 	bl	800e4d4 <__sfmoreglue>
 800e610:	4604      	mov	r4, r0
 800e612:	6030      	str	r0, [r6, #0]
 800e614:	2800      	cmp	r0, #0
 800e616:	d1d5      	bne.n	800e5c4 <__sfp+0x24>
 800e618:	f7ff ff78 	bl	800e50c <__sfp_lock_release>
 800e61c:	230c      	movs	r3, #12
 800e61e:	603b      	str	r3, [r7, #0]
 800e620:	e7ee      	b.n	800e600 <__sfp+0x60>
 800e622:	bf00      	nop
 800e624:	0800f51c 	.word	0x0800f51c
 800e628:	ffff0001 	.word	0xffff0001

0800e62c <_fwalk_reent>:
 800e62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e630:	4606      	mov	r6, r0
 800e632:	4688      	mov	r8, r1
 800e634:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e638:	2700      	movs	r7, #0
 800e63a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e63e:	f1b9 0901 	subs.w	r9, r9, #1
 800e642:	d505      	bpl.n	800e650 <_fwalk_reent+0x24>
 800e644:	6824      	ldr	r4, [r4, #0]
 800e646:	2c00      	cmp	r4, #0
 800e648:	d1f7      	bne.n	800e63a <_fwalk_reent+0xe>
 800e64a:	4638      	mov	r0, r7
 800e64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e650:	89ab      	ldrh	r3, [r5, #12]
 800e652:	2b01      	cmp	r3, #1
 800e654:	d907      	bls.n	800e666 <_fwalk_reent+0x3a>
 800e656:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e65a:	3301      	adds	r3, #1
 800e65c:	d003      	beq.n	800e666 <_fwalk_reent+0x3a>
 800e65e:	4629      	mov	r1, r5
 800e660:	4630      	mov	r0, r6
 800e662:	47c0      	blx	r8
 800e664:	4307      	orrs	r7, r0
 800e666:	3568      	adds	r5, #104	; 0x68
 800e668:	e7e9      	b.n	800e63e <_fwalk_reent+0x12>

0800e66a <__retarget_lock_init_recursive>:
 800e66a:	4770      	bx	lr

0800e66c <__retarget_lock_acquire_recursive>:
 800e66c:	4770      	bx	lr

0800e66e <__retarget_lock_release_recursive>:
 800e66e:	4770      	bx	lr

0800e670 <__swhatbuf_r>:
 800e670:	b570      	push	{r4, r5, r6, lr}
 800e672:	460e      	mov	r6, r1
 800e674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e678:	2900      	cmp	r1, #0
 800e67a:	b096      	sub	sp, #88	; 0x58
 800e67c:	4614      	mov	r4, r2
 800e67e:	461d      	mov	r5, r3
 800e680:	da07      	bge.n	800e692 <__swhatbuf_r+0x22>
 800e682:	2300      	movs	r3, #0
 800e684:	602b      	str	r3, [r5, #0]
 800e686:	89b3      	ldrh	r3, [r6, #12]
 800e688:	061a      	lsls	r2, r3, #24
 800e68a:	d410      	bmi.n	800e6ae <__swhatbuf_r+0x3e>
 800e68c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e690:	e00e      	b.n	800e6b0 <__swhatbuf_r+0x40>
 800e692:	466a      	mov	r2, sp
 800e694:	f000 f902 	bl	800e89c <_fstat_r>
 800e698:	2800      	cmp	r0, #0
 800e69a:	dbf2      	blt.n	800e682 <__swhatbuf_r+0x12>
 800e69c:	9a01      	ldr	r2, [sp, #4]
 800e69e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e6a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e6a6:	425a      	negs	r2, r3
 800e6a8:	415a      	adcs	r2, r3
 800e6aa:	602a      	str	r2, [r5, #0]
 800e6ac:	e7ee      	b.n	800e68c <__swhatbuf_r+0x1c>
 800e6ae:	2340      	movs	r3, #64	; 0x40
 800e6b0:	2000      	movs	r0, #0
 800e6b2:	6023      	str	r3, [r4, #0]
 800e6b4:	b016      	add	sp, #88	; 0x58
 800e6b6:	bd70      	pop	{r4, r5, r6, pc}

0800e6b8 <__smakebuf_r>:
 800e6b8:	898b      	ldrh	r3, [r1, #12]
 800e6ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e6bc:	079d      	lsls	r5, r3, #30
 800e6be:	4606      	mov	r6, r0
 800e6c0:	460c      	mov	r4, r1
 800e6c2:	d507      	bpl.n	800e6d4 <__smakebuf_r+0x1c>
 800e6c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	6123      	str	r3, [r4, #16]
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	6163      	str	r3, [r4, #20]
 800e6d0:	b002      	add	sp, #8
 800e6d2:	bd70      	pop	{r4, r5, r6, pc}
 800e6d4:	ab01      	add	r3, sp, #4
 800e6d6:	466a      	mov	r2, sp
 800e6d8:	f7ff ffca 	bl	800e670 <__swhatbuf_r>
 800e6dc:	9900      	ldr	r1, [sp, #0]
 800e6de:	4605      	mov	r5, r0
 800e6e0:	4630      	mov	r0, r6
 800e6e2:	f7ff f97f 	bl	800d9e4 <_malloc_r>
 800e6e6:	b948      	cbnz	r0, 800e6fc <__smakebuf_r+0x44>
 800e6e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6ec:	059a      	lsls	r2, r3, #22
 800e6ee:	d4ef      	bmi.n	800e6d0 <__smakebuf_r+0x18>
 800e6f0:	f023 0303 	bic.w	r3, r3, #3
 800e6f4:	f043 0302 	orr.w	r3, r3, #2
 800e6f8:	81a3      	strh	r3, [r4, #12]
 800e6fa:	e7e3      	b.n	800e6c4 <__smakebuf_r+0xc>
 800e6fc:	4b0d      	ldr	r3, [pc, #52]	; (800e734 <__smakebuf_r+0x7c>)
 800e6fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800e700:	89a3      	ldrh	r3, [r4, #12]
 800e702:	6020      	str	r0, [r4, #0]
 800e704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e708:	81a3      	strh	r3, [r4, #12]
 800e70a:	9b00      	ldr	r3, [sp, #0]
 800e70c:	6163      	str	r3, [r4, #20]
 800e70e:	9b01      	ldr	r3, [sp, #4]
 800e710:	6120      	str	r0, [r4, #16]
 800e712:	b15b      	cbz	r3, 800e72c <__smakebuf_r+0x74>
 800e714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e718:	4630      	mov	r0, r6
 800e71a:	f000 f8d1 	bl	800e8c0 <_isatty_r>
 800e71e:	b128      	cbz	r0, 800e72c <__smakebuf_r+0x74>
 800e720:	89a3      	ldrh	r3, [r4, #12]
 800e722:	f023 0303 	bic.w	r3, r3, #3
 800e726:	f043 0301 	orr.w	r3, r3, #1
 800e72a:	81a3      	strh	r3, [r4, #12]
 800e72c:	89a0      	ldrh	r0, [r4, #12]
 800e72e:	4305      	orrs	r5, r0
 800e730:	81a5      	strh	r5, [r4, #12]
 800e732:	e7cd      	b.n	800e6d0 <__smakebuf_r+0x18>
 800e734:	0800e4c9 	.word	0x0800e4c9

0800e738 <_malloc_usable_size_r>:
 800e738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e73c:	1f18      	subs	r0, r3, #4
 800e73e:	2b00      	cmp	r3, #0
 800e740:	bfbc      	itt	lt
 800e742:	580b      	ldrlt	r3, [r1, r0]
 800e744:	18c0      	addlt	r0, r0, r3
 800e746:	4770      	bx	lr

0800e748 <_raise_r>:
 800e748:	291f      	cmp	r1, #31
 800e74a:	b538      	push	{r3, r4, r5, lr}
 800e74c:	4604      	mov	r4, r0
 800e74e:	460d      	mov	r5, r1
 800e750:	d904      	bls.n	800e75c <_raise_r+0x14>
 800e752:	2316      	movs	r3, #22
 800e754:	6003      	str	r3, [r0, #0]
 800e756:	f04f 30ff 	mov.w	r0, #4294967295
 800e75a:	bd38      	pop	{r3, r4, r5, pc}
 800e75c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e75e:	b112      	cbz	r2, 800e766 <_raise_r+0x1e>
 800e760:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e764:	b94b      	cbnz	r3, 800e77a <_raise_r+0x32>
 800e766:	4620      	mov	r0, r4
 800e768:	f000 f830 	bl	800e7cc <_getpid_r>
 800e76c:	462a      	mov	r2, r5
 800e76e:	4601      	mov	r1, r0
 800e770:	4620      	mov	r0, r4
 800e772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e776:	f000 b817 	b.w	800e7a8 <_kill_r>
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d00a      	beq.n	800e794 <_raise_r+0x4c>
 800e77e:	1c59      	adds	r1, r3, #1
 800e780:	d103      	bne.n	800e78a <_raise_r+0x42>
 800e782:	2316      	movs	r3, #22
 800e784:	6003      	str	r3, [r0, #0]
 800e786:	2001      	movs	r0, #1
 800e788:	e7e7      	b.n	800e75a <_raise_r+0x12>
 800e78a:	2400      	movs	r4, #0
 800e78c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e790:	4628      	mov	r0, r5
 800e792:	4798      	blx	r3
 800e794:	2000      	movs	r0, #0
 800e796:	e7e0      	b.n	800e75a <_raise_r+0x12>

0800e798 <raise>:
 800e798:	4b02      	ldr	r3, [pc, #8]	; (800e7a4 <raise+0xc>)
 800e79a:	4601      	mov	r1, r0
 800e79c:	6818      	ldr	r0, [r3, #0]
 800e79e:	f7ff bfd3 	b.w	800e748 <_raise_r>
 800e7a2:	bf00      	nop
 800e7a4:	20000028 	.word	0x20000028

0800e7a8 <_kill_r>:
 800e7a8:	b538      	push	{r3, r4, r5, lr}
 800e7aa:	4d07      	ldr	r5, [pc, #28]	; (800e7c8 <_kill_r+0x20>)
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	4608      	mov	r0, r1
 800e7b2:	4611      	mov	r1, r2
 800e7b4:	602b      	str	r3, [r5, #0]
 800e7b6:	f7f4 fdad 	bl	8003314 <_kill>
 800e7ba:	1c43      	adds	r3, r0, #1
 800e7bc:	d102      	bne.n	800e7c4 <_kill_r+0x1c>
 800e7be:	682b      	ldr	r3, [r5, #0]
 800e7c0:	b103      	cbz	r3, 800e7c4 <_kill_r+0x1c>
 800e7c2:	6023      	str	r3, [r4, #0]
 800e7c4:	bd38      	pop	{r3, r4, r5, pc}
 800e7c6:	bf00      	nop
 800e7c8:	200050a8 	.word	0x200050a8

0800e7cc <_getpid_r>:
 800e7cc:	f7f4 bd9a 	b.w	8003304 <_getpid>

0800e7d0 <__sread>:
 800e7d0:	b510      	push	{r4, lr}
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7d8:	f000 f894 	bl	800e904 <_read_r>
 800e7dc:	2800      	cmp	r0, #0
 800e7de:	bfab      	itete	ge
 800e7e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e7e2:	89a3      	ldrhlt	r3, [r4, #12]
 800e7e4:	181b      	addge	r3, r3, r0
 800e7e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e7ea:	bfac      	ite	ge
 800e7ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800e7ee:	81a3      	strhlt	r3, [r4, #12]
 800e7f0:	bd10      	pop	{r4, pc}

0800e7f2 <__swrite>:
 800e7f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f6:	461f      	mov	r7, r3
 800e7f8:	898b      	ldrh	r3, [r1, #12]
 800e7fa:	05db      	lsls	r3, r3, #23
 800e7fc:	4605      	mov	r5, r0
 800e7fe:	460c      	mov	r4, r1
 800e800:	4616      	mov	r6, r2
 800e802:	d505      	bpl.n	800e810 <__swrite+0x1e>
 800e804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e808:	2302      	movs	r3, #2
 800e80a:	2200      	movs	r2, #0
 800e80c:	f000 f868 	bl	800e8e0 <_lseek_r>
 800e810:	89a3      	ldrh	r3, [r4, #12]
 800e812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e81a:	81a3      	strh	r3, [r4, #12]
 800e81c:	4632      	mov	r2, r6
 800e81e:	463b      	mov	r3, r7
 800e820:	4628      	mov	r0, r5
 800e822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e826:	f000 b817 	b.w	800e858 <_write_r>

0800e82a <__sseek>:
 800e82a:	b510      	push	{r4, lr}
 800e82c:	460c      	mov	r4, r1
 800e82e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e832:	f000 f855 	bl	800e8e0 <_lseek_r>
 800e836:	1c43      	adds	r3, r0, #1
 800e838:	89a3      	ldrh	r3, [r4, #12]
 800e83a:	bf15      	itete	ne
 800e83c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e83e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e846:	81a3      	strheq	r3, [r4, #12]
 800e848:	bf18      	it	ne
 800e84a:	81a3      	strhne	r3, [r4, #12]
 800e84c:	bd10      	pop	{r4, pc}

0800e84e <__sclose>:
 800e84e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e852:	f000 b813 	b.w	800e87c <_close_r>
	...

0800e858 <_write_r>:
 800e858:	b538      	push	{r3, r4, r5, lr}
 800e85a:	4d07      	ldr	r5, [pc, #28]	; (800e878 <_write_r+0x20>)
 800e85c:	4604      	mov	r4, r0
 800e85e:	4608      	mov	r0, r1
 800e860:	4611      	mov	r1, r2
 800e862:	2200      	movs	r2, #0
 800e864:	602a      	str	r2, [r5, #0]
 800e866:	461a      	mov	r2, r3
 800e868:	f7f4 fd8b 	bl	8003382 <_write>
 800e86c:	1c43      	adds	r3, r0, #1
 800e86e:	d102      	bne.n	800e876 <_write_r+0x1e>
 800e870:	682b      	ldr	r3, [r5, #0]
 800e872:	b103      	cbz	r3, 800e876 <_write_r+0x1e>
 800e874:	6023      	str	r3, [r4, #0]
 800e876:	bd38      	pop	{r3, r4, r5, pc}
 800e878:	200050a8 	.word	0x200050a8

0800e87c <_close_r>:
 800e87c:	b538      	push	{r3, r4, r5, lr}
 800e87e:	4d06      	ldr	r5, [pc, #24]	; (800e898 <_close_r+0x1c>)
 800e880:	2300      	movs	r3, #0
 800e882:	4604      	mov	r4, r0
 800e884:	4608      	mov	r0, r1
 800e886:	602b      	str	r3, [r5, #0]
 800e888:	f7f4 fd97 	bl	80033ba <_close>
 800e88c:	1c43      	adds	r3, r0, #1
 800e88e:	d102      	bne.n	800e896 <_close_r+0x1a>
 800e890:	682b      	ldr	r3, [r5, #0]
 800e892:	b103      	cbz	r3, 800e896 <_close_r+0x1a>
 800e894:	6023      	str	r3, [r4, #0]
 800e896:	bd38      	pop	{r3, r4, r5, pc}
 800e898:	200050a8 	.word	0x200050a8

0800e89c <_fstat_r>:
 800e89c:	b538      	push	{r3, r4, r5, lr}
 800e89e:	4d07      	ldr	r5, [pc, #28]	; (800e8bc <_fstat_r+0x20>)
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	4608      	mov	r0, r1
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	602b      	str	r3, [r5, #0]
 800e8aa:	f7f4 fd92 	bl	80033d2 <_fstat>
 800e8ae:	1c43      	adds	r3, r0, #1
 800e8b0:	d102      	bne.n	800e8b8 <_fstat_r+0x1c>
 800e8b2:	682b      	ldr	r3, [r5, #0]
 800e8b4:	b103      	cbz	r3, 800e8b8 <_fstat_r+0x1c>
 800e8b6:	6023      	str	r3, [r4, #0]
 800e8b8:	bd38      	pop	{r3, r4, r5, pc}
 800e8ba:	bf00      	nop
 800e8bc:	200050a8 	.word	0x200050a8

0800e8c0 <_isatty_r>:
 800e8c0:	b538      	push	{r3, r4, r5, lr}
 800e8c2:	4d06      	ldr	r5, [pc, #24]	; (800e8dc <_isatty_r+0x1c>)
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	4604      	mov	r4, r0
 800e8c8:	4608      	mov	r0, r1
 800e8ca:	602b      	str	r3, [r5, #0]
 800e8cc:	f7f4 fd91 	bl	80033f2 <_isatty>
 800e8d0:	1c43      	adds	r3, r0, #1
 800e8d2:	d102      	bne.n	800e8da <_isatty_r+0x1a>
 800e8d4:	682b      	ldr	r3, [r5, #0]
 800e8d6:	b103      	cbz	r3, 800e8da <_isatty_r+0x1a>
 800e8d8:	6023      	str	r3, [r4, #0]
 800e8da:	bd38      	pop	{r3, r4, r5, pc}
 800e8dc:	200050a8 	.word	0x200050a8

0800e8e0 <_lseek_r>:
 800e8e0:	b538      	push	{r3, r4, r5, lr}
 800e8e2:	4d07      	ldr	r5, [pc, #28]	; (800e900 <_lseek_r+0x20>)
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	4608      	mov	r0, r1
 800e8e8:	4611      	mov	r1, r2
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	602a      	str	r2, [r5, #0]
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	f7f4 fd8a 	bl	8003408 <_lseek>
 800e8f4:	1c43      	adds	r3, r0, #1
 800e8f6:	d102      	bne.n	800e8fe <_lseek_r+0x1e>
 800e8f8:	682b      	ldr	r3, [r5, #0]
 800e8fa:	b103      	cbz	r3, 800e8fe <_lseek_r+0x1e>
 800e8fc:	6023      	str	r3, [r4, #0]
 800e8fe:	bd38      	pop	{r3, r4, r5, pc}
 800e900:	200050a8 	.word	0x200050a8

0800e904 <_read_r>:
 800e904:	b538      	push	{r3, r4, r5, lr}
 800e906:	4d07      	ldr	r5, [pc, #28]	; (800e924 <_read_r+0x20>)
 800e908:	4604      	mov	r4, r0
 800e90a:	4608      	mov	r0, r1
 800e90c:	4611      	mov	r1, r2
 800e90e:	2200      	movs	r2, #0
 800e910:	602a      	str	r2, [r5, #0]
 800e912:	461a      	mov	r2, r3
 800e914:	f7f4 fd18 	bl	8003348 <_read>
 800e918:	1c43      	adds	r3, r0, #1
 800e91a:	d102      	bne.n	800e922 <_read_r+0x1e>
 800e91c:	682b      	ldr	r3, [r5, #0]
 800e91e:	b103      	cbz	r3, 800e922 <_read_r+0x1e>
 800e920:	6023      	str	r3, [r4, #0]
 800e922:	bd38      	pop	{r3, r4, r5, pc}
 800e924:	200050a8 	.word	0x200050a8

0800e928 <log>:
 800e928:	b538      	push	{r3, r4, r5, lr}
 800e92a:	ed2d 8b02 	vpush	{d8}
 800e92e:	ec55 4b10 	vmov	r4, r5, d0
 800e932:	f000 f841 	bl	800e9b8 <__ieee754_log>
 800e936:	4b1e      	ldr	r3, [pc, #120]	; (800e9b0 <log+0x88>)
 800e938:	eeb0 8a40 	vmov.f32	s16, s0
 800e93c:	eef0 8a60 	vmov.f32	s17, s1
 800e940:	f993 3000 	ldrsb.w	r3, [r3]
 800e944:	3301      	adds	r3, #1
 800e946:	d01a      	beq.n	800e97e <log+0x56>
 800e948:	4622      	mov	r2, r4
 800e94a:	462b      	mov	r3, r5
 800e94c:	4620      	mov	r0, r4
 800e94e:	4629      	mov	r1, r5
 800e950:	f7f2 f90c 	bl	8000b6c <__aeabi_dcmpun>
 800e954:	b998      	cbnz	r0, 800e97e <log+0x56>
 800e956:	2200      	movs	r2, #0
 800e958:	2300      	movs	r3, #0
 800e95a:	4620      	mov	r0, r4
 800e95c:	4629      	mov	r1, r5
 800e95e:	f7f2 f8fb 	bl	8000b58 <__aeabi_dcmpgt>
 800e962:	b960      	cbnz	r0, 800e97e <log+0x56>
 800e964:	2200      	movs	r2, #0
 800e966:	2300      	movs	r3, #0
 800e968:	4620      	mov	r0, r4
 800e96a:	4629      	mov	r1, r5
 800e96c:	f7f2 f8cc 	bl	8000b08 <__aeabi_dcmpeq>
 800e970:	b160      	cbz	r0, 800e98c <log+0x64>
 800e972:	f7fb fb4d 	bl	800a010 <__errno>
 800e976:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800e9a8 <log+0x80>
 800e97a:	2322      	movs	r3, #34	; 0x22
 800e97c:	6003      	str	r3, [r0, #0]
 800e97e:	eeb0 0a48 	vmov.f32	s0, s16
 800e982:	eef0 0a68 	vmov.f32	s1, s17
 800e986:	ecbd 8b02 	vpop	{d8}
 800e98a:	bd38      	pop	{r3, r4, r5, pc}
 800e98c:	f7fb fb40 	bl	800a010 <__errno>
 800e990:	ecbd 8b02 	vpop	{d8}
 800e994:	2321      	movs	r3, #33	; 0x21
 800e996:	6003      	str	r3, [r0, #0]
 800e998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e99c:	4805      	ldr	r0, [pc, #20]	; (800e9b4 <log+0x8c>)
 800e99e:	f7ff b9d7 	b.w	800dd50 <nan>
 800e9a2:	bf00      	nop
 800e9a4:	f3af 8000 	nop.w
 800e9a8:	00000000 	.word	0x00000000
 800e9ac:	fff00000 	.word	0xfff00000
 800e9b0:	200001fc 	.word	0x200001fc
 800e9b4:	0800f970 	.word	0x0800f970

0800e9b8 <__ieee754_log>:
 800e9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9bc:	ec51 0b10 	vmov	r0, r1, d0
 800e9c0:	ed2d 8b04 	vpush	{d8-d9}
 800e9c4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e9c8:	b083      	sub	sp, #12
 800e9ca:	460d      	mov	r5, r1
 800e9cc:	da29      	bge.n	800ea22 <__ieee754_log+0x6a>
 800e9ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e9d2:	4303      	orrs	r3, r0
 800e9d4:	ee10 2a10 	vmov	r2, s0
 800e9d8:	d10c      	bne.n	800e9f4 <__ieee754_log+0x3c>
 800e9da:	49cf      	ldr	r1, [pc, #828]	; (800ed18 <__ieee754_log+0x360>)
 800e9dc:	2200      	movs	r2, #0
 800e9de:	2300      	movs	r3, #0
 800e9e0:	2000      	movs	r0, #0
 800e9e2:	f7f1 ff53 	bl	800088c <__aeabi_ddiv>
 800e9e6:	ec41 0b10 	vmov	d0, r0, r1
 800e9ea:	b003      	add	sp, #12
 800e9ec:	ecbd 8b04 	vpop	{d8-d9}
 800e9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f4:	2900      	cmp	r1, #0
 800e9f6:	da05      	bge.n	800ea04 <__ieee754_log+0x4c>
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	f7f1 fc65 	bl	80002c8 <__aeabi_dsub>
 800e9fe:	2200      	movs	r2, #0
 800ea00:	2300      	movs	r3, #0
 800ea02:	e7ee      	b.n	800e9e2 <__ieee754_log+0x2a>
 800ea04:	4bc5      	ldr	r3, [pc, #788]	; (800ed1c <__ieee754_log+0x364>)
 800ea06:	2200      	movs	r2, #0
 800ea08:	f7f1 fe16 	bl	8000638 <__aeabi_dmul>
 800ea0c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ea10:	460d      	mov	r5, r1
 800ea12:	4ac3      	ldr	r2, [pc, #780]	; (800ed20 <__ieee754_log+0x368>)
 800ea14:	4295      	cmp	r5, r2
 800ea16:	dd06      	ble.n	800ea26 <__ieee754_log+0x6e>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	f7f1 fc56 	bl	80002cc <__adddf3>
 800ea20:	e7e1      	b.n	800e9e6 <__ieee754_log+0x2e>
 800ea22:	2300      	movs	r3, #0
 800ea24:	e7f5      	b.n	800ea12 <__ieee754_log+0x5a>
 800ea26:	152c      	asrs	r4, r5, #20
 800ea28:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ea2c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ea30:	441c      	add	r4, r3
 800ea32:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ea36:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ea3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea3e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ea42:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ea46:	ea42 0105 	orr.w	r1, r2, r5
 800ea4a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ea4e:	2200      	movs	r2, #0
 800ea50:	4bb4      	ldr	r3, [pc, #720]	; (800ed24 <__ieee754_log+0x36c>)
 800ea52:	f7f1 fc39 	bl	80002c8 <__aeabi_dsub>
 800ea56:	1cab      	adds	r3, r5, #2
 800ea58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea5c:	2b02      	cmp	r3, #2
 800ea5e:	4682      	mov	sl, r0
 800ea60:	468b      	mov	fp, r1
 800ea62:	f04f 0200 	mov.w	r2, #0
 800ea66:	dc53      	bgt.n	800eb10 <__ieee754_log+0x158>
 800ea68:	2300      	movs	r3, #0
 800ea6a:	f7f2 f84d 	bl	8000b08 <__aeabi_dcmpeq>
 800ea6e:	b1d0      	cbz	r0, 800eaa6 <__ieee754_log+0xee>
 800ea70:	2c00      	cmp	r4, #0
 800ea72:	f000 8122 	beq.w	800ecba <__ieee754_log+0x302>
 800ea76:	4620      	mov	r0, r4
 800ea78:	f7f1 fd74 	bl	8000564 <__aeabi_i2d>
 800ea7c:	a390      	add	r3, pc, #576	; (adr r3, 800ecc0 <__ieee754_log+0x308>)
 800ea7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea82:	4606      	mov	r6, r0
 800ea84:	460f      	mov	r7, r1
 800ea86:	f7f1 fdd7 	bl	8000638 <__aeabi_dmul>
 800ea8a:	a38f      	add	r3, pc, #572	; (adr r3, 800ecc8 <__ieee754_log+0x310>)
 800ea8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea90:	4604      	mov	r4, r0
 800ea92:	460d      	mov	r5, r1
 800ea94:	4630      	mov	r0, r6
 800ea96:	4639      	mov	r1, r7
 800ea98:	f7f1 fdce 	bl	8000638 <__aeabi_dmul>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	4620      	mov	r0, r4
 800eaa2:	4629      	mov	r1, r5
 800eaa4:	e7ba      	b.n	800ea1c <__ieee754_log+0x64>
 800eaa6:	a38a      	add	r3, pc, #552	; (adr r3, 800ecd0 <__ieee754_log+0x318>)
 800eaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaac:	4650      	mov	r0, sl
 800eaae:	4659      	mov	r1, fp
 800eab0:	f7f1 fdc2 	bl	8000638 <__aeabi_dmul>
 800eab4:	4602      	mov	r2, r0
 800eab6:	460b      	mov	r3, r1
 800eab8:	2000      	movs	r0, #0
 800eaba:	499b      	ldr	r1, [pc, #620]	; (800ed28 <__ieee754_log+0x370>)
 800eabc:	f7f1 fc04 	bl	80002c8 <__aeabi_dsub>
 800eac0:	4652      	mov	r2, sl
 800eac2:	4606      	mov	r6, r0
 800eac4:	460f      	mov	r7, r1
 800eac6:	465b      	mov	r3, fp
 800eac8:	4650      	mov	r0, sl
 800eaca:	4659      	mov	r1, fp
 800eacc:	f7f1 fdb4 	bl	8000638 <__aeabi_dmul>
 800ead0:	4602      	mov	r2, r0
 800ead2:	460b      	mov	r3, r1
 800ead4:	4630      	mov	r0, r6
 800ead6:	4639      	mov	r1, r7
 800ead8:	f7f1 fdae 	bl	8000638 <__aeabi_dmul>
 800eadc:	4606      	mov	r6, r0
 800eade:	460f      	mov	r7, r1
 800eae0:	b914      	cbnz	r4, 800eae8 <__ieee754_log+0x130>
 800eae2:	4632      	mov	r2, r6
 800eae4:	463b      	mov	r3, r7
 800eae6:	e0a2      	b.n	800ec2e <__ieee754_log+0x276>
 800eae8:	4620      	mov	r0, r4
 800eaea:	f7f1 fd3b 	bl	8000564 <__aeabi_i2d>
 800eaee:	a374      	add	r3, pc, #464	; (adr r3, 800ecc0 <__ieee754_log+0x308>)
 800eaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf4:	4680      	mov	r8, r0
 800eaf6:	4689      	mov	r9, r1
 800eaf8:	f7f1 fd9e 	bl	8000638 <__aeabi_dmul>
 800eafc:	a372      	add	r3, pc, #456	; (adr r3, 800ecc8 <__ieee754_log+0x310>)
 800eafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb02:	4604      	mov	r4, r0
 800eb04:	460d      	mov	r5, r1
 800eb06:	4640      	mov	r0, r8
 800eb08:	4649      	mov	r1, r9
 800eb0a:	f7f1 fd95 	bl	8000638 <__aeabi_dmul>
 800eb0e:	e0a7      	b.n	800ec60 <__ieee754_log+0x2a8>
 800eb10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eb14:	f7f1 fbda 	bl	80002cc <__adddf3>
 800eb18:	4602      	mov	r2, r0
 800eb1a:	460b      	mov	r3, r1
 800eb1c:	4650      	mov	r0, sl
 800eb1e:	4659      	mov	r1, fp
 800eb20:	f7f1 feb4 	bl	800088c <__aeabi_ddiv>
 800eb24:	ec41 0b18 	vmov	d8, r0, r1
 800eb28:	4620      	mov	r0, r4
 800eb2a:	f7f1 fd1b 	bl	8000564 <__aeabi_i2d>
 800eb2e:	ec53 2b18 	vmov	r2, r3, d8
 800eb32:	ec41 0b19 	vmov	d9, r0, r1
 800eb36:	ec51 0b18 	vmov	r0, r1, d8
 800eb3a:	f7f1 fd7d 	bl	8000638 <__aeabi_dmul>
 800eb3e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800eb42:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800eb46:	9301      	str	r3, [sp, #4]
 800eb48:	4602      	mov	r2, r0
 800eb4a:	460b      	mov	r3, r1
 800eb4c:	4680      	mov	r8, r0
 800eb4e:	4689      	mov	r9, r1
 800eb50:	f7f1 fd72 	bl	8000638 <__aeabi_dmul>
 800eb54:	a360      	add	r3, pc, #384	; (adr r3, 800ecd8 <__ieee754_log+0x320>)
 800eb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5a:	4606      	mov	r6, r0
 800eb5c:	460f      	mov	r7, r1
 800eb5e:	f7f1 fd6b 	bl	8000638 <__aeabi_dmul>
 800eb62:	a35f      	add	r3, pc, #380	; (adr r3, 800ece0 <__ieee754_log+0x328>)
 800eb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb68:	f7f1 fbb0 	bl	80002cc <__adddf3>
 800eb6c:	4632      	mov	r2, r6
 800eb6e:	463b      	mov	r3, r7
 800eb70:	f7f1 fd62 	bl	8000638 <__aeabi_dmul>
 800eb74:	a35c      	add	r3, pc, #368	; (adr r3, 800ece8 <__ieee754_log+0x330>)
 800eb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7a:	f7f1 fba7 	bl	80002cc <__adddf3>
 800eb7e:	4632      	mov	r2, r6
 800eb80:	463b      	mov	r3, r7
 800eb82:	f7f1 fd59 	bl	8000638 <__aeabi_dmul>
 800eb86:	a35a      	add	r3, pc, #360	; (adr r3, 800ecf0 <__ieee754_log+0x338>)
 800eb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8c:	f7f1 fb9e 	bl	80002cc <__adddf3>
 800eb90:	4642      	mov	r2, r8
 800eb92:	464b      	mov	r3, r9
 800eb94:	f7f1 fd50 	bl	8000638 <__aeabi_dmul>
 800eb98:	a357      	add	r3, pc, #348	; (adr r3, 800ecf8 <__ieee754_log+0x340>)
 800eb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9e:	4680      	mov	r8, r0
 800eba0:	4689      	mov	r9, r1
 800eba2:	4630      	mov	r0, r6
 800eba4:	4639      	mov	r1, r7
 800eba6:	f7f1 fd47 	bl	8000638 <__aeabi_dmul>
 800ebaa:	a355      	add	r3, pc, #340	; (adr r3, 800ed00 <__ieee754_log+0x348>)
 800ebac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb0:	f7f1 fb8c 	bl	80002cc <__adddf3>
 800ebb4:	4632      	mov	r2, r6
 800ebb6:	463b      	mov	r3, r7
 800ebb8:	f7f1 fd3e 	bl	8000638 <__aeabi_dmul>
 800ebbc:	a352      	add	r3, pc, #328	; (adr r3, 800ed08 <__ieee754_log+0x350>)
 800ebbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc2:	f7f1 fb83 	bl	80002cc <__adddf3>
 800ebc6:	4632      	mov	r2, r6
 800ebc8:	463b      	mov	r3, r7
 800ebca:	f7f1 fd35 	bl	8000638 <__aeabi_dmul>
 800ebce:	460b      	mov	r3, r1
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	4649      	mov	r1, r9
 800ebd4:	4640      	mov	r0, r8
 800ebd6:	f7f1 fb79 	bl	80002cc <__adddf3>
 800ebda:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ebde:	9b01      	ldr	r3, [sp, #4]
 800ebe0:	3551      	adds	r5, #81	; 0x51
 800ebe2:	431d      	orrs	r5, r3
 800ebe4:	2d00      	cmp	r5, #0
 800ebe6:	4680      	mov	r8, r0
 800ebe8:	4689      	mov	r9, r1
 800ebea:	dd48      	ble.n	800ec7e <__ieee754_log+0x2c6>
 800ebec:	4b4e      	ldr	r3, [pc, #312]	; (800ed28 <__ieee754_log+0x370>)
 800ebee:	2200      	movs	r2, #0
 800ebf0:	4650      	mov	r0, sl
 800ebf2:	4659      	mov	r1, fp
 800ebf4:	f7f1 fd20 	bl	8000638 <__aeabi_dmul>
 800ebf8:	4652      	mov	r2, sl
 800ebfa:	465b      	mov	r3, fp
 800ebfc:	f7f1 fd1c 	bl	8000638 <__aeabi_dmul>
 800ec00:	4602      	mov	r2, r0
 800ec02:	460b      	mov	r3, r1
 800ec04:	4606      	mov	r6, r0
 800ec06:	460f      	mov	r7, r1
 800ec08:	4640      	mov	r0, r8
 800ec0a:	4649      	mov	r1, r9
 800ec0c:	f7f1 fb5e 	bl	80002cc <__adddf3>
 800ec10:	ec53 2b18 	vmov	r2, r3, d8
 800ec14:	f7f1 fd10 	bl	8000638 <__aeabi_dmul>
 800ec18:	4680      	mov	r8, r0
 800ec1a:	4689      	mov	r9, r1
 800ec1c:	b964      	cbnz	r4, 800ec38 <__ieee754_log+0x280>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	460b      	mov	r3, r1
 800ec22:	4630      	mov	r0, r6
 800ec24:	4639      	mov	r1, r7
 800ec26:	f7f1 fb4f 	bl	80002c8 <__aeabi_dsub>
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	4650      	mov	r0, sl
 800ec30:	4659      	mov	r1, fp
 800ec32:	f7f1 fb49 	bl	80002c8 <__aeabi_dsub>
 800ec36:	e6d6      	b.n	800e9e6 <__ieee754_log+0x2e>
 800ec38:	a321      	add	r3, pc, #132	; (adr r3, 800ecc0 <__ieee754_log+0x308>)
 800ec3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3e:	ec51 0b19 	vmov	r0, r1, d9
 800ec42:	f7f1 fcf9 	bl	8000638 <__aeabi_dmul>
 800ec46:	a320      	add	r3, pc, #128	; (adr r3, 800ecc8 <__ieee754_log+0x310>)
 800ec48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4c:	4604      	mov	r4, r0
 800ec4e:	460d      	mov	r5, r1
 800ec50:	ec51 0b19 	vmov	r0, r1, d9
 800ec54:	f7f1 fcf0 	bl	8000638 <__aeabi_dmul>
 800ec58:	4642      	mov	r2, r8
 800ec5a:	464b      	mov	r3, r9
 800ec5c:	f7f1 fb36 	bl	80002cc <__adddf3>
 800ec60:	4602      	mov	r2, r0
 800ec62:	460b      	mov	r3, r1
 800ec64:	4630      	mov	r0, r6
 800ec66:	4639      	mov	r1, r7
 800ec68:	f7f1 fb2e 	bl	80002c8 <__aeabi_dsub>
 800ec6c:	4652      	mov	r2, sl
 800ec6e:	465b      	mov	r3, fp
 800ec70:	f7f1 fb2a 	bl	80002c8 <__aeabi_dsub>
 800ec74:	4602      	mov	r2, r0
 800ec76:	460b      	mov	r3, r1
 800ec78:	4620      	mov	r0, r4
 800ec7a:	4629      	mov	r1, r5
 800ec7c:	e7d9      	b.n	800ec32 <__ieee754_log+0x27a>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	460b      	mov	r3, r1
 800ec82:	4650      	mov	r0, sl
 800ec84:	4659      	mov	r1, fp
 800ec86:	f7f1 fb1f 	bl	80002c8 <__aeabi_dsub>
 800ec8a:	ec53 2b18 	vmov	r2, r3, d8
 800ec8e:	f7f1 fcd3 	bl	8000638 <__aeabi_dmul>
 800ec92:	4606      	mov	r6, r0
 800ec94:	460f      	mov	r7, r1
 800ec96:	2c00      	cmp	r4, #0
 800ec98:	f43f af23 	beq.w	800eae2 <__ieee754_log+0x12a>
 800ec9c:	a308      	add	r3, pc, #32	; (adr r3, 800ecc0 <__ieee754_log+0x308>)
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	ec51 0b19 	vmov	r0, r1, d9
 800eca6:	f7f1 fcc7 	bl	8000638 <__aeabi_dmul>
 800ecaa:	a307      	add	r3, pc, #28	; (adr r3, 800ecc8 <__ieee754_log+0x310>)
 800ecac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	460d      	mov	r5, r1
 800ecb4:	ec51 0b19 	vmov	r0, r1, d9
 800ecb8:	e727      	b.n	800eb0a <__ieee754_log+0x152>
 800ecba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800ed10 <__ieee754_log+0x358>
 800ecbe:	e694      	b.n	800e9ea <__ieee754_log+0x32>
 800ecc0:	fee00000 	.word	0xfee00000
 800ecc4:	3fe62e42 	.word	0x3fe62e42
 800ecc8:	35793c76 	.word	0x35793c76
 800eccc:	3dea39ef 	.word	0x3dea39ef
 800ecd0:	55555555 	.word	0x55555555
 800ecd4:	3fd55555 	.word	0x3fd55555
 800ecd8:	df3e5244 	.word	0xdf3e5244
 800ecdc:	3fc2f112 	.word	0x3fc2f112
 800ece0:	96cb03de 	.word	0x96cb03de
 800ece4:	3fc74664 	.word	0x3fc74664
 800ece8:	94229359 	.word	0x94229359
 800ecec:	3fd24924 	.word	0x3fd24924
 800ecf0:	55555593 	.word	0x55555593
 800ecf4:	3fe55555 	.word	0x3fe55555
 800ecf8:	d078c69f 	.word	0xd078c69f
 800ecfc:	3fc39a09 	.word	0x3fc39a09
 800ed00:	1d8e78af 	.word	0x1d8e78af
 800ed04:	3fcc71c5 	.word	0x3fcc71c5
 800ed08:	9997fa04 	.word	0x9997fa04
 800ed0c:	3fd99999 	.word	0x3fd99999
	...
 800ed18:	c3500000 	.word	0xc3500000
 800ed1c:	43500000 	.word	0x43500000
 800ed20:	7fefffff 	.word	0x7fefffff
 800ed24:	3ff00000 	.word	0x3ff00000
 800ed28:	3fe00000 	.word	0x3fe00000

0800ed2c <_init>:
 800ed2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed2e:	bf00      	nop
 800ed30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed32:	bc08      	pop	{r3}
 800ed34:	469e      	mov	lr, r3
 800ed36:	4770      	bx	lr

0800ed38 <_fini>:
 800ed38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed3a:	bf00      	nop
 800ed3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed3e:	bc08      	pop	{r3}
 800ed40:	469e      	mov	lr, r3
 800ed42:	4770      	bx	lr
