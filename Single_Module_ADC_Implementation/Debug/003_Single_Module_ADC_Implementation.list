
003_Single_Module_ADC_Implementation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  080096c8  080096c8  000196c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bcc  08009bcc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009bcc  08009bcc  00019bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bd4  08009bd4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bd4  08009bd4  00019bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bd8  08009bd8  00019bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200001e8  08009dc4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08009dc4  00020474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbeb  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002093  00000000  00000000  0002ce03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002ee98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002f898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002396d  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7bd  00000000  00000000  00053b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6df8  00000000  00000000  000612f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001380ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e88  00000000  00000000  00138140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080096ac 	.word	0x080096ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	080096ac 	.word	0x080096ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f023 030f 	bic.w	r3, r3, #15
 800103c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	f043 030c 	orr.w	r3, r3, #12
 800104a:	b2db      	uxtb	r3, r3
 800104c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	f043 0308 	orr.w	r3, r3, #8
 8001054:	b2db      	uxtb	r3, r3
 8001056:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	f043 030c 	orr.w	r3, r3, #12
 800105e:	b2db      	uxtb	r3, r3
 8001060:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001062:	7bbb      	ldrb	r3, [r7, #14]
 8001064:	f043 0308 	orr.w	r3, r3, #8
 8001068:	b2db      	uxtb	r3, r3
 800106a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800106c:	f107 0208 	add.w	r2, r7, #8
 8001070:	2364      	movs	r3, #100	; 0x64
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2304      	movs	r3, #4
 8001076:	214e      	movs	r1, #78	; 0x4e
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <lcd_send_cmd+0x5c>)
 800107a:	f002 fc61 	bl	8003940 <HAL_I2C_Master_Transmit>
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000270 	.word	0x20000270

0800108c <lcd_send_data>:

void lcd_send_data (char data)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af02      	add	r7, sp, #8
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	f023 030f 	bic.w	r3, r3, #15
 800109c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	f043 030d 	orr.w	r3, r3, #13
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	f043 0309 	orr.w	r3, r3, #9
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	f043 030d 	orr.w	r3, r3, #13
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	f043 0309 	orr.w	r3, r3, #9
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80010cc:	f107 0208 	add.w	r2, r7, #8
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2304      	movs	r3, #4
 80010d6:	214e      	movs	r1, #78	; 0x4e
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <lcd_send_data+0x5c>)
 80010da:	f002 fc31 	bl	8003940 <HAL_I2C_Master_Transmit>
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000270 	.word	0x20000270

080010ec <lcd_clear>:

void lcd_clear (void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80010f2:	2080      	movs	r0, #128	; 0x80
 80010f4:	f7ff ff9a 	bl	800102c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	e005      	b.n	800110a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80010fe:	2020      	movs	r0, #32
 8001100:	f7ff ffc4 	bl	800108c <lcd_send_data>
	for (int i=0; i<70; i++)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3301      	adds	r3, #1
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b45      	cmp	r3, #69	; 0x45
 800110e:	ddf6      	ble.n	80010fe <lcd_clear+0x12>
	}
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800111e:	2032      	movs	r0, #50	; 0x32
 8001120:	f001 f86e 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001124:	2030      	movs	r0, #48	; 0x30
 8001126:	f7ff ff81 	bl	800102c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800112a:	2005      	movs	r0, #5
 800112c:	f001 f868 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001130:	2030      	movs	r0, #48	; 0x30
 8001132:	f7ff ff7b 	bl	800102c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001136:	2001      	movs	r0, #1
 8001138:	f001 f862 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x30);
 800113c:	2030      	movs	r0, #48	; 0x30
 800113e:	f7ff ff75 	bl	800102c <lcd_send_cmd>
	HAL_Delay(10);
 8001142:	200a      	movs	r0, #10
 8001144:	f001 f85c 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001148:	2020      	movs	r0, #32
 800114a:	f7ff ff6f 	bl	800102c <lcd_send_cmd>
	HAL_Delay(10);
 800114e:	200a      	movs	r0, #10
 8001150:	f001 f856 	bl	8002200 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001154:	2028      	movs	r0, #40	; 0x28
 8001156:	f7ff ff69 	bl	800102c <lcd_send_cmd>
	HAL_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f001 f850 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001160:	2008      	movs	r0, #8
 8001162:	f7ff ff63 	bl	800102c <lcd_send_cmd>
	HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f001 f84a 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff ff5d 	bl	800102c <lcd_send_cmd>
	HAL_Delay(1);
 8001172:	2001      	movs	r0, #1
 8001174:	f001 f844 	bl	8002200 <HAL_Delay>
	HAL_Delay(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f001 f841 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800117e:	2006      	movs	r0, #6
 8001180:	f7ff ff54 	bl	800102c <lcd_send_cmd>
	HAL_Delay(1);
 8001184:	2001      	movs	r0, #1
 8001186:	f001 f83b 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800118a:	200c      	movs	r0, #12
 800118c:	f7ff ff4e 	bl	800102c <lcd_send_cmd>
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800119c:	e006      	b.n	80011ac <lcd_send_string+0x18>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff70 	bl	800108c <lcd_send_data>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f4      	bne.n	800119e <lcd_send_string+0xa>
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <read_cell_voltages>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void read_cell_voltages(){
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0

	for( int i = 1; i < 4; i++){		// Channel voltage values
 80011c6:	2301      	movs	r3, #1
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	e026      	b.n	800121a <read_cell_voltages+0x5a>

		cell_voltages[count] = (float) vdda * adc1_digital_value[i] / 4095;
 80011cc:	4a18      	ldr	r2, [pc, #96]	; (8001230 <read_cell_voltages+0x70>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <read_cell_voltages+0x74>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <read_cell_voltages+0x78>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	eddf 6a14 	vldr	s13, [pc, #80]	; 800123c <read_cell_voltages+0x7c>
 80011ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f2:	4a13      	ldr	r2, [pc, #76]	; (8001240 <read_cell_voltages+0x80>)
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	edc3 7a00 	vstr	s15, [r3]
		count++;
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <read_cell_voltages+0x78>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <read_cell_voltages+0x78>)
 8001204:	6013      	str	r3, [r2, #0]

		if(count == 3)	// Reset counter to recount 0,1,2
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <read_cell_voltages+0x78>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d102      	bne.n	8001214 <read_cell_voltages+0x54>
			count = 0;
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <read_cell_voltages+0x78>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
	for( int i = 1; i < 4; i++){		// Channel voltage values
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3301      	adds	r3, #1
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b03      	cmp	r3, #3
 800121e:	ddd5      	ble.n	80011cc <read_cell_voltages+0xc>
		}
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000328 	.word	0x20000328
 8001234:	200003bc 	.word	0x200003bc
 8001238:	20000208 	.word	0x20000208
 800123c:	457ff000 	.word	0x457ff000
 8001240:	200003a8 	.word	0x200003a8
 8001244:	00000000 	.word	0x00000000

08001248 <read_temperature>:

double read_temperature(int ntc_digital_value){
 8001248:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]

	// NTC resistance calculation
	resistance = resolution / ntc_digital_value;
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff f986 	bl	8000564 <__aeabi_i2d>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	a161      	add	r1, pc, #388	; (adr r1, 80013e4 <read_temperature+0x19c>)
 800125e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001262:	f7ff fb13 	bl	800088c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	495b      	ldr	r1, [pc, #364]	; (80013d8 <read_temperature+0x190>)
 800126c:	e9c1 2300 	strd	r2, r3, [r1]
	resistance -= 1.0;
 8001270:	4b59      	ldr	r3, [pc, #356]	; (80013d8 <read_temperature+0x190>)
 8001272:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b58      	ldr	r3, [pc, #352]	; (80013dc <read_temperature+0x194>)
 800127c:	f7ff f824 	bl	80002c8 <__aeabi_dsub>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4954      	ldr	r1, [pc, #336]	; (80013d8 <read_temperature+0x190>)
 8001286:	e9c1 2300 	strd	r2, r3, [r1]
	resistance = res_10k / resistance;
 800128a:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <read_temperature+0x190>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	a147      	add	r1, pc, #284	; (adr r1, 80013b0 <read_temperature+0x168>)
 8001292:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001296:	f7ff faf9 	bl	800088c <__aeabi_ddiv>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	494e      	ldr	r1, [pc, #312]	; (80013d8 <read_temperature+0x190>)
 80012a0:	e9c1 2300 	strd	r2, r3, [r1]

	// Steinhart-Hart equation
	steinhart = (constant_A) + (constant_B * log(resistance)) + (constant_C * log(resistance) * log(resistance) * log(resistance));
 80012a4:	4b4c      	ldr	r3, [pc, #304]	; (80013d8 <read_temperature+0x190>)
 80012a6:	ed93 7b00 	vldr	d7, [r3]
 80012aa:	eeb0 0a47 	vmov.f32	s0, s14
 80012ae:	eef0 0a67 	vmov.f32	s1, s15
 80012b2:	f007 fff9 	bl	80092a8 <log>
 80012b6:	ec51 0b10 	vmov	r0, r1, d0
 80012ba:	a33f      	add	r3, pc, #252	; (adr r3, 80013b8 <read_temperature+0x170>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff f9ba 	bl	8000638 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	a33c      	add	r3, pc, #240	; (adr r3, 80013c0 <read_temperature+0x178>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7fe fffb 	bl	80002cc <__adddf3>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4614      	mov	r4, r2
 80012dc:	461d      	mov	r5, r3
 80012de:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <read_temperature+0x190>)
 80012e0:	ed93 7b00 	vldr	d7, [r3]
 80012e4:	eeb0 0a47 	vmov.f32	s0, s14
 80012e8:	eef0 0a67 	vmov.f32	s1, s15
 80012ec:	f007 ffdc 	bl	80092a8 <log>
 80012f0:	ec51 0b10 	vmov	r0, r1, d0
 80012f4:	a334      	add	r3, pc, #208	; (adr r3, 80013c8 <read_temperature+0x180>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7ff f99d 	bl	8000638 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4690      	mov	r8, r2
 8001304:	4699      	mov	r9, r3
 8001306:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <read_temperature+0x190>)
 8001308:	ed93 7b00 	vldr	d7, [r3]
 800130c:	eeb0 0a47 	vmov.f32	s0, s14
 8001310:	eef0 0a67 	vmov.f32	s1, s15
 8001314:	f007 ffc8 	bl	80092a8 <log>
 8001318:	ec53 2b10 	vmov	r2, r3, d0
 800131c:	4640      	mov	r0, r8
 800131e:	4649      	mov	r1, r9
 8001320:	f7ff f98a 	bl	8000638 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4690      	mov	r8, r2
 800132a:	4699      	mov	r9, r3
 800132c:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <read_temperature+0x190>)
 800132e:	ed93 7b00 	vldr	d7, [r3]
 8001332:	eeb0 0a47 	vmov.f32	s0, s14
 8001336:	eef0 0a67 	vmov.f32	s1, s15
 800133a:	f007 ffb5 	bl	80092a8 <log>
 800133e:	ec53 2b10 	vmov	r2, r3, d0
 8001342:	4640      	mov	r0, r8
 8001344:	4649      	mov	r1, r9
 8001346:	f7ff f977 	bl	8000638 <__aeabi_dmul>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4620      	mov	r0, r4
 8001350:	4629      	mov	r1, r5
 8001352:	f7fe ffbb 	bl	80002cc <__adddf3>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4921      	ldr	r1, [pc, #132]	; (80013e0 <read_temperature+0x198>)
 800135c:	e9c1 2300 	strd	r2, r3, [r1]
	steinhart = 1 / steinhart;
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <read_temperature+0x198>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	f04f 0000 	mov.w	r0, #0
 800136a:	491c      	ldr	r1, [pc, #112]	; (80013dc <read_temperature+0x194>)
 800136c:	f7ff fa8e 	bl	800088c <__aeabi_ddiv>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	491a      	ldr	r1, [pc, #104]	; (80013e0 <read_temperature+0x198>)
 8001376:	e9c1 2300 	strd	r2, r3, [r1]
	steinhart -= 273.15;	// Convert Kelvin to Celsius
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <read_temperature+0x198>)
 800137c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001380:	a313      	add	r3, pc, #76	; (adr r3, 80013d0 <read_temperature+0x188>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7fe ff9f 	bl	80002c8 <__aeabi_dsub>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4914      	ldr	r1, [pc, #80]	; (80013e0 <read_temperature+0x198>)
 8001390:	e9c1 2300 	strd	r2, r3, [r1]

	return steinhart;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <read_temperature+0x198>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	ec43 2b17 	vmov	d7, r2, r3
}
 800139e:	eeb0 0a47 	vmov.f32	s0, s14
 80013a2:	eef0 0a67 	vmov.f32	s1, s15
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013ae:	bf00      	nop
 80013b0:	00000000 	.word	0x00000000
 80013b4:	40c38800 	.word	0x40c38800
 80013b8:	56f8bf82 	.word	0x56f8bf82
 80013bc:	3f2af966 	.word	0x3f2af966
 80013c0:	6e404f7b 	.word	0x6e404f7b
 80013c4:	3f55361a 	.word	0x3f55361a
 80013c8:	135e049e 	.word	0x135e049e
 80013cc:	3e8b7bac 	.word	0x3e8b7bac
 80013d0:	66666666 	.word	0x66666666
 80013d4:	40711266 	.word	0x40711266
 80013d8:	200003c0 	.word	0x200003c0
 80013dc:	3ff00000 	.word	0x3ff00000
 80013e0:	20000220 	.word	0x20000220
 80013e4:	00000000 	.word	0x00000000
 80013e8:	40affe00 	.word	0x40affe00
 80013ec:	00000000 	.word	0x00000000

080013f0 <read_current>:

void read_current(){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0

	vsupply = vdda * adc2_digital_value[1] / 4095;
 80013f6:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <read_current+0xf8>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001402:	4b3a      	ldr	r3, [pc, #232]	; (80014ec <read_current+0xfc>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140c:	eddf 6a38 	vldr	s13, [pc, #224]	; 80014f0 <read_current+0x100>
 8001410:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001414:	4b37      	ldr	r3, [pc, #220]	; (80014f4 <read_current+0x104>)
 8001416:	edc3 7a00 	vstr	s15, [r3]

	for ( int x = 0; x < 500; x++){
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	e01f      	b.n	8001460 <read_current+0x70>
	acs_output_voltage = vdda * adc2_digital_value[0] / 4095;
 8001420:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <read_current+0xf8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800142c:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <read_current+0xfc>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001436:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80014f0 <read_current+0x100>
 800143a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800143e:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <read_current+0x108>)
 8001440:	edc3 7a00 	vstr	s15, [r3]
	acs_output_sum += acs_output_voltage;
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <read_current+0x10c>)
 8001446:	ed93 7a00 	vldr	s14, [r3]
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <read_current+0x108>)
 800144c:	edd3 7a00 	vldr	s15, [r3]
 8001450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001454:	4b29      	ldr	r3, [pc, #164]	; (80014fc <read_current+0x10c>)
 8001456:	edc3 7a00 	vstr	s15, [r3]
	for ( int x = 0; x < 500; x++){
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3301      	adds	r3, #1
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001466:	dbdb      	blt.n	8001420 <read_current+0x30>
	}
	acs_output_ave = acs_output_sum / 500.0;
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <read_current+0x10c>)
 800146a:	ed93 7a00 	vldr	s14, [r3]
 800146e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001500 <read_current+0x110>
 8001472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <read_current+0x114>)
 8001478:	edc3 7a00 	vstr	s15, [r3]

	acs_current_value = (acs_output_ave - (vsupply / 2)) / 0.066;
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <read_current+0x114>)
 800147e:	ed93 7a00 	vldr	s14, [r3]
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <read_current+0x104>)
 8001484:	edd3 6a00 	vldr	s13, [r3]
 8001488:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800148c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001494:	ee17 0a90 	vmov	r0, s15
 8001498:	f7ff f876 	bl	8000588 <__aeabi_f2d>
 800149c:	a310      	add	r3, pc, #64	; (adr r3, 80014e0 <read_current+0xf0>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	f7ff f9f3 	bl	800088c <__aeabi_ddiv>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff fbbb 	bl	8000c28 <__aeabi_d2f>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <read_current+0x118>)
 80014b6:	6013      	str	r3, [r2, #0]

	if(acs_current_value < 0)
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <read_current+0x118>)
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	d503      	bpl.n	80014d0 <read_current+0xe0>
		acs_current_value = 0;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <read_current+0x118>)
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

	acs_output_sum = 0;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <read_current+0x10c>)
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]


}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	4189374c 	.word	0x4189374c
 80014e4:	3fb0e560 	.word	0x3fb0e560
 80014e8:	200003b4 	.word	0x200003b4
 80014ec:	200003bc 	.word	0x200003bc
 80014f0:	457ff000 	.word	0x457ff000
 80014f4:	2000044c 	.word	0x2000044c
 80014f8:	200003a4 	.word	0x200003a4
 80014fc:	20000204 	.word	0x20000204
 8001500:	43fa0000 	.word	0x43fa0000
 8001504:	20000218 	.word	0x20000218
 8001508:	200002d8 	.word	0x200002d8
 800150c:	00000000 	.word	0x00000000

08001510 <calculate_soc>:

void calculate_soc(){
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0

	current_integration = ( acs_current_value * delta_time / batt_nominal );
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <calculate_soc+0x88>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f835 	bl	8000588 <__aeabi_f2d>
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <calculate_soc+0x8c>)
 8001524:	f7ff f888 	bl	8000638 <__aeabi_dmul>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4610      	mov	r0, r2
 800152e:	4619      	mov	r1, r3
 8001530:	a317      	add	r3, pc, #92	; (adr r3, 8001590 <calculate_soc+0x80>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff f9a9 	bl	800088c <__aeabi_ddiv>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <calculate_soc+0x90>)
 8001548:	f7ff f9a0 	bl	800088c <__aeabi_ddiv>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff fb68 	bl	8000c28 <__aeabi_d2f>
 8001558:	4603      	mov	r3, r0
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <calculate_soc+0x94>)
 800155c:	6013      	str	r3, [r2, #0]
	current_percentage = current_integration * 100.0;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <calculate_soc+0x94>)
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80015a8 <calculate_soc+0x98>
 8001568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <calculate_soc+0x9c>)
 800156e:	edc3 7a00 	vstr	s15, [r3]

	instant_soc = hundred_percent - current_percentage;	// inital soc calculation
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <calculate_soc+0x9c>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80015a8 <calculate_soc+0x98>
 800157c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <calculate_soc+0xa0>)
 8001582:	edc3 7a00 	vstr	s15, [r3]
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	00000000 	.word	0x00000000
 8001594:	4115f900 	.word	0x4115f900
 8001598:	200002d8 	.word	0x200002d8
 800159c:	40240000 	.word	0x40240000
 80015a0:	3ff80000 	.word	0x3ff80000
 80015a4:	20000340 	.word	0x20000340
 80015a8:	42c80000 	.word	0x42c80000
 80015ac:	2000021c 	.word	0x2000021c
 80015b0:	200002dc 	.word	0x200002dc

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b8:	f000 fdb0 	bl	800211c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015bc:	f000 f90e 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c0:	f000 fab8 	bl	8001b34 <MX_GPIO_Init>
  MX_DMA_Init();
 80015c4:	f000 fa8e 	bl	8001ae4 <MX_DMA_Init>
  MX_ADC1_Init();
 80015c8:	f000 f974 	bl	80018b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80015cc:	f000 f9fc 	bl	80019c8 <MX_ADC2_Init>
  MX_I2C1_Init();
 80015d0:	f000 fa5a 	bl	8001a88 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, adc1_digital_value, 5);
 80015d4:	2205      	movs	r2, #5
 80015d6:	4969      	ldr	r1, [pc, #420]	; (800177c <main+0x1c8>)
 80015d8:	4869      	ldr	r0, [pc, #420]	; (8001780 <main+0x1cc>)
 80015da:	f000 fe79 	bl	80022d0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, adc2_digital_value, 2);
 80015de:	2202      	movs	r2, #2
 80015e0:	4968      	ldr	r1, [pc, #416]	; (8001784 <main+0x1d0>)
 80015e2:	4869      	ldr	r0, [pc, #420]	; (8001788 <main+0x1d4>)
 80015e4:	f000 fe74 	bl	80022d0 <HAL_ADC_Start_DMA>
  lcd_init();
 80015e8:	f7ff fd97 	bl	800111a <lcd_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  vdda = (float) 3.3 * (*VREFIN_CAL) / adc1_digital_value[0];		// Vref voltage value
 80015ec:	4b67      	ldr	r3, [pc, #412]	; (800178c <main+0x1d8>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001790 <main+0x1dc>
 80015fc:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001600:	4b5e      	ldr	r3, [pc, #376]	; (800177c <main+0x1c8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800160c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001610:	4b60      	ldr	r3, [pc, #384]	; (8001794 <main+0x1e0>)
 8001612:	edc3 7a00 	vstr	s15, [r3]
	  read_cell_voltages();
 8001616:	f7ff fdd3 	bl	80011c0 <read_cell_voltages>
	  temperature = read_temperature(adc1_digital_value[4]);
 800161a:	4b58      	ldr	r3, [pc, #352]	; (800177c <main+0x1c8>)
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fe12 	bl	8001248 <read_temperature>
 8001624:	eeb0 7a40 	vmov.f32	s14, s0
 8001628:	eef0 7a60 	vmov.f32	s15, s1
 800162c:	4b5a      	ldr	r3, [pc, #360]	; (8001798 <main+0x1e4>)
 800162e:	ed83 7b00 	vstr	d7, [r3]
	  read_current();
 8001632:	f7ff fedd 	bl	80013f0 <read_current>
	  calculate_soc();
 8001636:	f7ff ff6b 	bl	8001510 <calculate_soc>
	  if(first_run){
 800163a:	4b58      	ldr	r3, [pc, #352]	; (800179c <main+0x1e8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00e      	beq.n	8001660 <main+0xac>
		  soc = instant_soc;
 8001642:	4b57      	ldr	r3, [pc, #348]	; (80017a0 <main+0x1ec>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a57      	ldr	r2, [pc, #348]	; (80017a4 <main+0x1f0>)
 8001648:	6013      	str	r3, [r2, #0]
		  first_run = !first_run;
 800164a:	4b54      	ldr	r3, [pc, #336]	; (800179c <main+0x1e8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	bf0c      	ite	eq
 8001652:	2301      	moveq	r3, #1
 8001654:	2300      	movne	r3, #0
 8001656:	b2db      	uxtb	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	4b50      	ldr	r3, [pc, #320]	; (800179c <main+0x1e8>)
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	e00a      	b.n	8001676 <main+0xc2>
	  }
	  else
		  soc = soc - current_percentage;
 8001660:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <main+0x1f0>)
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <main+0x1f4>)
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001670:	4b4c      	ldr	r3, [pc, #304]	; (80017a4 <main+0x1f0>)
 8001672:	edc3 7a00 	vstr	s15, [r3]

	  sprintf(soc_string, "%.3f", soc);
 8001676:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <main+0x1f0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff84 	bl	8000588 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4949      	ldr	r1, [pc, #292]	; (80017ac <main+0x1f8>)
 8001686:	484a      	ldr	r0, [pc, #296]	; (80017b0 <main+0x1fc>)
 8001688:	f004 f86a 	bl	8005760 <siprintf>
	  sprintf(cell_1_voltage_string, "%.3f", cell_voltages[0]);
 800168c:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <main+0x200>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff79 	bl	8000588 <__aeabi_f2d>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4944      	ldr	r1, [pc, #272]	; (80017ac <main+0x1f8>)
 800169c:	4846      	ldr	r0, [pc, #280]	; (80017b8 <main+0x204>)
 800169e:	f004 f85f 	bl	8005760 <siprintf>
	  sprintf(cell_2_voltage_string, "%.3f", cell_voltages[1]);
 80016a2:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <main+0x200>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff6e 	bl	8000588 <__aeabi_f2d>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	493e      	ldr	r1, [pc, #248]	; (80017ac <main+0x1f8>)
 80016b2:	4842      	ldr	r0, [pc, #264]	; (80017bc <main+0x208>)
 80016b4:	f004 f854 	bl	8005760 <siprintf>
	  sprintf(cell_3_voltage_string, "%.3f", cell_voltages[2]);
 80016b8:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <main+0x200>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ff63 	bl	8000588 <__aeabi_f2d>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4939      	ldr	r1, [pc, #228]	; (80017ac <main+0x1f8>)
 80016c8:	483d      	ldr	r0, [pc, #244]	; (80017c0 <main+0x20c>)
 80016ca:	f004 f849 	bl	8005760 <siprintf>
	  sprintf(temperature_string,"%.3f", temperature);
 80016ce:	4b32      	ldr	r3, [pc, #200]	; (8001798 <main+0x1e4>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	4935      	ldr	r1, [pc, #212]	; (80017ac <main+0x1f8>)
 80016d6:	483b      	ldr	r0, [pc, #236]	; (80017c4 <main+0x210>)
 80016d8:	f004 f842 	bl	8005760 <siprintf>


	  lcd_send_cmd(0x80);	lcd_send_string("Cell1: ");
 80016dc:	2080      	movs	r0, #128	; 0x80
 80016de:	f7ff fca5 	bl	800102c <lcd_send_cmd>
 80016e2:	4839      	ldr	r0, [pc, #228]	; (80017c8 <main+0x214>)
 80016e4:	f7ff fd56 	bl	8001194 <lcd_send_string>
	  lcd_send_cmd(0x87);	lcd_send_string(cell_1_voltage_string);
 80016e8:	2087      	movs	r0, #135	; 0x87
 80016ea:	f7ff fc9f 	bl	800102c <lcd_send_cmd>
 80016ee:	4832      	ldr	r0, [pc, #200]	; (80017b8 <main+0x204>)
 80016f0:	f7ff fd50 	bl	8001194 <lcd_send_string>
	  lcd_send_cmd(0xC0);	lcd_send_string("Cell2: ");
 80016f4:	20c0      	movs	r0, #192	; 0xc0
 80016f6:	f7ff fc99 	bl	800102c <lcd_send_cmd>
 80016fa:	4834      	ldr	r0, [pc, #208]	; (80017cc <main+0x218>)
 80016fc:	f7ff fd4a 	bl	8001194 <lcd_send_string>
	  lcd_send_cmd(0xC7);	lcd_send_string(cell_2_voltage_string);
 8001700:	20c7      	movs	r0, #199	; 0xc7
 8001702:	f7ff fc93 	bl	800102c <lcd_send_cmd>
 8001706:	482d      	ldr	r0, [pc, #180]	; (80017bc <main+0x208>)
 8001708:	f7ff fd44 	bl	8001194 <lcd_send_string>
	  HAL_Delay(2000);
 800170c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001710:	f000 fd76 	bl	8002200 <HAL_Delay>
	  lcd_clear();
 8001714:	f7ff fcea 	bl	80010ec <lcd_clear>

	  lcd_send_cmd(0x80);	lcd_send_string("Cell3: ");
 8001718:	2080      	movs	r0, #128	; 0x80
 800171a:	f7ff fc87 	bl	800102c <lcd_send_cmd>
 800171e:	482c      	ldr	r0, [pc, #176]	; (80017d0 <main+0x21c>)
 8001720:	f7ff fd38 	bl	8001194 <lcd_send_string>
	  lcd_send_cmd(0x87);	lcd_send_string(cell_3_voltage_string);
 8001724:	2087      	movs	r0, #135	; 0x87
 8001726:	f7ff fc81 	bl	800102c <lcd_send_cmd>
 800172a:	4825      	ldr	r0, [pc, #148]	; (80017c0 <main+0x20c>)
 800172c:	f7ff fd32 	bl	8001194 <lcd_send_string>
	  lcd_send_cmd(0xC0);	lcd_send_string("Temp: ");
 8001730:	20c0      	movs	r0, #192	; 0xc0
 8001732:	f7ff fc7b 	bl	800102c <lcd_send_cmd>
 8001736:	4827      	ldr	r0, [pc, #156]	; (80017d4 <main+0x220>)
 8001738:	f7ff fd2c 	bl	8001194 <lcd_send_string>
	  lcd_send_cmd(0xC7);	lcd_send_string(temperature_string);
 800173c:	20c7      	movs	r0, #199	; 0xc7
 800173e:	f7ff fc75 	bl	800102c <lcd_send_cmd>
 8001742:	4820      	ldr	r0, [pc, #128]	; (80017c4 <main+0x210>)
 8001744:	f7ff fd26 	bl	8001194 <lcd_send_string>
	  HAL_Delay(2000);
 8001748:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800174c:	f000 fd58 	bl	8002200 <HAL_Delay>
	  lcd_clear();
 8001750:	f7ff fccc 	bl	80010ec <lcd_clear>

	  lcd_send_cmd(0x80);	lcd_send_string("SoC: ");
 8001754:	2080      	movs	r0, #128	; 0x80
 8001756:	f7ff fc69 	bl	800102c <lcd_send_cmd>
 800175a:	481f      	ldr	r0, [pc, #124]	; (80017d8 <main+0x224>)
 800175c:	f7ff fd1a 	bl	8001194 <lcd_send_string>
	  lcd_send_cmd(0x87);	lcd_send_string(soc_string);
 8001760:	2087      	movs	r0, #135	; 0x87
 8001762:	f7ff fc63 	bl	800102c <lcd_send_cmd>
 8001766:	4812      	ldr	r0, [pc, #72]	; (80017b0 <main+0x1fc>)
 8001768:	f7ff fd14 	bl	8001194 <lcd_send_string>
	  HAL_Delay(2000);
 800176c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001770:	f000 fd46 	bl	8002200 <HAL_Delay>
	  lcd_clear();
 8001774:	f7ff fcba 	bl	80010ec <lcd_clear>
	  vdda = (float) 3.3 * (*VREFIN_CAL) / adc1_digital_value[0];		// Vref voltage value
 8001778:	e738      	b.n	80015ec <main+0x38>
 800177a:	bf00      	nop
 800177c:	20000328 	.word	0x20000328
 8001780:	200002e0 	.word	0x200002e0
 8001784:	200003b4 	.word	0x200003b4
 8001788:	20000228 	.word	0x20000228
 800178c:	1fff7a2a 	.word	0x1fff7a2a
 8001790:	40533333 	.word	0x40533333
 8001794:	200003bc 	.word	0x200003bc
 8001798:	200002d0 	.word	0x200002d0
 800179c:	20000000 	.word	0x20000000
 80017a0:	200002dc 	.word	0x200002dc
 80017a4:	20000450 	.word	0x20000450
 80017a8:	2000021c 	.word	0x2000021c
 80017ac:	080096c8 	.word	0x080096c8
 80017b0:	200002c4 	.word	0x200002c4
 80017b4:	200003a8 	.word	0x200003a8
 80017b8:	200003c8 	.word	0x200003c8
 80017bc:	20000440 	.word	0x20000440
 80017c0:	20000454 	.word	0x20000454
 80017c4:	20000434 	.word	0x20000434
 80017c8:	080096d0 	.word	0x080096d0
 80017cc:	080096d8 	.word	0x080096d8
 80017d0:	080096e0 	.word	0x080096e0
 80017d4:	080096e8 	.word	0x080096e8
 80017d8:	080096f0 	.word	0x080096f0

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b094      	sub	sp, #80	; 0x50
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	2234      	movs	r2, #52	; 0x34
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 f930 	bl	8004a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	4b29      	ldr	r3, [pc, #164]	; (80018ac <SystemClock_Config+0xd0>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	4a28      	ldr	r2, [pc, #160]	; (80018ac <SystemClock_Config+0xd0>)
 800180a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180e:	6413      	str	r3, [r2, #64]	; 0x40
 8001810:	4b26      	ldr	r3, [pc, #152]	; (80018ac <SystemClock_Config+0xd0>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800181c:	2300      	movs	r3, #0
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <SystemClock_Config+0xd4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a22      	ldr	r2, [pc, #136]	; (80018b0 <SystemClock_Config+0xd4>)
 8001826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <SystemClock_Config+0xd4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001838:	2302      	movs	r3, #2
 800183a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800183c:	2301      	movs	r3, #1
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001840:	2310      	movs	r3, #16
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001844:	2302      	movs	r3, #2
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001848:	2300      	movs	r3, #0
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800184c:	2308      	movs	r3, #8
 800184e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001850:	23a8      	movs	r3, #168	; 0xa8
 8001852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001854:	2302      	movs	r3, #2
 8001856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001858:	2302      	movs	r3, #2
 800185a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800185c:	2302      	movs	r3, #2
 800185e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4618      	mov	r0, r3
 8001866:	f002 fe2b 	bl	80044c0 <HAL_RCC_OscConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001870:	f000 f9a4 	bl	8001bbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001874:	230f      	movs	r3, #15
 8001876:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001878:	2302      	movs	r3, #2
 800187a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001880:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	2105      	movs	r1, #5
 8001892:	4618      	mov	r0, r3
 8001894:	f002 fb5c 	bl	8003f50 <HAL_RCC_ClockConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800189e:	f000 f98d 	bl	8001bbc <Error_Handler>
  }
}
 80018a2:	bf00      	nop
 80018a4:	3750      	adds	r7, #80	; 0x50
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40007000 	.word	0x40007000

080018b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ba:	463b      	mov	r3, r7
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018c6:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <MX_ADC1_Init+0x108>)
 80018c8:	4a3d      	ldr	r2, [pc, #244]	; (80019c0 <MX_ADC1_Init+0x10c>)
 80018ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018cc:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <MX_ADC1_Init+0x108>)
 80018ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018d4:	4b39      	ldr	r3, [pc, #228]	; (80019bc <MX_ADC1_Init+0x108>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018da:	4b38      	ldr	r3, [pc, #224]	; (80019bc <MX_ADC1_Init+0x108>)
 80018dc:	2201      	movs	r2, #1
 80018de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018e0:	4b36      	ldr	r3, [pc, #216]	; (80019bc <MX_ADC1_Init+0x108>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018e6:	4b35      	ldr	r3, [pc, #212]	; (80019bc <MX_ADC1_Init+0x108>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018ee:	4b33      	ldr	r3, [pc, #204]	; (80019bc <MX_ADC1_Init+0x108>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <MX_ADC1_Init+0x108>)
 80018f6:	4a33      	ldr	r2, [pc, #204]	; (80019c4 <MX_ADC1_Init+0x110>)
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018fa:	4b30      	ldr	r3, [pc, #192]	; (80019bc <MX_ADC1_Init+0x108>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001900:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <MX_ADC1_Init+0x108>)
 8001902:	2205      	movs	r2, #5
 8001904:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001906:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <MX_ADC1_Init+0x108>)
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800190e:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <MX_ADC1_Init+0x108>)
 8001910:	2201      	movs	r2, #1
 8001912:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001914:	4829      	ldr	r0, [pc, #164]	; (80019bc <MX_ADC1_Init+0x108>)
 8001916:	f000 fc97 	bl	8002248 <HAL_ADC_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001920:	f000 f94c 	bl	8001bbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001924:	2311      	movs	r3, #17
 8001926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001928:	2301      	movs	r3, #1
 800192a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800192c:	2306      	movs	r3, #6
 800192e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001930:	463b      	mov	r3, r7
 8001932:	4619      	mov	r1, r3
 8001934:	4821      	ldr	r0, [pc, #132]	; (80019bc <MX_ADC1_Init+0x108>)
 8001936:	f000 fdf9 	bl	800252c <HAL_ADC_ConfigChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001940:	f000 f93c 	bl	8001bbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001944:	2300      	movs	r3, #0
 8001946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001948:	2302      	movs	r3, #2
 800194a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800194c:	463b      	mov	r3, r7
 800194e:	4619      	mov	r1, r3
 8001950:	481a      	ldr	r0, [pc, #104]	; (80019bc <MX_ADC1_Init+0x108>)
 8001952:	f000 fdeb 	bl	800252c <HAL_ADC_ConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800195c:	f000 f92e 	bl	8001bbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001960:	2301      	movs	r3, #1
 8001962:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001964:	2303      	movs	r3, #3
 8001966:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001968:	463b      	mov	r3, r7
 800196a:	4619      	mov	r1, r3
 800196c:	4813      	ldr	r0, [pc, #76]	; (80019bc <MX_ADC1_Init+0x108>)
 800196e:	f000 fddd 	bl	800252c <HAL_ADC_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001978:	f000 f920 	bl	8001bbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800197c:	230c      	movs	r3, #12
 800197e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001980:	2304      	movs	r3, #4
 8001982:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001984:	463b      	mov	r3, r7
 8001986:	4619      	mov	r1, r3
 8001988:	480c      	ldr	r0, [pc, #48]	; (80019bc <MX_ADC1_Init+0x108>)
 800198a:	f000 fdcf 	bl	800252c <HAL_ADC_ConfigChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001994:	f000 f912 	bl	8001bbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001998:	230d      	movs	r3, #13
 800199a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800199c:	2305      	movs	r3, #5
 800199e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_ADC1_Init+0x108>)
 80019a6:	f000 fdc1 	bl	800252c <HAL_ADC_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80019b0:	f000 f904 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200002e0 	.word	0x200002e0
 80019c0:	40012000 	.word	0x40012000
 80019c4:	0f000001 	.word	0x0f000001

080019c8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ce:	463b      	mov	r3, r7
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80019da:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <MX_ADC2_Init+0xb4>)
 80019dc:	4a28      	ldr	r2, [pc, #160]	; (8001a80 <MX_ADC2_Init+0xb8>)
 80019de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019e0:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <MX_ADC2_Init+0xb4>)
 80019e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <MX_ADC2_Init+0xb4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80019ee:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <MX_ADC2_Init+0xb4>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <MX_ADC2_Init+0xb4>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <MX_ADC2_Init+0xb4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MX_ADC2_Init+0xb4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_ADC2_Init+0xb4>)
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <MX_ADC2_Init+0xbc>)
 8001a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <MX_ADC2_Init+0xb4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_ADC2_Init+0xb4>)
 8001a16:	2202      	movs	r2, #2
 8001a18:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <MX_ADC2_Init+0xb4>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_ADC2_Init+0xb4>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a28:	4814      	ldr	r0, [pc, #80]	; (8001a7c <MX_ADC2_Init+0xb4>)
 8001a2a:	f000 fc0d 	bl	8002248 <HAL_ADC_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001a34:	f000 f8c2 	bl	8001bbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001a38:	230e      	movs	r3, #14
 8001a3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001a40:	2306      	movs	r3, #6
 8001a42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a44:	463b      	mov	r3, r7
 8001a46:	4619      	mov	r1, r3
 8001a48:	480c      	ldr	r0, [pc, #48]	; (8001a7c <MX_ADC2_Init+0xb4>)
 8001a4a:	f000 fd6f 	bl	800252c <HAL_ADC_ConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001a54:	f000 f8b2 	bl	8001bbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001a58:	230f      	movs	r3, #15
 8001a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a60:	463b      	mov	r3, r7
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_ADC2_Init+0xb4>)
 8001a66:	f000 fd61 	bl	800252c <HAL_ADC_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001a70:	f000 f8a4 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000228 	.word	0x20000228
 8001a80:	40012100 	.word	0x40012100
 8001a84:	0f000001 	.word	0x0f000001

08001a88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001a8e:	4a13      	ldr	r2, [pc, #76]	; (8001adc <MX_I2C1_Init+0x54>)
 8001a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001a94:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <MX_I2C1_Init+0x58>)
 8001a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ac4:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001ac6:	f001 fdf7 	bl	80036b8 <HAL_I2C_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ad0:	f000 f874 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000270 	.word	0x20000270
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	000186a0 	.word	0x000186a0

08001ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <MX_DMA_Init+0x4c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a0f      	ldr	r2, [pc, #60]	; (8001b30 <MX_DMA_Init+0x4c>)
 8001af4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <MX_DMA_Init+0x4c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2038      	movs	r0, #56	; 0x38
 8001b0c:	f001 f899 	bl	8002c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b10:	2038      	movs	r0, #56	; 0x38
 8001b12:	f001 f8b2 	bl	8002c7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	203a      	movs	r0, #58	; 0x3a
 8001b1c:	f001 f891 	bl	8002c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b20:	203a      	movs	r0, #58	; 0x3a
 8001b22:	f001 f8aa 	bl	8002c7a <HAL_NVIC_EnableIRQ>

}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800

08001b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <MX_GPIO_Init+0x84>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a1d      	ldr	r2, [pc, #116]	; (8001bb8 <MX_GPIO_Init+0x84>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <MX_GPIO_Init+0x84>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_GPIO_Init+0x84>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <MX_GPIO_Init+0x84>)
 8001b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <MX_GPIO_Init+0x84>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <MX_GPIO_Init+0x84>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <MX_GPIO_Init+0x84>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <MX_GPIO_Init+0x84>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_GPIO_Init+0x84>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <MX_GPIO_Init+0x84>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_GPIO_Init+0x84>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]

}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800

08001bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc0:	b672      	cpsid	i
}
 8001bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <Error_Handler+0x8>
	...

08001bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <HAL_MspInit+0x4c>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a0f      	ldr	r2, [pc, #60]	; (8001c14 <HAL_MspInit+0x4c>)
 8001bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_MspInit+0x4c>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_MspInit+0x4c>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <HAL_MspInit+0x4c>)
 8001bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_MspInit+0x4c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800

08001c18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	; 0x30
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a6c      	ldr	r2, [pc, #432]	; (8001de8 <HAL_ADC_MspInit+0x1d0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d173      	bne.n	8001d22 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	4b6b      	ldr	r3, [pc, #428]	; (8001dec <HAL_ADC_MspInit+0x1d4>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a6a      	ldr	r2, [pc, #424]	; (8001dec <HAL_ADC_MspInit+0x1d4>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b68      	ldr	r3, [pc, #416]	; (8001dec <HAL_ADC_MspInit+0x1d4>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	61bb      	str	r3, [r7, #24]
 8001c54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	4b64      	ldr	r3, [pc, #400]	; (8001dec <HAL_ADC_MspInit+0x1d4>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a63      	ldr	r2, [pc, #396]	; (8001dec <HAL_ADC_MspInit+0x1d4>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b61      	ldr	r3, [pc, #388]	; (8001dec <HAL_ADC_MspInit+0x1d4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <HAL_ADC_MspInit+0x1d4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a5c      	ldr	r2, [pc, #368]	; (8001dec <HAL_ADC_MspInit+0x1d4>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b5a      	ldr	r3, [pc, #360]	; (8001dec <HAL_ADC_MspInit+0x1d4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c8e:	230c      	movs	r3, #12
 8001c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c92:	2303      	movs	r3, #3
 8001c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4853      	ldr	r0, [pc, #332]	; (8001df0 <HAL_ADC_MspInit+0x1d8>)
 8001ca2:	f001 fb75 	bl	8003390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001caa:	2303      	movs	r3, #3
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	484e      	ldr	r0, [pc, #312]	; (8001df4 <HAL_ADC_MspInit+0x1dc>)
 8001cba:	f001 fb69 	bl	8003390 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cbe:	4b4e      	ldr	r3, [pc, #312]	; (8001df8 <HAL_ADC_MspInit+0x1e0>)
 8001cc0:	4a4e      	ldr	r2, [pc, #312]	; (8001dfc <HAL_ADC_MspInit+0x1e4>)
 8001cc2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cc4:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <HAL_ADC_MspInit+0x1e0>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cca:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <HAL_ADC_MspInit+0x1e0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd0:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <HAL_ADC_MspInit+0x1e0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cd6:	4b48      	ldr	r3, [pc, #288]	; (8001df8 <HAL_ADC_MspInit+0x1e0>)
 8001cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cdc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cde:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <HAL_ADC_MspInit+0x1e0>)
 8001ce0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ce4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ce6:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <HAL_ADC_MspInit+0x1e0>)
 8001ce8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cee:	4b42      	ldr	r3, [pc, #264]	; (8001df8 <HAL_ADC_MspInit+0x1e0>)
 8001cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cf4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cf6:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <HAL_ADC_MspInit+0x1e0>)
 8001cf8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001cfc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cfe:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <HAL_ADC_MspInit+0x1e0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d04:	483c      	ldr	r0, [pc, #240]	; (8001df8 <HAL_ADC_MspInit+0x1e0>)
 8001d06:	f000 ffd3 	bl	8002cb0 <HAL_DMA_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8001d10:	f7ff ff54 	bl	8001bbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a38      	ldr	r2, [pc, #224]	; (8001df8 <HAL_ADC_MspInit+0x1e0>)
 8001d18:	639a      	str	r2, [r3, #56]	; 0x38
 8001d1a:	4a37      	ldr	r2, [pc, #220]	; (8001df8 <HAL_ADC_MspInit+0x1e0>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d20:	e05e      	b.n	8001de0 <HAL_ADC_MspInit+0x1c8>
  else if(hadc->Instance==ADC2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a36      	ldr	r2, [pc, #216]	; (8001e00 <HAL_ADC_MspInit+0x1e8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d159      	bne.n	8001de0 <HAL_ADC_MspInit+0x1c8>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_ADC_MspInit+0x1d4>)
 8001d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d34:	4a2d      	ldr	r2, [pc, #180]	; (8001dec <HAL_ADC_MspInit+0x1d4>)
 8001d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_ADC_MspInit+0x1d4>)
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	4b27      	ldr	r3, [pc, #156]	; (8001dec <HAL_ADC_MspInit+0x1d4>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	4a26      	ldr	r2, [pc, #152]	; (8001dec <HAL_ADC_MspInit+0x1d4>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6313      	str	r3, [r2, #48]	; 0x30
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_ADC_MspInit+0x1d4>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d64:	2330      	movs	r3, #48	; 0x30
 8001d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	4619      	mov	r1, r3
 8001d76:	481e      	ldr	r0, [pc, #120]	; (8001df0 <HAL_ADC_MspInit+0x1d8>)
 8001d78:	f001 fb0a 	bl	8003390 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001d7c:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_ADC_MspInit+0x1ec>)
 8001d7e:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <HAL_ADC_MspInit+0x1f0>)
 8001d80:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_ADC_MspInit+0x1ec>)
 8001d84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d88:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <HAL_ADC_MspInit+0x1ec>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d90:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <HAL_ADC_MspInit+0x1ec>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001d96:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <HAL_ADC_MspInit+0x1ec>)
 8001d98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d9c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_ADC_MspInit+0x1ec>)
 8001da0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001da4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_ADC_MspInit+0x1ec>)
 8001da8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dac:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_ADC_MspInit+0x1ec>)
 8001db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001db6:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <HAL_ADC_MspInit+0x1ec>)
 8001db8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001dbc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_ADC_MspInit+0x1ec>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001dc4:	480f      	ldr	r0, [pc, #60]	; (8001e04 <HAL_ADC_MspInit+0x1ec>)
 8001dc6:	f000 ff73 	bl	8002cb0 <HAL_DMA_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_ADC_MspInit+0x1bc>
      Error_Handler();
 8001dd0:	f7ff fef4 	bl	8001bbc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <HAL_ADC_MspInit+0x1ec>)
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_ADC_MspInit+0x1ec>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001de0:	bf00      	nop
 8001de2:	3730      	adds	r7, #48	; 0x30
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40012000 	.word	0x40012000
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020800 	.word	0x40020800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	20000344 	.word	0x20000344
 8001dfc:	40026410 	.word	0x40026410
 8001e00:	40012100 	.word	0x40012100
 8001e04:	200003d4 	.word	0x200003d4
 8001e08:	40026440 	.word	0x40026440

08001e0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <HAL_I2C_MspInit+0x84>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d12b      	bne.n	8001e86 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_I2C_MspInit+0x88>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_I2C_MspInit+0x88>)
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_I2C_MspInit+0x88>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e4a:	23c0      	movs	r3, #192	; 0xc0
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e4e:	2312      	movs	r3, #18
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e52:	2301      	movs	r3, #1
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	480c      	ldr	r0, [pc, #48]	; (8001e98 <HAL_I2C_MspInit+0x8c>)
 8001e66:	f001 fa93 	bl	8003390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_I2C_MspInit+0x88>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <HAL_I2C_MspInit+0x88>)
 8001e74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_I2C_MspInit+0x88>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40005400 	.word	0x40005400
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020400 	.word	0x40020400

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee8:	f000 f96a 	bl	80021c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <DMA2_Stream0_IRQHandler+0x10>)
 8001ef6:	f000 ffe1 	bl	8002ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000344 	.word	0x20000344

08001f04 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <DMA2_Stream2_IRQHandler+0x10>)
 8001f0a:	f000 ffd7 	bl	8002ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200003d4 	.word	0x200003d4

08001f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
	return 1;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_kill>:

int _kill(int pid, int sig)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f32:	f002 fd63 	bl	80049fc <__errno>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2216      	movs	r2, #22
 8001f3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_exit>:

void _exit (int status)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ffe7 	bl	8001f28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f5a:	e7fe      	b.n	8001f5a <_exit+0x12>

08001f5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e00a      	b.n	8001f84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f6e:	f3af 8000 	nop.w
 8001f72:	4601      	mov	r1, r0
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	60ba      	str	r2, [r7, #8]
 8001f7a:	b2ca      	uxtb	r2, r1
 8001f7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dbf0      	blt.n	8001f6e <_read+0x12>
	}

return len;
 8001f8c:	687b      	ldr	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e009      	b.n	8001fbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	60ba      	str	r2, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	dbf1      	blt.n	8001fa8 <_write+0x12>
	}
	return len;
 8001fc4:	687b      	ldr	r3, [r7, #4]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_close>:

int _close(int file)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
	return -1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <_isatty>:

int _isatty(int file)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
	return 1;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
	return 0;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002040:	4a14      	ldr	r2, [pc, #80]	; (8002094 <_sbrk+0x5c>)
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <_sbrk+0x60>)
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <_sbrk+0x64>)
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <_sbrk+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	429a      	cmp	r2, r3
 8002066:	d207      	bcs.n	8002078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002068:	f002 fcc8 	bl	80049fc <__errno>
 800206c:	4603      	mov	r3, r0
 800206e:	220c      	movs	r2, #12
 8002070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	e009      	b.n	800208c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	4a05      	ldr	r2, [pc, #20]	; (800209c <_sbrk+0x64>)
 8002088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20020000 	.word	0x20020000
 8002098:	00000400 	.word	0x00000400
 800209c:	2000020c 	.word	0x2000020c
 80020a0:	20000478 	.word	0x20000478

080020a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <SystemInit+0x20>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <SystemInit+0x20>)
 80020b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002100 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020cc:	480d      	ldr	r0, [pc, #52]	; (8002104 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ce:	490e      	ldr	r1, [pc, #56]	; (8002108 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020d0:	4a0e      	ldr	r2, [pc, #56]	; (800210c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d4:	e002      	b.n	80020dc <LoopCopyDataInit>

080020d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020da:	3304      	adds	r3, #4

080020dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e0:	d3f9      	bcc.n	80020d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e2:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020e4:	4c0b      	ldr	r4, [pc, #44]	; (8002114 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e8:	e001      	b.n	80020ee <LoopFillZerobss>

080020ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ec:	3204      	adds	r2, #4

080020ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f0:	d3fb      	bcc.n	80020ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020f2:	f7ff ffd7 	bl	80020a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020f6:	f002 fc87 	bl	8004a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020fa:	f7ff fa5b 	bl	80015b4 <main>
  bx  lr    
 80020fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002100:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002108:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800210c:	08009bdc 	.word	0x08009bdc
  ldr r2, =_sbss
 8002110:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002114:	20000474 	.word	0x20000474

08002118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <ADC_IRQHandler>
	...

0800211c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0d      	ldr	r2, [pc, #52]	; (800215c <HAL_Init+0x40>)
 8002126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800212a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0a      	ldr	r2, [pc, #40]	; (800215c <HAL_Init+0x40>)
 8002132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a07      	ldr	r2, [pc, #28]	; (800215c <HAL_Init+0x40>)
 800213e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002144:	2003      	movs	r0, #3
 8002146:	f000 fd71 	bl	8002c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800214a:	2000      	movs	r0, #0
 800214c:	f000 f808 	bl	8002160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002150:	f7ff fd3a 	bl	8001bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40023c00 	.word	0x40023c00

08002160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_InitTick+0x54>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_InitTick+0x58>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002176:	fbb3 f3f1 	udiv	r3, r3, r1
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fd89 	bl	8002c96 <HAL_SYSTICK_Config>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e00e      	b.n	80021ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b0f      	cmp	r3, #15
 8002192:	d80a      	bhi.n	80021aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002194:	2200      	movs	r2, #0
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	f000 fd51 	bl	8002c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a0:	4a06      	ldr	r2, [pc, #24]	; (80021bc <HAL_InitTick+0x5c>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e000      	b.n	80021ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000004 	.word	0x20000004
 80021b8:	2000000c 	.word	0x2000000c
 80021bc:	20000008 	.word	0x20000008

080021c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_IncTick+0x20>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_IncTick+0x24>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_IncTick+0x24>)
 80021d2:	6013      	str	r3, [r2, #0]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	2000000c 	.word	0x2000000c
 80021e4:	20000460 	.word	0x20000460

080021e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return uwTick;
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <HAL_GetTick+0x14>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	20000460 	.word	0x20000460

08002200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff ffee 	bl	80021e8 <HAL_GetTick>
 800220c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d005      	beq.n	8002226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_Delay+0x44>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002226:	bf00      	nop
 8002228:	f7ff ffde 	bl	80021e8 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	429a      	cmp	r2, r3
 8002236:	d8f7      	bhi.n	8002228 <HAL_Delay+0x28>
  {
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000000c 	.word	0x2000000c

08002248 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e033      	b.n	80022c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fcd6 	bl	8001c18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	d118      	bne.n	80022b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800228e:	f023 0302 	bic.w	r3, r3, #2
 8002292:	f043 0202 	orr.w	r2, r3, #2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fa78 	bl	8002790 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f023 0303 	bic.w	r3, r3, #3
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40
 80022b6:	e001      	b.n	80022bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_Start_DMA+0x1e>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e0e9      	b.n	80024c2 <HAL_ADC_Start_DMA+0x1f2>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d018      	beq.n	8002336 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002314:	4b6d      	ldr	r3, [pc, #436]	; (80024cc <HAL_ADC_Start_DMA+0x1fc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a6d      	ldr	r2, [pc, #436]	; (80024d0 <HAL_ADC_Start_DMA+0x200>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0c9a      	lsrs	r2, r3, #18
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002328:	e002      	b.n	8002330 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	3b01      	subs	r3, #1
 800232e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f9      	bne.n	800232a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002344:	d107      	bne.n	8002356 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002354:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	f040 80a1 	bne.w	80024a8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002390:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a4:	d106      	bne.n	80023b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f023 0206 	bic.w	r2, r3, #6
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	645a      	str	r2, [r3, #68]	; 0x44
 80023b2:	e002      	b.n	80023ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c2:	4b44      	ldr	r3, [pc, #272]	; (80024d4 <HAL_ADC_Start_DMA+0x204>)
 80023c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	4a43      	ldr	r2, [pc, #268]	; (80024d8 <HAL_ADC_Start_DMA+0x208>)
 80023cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d2:	4a42      	ldr	r2, [pc, #264]	; (80024dc <HAL_ADC_Start_DMA+0x20c>)
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	4a41      	ldr	r2, [pc, #260]	; (80024e0 <HAL_ADC_Start_DMA+0x210>)
 80023dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002406:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	334c      	adds	r3, #76	; 0x4c
 8002412:	4619      	mov	r1, r3
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f000 fcf8 	bl	8002e0c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	2b00      	cmp	r3, #0
 8002426:	d12a      	bne.n	800247e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2d      	ldr	r2, [pc, #180]	; (80024e4 <HAL_ADC_Start_DMA+0x214>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d015      	beq.n	800245e <HAL_ADC_Start_DMA+0x18e>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a2c      	ldr	r2, [pc, #176]	; (80024e8 <HAL_ADC_Start_DMA+0x218>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d105      	bne.n	8002448 <HAL_ADC_Start_DMA+0x178>
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <HAL_ADC_Start_DMA+0x204>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a27      	ldr	r2, [pc, #156]	; (80024ec <HAL_ADC_Start_DMA+0x21c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d136      	bne.n	80024c0 <HAL_ADC_Start_DMA+0x1f0>
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <HAL_ADC_Start_DMA+0x204>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b00      	cmp	r3, #0
 800245c:	d130      	bne.n	80024c0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d129      	bne.n	80024c0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	e020      	b.n	80024c0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_ADC_Start_DMA+0x214>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d11b      	bne.n	80024c0 <HAL_ADC_Start_DMA+0x1f0>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d114      	bne.n	80024c0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	e00b      	b.n	80024c0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f043 0210 	orr.w	r2, r3, #16
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000004 	.word	0x20000004
 80024d0:	431bde83 	.word	0x431bde83
 80024d4:	40012300 	.word	0x40012300
 80024d8:	08002989 	.word	0x08002989
 80024dc:	08002a43 	.word	0x08002a43
 80024e0:	08002a5f 	.word	0x08002a5f
 80024e4:	40012000 	.word	0x40012000
 80024e8:	40012100 	.word	0x40012100
 80024ec:	40012200 	.word	0x40012200

080024f0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1c>
 8002544:	2302      	movs	r3, #2
 8002546:	e113      	b.n	8002770 <HAL_ADC_ConfigChannel+0x244>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b09      	cmp	r3, #9
 8002556:	d925      	bls.n	80025a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68d9      	ldr	r1, [r3, #12]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	3b1e      	subs	r3, #30
 800256e:	2207      	movs	r2, #7
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43da      	mvns	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	400a      	ands	r2, r1
 800257c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68d9      	ldr	r1, [r3, #12]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	b29b      	uxth	r3, r3
 800258e:	4618      	mov	r0, r3
 8002590:	4603      	mov	r3, r0
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4403      	add	r3, r0
 8002596:	3b1e      	subs	r3, #30
 8002598:	409a      	lsls	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	e022      	b.n	80025ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6919      	ldr	r1, [r3, #16]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	2207      	movs	r2, #7
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	400a      	ands	r2, r1
 80025c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6919      	ldr	r1, [r3, #16]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	4618      	mov	r0, r3
 80025da:	4603      	mov	r3, r0
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4403      	add	r3, r0
 80025e0:	409a      	lsls	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d824      	bhi.n	800263c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	3b05      	subs	r3, #5
 8002604:	221f      	movs	r2, #31
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	400a      	ands	r2, r1
 8002612:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	4618      	mov	r0, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	3b05      	subs	r3, #5
 800262e:	fa00 f203 	lsl.w	r2, r0, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	635a      	str	r2, [r3, #52]	; 0x34
 800263a:	e04c      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b0c      	cmp	r3, #12
 8002642:	d824      	bhi.n	800268e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	3b23      	subs	r3, #35	; 0x23
 8002656:	221f      	movs	r2, #31
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43da      	mvns	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	400a      	ands	r2, r1
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	4618      	mov	r0, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	3b23      	subs	r3, #35	; 0x23
 8002680:	fa00 f203 	lsl.w	r2, r0, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
 800268c:	e023      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	3b41      	subs	r3, #65	; 0x41
 80026a0:	221f      	movs	r2, #31
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	400a      	ands	r2, r1
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	4618      	mov	r0, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	3b41      	subs	r3, #65	; 0x41
 80026ca:	fa00 f203 	lsl.w	r2, r0, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d6:	4b29      	ldr	r3, [pc, #164]	; (800277c <HAL_ADC_ConfigChannel+0x250>)
 80026d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a28      	ldr	r2, [pc, #160]	; (8002780 <HAL_ADC_ConfigChannel+0x254>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d10f      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x1d8>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b12      	cmp	r3, #18
 80026ea:	d10b      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <HAL_ADC_ConfigChannel+0x254>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d12b      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x23a>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <HAL_ADC_ConfigChannel+0x258>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d003      	beq.n	8002720 <HAL_ADC_ConfigChannel+0x1f4>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b11      	cmp	r3, #17
 800271e:	d122      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a11      	ldr	r2, [pc, #68]	; (8002784 <HAL_ADC_ConfigChannel+0x258>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d111      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_ADC_ConfigChannel+0x25c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a11      	ldr	r2, [pc, #68]	; (800278c <HAL_ADC_ConfigChannel+0x260>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	0c9a      	lsrs	r2, r3, #18
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002758:	e002      	b.n	8002760 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	3b01      	subs	r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f9      	bne.n	800275a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	40012300 	.word	0x40012300
 8002780:	40012000 	.word	0x40012000
 8002784:	10000012 	.word	0x10000012
 8002788:	20000004 	.word	0x20000004
 800278c:	431bde83 	.word	0x431bde83

08002790 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002798:	4b79      	ldr	r3, [pc, #484]	; (8002980 <ADC_Init+0x1f0>)
 800279a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	021a      	lsls	r2, r3, #8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6899      	ldr	r1, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	4a58      	ldr	r2, [pc, #352]	; (8002984 <ADC_Init+0x1f4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d022      	beq.n	800286e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002836:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6899      	ldr	r1, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002858:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6899      	ldr	r1, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	e00f      	b.n	800288e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800287c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800288c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0202 	bic.w	r2, r2, #2
 800289c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6899      	ldr	r1, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	7e1b      	ldrb	r3, [r3, #24]
 80028a8:	005a      	lsls	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01b      	beq.n	80028f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	3b01      	subs	r3, #1
 80028e8:	035a      	lsls	r2, r3, #13
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	e007      	b.n	8002904 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002902:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	3b01      	subs	r3, #1
 8002920:	051a      	lsls	r2, r3, #20
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6899      	ldr	r1, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002946:	025a      	lsls	r2, r3, #9
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6899      	ldr	r1, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	029a      	lsls	r2, r3, #10
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	609a      	str	r2, [r3, #8]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	40012300 	.word	0x40012300
 8002984:	0f000001 	.word	0x0f000001

08002988 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002994:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d13c      	bne.n	8002a1c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d12b      	bne.n	8002a14 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d127      	bne.n	8002a14 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d006      	beq.n	80029e0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d119      	bne.n	8002a14 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0220 	bic.w	r2, r2, #32
 80029ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7ff fd6b 	bl	80024f0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a1a:	e00e      	b.n	8002a3a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f7ff fd75 	bl	8002518 <HAL_ADC_ErrorCallback>
}
 8002a2e:	e004      	b.n	8002a3a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	4798      	blx	r3
}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff fd57 	bl	8002504 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2240      	movs	r2, #64	; 0x40
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f043 0204 	orr.w	r2, r3, #4
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f7ff fd4a 	bl	8002518 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002abe:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	60d3      	str	r3, [r2, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <__NVIC_GetPriorityGrouping+0x18>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	f003 0307 	and.w	r3, r3, #7
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	db0b      	blt.n	8002b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4907      	ldr	r1, [pc, #28]	; (8002b28 <__NVIC_EnableIRQ+0x38>)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2001      	movs	r0, #1
 8002b12:	fa00 f202 	lsl.w	r2, r0, r2
 8002b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000e100 	.word	0xe000e100

08002b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	db0a      	blt.n	8002b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	490c      	ldr	r1, [pc, #48]	; (8002b78 <__NVIC_SetPriority+0x4c>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b54:	e00a      	b.n	8002b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4908      	ldr	r1, [pc, #32]	; (8002b7c <__NVIC_SetPriority+0x50>)
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	3b04      	subs	r3, #4
 8002b64:	0112      	lsls	r2, r2, #4
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	440b      	add	r3, r1
 8002b6a:	761a      	strb	r2, [r3, #24]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	e000e100 	.word	0xe000e100
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f1c3 0307 	rsb	r3, r3, #7
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	bf28      	it	cs
 8002b9e:	2304      	movcs	r3, #4
 8002ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d902      	bls.n	8002bb0 <NVIC_EncodePriority+0x30>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3b03      	subs	r3, #3
 8002bae:	e000      	b.n	8002bb2 <NVIC_EncodePriority+0x32>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	43d9      	mvns	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	4313      	orrs	r3, r2
         );
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf8:	d301      	bcc.n	8002bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e00f      	b.n	8002c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <SysTick_Config+0x40>)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c06:	210f      	movs	r1, #15
 8002c08:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0c:	f7ff ff8e 	bl	8002b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <SysTick_Config+0x40>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c16:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <SysTick_Config+0x40>)
 8002c18:	2207      	movs	r2, #7
 8002c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	e000e010 	.word	0xe000e010

08002c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ff29 	bl	8002a8c <__NVIC_SetPriorityGrouping>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b086      	sub	sp, #24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	4603      	mov	r3, r0
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c54:	f7ff ff3e 	bl	8002ad4 <__NVIC_GetPriorityGrouping>
 8002c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	6978      	ldr	r0, [r7, #20]
 8002c60:	f7ff ff8e 	bl	8002b80 <NVIC_EncodePriority>
 8002c64:	4602      	mov	r2, r0
 8002c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff5d 	bl	8002b2c <__NVIC_SetPriority>
}
 8002c72:	bf00      	nop
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff31 	bl	8002af0 <__NVIC_EnableIRQ>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff ffa2 	bl	8002be8 <SysTick_Config>
 8002ca4:	4603      	mov	r3, r0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7ff fa94 	bl	80021e8 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e099      	b.n	8002e00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cec:	e00f      	b.n	8002d0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cee:	f7ff fa7b 	bl	80021e8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d908      	bls.n	8002d0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2203      	movs	r2, #3
 8002d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e078      	b.n	8002e00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e8      	bne.n	8002cee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <HAL_DMA_Init+0x158>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d107      	bne.n	8002d78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	4313      	orrs	r3, r2
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f023 0307 	bic.w	r3, r3, #7
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d117      	bne.n	8002dd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00e      	beq.n	8002dd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fa6f 	bl	8003298 <DMA_CheckFifoParam>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2240      	movs	r2, #64	; 0x40
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e016      	b.n	8002e00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fa26 	bl	800322c <DMA_CalcBaseAndBitshift>
 8002de0:	4603      	mov	r3, r0
 8002de2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	223f      	movs	r2, #63	; 0x3f
 8002dea:	409a      	lsls	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	f010803f 	.word	0xf010803f

08002e0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_DMA_Start_IT+0x26>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e040      	b.n	8002eb4 <HAL_DMA_Start_IT+0xa8>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d12f      	bne.n	8002ea6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f9b8 	bl	80031d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e64:	223f      	movs	r2, #63	; 0x3f
 8002e66:	409a      	lsls	r2, r3
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0216 	orr.w	r2, r2, #22
 8002e7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0208 	orr.w	r2, r2, #8
 8002e92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e005      	b.n	8002eb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ec8:	4b92      	ldr	r3, [pc, #584]	; (8003114 <HAL_DMA_IRQHandler+0x258>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a92      	ldr	r2, [pc, #584]	; (8003118 <HAL_DMA_IRQHandler+0x25c>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	0a9b      	lsrs	r3, r3, #10
 8002ed4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01a      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0204 	bic.w	r2, r2, #4
 8002f0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	2208      	movs	r2, #8
 8002f16:	409a      	lsls	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f043 0201 	orr.w	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	f043 0202 	orr.w	r2, r3, #2
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	2204      	movs	r2, #4
 8002f64:	409a      	lsls	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d012      	beq.n	8002f94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f80:	2204      	movs	r2, #4
 8002f82:	409a      	lsls	r2, r3
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	f043 0204 	orr.w	r2, r3, #4
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	2210      	movs	r2, #16
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d043      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d03c      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb6:	2210      	movs	r2, #16
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d018      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d108      	bne.n	8002fec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d024      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
 8002fea:	e01f      	b.n	800302c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01b      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	4798      	blx	r3
 8002ffc:	e016      	b.n	800302c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d107      	bne.n	800301c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0208 	bic.w	r2, r2, #8
 800301a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	2220      	movs	r2, #32
 8003032:	409a      	lsls	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 808e 	beq.w	800315a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 8086 	beq.w	800315a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003052:	2220      	movs	r2, #32
 8003054:	409a      	lsls	r2, r3
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b05      	cmp	r3, #5
 8003064:	d136      	bne.n	80030d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0216 	bic.w	r2, r2, #22
 8003074:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003084:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d103      	bne.n	8003096 <HAL_DMA_IRQHandler+0x1da>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0208 	bic.w	r2, r2, #8
 80030a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	223f      	movs	r2, #63	; 0x3f
 80030ac:	409a      	lsls	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d07d      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
        }
        return;
 80030d2:	e078      	b.n	80031c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01c      	beq.n	800311c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d108      	bne.n	8003102 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d030      	beq.n	800315a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	4798      	blx	r3
 8003100:	e02b      	b.n	800315a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d027      	beq.n	800315a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
 8003112:	e022      	b.n	800315a <HAL_DMA_IRQHandler+0x29e>
 8003114:	20000004 	.word	0x20000004
 8003118:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0210 	bic.w	r2, r2, #16
 8003138:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	2b00      	cmp	r3, #0
 8003160:	d032      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d022      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2205      	movs	r2, #5
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	3301      	adds	r3, #1
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	429a      	cmp	r2, r3
 8003190:	d307      	bcc.n	80031a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f2      	bne.n	8003186 <HAL_DMA_IRQHandler+0x2ca>
 80031a0:	e000      	b.n	80031a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4798      	blx	r3
 80031c4:	e000      	b.n	80031c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031c6:	bf00      	nop
    }
  }
}
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop

080031d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b40      	cmp	r3, #64	; 0x40
 80031fc:	d108      	bne.n	8003210 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800320e:	e007      	b.n	8003220 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	60da      	str	r2, [r3, #12]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	3b10      	subs	r3, #16
 800323c:	4a14      	ldr	r2, [pc, #80]	; (8003290 <DMA_CalcBaseAndBitshift+0x64>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003246:	4a13      	ldr	r2, [pc, #76]	; (8003294 <DMA_CalcBaseAndBitshift+0x68>)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d909      	bls.n	800326e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	1d1a      	adds	r2, r3, #4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	659a      	str	r2, [r3, #88]	; 0x58
 800326c:	e007      	b.n	800327e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003276:	f023 0303 	bic.w	r3, r3, #3
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	aaaaaaab 	.word	0xaaaaaaab
 8003294:	08009710 	.word	0x08009710

08003298 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d11f      	bne.n	80032f2 <DMA_CheckFifoParam+0x5a>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d856      	bhi.n	8003366 <DMA_CheckFifoParam+0xce>
 80032b8:	a201      	add	r2, pc, #4	; (adr r2, 80032c0 <DMA_CheckFifoParam+0x28>)
 80032ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032be:	bf00      	nop
 80032c0:	080032d1 	.word	0x080032d1
 80032c4:	080032e3 	.word	0x080032e3
 80032c8:	080032d1 	.word	0x080032d1
 80032cc:	08003367 	.word	0x08003367
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d046      	beq.n	800336a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e0:	e043      	b.n	800336a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032ea:	d140      	bne.n	800336e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f0:	e03d      	b.n	800336e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fa:	d121      	bne.n	8003340 <DMA_CheckFifoParam+0xa8>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d837      	bhi.n	8003372 <DMA_CheckFifoParam+0xda>
 8003302:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <DMA_CheckFifoParam+0x70>)
 8003304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003308:	08003319 	.word	0x08003319
 800330c:	0800331f 	.word	0x0800331f
 8003310:	08003319 	.word	0x08003319
 8003314:	08003331 	.word	0x08003331
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      break;
 800331c:	e030      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d025      	beq.n	8003376 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332e:	e022      	b.n	8003376 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003338:	d11f      	bne.n	800337a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800333e:	e01c      	b.n	800337a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d903      	bls.n	800334e <DMA_CheckFifoParam+0xb6>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d003      	beq.n	8003354 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800334c:	e018      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
      break;
 8003352:	e015      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00e      	beq.n	800337e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      break;
 8003364:	e00b      	b.n	800337e <DMA_CheckFifoParam+0xe6>
      break;
 8003366:	bf00      	nop
 8003368:	e00a      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 800336a:	bf00      	nop
 800336c:	e008      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
 8003370:	e006      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 8003372:	bf00      	nop
 8003374:	e004      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 8003376:	bf00      	nop
 8003378:	e002      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;   
 800337a:	bf00      	nop
 800337c:	e000      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 800337e:	bf00      	nop
    }
  } 
  
  return status; 
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop

08003390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	e165      	b.n	8003678 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033ac:	2201      	movs	r2, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	f040 8154 	bne.w	8003672 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d005      	beq.n	80033e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d130      	bne.n	8003444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2203      	movs	r2, #3
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003418:	2201      	movs	r2, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 0201 	and.w	r2, r3, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b03      	cmp	r3, #3
 800344e:	d017      	beq.n	8003480 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	2203      	movs	r2, #3
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d123      	bne.n	80034d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	08da      	lsrs	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3208      	adds	r2, #8
 8003494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	220f      	movs	r2, #15
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	08da      	lsrs	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3208      	adds	r2, #8
 80034ce:	69b9      	ldr	r1, [r7, #24]
 80034d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0203 	and.w	r2, r3, #3
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80ae 	beq.w	8003672 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b5d      	ldr	r3, [pc, #372]	; (8003690 <HAL_GPIO_Init+0x300>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	4a5c      	ldr	r2, [pc, #368]	; (8003690 <HAL_GPIO_Init+0x300>)
 8003520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003524:	6453      	str	r3, [r2, #68]	; 0x44
 8003526:	4b5a      	ldr	r3, [pc, #360]	; (8003690 <HAL_GPIO_Init+0x300>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003532:	4a58      	ldr	r2, [pc, #352]	; (8003694 <HAL_GPIO_Init+0x304>)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	3302      	adds	r3, #2
 800353a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	220f      	movs	r2, #15
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4f      	ldr	r2, [pc, #316]	; (8003698 <HAL_GPIO_Init+0x308>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d025      	beq.n	80035aa <HAL_GPIO_Init+0x21a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4e      	ldr	r2, [pc, #312]	; (800369c <HAL_GPIO_Init+0x30c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01f      	beq.n	80035a6 <HAL_GPIO_Init+0x216>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4d      	ldr	r2, [pc, #308]	; (80036a0 <HAL_GPIO_Init+0x310>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d019      	beq.n	80035a2 <HAL_GPIO_Init+0x212>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4c      	ldr	r2, [pc, #304]	; (80036a4 <HAL_GPIO_Init+0x314>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_GPIO_Init+0x20e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4b      	ldr	r2, [pc, #300]	; (80036a8 <HAL_GPIO_Init+0x318>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00d      	beq.n	800359a <HAL_GPIO_Init+0x20a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4a      	ldr	r2, [pc, #296]	; (80036ac <HAL_GPIO_Init+0x31c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <HAL_GPIO_Init+0x206>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a49      	ldr	r2, [pc, #292]	; (80036b0 <HAL_GPIO_Init+0x320>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_GPIO_Init+0x202>
 800358e:	2306      	movs	r3, #6
 8003590:	e00c      	b.n	80035ac <HAL_GPIO_Init+0x21c>
 8003592:	2307      	movs	r3, #7
 8003594:	e00a      	b.n	80035ac <HAL_GPIO_Init+0x21c>
 8003596:	2305      	movs	r3, #5
 8003598:	e008      	b.n	80035ac <HAL_GPIO_Init+0x21c>
 800359a:	2304      	movs	r3, #4
 800359c:	e006      	b.n	80035ac <HAL_GPIO_Init+0x21c>
 800359e:	2303      	movs	r3, #3
 80035a0:	e004      	b.n	80035ac <HAL_GPIO_Init+0x21c>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e002      	b.n	80035ac <HAL_GPIO_Init+0x21c>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_GPIO_Init+0x21c>
 80035aa:	2300      	movs	r3, #0
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	f002 0203 	and.w	r2, r2, #3
 80035b2:	0092      	lsls	r2, r2, #2
 80035b4:	4093      	lsls	r3, r2
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035bc:	4935      	ldr	r1, [pc, #212]	; (8003694 <HAL_GPIO_Init+0x304>)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	089b      	lsrs	r3, r3, #2
 80035c2:	3302      	adds	r3, #2
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ca:	4b3a      	ldr	r3, [pc, #232]	; (80036b4 <HAL_GPIO_Init+0x324>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	43db      	mvns	r3, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4013      	ands	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ee:	4a31      	ldr	r2, [pc, #196]	; (80036b4 <HAL_GPIO_Init+0x324>)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035f4:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <HAL_GPIO_Init+0x324>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003618:	4a26      	ldr	r2, [pc, #152]	; (80036b4 <HAL_GPIO_Init+0x324>)
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800361e:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <HAL_GPIO_Init+0x324>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003642:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <HAL_GPIO_Init+0x324>)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003648:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <HAL_GPIO_Init+0x324>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800366c:	4a11      	ldr	r2, [pc, #68]	; (80036b4 <HAL_GPIO_Init+0x324>)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3301      	adds	r3, #1
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	2b0f      	cmp	r3, #15
 800367c:	f67f ae96 	bls.w	80033ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	3724      	adds	r7, #36	; 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	40013800 	.word	0x40013800
 8003698:	40020000 	.word	0x40020000
 800369c:	40020400 	.word	0x40020400
 80036a0:	40020800 	.word	0x40020800
 80036a4:	40020c00 	.word	0x40020c00
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40021400 	.word	0x40021400
 80036b0:	40021800 	.word	0x40021800
 80036b4:	40013c00 	.word	0x40013c00

080036b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e12b      	b.n	8003922 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fe fb94 	bl	8001e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2224      	movs	r2, #36	; 0x24
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800370a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800371a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800371c:	f000 fd0a 	bl	8004134 <HAL_RCC_GetPCLK1Freq>
 8003720:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	4a81      	ldr	r2, [pc, #516]	; (800392c <HAL_I2C_Init+0x274>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d807      	bhi.n	800373c <HAL_I2C_Init+0x84>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a80      	ldr	r2, [pc, #512]	; (8003930 <HAL_I2C_Init+0x278>)
 8003730:	4293      	cmp	r3, r2
 8003732:	bf94      	ite	ls
 8003734:	2301      	movls	r3, #1
 8003736:	2300      	movhi	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e006      	b.n	800374a <HAL_I2C_Init+0x92>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a7d      	ldr	r2, [pc, #500]	; (8003934 <HAL_I2C_Init+0x27c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	bf94      	ite	ls
 8003744:	2301      	movls	r3, #1
 8003746:	2300      	movhi	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0e7      	b.n	8003922 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4a78      	ldr	r2, [pc, #480]	; (8003938 <HAL_I2C_Init+0x280>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	0c9b      	lsrs	r3, r3, #18
 800375c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a6a      	ldr	r2, [pc, #424]	; (800392c <HAL_I2C_Init+0x274>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d802      	bhi.n	800378c <HAL_I2C_Init+0xd4>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	3301      	adds	r3, #1
 800378a:	e009      	b.n	80037a0 <HAL_I2C_Init+0xe8>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	4a69      	ldr	r2, [pc, #420]	; (800393c <HAL_I2C_Init+0x284>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	099b      	lsrs	r3, r3, #6
 800379e:	3301      	adds	r3, #1
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	495c      	ldr	r1, [pc, #368]	; (800392c <HAL_I2C_Init+0x274>)
 80037bc:	428b      	cmp	r3, r1
 80037be:	d819      	bhi.n	80037f4 <HAL_I2C_Init+0x13c>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1e59      	subs	r1, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ce:	1c59      	adds	r1, r3, #1
 80037d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037d4:	400b      	ands	r3, r1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_I2C_Init+0x138>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1e59      	subs	r1, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80037e8:	3301      	adds	r3, #1
 80037ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ee:	e051      	b.n	8003894 <HAL_I2C_Init+0x1dc>
 80037f0:	2304      	movs	r3, #4
 80037f2:	e04f      	b.n	8003894 <HAL_I2C_Init+0x1dc>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d111      	bne.n	8003820 <HAL_I2C_Init+0x168>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1e58      	subs	r0, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	440b      	add	r3, r1
 800380a:	fbb0 f3f3 	udiv	r3, r0, r3
 800380e:	3301      	adds	r3, #1
 8003810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e012      	b.n	8003846 <HAL_I2C_Init+0x18e>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1e58      	subs	r0, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	0099      	lsls	r1, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	fbb0 f3f3 	udiv	r3, r0, r3
 8003836:	3301      	adds	r3, #1
 8003838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_I2C_Init+0x196>
 800384a:	2301      	movs	r3, #1
 800384c:	e022      	b.n	8003894 <HAL_I2C_Init+0x1dc>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10e      	bne.n	8003874 <HAL_I2C_Init+0x1bc>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1e58      	subs	r0, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6859      	ldr	r1, [r3, #4]
 800385e:	460b      	mov	r3, r1
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	440b      	add	r3, r1
 8003864:	fbb0 f3f3 	udiv	r3, r0, r3
 8003868:	3301      	adds	r3, #1
 800386a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003872:	e00f      	b.n	8003894 <HAL_I2C_Init+0x1dc>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1e58      	subs	r0, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6859      	ldr	r1, [r3, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	0099      	lsls	r1, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	fbb0 f3f3 	udiv	r3, r0, r3
 800388a:	3301      	adds	r3, #1
 800388c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	6809      	ldr	r1, [r1, #0]
 8003898:	4313      	orrs	r3, r2
 800389a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69da      	ldr	r2, [r3, #28]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6911      	ldr	r1, [r2, #16]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68d2      	ldr	r2, [r2, #12]
 80038ce:	4311      	orrs	r1, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	000186a0 	.word	0x000186a0
 8003930:	001e847f 	.word	0x001e847f
 8003934:	003d08ff 	.word	0x003d08ff
 8003938:	431bde83 	.word	0x431bde83
 800393c:	10624dd3 	.word	0x10624dd3

08003940 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	607a      	str	r2, [r7, #4]
 800394a:	461a      	mov	r2, r3
 800394c:	460b      	mov	r3, r1
 800394e:	817b      	strh	r3, [r7, #10]
 8003950:	4613      	mov	r3, r2
 8003952:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003954:	f7fe fc48 	bl	80021e8 <HAL_GetTick>
 8003958:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b20      	cmp	r3, #32
 8003964:	f040 80e0 	bne.w	8003b28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	2319      	movs	r3, #25
 800396e:	2201      	movs	r2, #1
 8003970:	4970      	ldr	r1, [pc, #448]	; (8003b34 <HAL_I2C_Master_Transmit+0x1f4>)
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f964 	bl	8003c40 <I2C_WaitOnFlagUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800397e:	2302      	movs	r3, #2
 8003980:	e0d3      	b.n	8003b2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_I2C_Master_Transmit+0x50>
 800398c:	2302      	movs	r3, #2
 800398e:	e0cc      	b.n	8003b2a <HAL_I2C_Master_Transmit+0x1ea>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d007      	beq.n	80039b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2221      	movs	r2, #33	; 0x21
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2210      	movs	r2, #16
 80039d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	893a      	ldrh	r2, [r7, #8]
 80039e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4a50      	ldr	r2, [pc, #320]	; (8003b38 <HAL_I2C_Master_Transmit+0x1f8>)
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039f8:	8979      	ldrh	r1, [r7, #10]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	6a3a      	ldr	r2, [r7, #32]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f89c 	bl	8003b3c <I2C_MasterRequestWrite>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e08d      	b.n	8003b2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a24:	e066      	b.n	8003af4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	6a39      	ldr	r1, [r7, #32]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f9de 	bl	8003dec <I2C_WaitOnTXEFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d107      	bne.n	8003a4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e06b      	b.n	8003b2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	781a      	ldrb	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d11b      	bne.n	8003ac8 <HAL_I2C_Master_Transmit+0x188>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d017      	beq.n	8003ac8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	781a      	ldrb	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	6a39      	ldr	r1, [r7, #32]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f9ce 	bl	8003e6e <I2C_WaitOnBTFFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00d      	beq.n	8003af4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d107      	bne.n	8003af0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e01a      	b.n	8003b2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d194      	bne.n	8003a26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e000      	b.n	8003b2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
  }
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	00100002 	.word	0x00100002
 8003b38:	ffff0000 	.word	0xffff0000

08003b3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	607a      	str	r2, [r7, #4]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d006      	beq.n	8003b66 <I2C_MasterRequestWrite+0x2a>
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d003      	beq.n	8003b66 <I2C_MasterRequestWrite+0x2a>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b64:	d108      	bne.n	8003b78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e00b      	b.n	8003b90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	2b12      	cmp	r3, #18
 8003b7e:	d107      	bne.n	8003b90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f84f 	bl	8003c40 <I2C_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00d      	beq.n	8003bc4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb6:	d103      	bne.n	8003bc0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e035      	b.n	8003c30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bcc:	d108      	bne.n	8003be0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bce:	897b      	ldrh	r3, [r7, #10]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bdc:	611a      	str	r2, [r3, #16]
 8003bde:	e01b      	b.n	8003c18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003be0:	897b      	ldrh	r3, [r7, #10]
 8003be2:	11db      	asrs	r3, r3, #7
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f003 0306 	and.w	r3, r3, #6
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f063 030f 	orn	r3, r3, #15
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	490e      	ldr	r1, [pc, #56]	; (8003c38 <I2C_MasterRequestWrite+0xfc>)
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f875 	bl	8003cee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e010      	b.n	8003c30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c0e:	897b      	ldrh	r3, [r7, #10]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4907      	ldr	r1, [pc, #28]	; (8003c3c <I2C_MasterRequestWrite+0x100>)
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 f865 	bl	8003cee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	00010008 	.word	0x00010008
 8003c3c:	00010002 	.word	0x00010002

08003c40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c50:	e025      	b.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d021      	beq.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5a:	f7fe fac5 	bl	80021e8 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d302      	bcc.n	8003c70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d116      	bne.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f043 0220 	orr.w	r2, r3, #32
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e023      	b.n	8003ce6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	0c1b      	lsrs	r3, r3, #16
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d10d      	bne.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	43da      	mvns	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	bf0c      	ite	eq
 8003cba:	2301      	moveq	r3, #1
 8003cbc:	2300      	movne	r3, #0
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	e00c      	b.n	8003cde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	bf0c      	ite	eq
 8003cd6:	2301      	moveq	r3, #1
 8003cd8:	2300      	movne	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d0b6      	beq.n	8003c52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cfc:	e051      	b.n	8003da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0c:	d123      	bne.n	8003d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f043 0204 	orr.w	r2, r3, #4
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e046      	b.n	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d021      	beq.n	8003da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5e:	f7fe fa43 	bl	80021e8 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d302      	bcc.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d116      	bne.n	8003da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f043 0220 	orr.w	r2, r3, #32
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e020      	b.n	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d10c      	bne.n	8003dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	43da      	mvns	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4013      	ands	r3, r2
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	bf14      	ite	ne
 8003dbe:	2301      	movne	r3, #1
 8003dc0:	2300      	moveq	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	e00b      	b.n	8003dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	43da      	mvns	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bf14      	ite	ne
 8003dd8:	2301      	movne	r3, #1
 8003dda:	2300      	moveq	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d18d      	bne.n	8003cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003df8:	e02d      	b.n	8003e56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f878 	bl	8003ef0 <I2C_IsAcknowledgeFailed>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e02d      	b.n	8003e66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d021      	beq.n	8003e56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e12:	f7fe f9e9 	bl	80021e8 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d116      	bne.n	8003e56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f043 0220 	orr.w	r2, r3, #32
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e007      	b.n	8003e66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e60:	2b80      	cmp	r3, #128	; 0x80
 8003e62:	d1ca      	bne.n	8003dfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e7a:	e02d      	b.n	8003ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f837 	bl	8003ef0 <I2C_IsAcknowledgeFailed>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e02d      	b.n	8003ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e92:	d021      	beq.n	8003ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e94:	f7fe f9a8 	bl	80021e8 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d302      	bcc.n	8003eaa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d116      	bne.n	8003ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e007      	b.n	8003ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d1ca      	bne.n	8003e7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f06:	d11b      	bne.n	8003f40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f043 0204 	orr.w	r2, r3, #4
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
	...

08003f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0cc      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f64:	4b68      	ldr	r3, [pc, #416]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d90c      	bls.n	8003f8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b65      	ldr	r3, [pc, #404]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b63      	ldr	r3, [pc, #396]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0b8      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d020      	beq.n	8003fda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa4:	4b59      	ldr	r3, [pc, #356]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4a58      	ldr	r2, [pc, #352]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fbc:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a52      	ldr	r2, [pc, #328]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc8:	4b50      	ldr	r3, [pc, #320]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	494d      	ldr	r1, [pc, #308]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d044      	beq.n	8004070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d107      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d119      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e07f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d003      	beq.n	800400e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800400a:	2b03      	cmp	r3, #3
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400e:	4b3f      	ldr	r3, [pc, #252]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e06f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401e:	4b3b      	ldr	r3, [pc, #236]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e067      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800402e:	4b37      	ldr	r3, [pc, #220]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f023 0203 	bic.w	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4934      	ldr	r1, [pc, #208]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	4313      	orrs	r3, r2
 800403e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004040:	f7fe f8d2 	bl	80021e8 <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	e00a      	b.n	800405e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004048:	f7fe f8ce 	bl	80021e8 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	; 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e04f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	4b2b      	ldr	r3, [pc, #172]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 020c 	and.w	r2, r3, #12
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	429a      	cmp	r2, r3
 800406e:	d1eb      	bne.n	8004048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004070:	4b25      	ldr	r3, [pc, #148]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d20c      	bcs.n	8004098 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b22      	ldr	r3, [pc, #136]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b20      	ldr	r3, [pc, #128]	; (8004108 <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e032      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4916      	ldr	r1, [pc, #88]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	490e      	ldr	r1, [pc, #56]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040d6:	f000 f841 	bl	800415c <HAL_RCC_GetSysClockFreq>
 80040da:	4602      	mov	r2, r0
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	490a      	ldr	r1, [pc, #40]	; (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 80040e8:	5ccb      	ldrb	r3, [r1, r3]
 80040ea:	fa22 f303 	lsr.w	r3, r2, r3
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe f832 	bl	8002160 <HAL_InitTick>

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40023c00 	.word	0x40023c00
 800410c:	40023800 	.word	0x40023800
 8004110:	080096f8 	.word	0x080096f8
 8004114:	20000004 	.word	0x20000004
 8004118:	20000008 	.word	0x20000008

0800411c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <HAL_RCC_GetHCLKFreq+0x14>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000004 	.word	0x20000004

08004134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004138:	f7ff fff0 	bl	800411c <HAL_RCC_GetHCLKFreq>
 800413c:	4602      	mov	r2, r0
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	0a9b      	lsrs	r3, r3, #10
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	4903      	ldr	r1, [pc, #12]	; (8004158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800414a:	5ccb      	ldrb	r3, [r1, r3]
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004150:	4618      	mov	r0, r3
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40023800 	.word	0x40023800
 8004158:	08009708 	.word	0x08009708

0800415c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800415c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004160:	b088      	sub	sp, #32
 8004162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004178:	4bce      	ldr	r3, [pc, #824]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b0c      	cmp	r3, #12
 8004182:	f200 818d 	bhi.w	80044a0 <HAL_RCC_GetSysClockFreq+0x344>
 8004186:	a201      	add	r2, pc, #4	; (adr r2, 800418c <HAL_RCC_GetSysClockFreq+0x30>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	080041c1 	.word	0x080041c1
 8004190:	080044a1 	.word	0x080044a1
 8004194:	080044a1 	.word	0x080044a1
 8004198:	080044a1 	.word	0x080044a1
 800419c:	080041c7 	.word	0x080041c7
 80041a0:	080044a1 	.word	0x080044a1
 80041a4:	080044a1 	.word	0x080044a1
 80041a8:	080044a1 	.word	0x080044a1
 80041ac:	080041cd 	.word	0x080041cd
 80041b0:	080044a1 	.word	0x080044a1
 80041b4:	080044a1 	.word	0x080044a1
 80041b8:	080044a1 	.word	0x080044a1
 80041bc:	08004341 	.word	0x08004341
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041c0:	4bbd      	ldr	r3, [pc, #756]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80041c2:	61bb      	str	r3, [r7, #24]
       break;
 80041c4:	e16f      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041c6:	4bbd      	ldr	r3, [pc, #756]	; (80044bc <HAL_RCC_GetSysClockFreq+0x360>)
 80041c8:	61bb      	str	r3, [r7, #24]
      break;
 80041ca:	e16c      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041cc:	4bb9      	ldr	r3, [pc, #740]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041d6:	4bb7      	ldr	r3, [pc, #732]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d053      	beq.n	800428a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e2:	4bb4      	ldr	r3, [pc, #720]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	099b      	lsrs	r3, r3, #6
 80041e8:	461a      	mov	r2, r3
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041f2:	f04f 0100 	mov.w	r1, #0
 80041f6:	ea02 0400 	and.w	r4, r2, r0
 80041fa:	603c      	str	r4, [r7, #0]
 80041fc:	400b      	ands	r3, r1
 80041fe:	607b      	str	r3, [r7, #4]
 8004200:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004204:	4620      	mov	r0, r4
 8004206:	4629      	mov	r1, r5
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	014b      	lsls	r3, r1, #5
 8004212:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004216:	0142      	lsls	r2, r0, #5
 8004218:	4610      	mov	r0, r2
 800421a:	4619      	mov	r1, r3
 800421c:	4623      	mov	r3, r4
 800421e:	1ac0      	subs	r0, r0, r3
 8004220:	462b      	mov	r3, r5
 8004222:	eb61 0103 	sbc.w	r1, r1, r3
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	018b      	lsls	r3, r1, #6
 8004230:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004234:	0182      	lsls	r2, r0, #6
 8004236:	1a12      	subs	r2, r2, r0
 8004238:	eb63 0301 	sbc.w	r3, r3, r1
 800423c:	f04f 0000 	mov.w	r0, #0
 8004240:	f04f 0100 	mov.w	r1, #0
 8004244:	00d9      	lsls	r1, r3, #3
 8004246:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800424a:	00d0      	lsls	r0, r2, #3
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4621      	mov	r1, r4
 8004252:	1852      	adds	r2, r2, r1
 8004254:	4629      	mov	r1, r5
 8004256:	eb43 0101 	adc.w	r1, r3, r1
 800425a:	460b      	mov	r3, r1
 800425c:	f04f 0000 	mov.w	r0, #0
 8004260:	f04f 0100 	mov.w	r1, #0
 8004264:	0259      	lsls	r1, r3, #9
 8004266:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800426a:	0250      	lsls	r0, r2, #9
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	461a      	mov	r2, r3
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	f7fc fd24 	bl	8000cc8 <__aeabi_uldivmod>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4613      	mov	r3, r2
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	e04c      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428a:	4b8a      	ldr	r3, [pc, #552]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	099b      	lsrs	r3, r3, #6
 8004290:	461a      	mov	r2, r3
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	f240 10ff 	movw	r0, #511	; 0x1ff
 800429a:	f04f 0100 	mov.w	r1, #0
 800429e:	ea02 0a00 	and.w	sl, r2, r0
 80042a2:	ea03 0b01 	and.w	fp, r3, r1
 80042a6:	4650      	mov	r0, sl
 80042a8:	4659      	mov	r1, fp
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	014b      	lsls	r3, r1, #5
 80042b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042b8:	0142      	lsls	r2, r0, #5
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	ebb0 000a 	subs.w	r0, r0, sl
 80042c2:	eb61 010b 	sbc.w	r1, r1, fp
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	018b      	lsls	r3, r1, #6
 80042d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042d4:	0182      	lsls	r2, r0, #6
 80042d6:	1a12      	subs	r2, r2, r0
 80042d8:	eb63 0301 	sbc.w	r3, r3, r1
 80042dc:	f04f 0000 	mov.w	r0, #0
 80042e0:	f04f 0100 	mov.w	r1, #0
 80042e4:	00d9      	lsls	r1, r3, #3
 80042e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042ea:	00d0      	lsls	r0, r2, #3
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	eb12 020a 	adds.w	r2, r2, sl
 80042f4:	eb43 030b 	adc.w	r3, r3, fp
 80042f8:	f04f 0000 	mov.w	r0, #0
 80042fc:	f04f 0100 	mov.w	r1, #0
 8004300:	0299      	lsls	r1, r3, #10
 8004302:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004306:	0290      	lsls	r0, r2, #10
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4610      	mov	r0, r2
 800430e:	4619      	mov	r1, r3
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	461a      	mov	r2, r3
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	f7fc fcd6 	bl	8000cc8 <__aeabi_uldivmod>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4613      	mov	r3, r2
 8004322:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004324:	4b63      	ldr	r3, [pc, #396]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	0c1b      	lsrs	r3, r3, #16
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	3301      	adds	r3, #1
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	61bb      	str	r3, [r7, #24]
      break;
 800433e:	e0b2      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004340:	4b5c      	ldr	r3, [pc, #368]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004348:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800434a:	4b5a      	ldr	r3, [pc, #360]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d04d      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004356:	4b57      	ldr	r3, [pc, #348]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	099b      	lsrs	r3, r3, #6
 800435c:	461a      	mov	r2, r3
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	ea02 0800 	and.w	r8, r2, r0
 800436e:	ea03 0901 	and.w	r9, r3, r1
 8004372:	4640      	mov	r0, r8
 8004374:	4649      	mov	r1, r9
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	014b      	lsls	r3, r1, #5
 8004380:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004384:	0142      	lsls	r2, r0, #5
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	ebb0 0008 	subs.w	r0, r0, r8
 800438e:	eb61 0109 	sbc.w	r1, r1, r9
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	018b      	lsls	r3, r1, #6
 800439c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043a0:	0182      	lsls	r2, r0, #6
 80043a2:	1a12      	subs	r2, r2, r0
 80043a4:	eb63 0301 	sbc.w	r3, r3, r1
 80043a8:	f04f 0000 	mov.w	r0, #0
 80043ac:	f04f 0100 	mov.w	r1, #0
 80043b0:	00d9      	lsls	r1, r3, #3
 80043b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043b6:	00d0      	lsls	r0, r2, #3
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	eb12 0208 	adds.w	r2, r2, r8
 80043c0:	eb43 0309 	adc.w	r3, r3, r9
 80043c4:	f04f 0000 	mov.w	r0, #0
 80043c8:	f04f 0100 	mov.w	r1, #0
 80043cc:	0259      	lsls	r1, r3, #9
 80043ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80043d2:	0250      	lsls	r0, r2, #9
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4610      	mov	r0, r2
 80043da:	4619      	mov	r1, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	461a      	mov	r2, r3
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	f7fc fc70 	bl	8000cc8 <__aeabi_uldivmod>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4613      	mov	r3, r2
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	e04a      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f2:	4b30      	ldr	r3, [pc, #192]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	099b      	lsrs	r3, r3, #6
 80043f8:	461a      	mov	r2, r3
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004402:	f04f 0100 	mov.w	r1, #0
 8004406:	ea02 0400 	and.w	r4, r2, r0
 800440a:	ea03 0501 	and.w	r5, r3, r1
 800440e:	4620      	mov	r0, r4
 8004410:	4629      	mov	r1, r5
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	014b      	lsls	r3, r1, #5
 800441c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004420:	0142      	lsls	r2, r0, #5
 8004422:	4610      	mov	r0, r2
 8004424:	4619      	mov	r1, r3
 8004426:	1b00      	subs	r0, r0, r4
 8004428:	eb61 0105 	sbc.w	r1, r1, r5
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	018b      	lsls	r3, r1, #6
 8004436:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800443a:	0182      	lsls	r2, r0, #6
 800443c:	1a12      	subs	r2, r2, r0
 800443e:	eb63 0301 	sbc.w	r3, r3, r1
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f04f 0100 	mov.w	r1, #0
 800444a:	00d9      	lsls	r1, r3, #3
 800444c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004450:	00d0      	lsls	r0, r2, #3
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	1912      	adds	r2, r2, r4
 8004458:	eb45 0303 	adc.w	r3, r5, r3
 800445c:	f04f 0000 	mov.w	r0, #0
 8004460:	f04f 0100 	mov.w	r1, #0
 8004464:	0299      	lsls	r1, r3, #10
 8004466:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800446a:	0290      	lsls	r0, r2, #10
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	461a      	mov	r2, r3
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	f7fc fc24 	bl	8000cc8 <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4613      	mov	r3, r2
 8004486:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004488:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	0f1b      	lsrs	r3, r3, #28
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	61bb      	str	r3, [r7, #24]
      break;
 800449e:	e002      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80044a2:	61bb      	str	r3, [r7, #24]
      break;
 80044a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a6:	69bb      	ldr	r3, [r7, #24]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3720      	adds	r7, #32
 80044ac:	46bd      	mov	sp, r7
 80044ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800
 80044b8:	00f42400 	.word	0x00f42400
 80044bc:	007a1200 	.word	0x007a1200

080044c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e28d      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8083 	beq.w	80045e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044e0:	4b94      	ldr	r3, [pc, #592]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 030c 	and.w	r3, r3, #12
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d019      	beq.n	8004520 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044ec:	4b91      	ldr	r3, [pc, #580]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d106      	bne.n	8004506 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044f8:	4b8e      	ldr	r3, [pc, #568]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004504:	d00c      	beq.n	8004520 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004506:	4b8b      	ldr	r3, [pc, #556]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800450e:	2b0c      	cmp	r3, #12
 8004510:	d112      	bne.n	8004538 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004512:	4b88      	ldr	r3, [pc, #544]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800451e:	d10b      	bne.n	8004538 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004520:	4b84      	ldr	r3, [pc, #528]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d05b      	beq.n	80045e4 <HAL_RCC_OscConfig+0x124>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d157      	bne.n	80045e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e25a      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004540:	d106      	bne.n	8004550 <HAL_RCC_OscConfig+0x90>
 8004542:	4b7c      	ldr	r3, [pc, #496]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a7b      	ldr	r2, [pc, #492]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e01d      	b.n	800458c <HAL_RCC_OscConfig+0xcc>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004558:	d10c      	bne.n	8004574 <HAL_RCC_OscConfig+0xb4>
 800455a:	4b76      	ldr	r3, [pc, #472]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a75      	ldr	r2, [pc, #468]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4b73      	ldr	r3, [pc, #460]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a72      	ldr	r2, [pc, #456]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 800456c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e00b      	b.n	800458c <HAL_RCC_OscConfig+0xcc>
 8004574:	4b6f      	ldr	r3, [pc, #444]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a6e      	ldr	r2, [pc, #440]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 800457a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	4b6c      	ldr	r3, [pc, #432]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a6b      	ldr	r2, [pc, #428]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800458a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d013      	beq.n	80045bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fd fe28 	bl	80021e8 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800459c:	f7fd fe24 	bl	80021e8 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	; 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e21f      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	4b61      	ldr	r3, [pc, #388]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0xdc>
 80045ba:	e014      	b.n	80045e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fd fe14 	bl	80021e8 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c4:	f7fd fe10 	bl	80021e8 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	; 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e20b      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d6:	4b57      	ldr	r3, [pc, #348]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x104>
 80045e2:	e000      	b.n	80045e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d06f      	beq.n	80046d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80045f2:	4b50      	ldr	r3, [pc, #320]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d017      	beq.n	800462e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045fe:	4b4d      	ldr	r3, [pc, #308]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004606:	2b08      	cmp	r3, #8
 8004608:	d105      	bne.n	8004616 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800460a:	4b4a      	ldr	r3, [pc, #296]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004616:	4b47      	ldr	r3, [pc, #284]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800461e:	2b0c      	cmp	r3, #12
 8004620:	d11c      	bne.n	800465c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004622:	4b44      	ldr	r3, [pc, #272]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d116      	bne.n	800465c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462e:	4b41      	ldr	r3, [pc, #260]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_RCC_OscConfig+0x186>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d001      	beq.n	8004646 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e1d3      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004646:	4b3b      	ldr	r3, [pc, #236]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4937      	ldr	r1, [pc, #220]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465a:	e03a      	b.n	80046d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d020      	beq.n	80046a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004664:	4b34      	ldr	r3, [pc, #208]	; (8004738 <HAL_RCC_OscConfig+0x278>)
 8004666:	2201      	movs	r2, #1
 8004668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466a:	f7fd fdbd 	bl	80021e8 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004672:	f7fd fdb9 	bl	80021e8 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e1b4      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004684:	4b2b      	ldr	r3, [pc, #172]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0f0      	beq.n	8004672 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004690:	4b28      	ldr	r3, [pc, #160]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4925      	ldr	r1, [pc, #148]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	600b      	str	r3, [r1, #0]
 80046a4:	e015      	b.n	80046d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046a6:	4b24      	ldr	r3, [pc, #144]	; (8004738 <HAL_RCC_OscConfig+0x278>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ac:	f7fd fd9c 	bl	80021e8 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b4:	f7fd fd98 	bl	80021e8 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e193      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c6:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d036      	beq.n	800474c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d016      	beq.n	8004714 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e6:	4b15      	ldr	r3, [pc, #84]	; (800473c <HAL_RCC_OscConfig+0x27c>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ec:	f7fd fd7c 	bl	80021e8 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f4:	f7fd fd78 	bl	80021e8 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e173      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004706:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 8004708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0x234>
 8004712:	e01b      	b.n	800474c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004714:	4b09      	ldr	r3, [pc, #36]	; (800473c <HAL_RCC_OscConfig+0x27c>)
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fd fd65 	bl	80021e8 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004720:	e00e      	b.n	8004740 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004722:	f7fd fd61 	bl	80021e8 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d907      	bls.n	8004740 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e15c      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
 8004734:	40023800 	.word	0x40023800
 8004738:	42470000 	.word	0x42470000
 800473c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004740:	4b8a      	ldr	r3, [pc, #552]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 8004742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1ea      	bne.n	8004722 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 8097 	beq.w	8004888 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800475a:	2300      	movs	r3, #0
 800475c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800475e:	4b83      	ldr	r3, [pc, #524]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10f      	bne.n	800478a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800476a:	2300      	movs	r3, #0
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	4b7f      	ldr	r3, [pc, #508]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	4a7e      	ldr	r2, [pc, #504]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 8004774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004778:	6413      	str	r3, [r2, #64]	; 0x40
 800477a:	4b7c      	ldr	r3, [pc, #496]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004782:	60bb      	str	r3, [r7, #8]
 8004784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004786:	2301      	movs	r3, #1
 8004788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478a:	4b79      	ldr	r3, [pc, #484]	; (8004970 <HAL_RCC_OscConfig+0x4b0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d118      	bne.n	80047c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004796:	4b76      	ldr	r3, [pc, #472]	; (8004970 <HAL_RCC_OscConfig+0x4b0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a75      	ldr	r2, [pc, #468]	; (8004970 <HAL_RCC_OscConfig+0x4b0>)
 800479c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a2:	f7fd fd21 	bl	80021e8 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047aa:	f7fd fd1d 	bl	80021e8 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e118      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047bc:	4b6c      	ldr	r3, [pc, #432]	; (8004970 <HAL_RCC_OscConfig+0x4b0>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d106      	bne.n	80047de <HAL_RCC_OscConfig+0x31e>
 80047d0:	4b66      	ldr	r3, [pc, #408]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 80047d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d4:	4a65      	ldr	r2, [pc, #404]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	6713      	str	r3, [r2, #112]	; 0x70
 80047dc:	e01c      	b.n	8004818 <HAL_RCC_OscConfig+0x358>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b05      	cmp	r3, #5
 80047e4:	d10c      	bne.n	8004800 <HAL_RCC_OscConfig+0x340>
 80047e6:	4b61      	ldr	r3, [pc, #388]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	4a60      	ldr	r2, [pc, #384]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 80047ec:	f043 0304 	orr.w	r3, r3, #4
 80047f0:	6713      	str	r3, [r2, #112]	; 0x70
 80047f2:	4b5e      	ldr	r3, [pc, #376]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f6:	4a5d      	ldr	r2, [pc, #372]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	6713      	str	r3, [r2, #112]	; 0x70
 80047fe:	e00b      	b.n	8004818 <HAL_RCC_OscConfig+0x358>
 8004800:	4b5a      	ldr	r3, [pc, #360]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 8004802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004804:	4a59      	ldr	r2, [pc, #356]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 8004806:	f023 0301 	bic.w	r3, r3, #1
 800480a:	6713      	str	r3, [r2, #112]	; 0x70
 800480c:	4b57      	ldr	r3, [pc, #348]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004810:	4a56      	ldr	r2, [pc, #344]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 8004812:	f023 0304 	bic.w	r3, r3, #4
 8004816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d015      	beq.n	800484c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004820:	f7fd fce2 	bl	80021e8 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004826:	e00a      	b.n	800483e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004828:	f7fd fcde 	bl	80021e8 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	; 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e0d7      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483e:	4b4b      	ldr	r3, [pc, #300]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0ee      	beq.n	8004828 <HAL_RCC_OscConfig+0x368>
 800484a:	e014      	b.n	8004876 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484c:	f7fd fccc 	bl	80021e8 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004852:	e00a      	b.n	800486a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004854:	f7fd fcc8 	bl	80021e8 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e0c1      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486a:	4b40      	ldr	r3, [pc, #256]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 800486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1ee      	bne.n	8004854 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004876:	7dfb      	ldrb	r3, [r7, #23]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d105      	bne.n	8004888 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487c:	4b3b      	ldr	r3, [pc, #236]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	4a3a      	ldr	r2, [pc, #232]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 8004882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 80ad 	beq.w	80049ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004892:	4b36      	ldr	r3, [pc, #216]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 030c 	and.w	r3, r3, #12
 800489a:	2b08      	cmp	r3, #8
 800489c:	d060      	beq.n	8004960 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d145      	bne.n	8004932 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a6:	4b33      	ldr	r3, [pc, #204]	; (8004974 <HAL_RCC_OscConfig+0x4b4>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7fd fc9c 	bl	80021e8 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b4:	f7fd fc98 	bl	80021e8 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e093      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c6:	4b29      	ldr	r3, [pc, #164]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69da      	ldr	r2, [r3, #28]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	019b      	lsls	r3, r3, #6
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	085b      	lsrs	r3, r3, #1
 80048ea:	3b01      	subs	r3, #1
 80048ec:	041b      	lsls	r3, r3, #16
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	061b      	lsls	r3, r3, #24
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	071b      	lsls	r3, r3, #28
 80048fe:	491b      	ldr	r1, [pc, #108]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 8004900:	4313      	orrs	r3, r2
 8004902:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004904:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <HAL_RCC_OscConfig+0x4b4>)
 8004906:	2201      	movs	r2, #1
 8004908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490a:	f7fd fc6d 	bl	80021e8 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004912:	f7fd fc69 	bl	80021e8 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e064      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004924:	4b11      	ldr	r3, [pc, #68]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCC_OscConfig+0x452>
 8004930:	e05c      	b.n	80049ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004932:	4b10      	ldr	r3, [pc, #64]	; (8004974 <HAL_RCC_OscConfig+0x4b4>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fd fc56 	bl	80021e8 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004940:	f7fd fc52 	bl	80021e8 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e04d      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004952:	4b06      	ldr	r3, [pc, #24]	; (800496c <HAL_RCC_OscConfig+0x4ac>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x480>
 800495e:	e045      	b.n	80049ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d107      	bne.n	8004978 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e040      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
 800496c:	40023800 	.word	0x40023800
 8004970:	40007000 	.word	0x40007000
 8004974:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004978:	4b1f      	ldr	r3, [pc, #124]	; (80049f8 <HAL_RCC_OscConfig+0x538>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d030      	beq.n	80049e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004990:	429a      	cmp	r2, r3
 8004992:	d129      	bne.n	80049e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	429a      	cmp	r2, r3
 80049a0:	d122      	bne.n	80049e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049a8:	4013      	ands	r3, r2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d119      	bne.n	80049e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	3b01      	subs	r3, #1
 80049c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d10f      	bne.n	80049e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d107      	bne.n	80049e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d001      	beq.n	80049ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800

080049fc <__errno>:
 80049fc:	4b01      	ldr	r3, [pc, #4]	; (8004a04 <__errno+0x8>)
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000010 	.word	0x20000010

08004a08 <__libc_init_array>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	4d0d      	ldr	r5, [pc, #52]	; (8004a40 <__libc_init_array+0x38>)
 8004a0c:	4c0d      	ldr	r4, [pc, #52]	; (8004a44 <__libc_init_array+0x3c>)
 8004a0e:	1b64      	subs	r4, r4, r5
 8004a10:	10a4      	asrs	r4, r4, #2
 8004a12:	2600      	movs	r6, #0
 8004a14:	42a6      	cmp	r6, r4
 8004a16:	d109      	bne.n	8004a2c <__libc_init_array+0x24>
 8004a18:	4d0b      	ldr	r5, [pc, #44]	; (8004a48 <__libc_init_array+0x40>)
 8004a1a:	4c0c      	ldr	r4, [pc, #48]	; (8004a4c <__libc_init_array+0x44>)
 8004a1c:	f004 fe46 	bl	80096ac <_init>
 8004a20:	1b64      	subs	r4, r4, r5
 8004a22:	10a4      	asrs	r4, r4, #2
 8004a24:	2600      	movs	r6, #0
 8004a26:	42a6      	cmp	r6, r4
 8004a28:	d105      	bne.n	8004a36 <__libc_init_array+0x2e>
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a30:	4798      	blx	r3
 8004a32:	3601      	adds	r6, #1
 8004a34:	e7ee      	b.n	8004a14 <__libc_init_array+0xc>
 8004a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3a:	4798      	blx	r3
 8004a3c:	3601      	adds	r6, #1
 8004a3e:	e7f2      	b.n	8004a26 <__libc_init_array+0x1e>
 8004a40:	08009bd4 	.word	0x08009bd4
 8004a44:	08009bd4 	.word	0x08009bd4
 8004a48:	08009bd4 	.word	0x08009bd4
 8004a4c:	08009bd8 	.word	0x08009bd8

08004a50 <memset>:
 8004a50:	4402      	add	r2, r0
 8004a52:	4603      	mov	r3, r0
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d100      	bne.n	8004a5a <memset+0xa>
 8004a58:	4770      	bx	lr
 8004a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a5e:	e7f9      	b.n	8004a54 <memset+0x4>

08004a60 <__cvt>:
 8004a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a64:	ec55 4b10 	vmov	r4, r5, d0
 8004a68:	2d00      	cmp	r5, #0
 8004a6a:	460e      	mov	r6, r1
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	462b      	mov	r3, r5
 8004a70:	bfbb      	ittet	lt
 8004a72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a76:	461d      	movlt	r5, r3
 8004a78:	2300      	movge	r3, #0
 8004a7a:	232d      	movlt	r3, #45	; 0x2d
 8004a7c:	700b      	strb	r3, [r1, #0]
 8004a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004a84:	4691      	mov	r9, r2
 8004a86:	f023 0820 	bic.w	r8, r3, #32
 8004a8a:	bfbc      	itt	lt
 8004a8c:	4622      	movlt	r2, r4
 8004a8e:	4614      	movlt	r4, r2
 8004a90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a94:	d005      	beq.n	8004aa2 <__cvt+0x42>
 8004a96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a9a:	d100      	bne.n	8004a9e <__cvt+0x3e>
 8004a9c:	3601      	adds	r6, #1
 8004a9e:	2102      	movs	r1, #2
 8004aa0:	e000      	b.n	8004aa4 <__cvt+0x44>
 8004aa2:	2103      	movs	r1, #3
 8004aa4:	ab03      	add	r3, sp, #12
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	ab02      	add	r3, sp, #8
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	ec45 4b10 	vmov	d0, r4, r5
 8004ab0:	4653      	mov	r3, sl
 8004ab2:	4632      	mov	r2, r6
 8004ab4:	f001 fdb4 	bl	8006620 <_dtoa_r>
 8004ab8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004abc:	4607      	mov	r7, r0
 8004abe:	d102      	bne.n	8004ac6 <__cvt+0x66>
 8004ac0:	f019 0f01 	tst.w	r9, #1
 8004ac4:	d022      	beq.n	8004b0c <__cvt+0xac>
 8004ac6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004aca:	eb07 0906 	add.w	r9, r7, r6
 8004ace:	d110      	bne.n	8004af2 <__cvt+0x92>
 8004ad0:	783b      	ldrb	r3, [r7, #0]
 8004ad2:	2b30      	cmp	r3, #48	; 0x30
 8004ad4:	d10a      	bne.n	8004aec <__cvt+0x8c>
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2300      	movs	r3, #0
 8004ada:	4620      	mov	r0, r4
 8004adc:	4629      	mov	r1, r5
 8004ade:	f7fc f813 	bl	8000b08 <__aeabi_dcmpeq>
 8004ae2:	b918      	cbnz	r0, 8004aec <__cvt+0x8c>
 8004ae4:	f1c6 0601 	rsb	r6, r6, #1
 8004ae8:	f8ca 6000 	str.w	r6, [sl]
 8004aec:	f8da 3000 	ldr.w	r3, [sl]
 8004af0:	4499      	add	r9, r3
 8004af2:	2200      	movs	r2, #0
 8004af4:	2300      	movs	r3, #0
 8004af6:	4620      	mov	r0, r4
 8004af8:	4629      	mov	r1, r5
 8004afa:	f7fc f805 	bl	8000b08 <__aeabi_dcmpeq>
 8004afe:	b108      	cbz	r0, 8004b04 <__cvt+0xa4>
 8004b00:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b04:	2230      	movs	r2, #48	; 0x30
 8004b06:	9b03      	ldr	r3, [sp, #12]
 8004b08:	454b      	cmp	r3, r9
 8004b0a:	d307      	bcc.n	8004b1c <__cvt+0xbc>
 8004b0c:	9b03      	ldr	r3, [sp, #12]
 8004b0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b10:	1bdb      	subs	r3, r3, r7
 8004b12:	4638      	mov	r0, r7
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	b004      	add	sp, #16
 8004b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1c:	1c59      	adds	r1, r3, #1
 8004b1e:	9103      	str	r1, [sp, #12]
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	e7f0      	b.n	8004b06 <__cvt+0xa6>

08004b24 <__exponent>:
 8004b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b26:	4603      	mov	r3, r0
 8004b28:	2900      	cmp	r1, #0
 8004b2a:	bfb8      	it	lt
 8004b2c:	4249      	neglt	r1, r1
 8004b2e:	f803 2b02 	strb.w	r2, [r3], #2
 8004b32:	bfb4      	ite	lt
 8004b34:	222d      	movlt	r2, #45	; 0x2d
 8004b36:	222b      	movge	r2, #43	; 0x2b
 8004b38:	2909      	cmp	r1, #9
 8004b3a:	7042      	strb	r2, [r0, #1]
 8004b3c:	dd2a      	ble.n	8004b94 <__exponent+0x70>
 8004b3e:	f10d 0407 	add.w	r4, sp, #7
 8004b42:	46a4      	mov	ip, r4
 8004b44:	270a      	movs	r7, #10
 8004b46:	46a6      	mov	lr, r4
 8004b48:	460a      	mov	r2, r1
 8004b4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004b4e:	fb07 1516 	mls	r5, r7, r6, r1
 8004b52:	3530      	adds	r5, #48	; 0x30
 8004b54:	2a63      	cmp	r2, #99	; 0x63
 8004b56:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b5e:	4631      	mov	r1, r6
 8004b60:	dcf1      	bgt.n	8004b46 <__exponent+0x22>
 8004b62:	3130      	adds	r1, #48	; 0x30
 8004b64:	f1ae 0502 	sub.w	r5, lr, #2
 8004b68:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b6c:	1c44      	adds	r4, r0, #1
 8004b6e:	4629      	mov	r1, r5
 8004b70:	4561      	cmp	r1, ip
 8004b72:	d30a      	bcc.n	8004b8a <__exponent+0x66>
 8004b74:	f10d 0209 	add.w	r2, sp, #9
 8004b78:	eba2 020e 	sub.w	r2, r2, lr
 8004b7c:	4565      	cmp	r5, ip
 8004b7e:	bf88      	it	hi
 8004b80:	2200      	movhi	r2, #0
 8004b82:	4413      	add	r3, r2
 8004b84:	1a18      	subs	r0, r3, r0
 8004b86:	b003      	add	sp, #12
 8004b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b8e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b92:	e7ed      	b.n	8004b70 <__exponent+0x4c>
 8004b94:	2330      	movs	r3, #48	; 0x30
 8004b96:	3130      	adds	r1, #48	; 0x30
 8004b98:	7083      	strb	r3, [r0, #2]
 8004b9a:	70c1      	strb	r1, [r0, #3]
 8004b9c:	1d03      	adds	r3, r0, #4
 8004b9e:	e7f1      	b.n	8004b84 <__exponent+0x60>

08004ba0 <_printf_float>:
 8004ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba4:	ed2d 8b02 	vpush	{d8}
 8004ba8:	b08d      	sub	sp, #52	; 0x34
 8004baa:	460c      	mov	r4, r1
 8004bac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004bb0:	4616      	mov	r6, r2
 8004bb2:	461f      	mov	r7, r3
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	f002 fe8f 	bl	80078d8 <_localeconv_r>
 8004bba:	f8d0 a000 	ldr.w	sl, [r0]
 8004bbe:	4650      	mov	r0, sl
 8004bc0:	f7fb fb26 	bl	8000210 <strlen>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	9305      	str	r3, [sp, #20]
 8004bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8004bd0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004bd4:	3307      	adds	r3, #7
 8004bd6:	f023 0307 	bic.w	r3, r3, #7
 8004bda:	f103 0208 	add.w	r2, r3, #8
 8004bde:	f8c8 2000 	str.w	r2, [r8]
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004bea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004bee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004bf2:	9307      	str	r3, [sp, #28]
 8004bf4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004bf8:	ee08 0a10 	vmov	s16, r0
 8004bfc:	4b9f      	ldr	r3, [pc, #636]	; (8004e7c <_printf_float+0x2dc>)
 8004bfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c02:	f04f 32ff 	mov.w	r2, #4294967295
 8004c06:	f7fb ffb1 	bl	8000b6c <__aeabi_dcmpun>
 8004c0a:	bb88      	cbnz	r0, 8004c70 <_printf_float+0xd0>
 8004c0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c10:	4b9a      	ldr	r3, [pc, #616]	; (8004e7c <_printf_float+0x2dc>)
 8004c12:	f04f 32ff 	mov.w	r2, #4294967295
 8004c16:	f7fb ff8b 	bl	8000b30 <__aeabi_dcmple>
 8004c1a:	bb48      	cbnz	r0, 8004c70 <_printf_float+0xd0>
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2300      	movs	r3, #0
 8004c20:	4640      	mov	r0, r8
 8004c22:	4649      	mov	r1, r9
 8004c24:	f7fb ff7a 	bl	8000b1c <__aeabi_dcmplt>
 8004c28:	b110      	cbz	r0, 8004c30 <_printf_float+0x90>
 8004c2a:	232d      	movs	r3, #45	; 0x2d
 8004c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c30:	4b93      	ldr	r3, [pc, #588]	; (8004e80 <_printf_float+0x2e0>)
 8004c32:	4894      	ldr	r0, [pc, #592]	; (8004e84 <_printf_float+0x2e4>)
 8004c34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004c38:	bf94      	ite	ls
 8004c3a:	4698      	movls	r8, r3
 8004c3c:	4680      	movhi	r8, r0
 8004c3e:	2303      	movs	r3, #3
 8004c40:	6123      	str	r3, [r4, #16]
 8004c42:	9b05      	ldr	r3, [sp, #20]
 8004c44:	f023 0204 	bic.w	r2, r3, #4
 8004c48:	6022      	str	r2, [r4, #0]
 8004c4a:	f04f 0900 	mov.w	r9, #0
 8004c4e:	9700      	str	r7, [sp, #0]
 8004c50:	4633      	mov	r3, r6
 8004c52:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c54:	4621      	mov	r1, r4
 8004c56:	4628      	mov	r0, r5
 8004c58:	f000 f9d8 	bl	800500c <_printf_common>
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	f040 8090 	bne.w	8004d82 <_printf_float+0x1e2>
 8004c62:	f04f 30ff 	mov.w	r0, #4294967295
 8004c66:	b00d      	add	sp, #52	; 0x34
 8004c68:	ecbd 8b02 	vpop	{d8}
 8004c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c70:	4642      	mov	r2, r8
 8004c72:	464b      	mov	r3, r9
 8004c74:	4640      	mov	r0, r8
 8004c76:	4649      	mov	r1, r9
 8004c78:	f7fb ff78 	bl	8000b6c <__aeabi_dcmpun>
 8004c7c:	b140      	cbz	r0, 8004c90 <_printf_float+0xf0>
 8004c7e:	464b      	mov	r3, r9
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bfbc      	itt	lt
 8004c84:	232d      	movlt	r3, #45	; 0x2d
 8004c86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c8a:	487f      	ldr	r0, [pc, #508]	; (8004e88 <_printf_float+0x2e8>)
 8004c8c:	4b7f      	ldr	r3, [pc, #508]	; (8004e8c <_printf_float+0x2ec>)
 8004c8e:	e7d1      	b.n	8004c34 <_printf_float+0x94>
 8004c90:	6863      	ldr	r3, [r4, #4]
 8004c92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004c96:	9206      	str	r2, [sp, #24]
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	d13f      	bne.n	8004d1c <_printf_float+0x17c>
 8004c9c:	2306      	movs	r3, #6
 8004c9e:	6063      	str	r3, [r4, #4]
 8004ca0:	9b05      	ldr	r3, [sp, #20]
 8004ca2:	6861      	ldr	r1, [r4, #4]
 8004ca4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ca8:	2300      	movs	r3, #0
 8004caa:	9303      	str	r3, [sp, #12]
 8004cac:	ab0a      	add	r3, sp, #40	; 0x28
 8004cae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004cb2:	ab09      	add	r3, sp, #36	; 0x24
 8004cb4:	ec49 8b10 	vmov	d0, r8, r9
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	6022      	str	r2, [r4, #0]
 8004cbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	f7ff fecd 	bl	8004a60 <__cvt>
 8004cc6:	9b06      	ldr	r3, [sp, #24]
 8004cc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cca:	2b47      	cmp	r3, #71	; 0x47
 8004ccc:	4680      	mov	r8, r0
 8004cce:	d108      	bne.n	8004ce2 <_printf_float+0x142>
 8004cd0:	1cc8      	adds	r0, r1, #3
 8004cd2:	db02      	blt.n	8004cda <_printf_float+0x13a>
 8004cd4:	6863      	ldr	r3, [r4, #4]
 8004cd6:	4299      	cmp	r1, r3
 8004cd8:	dd41      	ble.n	8004d5e <_printf_float+0x1be>
 8004cda:	f1ab 0b02 	sub.w	fp, fp, #2
 8004cde:	fa5f fb8b 	uxtb.w	fp, fp
 8004ce2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ce6:	d820      	bhi.n	8004d2a <_printf_float+0x18a>
 8004ce8:	3901      	subs	r1, #1
 8004cea:	465a      	mov	r2, fp
 8004cec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cf0:	9109      	str	r1, [sp, #36]	; 0x24
 8004cf2:	f7ff ff17 	bl	8004b24 <__exponent>
 8004cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cf8:	1813      	adds	r3, r2, r0
 8004cfa:	2a01      	cmp	r2, #1
 8004cfc:	4681      	mov	r9, r0
 8004cfe:	6123      	str	r3, [r4, #16]
 8004d00:	dc02      	bgt.n	8004d08 <_printf_float+0x168>
 8004d02:	6822      	ldr	r2, [r4, #0]
 8004d04:	07d2      	lsls	r2, r2, #31
 8004d06:	d501      	bpl.n	8004d0c <_printf_float+0x16c>
 8004d08:	3301      	adds	r3, #1
 8004d0a:	6123      	str	r3, [r4, #16]
 8004d0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d09c      	beq.n	8004c4e <_printf_float+0xae>
 8004d14:	232d      	movs	r3, #45	; 0x2d
 8004d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1a:	e798      	b.n	8004c4e <_printf_float+0xae>
 8004d1c:	9a06      	ldr	r2, [sp, #24]
 8004d1e:	2a47      	cmp	r2, #71	; 0x47
 8004d20:	d1be      	bne.n	8004ca0 <_printf_float+0x100>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1bc      	bne.n	8004ca0 <_printf_float+0x100>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e7b9      	b.n	8004c9e <_printf_float+0xfe>
 8004d2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004d2e:	d118      	bne.n	8004d62 <_printf_float+0x1c2>
 8004d30:	2900      	cmp	r1, #0
 8004d32:	6863      	ldr	r3, [r4, #4]
 8004d34:	dd0b      	ble.n	8004d4e <_printf_float+0x1ae>
 8004d36:	6121      	str	r1, [r4, #16]
 8004d38:	b913      	cbnz	r3, 8004d40 <_printf_float+0x1a0>
 8004d3a:	6822      	ldr	r2, [r4, #0]
 8004d3c:	07d0      	lsls	r0, r2, #31
 8004d3e:	d502      	bpl.n	8004d46 <_printf_float+0x1a6>
 8004d40:	3301      	adds	r3, #1
 8004d42:	440b      	add	r3, r1
 8004d44:	6123      	str	r3, [r4, #16]
 8004d46:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d48:	f04f 0900 	mov.w	r9, #0
 8004d4c:	e7de      	b.n	8004d0c <_printf_float+0x16c>
 8004d4e:	b913      	cbnz	r3, 8004d56 <_printf_float+0x1b6>
 8004d50:	6822      	ldr	r2, [r4, #0]
 8004d52:	07d2      	lsls	r2, r2, #31
 8004d54:	d501      	bpl.n	8004d5a <_printf_float+0x1ba>
 8004d56:	3302      	adds	r3, #2
 8004d58:	e7f4      	b.n	8004d44 <_printf_float+0x1a4>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e7f2      	b.n	8004d44 <_printf_float+0x1a4>
 8004d5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d64:	4299      	cmp	r1, r3
 8004d66:	db05      	blt.n	8004d74 <_printf_float+0x1d4>
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	6121      	str	r1, [r4, #16]
 8004d6c:	07d8      	lsls	r0, r3, #31
 8004d6e:	d5ea      	bpl.n	8004d46 <_printf_float+0x1a6>
 8004d70:	1c4b      	adds	r3, r1, #1
 8004d72:	e7e7      	b.n	8004d44 <_printf_float+0x1a4>
 8004d74:	2900      	cmp	r1, #0
 8004d76:	bfd4      	ite	le
 8004d78:	f1c1 0202 	rsble	r2, r1, #2
 8004d7c:	2201      	movgt	r2, #1
 8004d7e:	4413      	add	r3, r2
 8004d80:	e7e0      	b.n	8004d44 <_printf_float+0x1a4>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	055a      	lsls	r2, r3, #21
 8004d86:	d407      	bmi.n	8004d98 <_printf_float+0x1f8>
 8004d88:	6923      	ldr	r3, [r4, #16]
 8004d8a:	4642      	mov	r2, r8
 8004d8c:	4631      	mov	r1, r6
 8004d8e:	4628      	mov	r0, r5
 8004d90:	47b8      	blx	r7
 8004d92:	3001      	adds	r0, #1
 8004d94:	d12c      	bne.n	8004df0 <_printf_float+0x250>
 8004d96:	e764      	b.n	8004c62 <_printf_float+0xc2>
 8004d98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d9c:	f240 80e0 	bls.w	8004f60 <_printf_float+0x3c0>
 8004da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004da4:	2200      	movs	r2, #0
 8004da6:	2300      	movs	r3, #0
 8004da8:	f7fb feae 	bl	8000b08 <__aeabi_dcmpeq>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	d034      	beq.n	8004e1a <_printf_float+0x27a>
 8004db0:	4a37      	ldr	r2, [pc, #220]	; (8004e90 <_printf_float+0x2f0>)
 8004db2:	2301      	movs	r3, #1
 8004db4:	4631      	mov	r1, r6
 8004db6:	4628      	mov	r0, r5
 8004db8:	47b8      	blx	r7
 8004dba:	3001      	adds	r0, #1
 8004dbc:	f43f af51 	beq.w	8004c62 <_printf_float+0xc2>
 8004dc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	db02      	blt.n	8004dce <_printf_float+0x22e>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	07d8      	lsls	r0, r3, #31
 8004dcc:	d510      	bpl.n	8004df0 <_printf_float+0x250>
 8004dce:	ee18 3a10 	vmov	r3, s16
 8004dd2:	4652      	mov	r2, sl
 8004dd4:	4631      	mov	r1, r6
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	47b8      	blx	r7
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f43f af41 	beq.w	8004c62 <_printf_float+0xc2>
 8004de0:	f04f 0800 	mov.w	r8, #0
 8004de4:	f104 091a 	add.w	r9, r4, #26
 8004de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dea:	3b01      	subs	r3, #1
 8004dec:	4543      	cmp	r3, r8
 8004dee:	dc09      	bgt.n	8004e04 <_printf_float+0x264>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	079b      	lsls	r3, r3, #30
 8004df4:	f100 8105 	bmi.w	8005002 <_printf_float+0x462>
 8004df8:	68e0      	ldr	r0, [r4, #12]
 8004dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dfc:	4298      	cmp	r0, r3
 8004dfe:	bfb8      	it	lt
 8004e00:	4618      	movlt	r0, r3
 8004e02:	e730      	b.n	8004c66 <_printf_float+0xc6>
 8004e04:	2301      	movs	r3, #1
 8004e06:	464a      	mov	r2, r9
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	47b8      	blx	r7
 8004e0e:	3001      	adds	r0, #1
 8004e10:	f43f af27 	beq.w	8004c62 <_printf_float+0xc2>
 8004e14:	f108 0801 	add.w	r8, r8, #1
 8004e18:	e7e6      	b.n	8004de8 <_printf_float+0x248>
 8004e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	dc39      	bgt.n	8004e94 <_printf_float+0x2f4>
 8004e20:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <_printf_float+0x2f0>)
 8004e22:	2301      	movs	r3, #1
 8004e24:	4631      	mov	r1, r6
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b8      	blx	r7
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	f43f af19 	beq.w	8004c62 <_printf_float+0xc2>
 8004e30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e34:	4313      	orrs	r3, r2
 8004e36:	d102      	bne.n	8004e3e <_printf_float+0x29e>
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	07d9      	lsls	r1, r3, #31
 8004e3c:	d5d8      	bpl.n	8004df0 <_printf_float+0x250>
 8004e3e:	ee18 3a10 	vmov	r3, s16
 8004e42:	4652      	mov	r2, sl
 8004e44:	4631      	mov	r1, r6
 8004e46:	4628      	mov	r0, r5
 8004e48:	47b8      	blx	r7
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	f43f af09 	beq.w	8004c62 <_printf_float+0xc2>
 8004e50:	f04f 0900 	mov.w	r9, #0
 8004e54:	f104 0a1a 	add.w	sl, r4, #26
 8004e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e5a:	425b      	negs	r3, r3
 8004e5c:	454b      	cmp	r3, r9
 8004e5e:	dc01      	bgt.n	8004e64 <_printf_float+0x2c4>
 8004e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e62:	e792      	b.n	8004d8a <_printf_float+0x1ea>
 8004e64:	2301      	movs	r3, #1
 8004e66:	4652      	mov	r2, sl
 8004e68:	4631      	mov	r1, r6
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	47b8      	blx	r7
 8004e6e:	3001      	adds	r0, #1
 8004e70:	f43f aef7 	beq.w	8004c62 <_printf_float+0xc2>
 8004e74:	f109 0901 	add.w	r9, r9, #1
 8004e78:	e7ee      	b.n	8004e58 <_printf_float+0x2b8>
 8004e7a:	bf00      	nop
 8004e7c:	7fefffff 	.word	0x7fefffff
 8004e80:	0800971c 	.word	0x0800971c
 8004e84:	08009720 	.word	0x08009720
 8004e88:	08009728 	.word	0x08009728
 8004e8c:	08009724 	.word	0x08009724
 8004e90:	0800972c 	.word	0x0800972c
 8004e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	bfa8      	it	ge
 8004e9c:	461a      	movge	r2, r3
 8004e9e:	2a00      	cmp	r2, #0
 8004ea0:	4691      	mov	r9, r2
 8004ea2:	dc37      	bgt.n	8004f14 <_printf_float+0x374>
 8004ea4:	f04f 0b00 	mov.w	fp, #0
 8004ea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eac:	f104 021a 	add.w	r2, r4, #26
 8004eb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004eb2:	9305      	str	r3, [sp, #20]
 8004eb4:	eba3 0309 	sub.w	r3, r3, r9
 8004eb8:	455b      	cmp	r3, fp
 8004eba:	dc33      	bgt.n	8004f24 <_printf_float+0x384>
 8004ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	db3b      	blt.n	8004f3c <_printf_float+0x39c>
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	07da      	lsls	r2, r3, #31
 8004ec8:	d438      	bmi.n	8004f3c <_printf_float+0x39c>
 8004eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ecc:	9b05      	ldr	r3, [sp, #20]
 8004ece:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	eba2 0901 	sub.w	r9, r2, r1
 8004ed6:	4599      	cmp	r9, r3
 8004ed8:	bfa8      	it	ge
 8004eda:	4699      	movge	r9, r3
 8004edc:	f1b9 0f00 	cmp.w	r9, #0
 8004ee0:	dc35      	bgt.n	8004f4e <_printf_float+0x3ae>
 8004ee2:	f04f 0800 	mov.w	r8, #0
 8004ee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eea:	f104 0a1a 	add.w	sl, r4, #26
 8004eee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	eba3 0309 	sub.w	r3, r3, r9
 8004ef8:	4543      	cmp	r3, r8
 8004efa:	f77f af79 	ble.w	8004df0 <_printf_float+0x250>
 8004efe:	2301      	movs	r3, #1
 8004f00:	4652      	mov	r2, sl
 8004f02:	4631      	mov	r1, r6
 8004f04:	4628      	mov	r0, r5
 8004f06:	47b8      	blx	r7
 8004f08:	3001      	adds	r0, #1
 8004f0a:	f43f aeaa 	beq.w	8004c62 <_printf_float+0xc2>
 8004f0e:	f108 0801 	add.w	r8, r8, #1
 8004f12:	e7ec      	b.n	8004eee <_printf_float+0x34e>
 8004f14:	4613      	mov	r3, r2
 8004f16:	4631      	mov	r1, r6
 8004f18:	4642      	mov	r2, r8
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	47b8      	blx	r7
 8004f1e:	3001      	adds	r0, #1
 8004f20:	d1c0      	bne.n	8004ea4 <_printf_float+0x304>
 8004f22:	e69e      	b.n	8004c62 <_printf_float+0xc2>
 8004f24:	2301      	movs	r3, #1
 8004f26:	4631      	mov	r1, r6
 8004f28:	4628      	mov	r0, r5
 8004f2a:	9205      	str	r2, [sp, #20]
 8004f2c:	47b8      	blx	r7
 8004f2e:	3001      	adds	r0, #1
 8004f30:	f43f ae97 	beq.w	8004c62 <_printf_float+0xc2>
 8004f34:	9a05      	ldr	r2, [sp, #20]
 8004f36:	f10b 0b01 	add.w	fp, fp, #1
 8004f3a:	e7b9      	b.n	8004eb0 <_printf_float+0x310>
 8004f3c:	ee18 3a10 	vmov	r3, s16
 8004f40:	4652      	mov	r2, sl
 8004f42:	4631      	mov	r1, r6
 8004f44:	4628      	mov	r0, r5
 8004f46:	47b8      	blx	r7
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d1be      	bne.n	8004eca <_printf_float+0x32a>
 8004f4c:	e689      	b.n	8004c62 <_printf_float+0xc2>
 8004f4e:	9a05      	ldr	r2, [sp, #20]
 8004f50:	464b      	mov	r3, r9
 8004f52:	4442      	add	r2, r8
 8004f54:	4631      	mov	r1, r6
 8004f56:	4628      	mov	r0, r5
 8004f58:	47b8      	blx	r7
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d1c1      	bne.n	8004ee2 <_printf_float+0x342>
 8004f5e:	e680      	b.n	8004c62 <_printf_float+0xc2>
 8004f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f62:	2a01      	cmp	r2, #1
 8004f64:	dc01      	bgt.n	8004f6a <_printf_float+0x3ca>
 8004f66:	07db      	lsls	r3, r3, #31
 8004f68:	d538      	bpl.n	8004fdc <_printf_float+0x43c>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4642      	mov	r2, r8
 8004f6e:	4631      	mov	r1, r6
 8004f70:	4628      	mov	r0, r5
 8004f72:	47b8      	blx	r7
 8004f74:	3001      	adds	r0, #1
 8004f76:	f43f ae74 	beq.w	8004c62 <_printf_float+0xc2>
 8004f7a:	ee18 3a10 	vmov	r3, s16
 8004f7e:	4652      	mov	r2, sl
 8004f80:	4631      	mov	r1, r6
 8004f82:	4628      	mov	r0, r5
 8004f84:	47b8      	blx	r7
 8004f86:	3001      	adds	r0, #1
 8004f88:	f43f ae6b 	beq.w	8004c62 <_printf_float+0xc2>
 8004f8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f90:	2200      	movs	r2, #0
 8004f92:	2300      	movs	r3, #0
 8004f94:	f7fb fdb8 	bl	8000b08 <__aeabi_dcmpeq>
 8004f98:	b9d8      	cbnz	r0, 8004fd2 <_printf_float+0x432>
 8004f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f9c:	f108 0201 	add.w	r2, r8, #1
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	47b8      	blx	r7
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d10e      	bne.n	8004fca <_printf_float+0x42a>
 8004fac:	e659      	b.n	8004c62 <_printf_float+0xc2>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4652      	mov	r2, sl
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	47b8      	blx	r7
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f43f ae52 	beq.w	8004c62 <_printf_float+0xc2>
 8004fbe:	f108 0801 	add.w	r8, r8, #1
 8004fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	4543      	cmp	r3, r8
 8004fc8:	dcf1      	bgt.n	8004fae <_printf_float+0x40e>
 8004fca:	464b      	mov	r3, r9
 8004fcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004fd0:	e6dc      	b.n	8004d8c <_printf_float+0x1ec>
 8004fd2:	f04f 0800 	mov.w	r8, #0
 8004fd6:	f104 0a1a 	add.w	sl, r4, #26
 8004fda:	e7f2      	b.n	8004fc2 <_printf_float+0x422>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4642      	mov	r2, r8
 8004fe0:	e7df      	b.n	8004fa2 <_printf_float+0x402>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	464a      	mov	r2, r9
 8004fe6:	4631      	mov	r1, r6
 8004fe8:	4628      	mov	r0, r5
 8004fea:	47b8      	blx	r7
 8004fec:	3001      	adds	r0, #1
 8004fee:	f43f ae38 	beq.w	8004c62 <_printf_float+0xc2>
 8004ff2:	f108 0801 	add.w	r8, r8, #1
 8004ff6:	68e3      	ldr	r3, [r4, #12]
 8004ff8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ffa:	1a5b      	subs	r3, r3, r1
 8004ffc:	4543      	cmp	r3, r8
 8004ffe:	dcf0      	bgt.n	8004fe2 <_printf_float+0x442>
 8005000:	e6fa      	b.n	8004df8 <_printf_float+0x258>
 8005002:	f04f 0800 	mov.w	r8, #0
 8005006:	f104 0919 	add.w	r9, r4, #25
 800500a:	e7f4      	b.n	8004ff6 <_printf_float+0x456>

0800500c <_printf_common>:
 800500c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005010:	4616      	mov	r6, r2
 8005012:	4699      	mov	r9, r3
 8005014:	688a      	ldr	r2, [r1, #8]
 8005016:	690b      	ldr	r3, [r1, #16]
 8005018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800501c:	4293      	cmp	r3, r2
 800501e:	bfb8      	it	lt
 8005020:	4613      	movlt	r3, r2
 8005022:	6033      	str	r3, [r6, #0]
 8005024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005028:	4607      	mov	r7, r0
 800502a:	460c      	mov	r4, r1
 800502c:	b10a      	cbz	r2, 8005032 <_printf_common+0x26>
 800502e:	3301      	adds	r3, #1
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	0699      	lsls	r1, r3, #26
 8005036:	bf42      	ittt	mi
 8005038:	6833      	ldrmi	r3, [r6, #0]
 800503a:	3302      	addmi	r3, #2
 800503c:	6033      	strmi	r3, [r6, #0]
 800503e:	6825      	ldr	r5, [r4, #0]
 8005040:	f015 0506 	ands.w	r5, r5, #6
 8005044:	d106      	bne.n	8005054 <_printf_common+0x48>
 8005046:	f104 0a19 	add.w	sl, r4, #25
 800504a:	68e3      	ldr	r3, [r4, #12]
 800504c:	6832      	ldr	r2, [r6, #0]
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	42ab      	cmp	r3, r5
 8005052:	dc26      	bgt.n	80050a2 <_printf_common+0x96>
 8005054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005058:	1e13      	subs	r3, r2, #0
 800505a:	6822      	ldr	r2, [r4, #0]
 800505c:	bf18      	it	ne
 800505e:	2301      	movne	r3, #1
 8005060:	0692      	lsls	r2, r2, #26
 8005062:	d42b      	bmi.n	80050bc <_printf_common+0xb0>
 8005064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005068:	4649      	mov	r1, r9
 800506a:	4638      	mov	r0, r7
 800506c:	47c0      	blx	r8
 800506e:	3001      	adds	r0, #1
 8005070:	d01e      	beq.n	80050b0 <_printf_common+0xa4>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	68e5      	ldr	r5, [r4, #12]
 8005076:	6832      	ldr	r2, [r6, #0]
 8005078:	f003 0306 	and.w	r3, r3, #6
 800507c:	2b04      	cmp	r3, #4
 800507e:	bf08      	it	eq
 8005080:	1aad      	subeq	r5, r5, r2
 8005082:	68a3      	ldr	r3, [r4, #8]
 8005084:	6922      	ldr	r2, [r4, #16]
 8005086:	bf0c      	ite	eq
 8005088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800508c:	2500      	movne	r5, #0
 800508e:	4293      	cmp	r3, r2
 8005090:	bfc4      	itt	gt
 8005092:	1a9b      	subgt	r3, r3, r2
 8005094:	18ed      	addgt	r5, r5, r3
 8005096:	2600      	movs	r6, #0
 8005098:	341a      	adds	r4, #26
 800509a:	42b5      	cmp	r5, r6
 800509c:	d11a      	bne.n	80050d4 <_printf_common+0xc8>
 800509e:	2000      	movs	r0, #0
 80050a0:	e008      	b.n	80050b4 <_printf_common+0xa8>
 80050a2:	2301      	movs	r3, #1
 80050a4:	4652      	mov	r2, sl
 80050a6:	4649      	mov	r1, r9
 80050a8:	4638      	mov	r0, r7
 80050aa:	47c0      	blx	r8
 80050ac:	3001      	adds	r0, #1
 80050ae:	d103      	bne.n	80050b8 <_printf_common+0xac>
 80050b0:	f04f 30ff 	mov.w	r0, #4294967295
 80050b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b8:	3501      	adds	r5, #1
 80050ba:	e7c6      	b.n	800504a <_printf_common+0x3e>
 80050bc:	18e1      	adds	r1, r4, r3
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	2030      	movs	r0, #48	; 0x30
 80050c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050c6:	4422      	add	r2, r4
 80050c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050d0:	3302      	adds	r3, #2
 80050d2:	e7c7      	b.n	8005064 <_printf_common+0x58>
 80050d4:	2301      	movs	r3, #1
 80050d6:	4622      	mov	r2, r4
 80050d8:	4649      	mov	r1, r9
 80050da:	4638      	mov	r0, r7
 80050dc:	47c0      	blx	r8
 80050de:	3001      	adds	r0, #1
 80050e0:	d0e6      	beq.n	80050b0 <_printf_common+0xa4>
 80050e2:	3601      	adds	r6, #1
 80050e4:	e7d9      	b.n	800509a <_printf_common+0x8e>
	...

080050e8 <_printf_i>:
 80050e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050ec:	460c      	mov	r4, r1
 80050ee:	4691      	mov	r9, r2
 80050f0:	7e27      	ldrb	r7, [r4, #24]
 80050f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80050f4:	2f78      	cmp	r7, #120	; 0x78
 80050f6:	4680      	mov	r8, r0
 80050f8:	469a      	mov	sl, r3
 80050fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050fe:	d807      	bhi.n	8005110 <_printf_i+0x28>
 8005100:	2f62      	cmp	r7, #98	; 0x62
 8005102:	d80a      	bhi.n	800511a <_printf_i+0x32>
 8005104:	2f00      	cmp	r7, #0
 8005106:	f000 80d8 	beq.w	80052ba <_printf_i+0x1d2>
 800510a:	2f58      	cmp	r7, #88	; 0x58
 800510c:	f000 80a3 	beq.w	8005256 <_printf_i+0x16e>
 8005110:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005118:	e03a      	b.n	8005190 <_printf_i+0xa8>
 800511a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800511e:	2b15      	cmp	r3, #21
 8005120:	d8f6      	bhi.n	8005110 <_printf_i+0x28>
 8005122:	a001      	add	r0, pc, #4	; (adr r0, 8005128 <_printf_i+0x40>)
 8005124:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005128:	08005181 	.word	0x08005181
 800512c:	08005195 	.word	0x08005195
 8005130:	08005111 	.word	0x08005111
 8005134:	08005111 	.word	0x08005111
 8005138:	08005111 	.word	0x08005111
 800513c:	08005111 	.word	0x08005111
 8005140:	08005195 	.word	0x08005195
 8005144:	08005111 	.word	0x08005111
 8005148:	08005111 	.word	0x08005111
 800514c:	08005111 	.word	0x08005111
 8005150:	08005111 	.word	0x08005111
 8005154:	080052a1 	.word	0x080052a1
 8005158:	080051c5 	.word	0x080051c5
 800515c:	08005283 	.word	0x08005283
 8005160:	08005111 	.word	0x08005111
 8005164:	08005111 	.word	0x08005111
 8005168:	080052c3 	.word	0x080052c3
 800516c:	08005111 	.word	0x08005111
 8005170:	080051c5 	.word	0x080051c5
 8005174:	08005111 	.word	0x08005111
 8005178:	08005111 	.word	0x08005111
 800517c:	0800528b 	.word	0x0800528b
 8005180:	680b      	ldr	r3, [r1, #0]
 8005182:	1d1a      	adds	r2, r3, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	600a      	str	r2, [r1, #0]
 8005188:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800518c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005190:	2301      	movs	r3, #1
 8005192:	e0a3      	b.n	80052dc <_printf_i+0x1f4>
 8005194:	6825      	ldr	r5, [r4, #0]
 8005196:	6808      	ldr	r0, [r1, #0]
 8005198:	062e      	lsls	r6, r5, #24
 800519a:	f100 0304 	add.w	r3, r0, #4
 800519e:	d50a      	bpl.n	80051b6 <_printf_i+0xce>
 80051a0:	6805      	ldr	r5, [r0, #0]
 80051a2:	600b      	str	r3, [r1, #0]
 80051a4:	2d00      	cmp	r5, #0
 80051a6:	da03      	bge.n	80051b0 <_printf_i+0xc8>
 80051a8:	232d      	movs	r3, #45	; 0x2d
 80051aa:	426d      	negs	r5, r5
 80051ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b0:	485e      	ldr	r0, [pc, #376]	; (800532c <_printf_i+0x244>)
 80051b2:	230a      	movs	r3, #10
 80051b4:	e019      	b.n	80051ea <_printf_i+0x102>
 80051b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051ba:	6805      	ldr	r5, [r0, #0]
 80051bc:	600b      	str	r3, [r1, #0]
 80051be:	bf18      	it	ne
 80051c0:	b22d      	sxthne	r5, r5
 80051c2:	e7ef      	b.n	80051a4 <_printf_i+0xbc>
 80051c4:	680b      	ldr	r3, [r1, #0]
 80051c6:	6825      	ldr	r5, [r4, #0]
 80051c8:	1d18      	adds	r0, r3, #4
 80051ca:	6008      	str	r0, [r1, #0]
 80051cc:	0628      	lsls	r0, r5, #24
 80051ce:	d501      	bpl.n	80051d4 <_printf_i+0xec>
 80051d0:	681d      	ldr	r5, [r3, #0]
 80051d2:	e002      	b.n	80051da <_printf_i+0xf2>
 80051d4:	0669      	lsls	r1, r5, #25
 80051d6:	d5fb      	bpl.n	80051d0 <_printf_i+0xe8>
 80051d8:	881d      	ldrh	r5, [r3, #0]
 80051da:	4854      	ldr	r0, [pc, #336]	; (800532c <_printf_i+0x244>)
 80051dc:	2f6f      	cmp	r7, #111	; 0x6f
 80051de:	bf0c      	ite	eq
 80051e0:	2308      	moveq	r3, #8
 80051e2:	230a      	movne	r3, #10
 80051e4:	2100      	movs	r1, #0
 80051e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051ea:	6866      	ldr	r6, [r4, #4]
 80051ec:	60a6      	str	r6, [r4, #8]
 80051ee:	2e00      	cmp	r6, #0
 80051f0:	bfa2      	ittt	ge
 80051f2:	6821      	ldrge	r1, [r4, #0]
 80051f4:	f021 0104 	bicge.w	r1, r1, #4
 80051f8:	6021      	strge	r1, [r4, #0]
 80051fa:	b90d      	cbnz	r5, 8005200 <_printf_i+0x118>
 80051fc:	2e00      	cmp	r6, #0
 80051fe:	d04d      	beq.n	800529c <_printf_i+0x1b4>
 8005200:	4616      	mov	r6, r2
 8005202:	fbb5 f1f3 	udiv	r1, r5, r3
 8005206:	fb03 5711 	mls	r7, r3, r1, r5
 800520a:	5dc7      	ldrb	r7, [r0, r7]
 800520c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005210:	462f      	mov	r7, r5
 8005212:	42bb      	cmp	r3, r7
 8005214:	460d      	mov	r5, r1
 8005216:	d9f4      	bls.n	8005202 <_printf_i+0x11a>
 8005218:	2b08      	cmp	r3, #8
 800521a:	d10b      	bne.n	8005234 <_printf_i+0x14c>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	07df      	lsls	r7, r3, #31
 8005220:	d508      	bpl.n	8005234 <_printf_i+0x14c>
 8005222:	6923      	ldr	r3, [r4, #16]
 8005224:	6861      	ldr	r1, [r4, #4]
 8005226:	4299      	cmp	r1, r3
 8005228:	bfde      	ittt	le
 800522a:	2330      	movle	r3, #48	; 0x30
 800522c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005230:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005234:	1b92      	subs	r2, r2, r6
 8005236:	6122      	str	r2, [r4, #16]
 8005238:	f8cd a000 	str.w	sl, [sp]
 800523c:	464b      	mov	r3, r9
 800523e:	aa03      	add	r2, sp, #12
 8005240:	4621      	mov	r1, r4
 8005242:	4640      	mov	r0, r8
 8005244:	f7ff fee2 	bl	800500c <_printf_common>
 8005248:	3001      	adds	r0, #1
 800524a:	d14c      	bne.n	80052e6 <_printf_i+0x1fe>
 800524c:	f04f 30ff 	mov.w	r0, #4294967295
 8005250:	b004      	add	sp, #16
 8005252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005256:	4835      	ldr	r0, [pc, #212]	; (800532c <_printf_i+0x244>)
 8005258:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	680e      	ldr	r6, [r1, #0]
 8005260:	061f      	lsls	r7, r3, #24
 8005262:	f856 5b04 	ldr.w	r5, [r6], #4
 8005266:	600e      	str	r6, [r1, #0]
 8005268:	d514      	bpl.n	8005294 <_printf_i+0x1ac>
 800526a:	07d9      	lsls	r1, r3, #31
 800526c:	bf44      	itt	mi
 800526e:	f043 0320 	orrmi.w	r3, r3, #32
 8005272:	6023      	strmi	r3, [r4, #0]
 8005274:	b91d      	cbnz	r5, 800527e <_printf_i+0x196>
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	f023 0320 	bic.w	r3, r3, #32
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	2310      	movs	r3, #16
 8005280:	e7b0      	b.n	80051e4 <_printf_i+0xfc>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	f043 0320 	orr.w	r3, r3, #32
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	2378      	movs	r3, #120	; 0x78
 800528c:	4828      	ldr	r0, [pc, #160]	; (8005330 <_printf_i+0x248>)
 800528e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005292:	e7e3      	b.n	800525c <_printf_i+0x174>
 8005294:	065e      	lsls	r6, r3, #25
 8005296:	bf48      	it	mi
 8005298:	b2ad      	uxthmi	r5, r5
 800529a:	e7e6      	b.n	800526a <_printf_i+0x182>
 800529c:	4616      	mov	r6, r2
 800529e:	e7bb      	b.n	8005218 <_printf_i+0x130>
 80052a0:	680b      	ldr	r3, [r1, #0]
 80052a2:	6826      	ldr	r6, [r4, #0]
 80052a4:	6960      	ldr	r0, [r4, #20]
 80052a6:	1d1d      	adds	r5, r3, #4
 80052a8:	600d      	str	r5, [r1, #0]
 80052aa:	0635      	lsls	r5, r6, #24
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	d501      	bpl.n	80052b4 <_printf_i+0x1cc>
 80052b0:	6018      	str	r0, [r3, #0]
 80052b2:	e002      	b.n	80052ba <_printf_i+0x1d2>
 80052b4:	0671      	lsls	r1, r6, #25
 80052b6:	d5fb      	bpl.n	80052b0 <_printf_i+0x1c8>
 80052b8:	8018      	strh	r0, [r3, #0]
 80052ba:	2300      	movs	r3, #0
 80052bc:	6123      	str	r3, [r4, #16]
 80052be:	4616      	mov	r6, r2
 80052c0:	e7ba      	b.n	8005238 <_printf_i+0x150>
 80052c2:	680b      	ldr	r3, [r1, #0]
 80052c4:	1d1a      	adds	r2, r3, #4
 80052c6:	600a      	str	r2, [r1, #0]
 80052c8:	681e      	ldr	r6, [r3, #0]
 80052ca:	6862      	ldr	r2, [r4, #4]
 80052cc:	2100      	movs	r1, #0
 80052ce:	4630      	mov	r0, r6
 80052d0:	f7fa ffa6 	bl	8000220 <memchr>
 80052d4:	b108      	cbz	r0, 80052da <_printf_i+0x1f2>
 80052d6:	1b80      	subs	r0, r0, r6
 80052d8:	6060      	str	r0, [r4, #4]
 80052da:	6863      	ldr	r3, [r4, #4]
 80052dc:	6123      	str	r3, [r4, #16]
 80052de:	2300      	movs	r3, #0
 80052e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e4:	e7a8      	b.n	8005238 <_printf_i+0x150>
 80052e6:	6923      	ldr	r3, [r4, #16]
 80052e8:	4632      	mov	r2, r6
 80052ea:	4649      	mov	r1, r9
 80052ec:	4640      	mov	r0, r8
 80052ee:	47d0      	blx	sl
 80052f0:	3001      	adds	r0, #1
 80052f2:	d0ab      	beq.n	800524c <_printf_i+0x164>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	079b      	lsls	r3, r3, #30
 80052f8:	d413      	bmi.n	8005322 <_printf_i+0x23a>
 80052fa:	68e0      	ldr	r0, [r4, #12]
 80052fc:	9b03      	ldr	r3, [sp, #12]
 80052fe:	4298      	cmp	r0, r3
 8005300:	bfb8      	it	lt
 8005302:	4618      	movlt	r0, r3
 8005304:	e7a4      	b.n	8005250 <_printf_i+0x168>
 8005306:	2301      	movs	r3, #1
 8005308:	4632      	mov	r2, r6
 800530a:	4649      	mov	r1, r9
 800530c:	4640      	mov	r0, r8
 800530e:	47d0      	blx	sl
 8005310:	3001      	adds	r0, #1
 8005312:	d09b      	beq.n	800524c <_printf_i+0x164>
 8005314:	3501      	adds	r5, #1
 8005316:	68e3      	ldr	r3, [r4, #12]
 8005318:	9903      	ldr	r1, [sp, #12]
 800531a:	1a5b      	subs	r3, r3, r1
 800531c:	42ab      	cmp	r3, r5
 800531e:	dcf2      	bgt.n	8005306 <_printf_i+0x21e>
 8005320:	e7eb      	b.n	80052fa <_printf_i+0x212>
 8005322:	2500      	movs	r5, #0
 8005324:	f104 0619 	add.w	r6, r4, #25
 8005328:	e7f5      	b.n	8005316 <_printf_i+0x22e>
 800532a:	bf00      	nop
 800532c:	0800972e 	.word	0x0800972e
 8005330:	0800973f 	.word	0x0800973f

08005334 <_scanf_float>:
 8005334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005338:	b087      	sub	sp, #28
 800533a:	4617      	mov	r7, r2
 800533c:	9303      	str	r3, [sp, #12]
 800533e:	688b      	ldr	r3, [r1, #8]
 8005340:	1e5a      	subs	r2, r3, #1
 8005342:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005346:	bf83      	ittte	hi
 8005348:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800534c:	195b      	addhi	r3, r3, r5
 800534e:	9302      	strhi	r3, [sp, #8]
 8005350:	2300      	movls	r3, #0
 8005352:	bf86      	itte	hi
 8005354:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005358:	608b      	strhi	r3, [r1, #8]
 800535a:	9302      	strls	r3, [sp, #8]
 800535c:	680b      	ldr	r3, [r1, #0]
 800535e:	468b      	mov	fp, r1
 8005360:	2500      	movs	r5, #0
 8005362:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005366:	f84b 3b1c 	str.w	r3, [fp], #28
 800536a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800536e:	4680      	mov	r8, r0
 8005370:	460c      	mov	r4, r1
 8005372:	465e      	mov	r6, fp
 8005374:	46aa      	mov	sl, r5
 8005376:	46a9      	mov	r9, r5
 8005378:	9501      	str	r5, [sp, #4]
 800537a:	68a2      	ldr	r2, [r4, #8]
 800537c:	b152      	cbz	r2, 8005394 <_scanf_float+0x60>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b4e      	cmp	r3, #78	; 0x4e
 8005384:	d864      	bhi.n	8005450 <_scanf_float+0x11c>
 8005386:	2b40      	cmp	r3, #64	; 0x40
 8005388:	d83c      	bhi.n	8005404 <_scanf_float+0xd0>
 800538a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800538e:	b2c8      	uxtb	r0, r1
 8005390:	280e      	cmp	r0, #14
 8005392:	d93a      	bls.n	800540a <_scanf_float+0xd6>
 8005394:	f1b9 0f00 	cmp.w	r9, #0
 8005398:	d003      	beq.n	80053a2 <_scanf_float+0x6e>
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053a6:	f1ba 0f01 	cmp.w	sl, #1
 80053aa:	f200 8113 	bhi.w	80055d4 <_scanf_float+0x2a0>
 80053ae:	455e      	cmp	r6, fp
 80053b0:	f200 8105 	bhi.w	80055be <_scanf_float+0x28a>
 80053b4:	2501      	movs	r5, #1
 80053b6:	4628      	mov	r0, r5
 80053b8:	b007      	add	sp, #28
 80053ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80053c2:	2a0d      	cmp	r2, #13
 80053c4:	d8e6      	bhi.n	8005394 <_scanf_float+0x60>
 80053c6:	a101      	add	r1, pc, #4	; (adr r1, 80053cc <_scanf_float+0x98>)
 80053c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80053cc:	0800550b 	.word	0x0800550b
 80053d0:	08005395 	.word	0x08005395
 80053d4:	08005395 	.word	0x08005395
 80053d8:	08005395 	.word	0x08005395
 80053dc:	0800556b 	.word	0x0800556b
 80053e0:	08005543 	.word	0x08005543
 80053e4:	08005395 	.word	0x08005395
 80053e8:	08005395 	.word	0x08005395
 80053ec:	08005519 	.word	0x08005519
 80053f0:	08005395 	.word	0x08005395
 80053f4:	08005395 	.word	0x08005395
 80053f8:	08005395 	.word	0x08005395
 80053fc:	08005395 	.word	0x08005395
 8005400:	080054d1 	.word	0x080054d1
 8005404:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005408:	e7db      	b.n	80053c2 <_scanf_float+0x8e>
 800540a:	290e      	cmp	r1, #14
 800540c:	d8c2      	bhi.n	8005394 <_scanf_float+0x60>
 800540e:	a001      	add	r0, pc, #4	; (adr r0, 8005414 <_scanf_float+0xe0>)
 8005410:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005414:	080054c3 	.word	0x080054c3
 8005418:	08005395 	.word	0x08005395
 800541c:	080054c3 	.word	0x080054c3
 8005420:	08005557 	.word	0x08005557
 8005424:	08005395 	.word	0x08005395
 8005428:	08005471 	.word	0x08005471
 800542c:	080054ad 	.word	0x080054ad
 8005430:	080054ad 	.word	0x080054ad
 8005434:	080054ad 	.word	0x080054ad
 8005438:	080054ad 	.word	0x080054ad
 800543c:	080054ad 	.word	0x080054ad
 8005440:	080054ad 	.word	0x080054ad
 8005444:	080054ad 	.word	0x080054ad
 8005448:	080054ad 	.word	0x080054ad
 800544c:	080054ad 	.word	0x080054ad
 8005450:	2b6e      	cmp	r3, #110	; 0x6e
 8005452:	d809      	bhi.n	8005468 <_scanf_float+0x134>
 8005454:	2b60      	cmp	r3, #96	; 0x60
 8005456:	d8b2      	bhi.n	80053be <_scanf_float+0x8a>
 8005458:	2b54      	cmp	r3, #84	; 0x54
 800545a:	d077      	beq.n	800554c <_scanf_float+0x218>
 800545c:	2b59      	cmp	r3, #89	; 0x59
 800545e:	d199      	bne.n	8005394 <_scanf_float+0x60>
 8005460:	2d07      	cmp	r5, #7
 8005462:	d197      	bne.n	8005394 <_scanf_float+0x60>
 8005464:	2508      	movs	r5, #8
 8005466:	e029      	b.n	80054bc <_scanf_float+0x188>
 8005468:	2b74      	cmp	r3, #116	; 0x74
 800546a:	d06f      	beq.n	800554c <_scanf_float+0x218>
 800546c:	2b79      	cmp	r3, #121	; 0x79
 800546e:	e7f6      	b.n	800545e <_scanf_float+0x12a>
 8005470:	6821      	ldr	r1, [r4, #0]
 8005472:	05c8      	lsls	r0, r1, #23
 8005474:	d51a      	bpl.n	80054ac <_scanf_float+0x178>
 8005476:	9b02      	ldr	r3, [sp, #8]
 8005478:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800547c:	6021      	str	r1, [r4, #0]
 800547e:	f109 0901 	add.w	r9, r9, #1
 8005482:	b11b      	cbz	r3, 800548c <_scanf_float+0x158>
 8005484:	3b01      	subs	r3, #1
 8005486:	3201      	adds	r2, #1
 8005488:	9302      	str	r3, [sp, #8]
 800548a:	60a2      	str	r2, [r4, #8]
 800548c:	68a3      	ldr	r3, [r4, #8]
 800548e:	3b01      	subs	r3, #1
 8005490:	60a3      	str	r3, [r4, #8]
 8005492:	6923      	ldr	r3, [r4, #16]
 8005494:	3301      	adds	r3, #1
 8005496:	6123      	str	r3, [r4, #16]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3b01      	subs	r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	607b      	str	r3, [r7, #4]
 80054a0:	f340 8084 	ble.w	80055ac <_scanf_float+0x278>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	3301      	adds	r3, #1
 80054a8:	603b      	str	r3, [r7, #0]
 80054aa:	e766      	b.n	800537a <_scanf_float+0x46>
 80054ac:	eb1a 0f05 	cmn.w	sl, r5
 80054b0:	f47f af70 	bne.w	8005394 <_scanf_float+0x60>
 80054b4:	6822      	ldr	r2, [r4, #0]
 80054b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80054ba:	6022      	str	r2, [r4, #0]
 80054bc:	f806 3b01 	strb.w	r3, [r6], #1
 80054c0:	e7e4      	b.n	800548c <_scanf_float+0x158>
 80054c2:	6822      	ldr	r2, [r4, #0]
 80054c4:	0610      	lsls	r0, r2, #24
 80054c6:	f57f af65 	bpl.w	8005394 <_scanf_float+0x60>
 80054ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054ce:	e7f4      	b.n	80054ba <_scanf_float+0x186>
 80054d0:	f1ba 0f00 	cmp.w	sl, #0
 80054d4:	d10e      	bne.n	80054f4 <_scanf_float+0x1c0>
 80054d6:	f1b9 0f00 	cmp.w	r9, #0
 80054da:	d10e      	bne.n	80054fa <_scanf_float+0x1c6>
 80054dc:	6822      	ldr	r2, [r4, #0]
 80054de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80054e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80054e6:	d108      	bne.n	80054fa <_scanf_float+0x1c6>
 80054e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80054ec:	6022      	str	r2, [r4, #0]
 80054ee:	f04f 0a01 	mov.w	sl, #1
 80054f2:	e7e3      	b.n	80054bc <_scanf_float+0x188>
 80054f4:	f1ba 0f02 	cmp.w	sl, #2
 80054f8:	d055      	beq.n	80055a6 <_scanf_float+0x272>
 80054fa:	2d01      	cmp	r5, #1
 80054fc:	d002      	beq.n	8005504 <_scanf_float+0x1d0>
 80054fe:	2d04      	cmp	r5, #4
 8005500:	f47f af48 	bne.w	8005394 <_scanf_float+0x60>
 8005504:	3501      	adds	r5, #1
 8005506:	b2ed      	uxtb	r5, r5
 8005508:	e7d8      	b.n	80054bc <_scanf_float+0x188>
 800550a:	f1ba 0f01 	cmp.w	sl, #1
 800550e:	f47f af41 	bne.w	8005394 <_scanf_float+0x60>
 8005512:	f04f 0a02 	mov.w	sl, #2
 8005516:	e7d1      	b.n	80054bc <_scanf_float+0x188>
 8005518:	b97d      	cbnz	r5, 800553a <_scanf_float+0x206>
 800551a:	f1b9 0f00 	cmp.w	r9, #0
 800551e:	f47f af3c 	bne.w	800539a <_scanf_float+0x66>
 8005522:	6822      	ldr	r2, [r4, #0]
 8005524:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005528:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800552c:	f47f af39 	bne.w	80053a2 <_scanf_float+0x6e>
 8005530:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005534:	6022      	str	r2, [r4, #0]
 8005536:	2501      	movs	r5, #1
 8005538:	e7c0      	b.n	80054bc <_scanf_float+0x188>
 800553a:	2d03      	cmp	r5, #3
 800553c:	d0e2      	beq.n	8005504 <_scanf_float+0x1d0>
 800553e:	2d05      	cmp	r5, #5
 8005540:	e7de      	b.n	8005500 <_scanf_float+0x1cc>
 8005542:	2d02      	cmp	r5, #2
 8005544:	f47f af26 	bne.w	8005394 <_scanf_float+0x60>
 8005548:	2503      	movs	r5, #3
 800554a:	e7b7      	b.n	80054bc <_scanf_float+0x188>
 800554c:	2d06      	cmp	r5, #6
 800554e:	f47f af21 	bne.w	8005394 <_scanf_float+0x60>
 8005552:	2507      	movs	r5, #7
 8005554:	e7b2      	b.n	80054bc <_scanf_float+0x188>
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	0591      	lsls	r1, r2, #22
 800555a:	f57f af1b 	bpl.w	8005394 <_scanf_float+0x60>
 800555e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005562:	6022      	str	r2, [r4, #0]
 8005564:	f8cd 9004 	str.w	r9, [sp, #4]
 8005568:	e7a8      	b.n	80054bc <_scanf_float+0x188>
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005570:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005574:	d006      	beq.n	8005584 <_scanf_float+0x250>
 8005576:	0550      	lsls	r0, r2, #21
 8005578:	f57f af0c 	bpl.w	8005394 <_scanf_float+0x60>
 800557c:	f1b9 0f00 	cmp.w	r9, #0
 8005580:	f43f af0f 	beq.w	80053a2 <_scanf_float+0x6e>
 8005584:	0591      	lsls	r1, r2, #22
 8005586:	bf58      	it	pl
 8005588:	9901      	ldrpl	r1, [sp, #4]
 800558a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800558e:	bf58      	it	pl
 8005590:	eba9 0101 	subpl.w	r1, r9, r1
 8005594:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005598:	bf58      	it	pl
 800559a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800559e:	6022      	str	r2, [r4, #0]
 80055a0:	f04f 0900 	mov.w	r9, #0
 80055a4:	e78a      	b.n	80054bc <_scanf_float+0x188>
 80055a6:	f04f 0a03 	mov.w	sl, #3
 80055aa:	e787      	b.n	80054bc <_scanf_float+0x188>
 80055ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80055b0:	4639      	mov	r1, r7
 80055b2:	4640      	mov	r0, r8
 80055b4:	4798      	blx	r3
 80055b6:	2800      	cmp	r0, #0
 80055b8:	f43f aedf 	beq.w	800537a <_scanf_float+0x46>
 80055bc:	e6ea      	b.n	8005394 <_scanf_float+0x60>
 80055be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055c6:	463a      	mov	r2, r7
 80055c8:	4640      	mov	r0, r8
 80055ca:	4798      	blx	r3
 80055cc:	6923      	ldr	r3, [r4, #16]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	6123      	str	r3, [r4, #16]
 80055d2:	e6ec      	b.n	80053ae <_scanf_float+0x7a>
 80055d4:	1e6b      	subs	r3, r5, #1
 80055d6:	2b06      	cmp	r3, #6
 80055d8:	d825      	bhi.n	8005626 <_scanf_float+0x2f2>
 80055da:	2d02      	cmp	r5, #2
 80055dc:	d836      	bhi.n	800564c <_scanf_float+0x318>
 80055de:	455e      	cmp	r6, fp
 80055e0:	f67f aee8 	bls.w	80053b4 <_scanf_float+0x80>
 80055e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055ec:	463a      	mov	r2, r7
 80055ee:	4640      	mov	r0, r8
 80055f0:	4798      	blx	r3
 80055f2:	6923      	ldr	r3, [r4, #16]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	6123      	str	r3, [r4, #16]
 80055f8:	e7f1      	b.n	80055de <_scanf_float+0x2aa>
 80055fa:	9802      	ldr	r0, [sp, #8]
 80055fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005600:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005604:	9002      	str	r0, [sp, #8]
 8005606:	463a      	mov	r2, r7
 8005608:	4640      	mov	r0, r8
 800560a:	4798      	blx	r3
 800560c:	6923      	ldr	r3, [r4, #16]
 800560e:	3b01      	subs	r3, #1
 8005610:	6123      	str	r3, [r4, #16]
 8005612:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005616:	fa5f fa8a 	uxtb.w	sl, sl
 800561a:	f1ba 0f02 	cmp.w	sl, #2
 800561e:	d1ec      	bne.n	80055fa <_scanf_float+0x2c6>
 8005620:	3d03      	subs	r5, #3
 8005622:	b2ed      	uxtb	r5, r5
 8005624:	1b76      	subs	r6, r6, r5
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	05da      	lsls	r2, r3, #23
 800562a:	d52f      	bpl.n	800568c <_scanf_float+0x358>
 800562c:	055b      	lsls	r3, r3, #21
 800562e:	d510      	bpl.n	8005652 <_scanf_float+0x31e>
 8005630:	455e      	cmp	r6, fp
 8005632:	f67f aebf 	bls.w	80053b4 <_scanf_float+0x80>
 8005636:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800563a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800563e:	463a      	mov	r2, r7
 8005640:	4640      	mov	r0, r8
 8005642:	4798      	blx	r3
 8005644:	6923      	ldr	r3, [r4, #16]
 8005646:	3b01      	subs	r3, #1
 8005648:	6123      	str	r3, [r4, #16]
 800564a:	e7f1      	b.n	8005630 <_scanf_float+0x2fc>
 800564c:	46aa      	mov	sl, r5
 800564e:	9602      	str	r6, [sp, #8]
 8005650:	e7df      	b.n	8005612 <_scanf_float+0x2de>
 8005652:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005656:	6923      	ldr	r3, [r4, #16]
 8005658:	2965      	cmp	r1, #101	; 0x65
 800565a:	f103 33ff 	add.w	r3, r3, #4294967295
 800565e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005662:	6123      	str	r3, [r4, #16]
 8005664:	d00c      	beq.n	8005680 <_scanf_float+0x34c>
 8005666:	2945      	cmp	r1, #69	; 0x45
 8005668:	d00a      	beq.n	8005680 <_scanf_float+0x34c>
 800566a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800566e:	463a      	mov	r2, r7
 8005670:	4640      	mov	r0, r8
 8005672:	4798      	blx	r3
 8005674:	6923      	ldr	r3, [r4, #16]
 8005676:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800567a:	3b01      	subs	r3, #1
 800567c:	1eb5      	subs	r5, r6, #2
 800567e:	6123      	str	r3, [r4, #16]
 8005680:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005684:	463a      	mov	r2, r7
 8005686:	4640      	mov	r0, r8
 8005688:	4798      	blx	r3
 800568a:	462e      	mov	r6, r5
 800568c:	6825      	ldr	r5, [r4, #0]
 800568e:	f015 0510 	ands.w	r5, r5, #16
 8005692:	d158      	bne.n	8005746 <_scanf_float+0x412>
 8005694:	7035      	strb	r5, [r6, #0]
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800569c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a0:	d11c      	bne.n	80056dc <_scanf_float+0x3a8>
 80056a2:	9b01      	ldr	r3, [sp, #4]
 80056a4:	454b      	cmp	r3, r9
 80056a6:	eba3 0209 	sub.w	r2, r3, r9
 80056aa:	d124      	bne.n	80056f6 <_scanf_float+0x3c2>
 80056ac:	2200      	movs	r2, #0
 80056ae:	4659      	mov	r1, fp
 80056b0:	4640      	mov	r0, r8
 80056b2:	f000 fe9b 	bl	80063ec <_strtod_r>
 80056b6:	9b03      	ldr	r3, [sp, #12]
 80056b8:	6821      	ldr	r1, [r4, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f011 0f02 	tst.w	r1, #2
 80056c0:	ec57 6b10 	vmov	r6, r7, d0
 80056c4:	f103 0204 	add.w	r2, r3, #4
 80056c8:	d020      	beq.n	800570c <_scanf_float+0x3d8>
 80056ca:	9903      	ldr	r1, [sp, #12]
 80056cc:	600a      	str	r2, [r1, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	e9c3 6700 	strd	r6, r7, [r3]
 80056d4:	68e3      	ldr	r3, [r4, #12]
 80056d6:	3301      	adds	r3, #1
 80056d8:	60e3      	str	r3, [r4, #12]
 80056da:	e66c      	b.n	80053b6 <_scanf_float+0x82>
 80056dc:	9b04      	ldr	r3, [sp, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0e4      	beq.n	80056ac <_scanf_float+0x378>
 80056e2:	9905      	ldr	r1, [sp, #20]
 80056e4:	230a      	movs	r3, #10
 80056e6:	462a      	mov	r2, r5
 80056e8:	3101      	adds	r1, #1
 80056ea:	4640      	mov	r0, r8
 80056ec:	f000 ff08 	bl	8006500 <_strtol_r>
 80056f0:	9b04      	ldr	r3, [sp, #16]
 80056f2:	9e05      	ldr	r6, [sp, #20]
 80056f4:	1ac2      	subs	r2, r0, r3
 80056f6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80056fa:	429e      	cmp	r6, r3
 80056fc:	bf28      	it	cs
 80056fe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005702:	4912      	ldr	r1, [pc, #72]	; (800574c <_scanf_float+0x418>)
 8005704:	4630      	mov	r0, r6
 8005706:	f000 f82b 	bl	8005760 <siprintf>
 800570a:	e7cf      	b.n	80056ac <_scanf_float+0x378>
 800570c:	f011 0f04 	tst.w	r1, #4
 8005710:	9903      	ldr	r1, [sp, #12]
 8005712:	600a      	str	r2, [r1, #0]
 8005714:	d1db      	bne.n	80056ce <_scanf_float+0x39a>
 8005716:	f8d3 8000 	ldr.w	r8, [r3]
 800571a:	ee10 2a10 	vmov	r2, s0
 800571e:	ee10 0a10 	vmov	r0, s0
 8005722:	463b      	mov	r3, r7
 8005724:	4639      	mov	r1, r7
 8005726:	f7fb fa21 	bl	8000b6c <__aeabi_dcmpun>
 800572a:	b128      	cbz	r0, 8005738 <_scanf_float+0x404>
 800572c:	4808      	ldr	r0, [pc, #32]	; (8005750 <_scanf_float+0x41c>)
 800572e:	f000 f811 	bl	8005754 <nanf>
 8005732:	ed88 0a00 	vstr	s0, [r8]
 8005736:	e7cd      	b.n	80056d4 <_scanf_float+0x3a0>
 8005738:	4630      	mov	r0, r6
 800573a:	4639      	mov	r1, r7
 800573c:	f7fb fa74 	bl	8000c28 <__aeabi_d2f>
 8005740:	f8c8 0000 	str.w	r0, [r8]
 8005744:	e7c6      	b.n	80056d4 <_scanf_float+0x3a0>
 8005746:	2500      	movs	r5, #0
 8005748:	e635      	b.n	80053b6 <_scanf_float+0x82>
 800574a:	bf00      	nop
 800574c:	08009750 	.word	0x08009750
 8005750:	08009b68 	.word	0x08009b68

08005754 <nanf>:
 8005754:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800575c <nanf+0x8>
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	7fc00000 	.word	0x7fc00000

08005760 <siprintf>:
 8005760:	b40e      	push	{r1, r2, r3}
 8005762:	b500      	push	{lr}
 8005764:	b09c      	sub	sp, #112	; 0x70
 8005766:	ab1d      	add	r3, sp, #116	; 0x74
 8005768:	9002      	str	r0, [sp, #8]
 800576a:	9006      	str	r0, [sp, #24]
 800576c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005770:	4809      	ldr	r0, [pc, #36]	; (8005798 <siprintf+0x38>)
 8005772:	9107      	str	r1, [sp, #28]
 8005774:	9104      	str	r1, [sp, #16]
 8005776:	4909      	ldr	r1, [pc, #36]	; (800579c <siprintf+0x3c>)
 8005778:	f853 2b04 	ldr.w	r2, [r3], #4
 800577c:	9105      	str	r1, [sp, #20]
 800577e:	6800      	ldr	r0, [r0, #0]
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	a902      	add	r1, sp, #8
 8005784:	f002 fea4 	bl	80084d0 <_svfiprintf_r>
 8005788:	9b02      	ldr	r3, [sp, #8]
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	b01c      	add	sp, #112	; 0x70
 8005790:	f85d eb04 	ldr.w	lr, [sp], #4
 8005794:	b003      	add	sp, #12
 8005796:	4770      	bx	lr
 8005798:	20000010 	.word	0x20000010
 800579c:	ffff0208 	.word	0xffff0208

080057a0 <sulp>:
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	4604      	mov	r4, r0
 80057a4:	460d      	mov	r5, r1
 80057a6:	ec45 4b10 	vmov	d0, r4, r5
 80057aa:	4616      	mov	r6, r2
 80057ac:	f002 fc2c 	bl	8008008 <__ulp>
 80057b0:	ec51 0b10 	vmov	r0, r1, d0
 80057b4:	b17e      	cbz	r6, 80057d6 <sulp+0x36>
 80057b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80057ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80057be:	2b00      	cmp	r3, #0
 80057c0:	dd09      	ble.n	80057d6 <sulp+0x36>
 80057c2:	051b      	lsls	r3, r3, #20
 80057c4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80057c8:	2400      	movs	r4, #0
 80057ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80057ce:	4622      	mov	r2, r4
 80057d0:	462b      	mov	r3, r5
 80057d2:	f7fa ff31 	bl	8000638 <__aeabi_dmul>
 80057d6:	bd70      	pop	{r4, r5, r6, pc}

080057d8 <_strtod_l>:
 80057d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057dc:	b0a3      	sub	sp, #140	; 0x8c
 80057de:	461f      	mov	r7, r3
 80057e0:	2300      	movs	r3, #0
 80057e2:	931e      	str	r3, [sp, #120]	; 0x78
 80057e4:	4ba4      	ldr	r3, [pc, #656]	; (8005a78 <_strtod_l+0x2a0>)
 80057e6:	9219      	str	r2, [sp, #100]	; 0x64
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	9307      	str	r3, [sp, #28]
 80057ec:	4604      	mov	r4, r0
 80057ee:	4618      	mov	r0, r3
 80057f0:	4688      	mov	r8, r1
 80057f2:	f7fa fd0d 	bl	8000210 <strlen>
 80057f6:	f04f 0a00 	mov.w	sl, #0
 80057fa:	4605      	mov	r5, r0
 80057fc:	f04f 0b00 	mov.w	fp, #0
 8005800:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005804:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005806:	781a      	ldrb	r2, [r3, #0]
 8005808:	2a2b      	cmp	r2, #43	; 0x2b
 800580a:	d04c      	beq.n	80058a6 <_strtod_l+0xce>
 800580c:	d839      	bhi.n	8005882 <_strtod_l+0xaa>
 800580e:	2a0d      	cmp	r2, #13
 8005810:	d832      	bhi.n	8005878 <_strtod_l+0xa0>
 8005812:	2a08      	cmp	r2, #8
 8005814:	d832      	bhi.n	800587c <_strtod_l+0xa4>
 8005816:	2a00      	cmp	r2, #0
 8005818:	d03c      	beq.n	8005894 <_strtod_l+0xbc>
 800581a:	2300      	movs	r3, #0
 800581c:	930e      	str	r3, [sp, #56]	; 0x38
 800581e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005820:	7833      	ldrb	r3, [r6, #0]
 8005822:	2b30      	cmp	r3, #48	; 0x30
 8005824:	f040 80b4 	bne.w	8005990 <_strtod_l+0x1b8>
 8005828:	7873      	ldrb	r3, [r6, #1]
 800582a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800582e:	2b58      	cmp	r3, #88	; 0x58
 8005830:	d16c      	bne.n	800590c <_strtod_l+0x134>
 8005832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	ab1e      	add	r3, sp, #120	; 0x78
 8005838:	9702      	str	r7, [sp, #8]
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	4a8f      	ldr	r2, [pc, #572]	; (8005a7c <_strtod_l+0x2a4>)
 800583e:	ab1f      	add	r3, sp, #124	; 0x7c
 8005840:	a91d      	add	r1, sp, #116	; 0x74
 8005842:	4620      	mov	r0, r4
 8005844:	f001 fd40 	bl	80072c8 <__gethex>
 8005848:	f010 0707 	ands.w	r7, r0, #7
 800584c:	4605      	mov	r5, r0
 800584e:	d005      	beq.n	800585c <_strtod_l+0x84>
 8005850:	2f06      	cmp	r7, #6
 8005852:	d12a      	bne.n	80058aa <_strtod_l+0xd2>
 8005854:	3601      	adds	r6, #1
 8005856:	2300      	movs	r3, #0
 8005858:	961d      	str	r6, [sp, #116]	; 0x74
 800585a:	930e      	str	r3, [sp, #56]	; 0x38
 800585c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800585e:	2b00      	cmp	r3, #0
 8005860:	f040 8596 	bne.w	8006390 <_strtod_l+0xbb8>
 8005864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005866:	b1db      	cbz	r3, 80058a0 <_strtod_l+0xc8>
 8005868:	4652      	mov	r2, sl
 800586a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800586e:	ec43 2b10 	vmov	d0, r2, r3
 8005872:	b023      	add	sp, #140	; 0x8c
 8005874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005878:	2a20      	cmp	r2, #32
 800587a:	d1ce      	bne.n	800581a <_strtod_l+0x42>
 800587c:	3301      	adds	r3, #1
 800587e:	931d      	str	r3, [sp, #116]	; 0x74
 8005880:	e7c0      	b.n	8005804 <_strtod_l+0x2c>
 8005882:	2a2d      	cmp	r2, #45	; 0x2d
 8005884:	d1c9      	bne.n	800581a <_strtod_l+0x42>
 8005886:	2201      	movs	r2, #1
 8005888:	920e      	str	r2, [sp, #56]	; 0x38
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	921d      	str	r2, [sp, #116]	; 0x74
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1c4      	bne.n	800581e <_strtod_l+0x46>
 8005894:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005896:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800589a:	2b00      	cmp	r3, #0
 800589c:	f040 8576 	bne.w	800638c <_strtod_l+0xbb4>
 80058a0:	4652      	mov	r2, sl
 80058a2:	465b      	mov	r3, fp
 80058a4:	e7e3      	b.n	800586e <_strtod_l+0x96>
 80058a6:	2200      	movs	r2, #0
 80058a8:	e7ee      	b.n	8005888 <_strtod_l+0xb0>
 80058aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80058ac:	b13a      	cbz	r2, 80058be <_strtod_l+0xe6>
 80058ae:	2135      	movs	r1, #53	; 0x35
 80058b0:	a820      	add	r0, sp, #128	; 0x80
 80058b2:	f002 fcb4 	bl	800821e <__copybits>
 80058b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80058b8:	4620      	mov	r0, r4
 80058ba:	f002 f879 	bl	80079b0 <_Bfree>
 80058be:	3f01      	subs	r7, #1
 80058c0:	2f05      	cmp	r7, #5
 80058c2:	d807      	bhi.n	80058d4 <_strtod_l+0xfc>
 80058c4:	e8df f007 	tbb	[pc, r7]
 80058c8:	1d180b0e 	.word	0x1d180b0e
 80058cc:	030e      	.short	0x030e
 80058ce:	f04f 0b00 	mov.w	fp, #0
 80058d2:	46da      	mov	sl, fp
 80058d4:	0728      	lsls	r0, r5, #28
 80058d6:	d5c1      	bpl.n	800585c <_strtod_l+0x84>
 80058d8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80058dc:	e7be      	b.n	800585c <_strtod_l+0x84>
 80058de:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80058e2:	e7f7      	b.n	80058d4 <_strtod_l+0xfc>
 80058e4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80058e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80058ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80058ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80058f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80058f6:	e7ed      	b.n	80058d4 <_strtod_l+0xfc>
 80058f8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005a80 <_strtod_l+0x2a8>
 80058fc:	f04f 0a00 	mov.w	sl, #0
 8005900:	e7e8      	b.n	80058d4 <_strtod_l+0xfc>
 8005902:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005906:	f04f 3aff 	mov.w	sl, #4294967295
 800590a:	e7e3      	b.n	80058d4 <_strtod_l+0xfc>
 800590c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	921d      	str	r2, [sp, #116]	; 0x74
 8005912:	785b      	ldrb	r3, [r3, #1]
 8005914:	2b30      	cmp	r3, #48	; 0x30
 8005916:	d0f9      	beq.n	800590c <_strtod_l+0x134>
 8005918:	2b00      	cmp	r3, #0
 800591a:	d09f      	beq.n	800585c <_strtod_l+0x84>
 800591c:	2301      	movs	r3, #1
 800591e:	f04f 0900 	mov.w	r9, #0
 8005922:	9304      	str	r3, [sp, #16]
 8005924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005926:	930a      	str	r3, [sp, #40]	; 0x28
 8005928:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800592c:	464f      	mov	r7, r9
 800592e:	220a      	movs	r2, #10
 8005930:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005932:	7806      	ldrb	r6, [r0, #0]
 8005934:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005938:	b2d9      	uxtb	r1, r3
 800593a:	2909      	cmp	r1, #9
 800593c:	d92a      	bls.n	8005994 <_strtod_l+0x1bc>
 800593e:	9907      	ldr	r1, [sp, #28]
 8005940:	462a      	mov	r2, r5
 8005942:	f002 fedd 	bl	8008700 <strncmp>
 8005946:	b398      	cbz	r0, 80059b0 <_strtod_l+0x1d8>
 8005948:	2000      	movs	r0, #0
 800594a:	4633      	mov	r3, r6
 800594c:	463d      	mov	r5, r7
 800594e:	9007      	str	r0, [sp, #28]
 8005950:	4602      	mov	r2, r0
 8005952:	2b65      	cmp	r3, #101	; 0x65
 8005954:	d001      	beq.n	800595a <_strtod_l+0x182>
 8005956:	2b45      	cmp	r3, #69	; 0x45
 8005958:	d118      	bne.n	800598c <_strtod_l+0x1b4>
 800595a:	b91d      	cbnz	r5, 8005964 <_strtod_l+0x18c>
 800595c:	9b04      	ldr	r3, [sp, #16]
 800595e:	4303      	orrs	r3, r0
 8005960:	d098      	beq.n	8005894 <_strtod_l+0xbc>
 8005962:	2500      	movs	r5, #0
 8005964:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005968:	f108 0301 	add.w	r3, r8, #1
 800596c:	931d      	str	r3, [sp, #116]	; 0x74
 800596e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005972:	2b2b      	cmp	r3, #43	; 0x2b
 8005974:	d075      	beq.n	8005a62 <_strtod_l+0x28a>
 8005976:	2b2d      	cmp	r3, #45	; 0x2d
 8005978:	d07b      	beq.n	8005a72 <_strtod_l+0x29a>
 800597a:	f04f 0c00 	mov.w	ip, #0
 800597e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005982:	2909      	cmp	r1, #9
 8005984:	f240 8082 	bls.w	8005a8c <_strtod_l+0x2b4>
 8005988:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800598c:	2600      	movs	r6, #0
 800598e:	e09d      	b.n	8005acc <_strtod_l+0x2f4>
 8005990:	2300      	movs	r3, #0
 8005992:	e7c4      	b.n	800591e <_strtod_l+0x146>
 8005994:	2f08      	cmp	r7, #8
 8005996:	bfd8      	it	le
 8005998:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800599a:	f100 0001 	add.w	r0, r0, #1
 800599e:	bfda      	itte	le
 80059a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80059a4:	9309      	strle	r3, [sp, #36]	; 0x24
 80059a6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80059aa:	3701      	adds	r7, #1
 80059ac:	901d      	str	r0, [sp, #116]	; 0x74
 80059ae:	e7bf      	b.n	8005930 <_strtod_l+0x158>
 80059b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059b2:	195a      	adds	r2, r3, r5
 80059b4:	921d      	str	r2, [sp, #116]	; 0x74
 80059b6:	5d5b      	ldrb	r3, [r3, r5]
 80059b8:	2f00      	cmp	r7, #0
 80059ba:	d037      	beq.n	8005a2c <_strtod_l+0x254>
 80059bc:	9007      	str	r0, [sp, #28]
 80059be:	463d      	mov	r5, r7
 80059c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80059c4:	2a09      	cmp	r2, #9
 80059c6:	d912      	bls.n	80059ee <_strtod_l+0x216>
 80059c8:	2201      	movs	r2, #1
 80059ca:	e7c2      	b.n	8005952 <_strtod_l+0x17a>
 80059cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	921d      	str	r2, [sp, #116]	; 0x74
 80059d2:	785b      	ldrb	r3, [r3, #1]
 80059d4:	3001      	adds	r0, #1
 80059d6:	2b30      	cmp	r3, #48	; 0x30
 80059d8:	d0f8      	beq.n	80059cc <_strtod_l+0x1f4>
 80059da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80059de:	2a08      	cmp	r2, #8
 80059e0:	f200 84db 	bhi.w	800639a <_strtod_l+0xbc2>
 80059e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80059e6:	9007      	str	r0, [sp, #28]
 80059e8:	2000      	movs	r0, #0
 80059ea:	920a      	str	r2, [sp, #40]	; 0x28
 80059ec:	4605      	mov	r5, r0
 80059ee:	3b30      	subs	r3, #48	; 0x30
 80059f0:	f100 0201 	add.w	r2, r0, #1
 80059f4:	d014      	beq.n	8005a20 <_strtod_l+0x248>
 80059f6:	9907      	ldr	r1, [sp, #28]
 80059f8:	4411      	add	r1, r2
 80059fa:	9107      	str	r1, [sp, #28]
 80059fc:	462a      	mov	r2, r5
 80059fe:	eb00 0e05 	add.w	lr, r0, r5
 8005a02:	210a      	movs	r1, #10
 8005a04:	4572      	cmp	r2, lr
 8005a06:	d113      	bne.n	8005a30 <_strtod_l+0x258>
 8005a08:	182a      	adds	r2, r5, r0
 8005a0a:	2a08      	cmp	r2, #8
 8005a0c:	f105 0501 	add.w	r5, r5, #1
 8005a10:	4405      	add	r5, r0
 8005a12:	dc1c      	bgt.n	8005a4e <_strtod_l+0x276>
 8005a14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a16:	220a      	movs	r2, #10
 8005a18:	fb02 3301 	mla	r3, r2, r1, r3
 8005a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a1e:	2200      	movs	r2, #0
 8005a20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a22:	1c59      	adds	r1, r3, #1
 8005a24:	911d      	str	r1, [sp, #116]	; 0x74
 8005a26:	785b      	ldrb	r3, [r3, #1]
 8005a28:	4610      	mov	r0, r2
 8005a2a:	e7c9      	b.n	80059c0 <_strtod_l+0x1e8>
 8005a2c:	4638      	mov	r0, r7
 8005a2e:	e7d2      	b.n	80059d6 <_strtod_l+0x1fe>
 8005a30:	2a08      	cmp	r2, #8
 8005a32:	dc04      	bgt.n	8005a3e <_strtod_l+0x266>
 8005a34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005a36:	434e      	muls	r6, r1
 8005a38:	9609      	str	r6, [sp, #36]	; 0x24
 8005a3a:	3201      	adds	r2, #1
 8005a3c:	e7e2      	b.n	8005a04 <_strtod_l+0x22c>
 8005a3e:	f102 0c01 	add.w	ip, r2, #1
 8005a42:	f1bc 0f10 	cmp.w	ip, #16
 8005a46:	bfd8      	it	le
 8005a48:	fb01 f909 	mulle.w	r9, r1, r9
 8005a4c:	e7f5      	b.n	8005a3a <_strtod_l+0x262>
 8005a4e:	2d10      	cmp	r5, #16
 8005a50:	bfdc      	itt	le
 8005a52:	220a      	movle	r2, #10
 8005a54:	fb02 3909 	mlale	r9, r2, r9, r3
 8005a58:	e7e1      	b.n	8005a1e <_strtod_l+0x246>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	9307      	str	r3, [sp, #28]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	e77c      	b.n	800595c <_strtod_l+0x184>
 8005a62:	f04f 0c00 	mov.w	ip, #0
 8005a66:	f108 0302 	add.w	r3, r8, #2
 8005a6a:	931d      	str	r3, [sp, #116]	; 0x74
 8005a6c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005a70:	e785      	b.n	800597e <_strtod_l+0x1a6>
 8005a72:	f04f 0c01 	mov.w	ip, #1
 8005a76:	e7f6      	b.n	8005a66 <_strtod_l+0x28e>
 8005a78:	080099a8 	.word	0x080099a8
 8005a7c:	08009758 	.word	0x08009758
 8005a80:	7ff00000 	.word	0x7ff00000
 8005a84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a86:	1c59      	adds	r1, r3, #1
 8005a88:	911d      	str	r1, [sp, #116]	; 0x74
 8005a8a:	785b      	ldrb	r3, [r3, #1]
 8005a8c:	2b30      	cmp	r3, #48	; 0x30
 8005a8e:	d0f9      	beq.n	8005a84 <_strtod_l+0x2ac>
 8005a90:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005a94:	2908      	cmp	r1, #8
 8005a96:	f63f af79 	bhi.w	800598c <_strtod_l+0x1b4>
 8005a9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005a9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005aa0:	9308      	str	r3, [sp, #32]
 8005aa2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005aa4:	1c59      	adds	r1, r3, #1
 8005aa6:	911d      	str	r1, [sp, #116]	; 0x74
 8005aa8:	785b      	ldrb	r3, [r3, #1]
 8005aaa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8005aae:	2e09      	cmp	r6, #9
 8005ab0:	d937      	bls.n	8005b22 <_strtod_l+0x34a>
 8005ab2:	9e08      	ldr	r6, [sp, #32]
 8005ab4:	1b89      	subs	r1, r1, r6
 8005ab6:	2908      	cmp	r1, #8
 8005ab8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005abc:	dc02      	bgt.n	8005ac4 <_strtod_l+0x2ec>
 8005abe:	4576      	cmp	r6, lr
 8005ac0:	bfa8      	it	ge
 8005ac2:	4676      	movge	r6, lr
 8005ac4:	f1bc 0f00 	cmp.w	ip, #0
 8005ac8:	d000      	beq.n	8005acc <_strtod_l+0x2f4>
 8005aca:	4276      	negs	r6, r6
 8005acc:	2d00      	cmp	r5, #0
 8005ace:	d14f      	bne.n	8005b70 <_strtod_l+0x398>
 8005ad0:	9904      	ldr	r1, [sp, #16]
 8005ad2:	4301      	orrs	r1, r0
 8005ad4:	f47f aec2 	bne.w	800585c <_strtod_l+0x84>
 8005ad8:	2a00      	cmp	r2, #0
 8005ada:	f47f aedb 	bne.w	8005894 <_strtod_l+0xbc>
 8005ade:	2b69      	cmp	r3, #105	; 0x69
 8005ae0:	d027      	beq.n	8005b32 <_strtod_l+0x35a>
 8005ae2:	dc24      	bgt.n	8005b2e <_strtod_l+0x356>
 8005ae4:	2b49      	cmp	r3, #73	; 0x49
 8005ae6:	d024      	beq.n	8005b32 <_strtod_l+0x35a>
 8005ae8:	2b4e      	cmp	r3, #78	; 0x4e
 8005aea:	f47f aed3 	bne.w	8005894 <_strtod_l+0xbc>
 8005aee:	499e      	ldr	r1, [pc, #632]	; (8005d68 <_strtod_l+0x590>)
 8005af0:	a81d      	add	r0, sp, #116	; 0x74
 8005af2:	f001 fe41 	bl	8007778 <__match>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	f43f aecc 	beq.w	8005894 <_strtod_l+0xbc>
 8005afc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b28      	cmp	r3, #40	; 0x28
 8005b02:	d12d      	bne.n	8005b60 <_strtod_l+0x388>
 8005b04:	4999      	ldr	r1, [pc, #612]	; (8005d6c <_strtod_l+0x594>)
 8005b06:	aa20      	add	r2, sp, #128	; 0x80
 8005b08:	a81d      	add	r0, sp, #116	; 0x74
 8005b0a:	f001 fe49 	bl	80077a0 <__hexnan>
 8005b0e:	2805      	cmp	r0, #5
 8005b10:	d126      	bne.n	8005b60 <_strtod_l+0x388>
 8005b12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b14:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005b18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005b1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005b20:	e69c      	b.n	800585c <_strtod_l+0x84>
 8005b22:	210a      	movs	r1, #10
 8005b24:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005b28:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005b2c:	e7b9      	b.n	8005aa2 <_strtod_l+0x2ca>
 8005b2e:	2b6e      	cmp	r3, #110	; 0x6e
 8005b30:	e7db      	b.n	8005aea <_strtod_l+0x312>
 8005b32:	498f      	ldr	r1, [pc, #572]	; (8005d70 <_strtod_l+0x598>)
 8005b34:	a81d      	add	r0, sp, #116	; 0x74
 8005b36:	f001 fe1f 	bl	8007778 <__match>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	f43f aeaa 	beq.w	8005894 <_strtod_l+0xbc>
 8005b40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b42:	498c      	ldr	r1, [pc, #560]	; (8005d74 <_strtod_l+0x59c>)
 8005b44:	3b01      	subs	r3, #1
 8005b46:	a81d      	add	r0, sp, #116	; 0x74
 8005b48:	931d      	str	r3, [sp, #116]	; 0x74
 8005b4a:	f001 fe15 	bl	8007778 <__match>
 8005b4e:	b910      	cbnz	r0, 8005b56 <_strtod_l+0x37e>
 8005b50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b52:	3301      	adds	r3, #1
 8005b54:	931d      	str	r3, [sp, #116]	; 0x74
 8005b56:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8005d84 <_strtod_l+0x5ac>
 8005b5a:	f04f 0a00 	mov.w	sl, #0
 8005b5e:	e67d      	b.n	800585c <_strtod_l+0x84>
 8005b60:	4885      	ldr	r0, [pc, #532]	; (8005d78 <_strtod_l+0x5a0>)
 8005b62:	f002 fdb5 	bl	80086d0 <nan>
 8005b66:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005b6a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005b6e:	e675      	b.n	800585c <_strtod_l+0x84>
 8005b70:	9b07      	ldr	r3, [sp, #28]
 8005b72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b74:	1af3      	subs	r3, r6, r3
 8005b76:	2f00      	cmp	r7, #0
 8005b78:	bf08      	it	eq
 8005b7a:	462f      	moveq	r7, r5
 8005b7c:	2d10      	cmp	r5, #16
 8005b7e:	9308      	str	r3, [sp, #32]
 8005b80:	46a8      	mov	r8, r5
 8005b82:	bfa8      	it	ge
 8005b84:	f04f 0810 	movge.w	r8, #16
 8005b88:	f7fa fcdc 	bl	8000544 <__aeabi_ui2d>
 8005b8c:	2d09      	cmp	r5, #9
 8005b8e:	4682      	mov	sl, r0
 8005b90:	468b      	mov	fp, r1
 8005b92:	dd13      	ble.n	8005bbc <_strtod_l+0x3e4>
 8005b94:	4b79      	ldr	r3, [pc, #484]	; (8005d7c <_strtod_l+0x5a4>)
 8005b96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005b9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005b9e:	f7fa fd4b 	bl	8000638 <__aeabi_dmul>
 8005ba2:	4682      	mov	sl, r0
 8005ba4:	4648      	mov	r0, r9
 8005ba6:	468b      	mov	fp, r1
 8005ba8:	f7fa fccc 	bl	8000544 <__aeabi_ui2d>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4650      	mov	r0, sl
 8005bb2:	4659      	mov	r1, fp
 8005bb4:	f7fa fb8a 	bl	80002cc <__adddf3>
 8005bb8:	4682      	mov	sl, r0
 8005bba:	468b      	mov	fp, r1
 8005bbc:	2d0f      	cmp	r5, #15
 8005bbe:	dc38      	bgt.n	8005c32 <_strtod_l+0x45a>
 8005bc0:	9b08      	ldr	r3, [sp, #32]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f43f ae4a 	beq.w	800585c <_strtod_l+0x84>
 8005bc8:	dd24      	ble.n	8005c14 <_strtod_l+0x43c>
 8005bca:	2b16      	cmp	r3, #22
 8005bcc:	dc0b      	bgt.n	8005be6 <_strtod_l+0x40e>
 8005bce:	4d6b      	ldr	r5, [pc, #428]	; (8005d7c <_strtod_l+0x5a4>)
 8005bd0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005bd4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005bd8:	4652      	mov	r2, sl
 8005bda:	465b      	mov	r3, fp
 8005bdc:	f7fa fd2c 	bl	8000638 <__aeabi_dmul>
 8005be0:	4682      	mov	sl, r0
 8005be2:	468b      	mov	fp, r1
 8005be4:	e63a      	b.n	800585c <_strtod_l+0x84>
 8005be6:	9a08      	ldr	r2, [sp, #32]
 8005be8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005bec:	4293      	cmp	r3, r2
 8005bee:	db20      	blt.n	8005c32 <_strtod_l+0x45a>
 8005bf0:	4c62      	ldr	r4, [pc, #392]	; (8005d7c <_strtod_l+0x5a4>)
 8005bf2:	f1c5 050f 	rsb	r5, r5, #15
 8005bf6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005bfa:	4652      	mov	r2, sl
 8005bfc:	465b      	mov	r3, fp
 8005bfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c02:	f7fa fd19 	bl	8000638 <__aeabi_dmul>
 8005c06:	9b08      	ldr	r3, [sp, #32]
 8005c08:	1b5d      	subs	r5, r3, r5
 8005c0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005c0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005c12:	e7e3      	b.n	8005bdc <_strtod_l+0x404>
 8005c14:	9b08      	ldr	r3, [sp, #32]
 8005c16:	3316      	adds	r3, #22
 8005c18:	db0b      	blt.n	8005c32 <_strtod_l+0x45a>
 8005c1a:	9b07      	ldr	r3, [sp, #28]
 8005c1c:	4a57      	ldr	r2, [pc, #348]	; (8005d7c <_strtod_l+0x5a4>)
 8005c1e:	1b9e      	subs	r6, r3, r6
 8005c20:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005c24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c28:	4650      	mov	r0, sl
 8005c2a:	4659      	mov	r1, fp
 8005c2c:	f7fa fe2e 	bl	800088c <__aeabi_ddiv>
 8005c30:	e7d6      	b.n	8005be0 <_strtod_l+0x408>
 8005c32:	9b08      	ldr	r3, [sp, #32]
 8005c34:	eba5 0808 	sub.w	r8, r5, r8
 8005c38:	4498      	add	r8, r3
 8005c3a:	f1b8 0f00 	cmp.w	r8, #0
 8005c3e:	dd71      	ble.n	8005d24 <_strtod_l+0x54c>
 8005c40:	f018 030f 	ands.w	r3, r8, #15
 8005c44:	d00a      	beq.n	8005c5c <_strtod_l+0x484>
 8005c46:	494d      	ldr	r1, [pc, #308]	; (8005d7c <_strtod_l+0x5a4>)
 8005c48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c4c:	4652      	mov	r2, sl
 8005c4e:	465b      	mov	r3, fp
 8005c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c54:	f7fa fcf0 	bl	8000638 <__aeabi_dmul>
 8005c58:	4682      	mov	sl, r0
 8005c5a:	468b      	mov	fp, r1
 8005c5c:	f038 080f 	bics.w	r8, r8, #15
 8005c60:	d04d      	beq.n	8005cfe <_strtod_l+0x526>
 8005c62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005c66:	dd22      	ble.n	8005cae <_strtod_l+0x4d6>
 8005c68:	2500      	movs	r5, #0
 8005c6a:	462e      	mov	r6, r5
 8005c6c:	9509      	str	r5, [sp, #36]	; 0x24
 8005c6e:	9507      	str	r5, [sp, #28]
 8005c70:	2322      	movs	r3, #34	; 0x22
 8005c72:	f8df b110 	ldr.w	fp, [pc, #272]	; 8005d84 <_strtod_l+0x5ac>
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	f04f 0a00 	mov.w	sl, #0
 8005c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f43f adec 	beq.w	800585c <_strtod_l+0x84>
 8005c84:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005c86:	4620      	mov	r0, r4
 8005c88:	f001 fe92 	bl	80079b0 <_Bfree>
 8005c8c:	9907      	ldr	r1, [sp, #28]
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f001 fe8e 	bl	80079b0 <_Bfree>
 8005c94:	4631      	mov	r1, r6
 8005c96:	4620      	mov	r0, r4
 8005c98:	f001 fe8a 	bl	80079b0 <_Bfree>
 8005c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f001 fe86 	bl	80079b0 <_Bfree>
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f001 fe82 	bl	80079b0 <_Bfree>
 8005cac:	e5d6      	b.n	800585c <_strtod_l+0x84>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005cb4:	4650      	mov	r0, sl
 8005cb6:	4659      	mov	r1, fp
 8005cb8:	4699      	mov	r9, r3
 8005cba:	f1b8 0f01 	cmp.w	r8, #1
 8005cbe:	dc21      	bgt.n	8005d04 <_strtod_l+0x52c>
 8005cc0:	b10b      	cbz	r3, 8005cc6 <_strtod_l+0x4ee>
 8005cc2:	4682      	mov	sl, r0
 8005cc4:	468b      	mov	fp, r1
 8005cc6:	4b2e      	ldr	r3, [pc, #184]	; (8005d80 <_strtod_l+0x5a8>)
 8005cc8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005ccc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005cd0:	4652      	mov	r2, sl
 8005cd2:	465b      	mov	r3, fp
 8005cd4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005cd8:	f7fa fcae 	bl	8000638 <__aeabi_dmul>
 8005cdc:	4b29      	ldr	r3, [pc, #164]	; (8005d84 <_strtod_l+0x5ac>)
 8005cde:	460a      	mov	r2, r1
 8005ce0:	400b      	ands	r3, r1
 8005ce2:	4929      	ldr	r1, [pc, #164]	; (8005d88 <_strtod_l+0x5b0>)
 8005ce4:	428b      	cmp	r3, r1
 8005ce6:	4682      	mov	sl, r0
 8005ce8:	d8be      	bhi.n	8005c68 <_strtod_l+0x490>
 8005cea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005cee:	428b      	cmp	r3, r1
 8005cf0:	bf86      	itte	hi
 8005cf2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005d8c <_strtod_l+0x5b4>
 8005cf6:	f04f 3aff 	movhi.w	sl, #4294967295
 8005cfa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005cfe:	2300      	movs	r3, #0
 8005d00:	9304      	str	r3, [sp, #16]
 8005d02:	e081      	b.n	8005e08 <_strtod_l+0x630>
 8005d04:	f018 0f01 	tst.w	r8, #1
 8005d08:	d007      	beq.n	8005d1a <_strtod_l+0x542>
 8005d0a:	4b1d      	ldr	r3, [pc, #116]	; (8005d80 <_strtod_l+0x5a8>)
 8005d0c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f7fa fc90 	bl	8000638 <__aeabi_dmul>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	f109 0901 	add.w	r9, r9, #1
 8005d1e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005d22:	e7ca      	b.n	8005cba <_strtod_l+0x4e2>
 8005d24:	d0eb      	beq.n	8005cfe <_strtod_l+0x526>
 8005d26:	f1c8 0800 	rsb	r8, r8, #0
 8005d2a:	f018 020f 	ands.w	r2, r8, #15
 8005d2e:	d00a      	beq.n	8005d46 <_strtod_l+0x56e>
 8005d30:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <_strtod_l+0x5a4>)
 8005d32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d36:	4650      	mov	r0, sl
 8005d38:	4659      	mov	r1, fp
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	f7fa fda5 	bl	800088c <__aeabi_ddiv>
 8005d42:	4682      	mov	sl, r0
 8005d44:	468b      	mov	fp, r1
 8005d46:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005d4a:	d0d8      	beq.n	8005cfe <_strtod_l+0x526>
 8005d4c:	f1b8 0f1f 	cmp.w	r8, #31
 8005d50:	dd1e      	ble.n	8005d90 <_strtod_l+0x5b8>
 8005d52:	2500      	movs	r5, #0
 8005d54:	462e      	mov	r6, r5
 8005d56:	9509      	str	r5, [sp, #36]	; 0x24
 8005d58:	9507      	str	r5, [sp, #28]
 8005d5a:	2322      	movs	r3, #34	; 0x22
 8005d5c:	f04f 0a00 	mov.w	sl, #0
 8005d60:	f04f 0b00 	mov.w	fp, #0
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	e789      	b.n	8005c7c <_strtod_l+0x4a4>
 8005d68:	08009729 	.word	0x08009729
 8005d6c:	0800976c 	.word	0x0800976c
 8005d70:	08009721 	.word	0x08009721
 8005d74:	080098ac 	.word	0x080098ac
 8005d78:	08009b68 	.word	0x08009b68
 8005d7c:	08009a48 	.word	0x08009a48
 8005d80:	08009a20 	.word	0x08009a20
 8005d84:	7ff00000 	.word	0x7ff00000
 8005d88:	7ca00000 	.word	0x7ca00000
 8005d8c:	7fefffff 	.word	0x7fefffff
 8005d90:	f018 0310 	ands.w	r3, r8, #16
 8005d94:	bf18      	it	ne
 8005d96:	236a      	movne	r3, #106	; 0x6a
 8005d98:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006150 <_strtod_l+0x978>
 8005d9c:	9304      	str	r3, [sp, #16]
 8005d9e:	4650      	mov	r0, sl
 8005da0:	4659      	mov	r1, fp
 8005da2:	2300      	movs	r3, #0
 8005da4:	f018 0f01 	tst.w	r8, #1
 8005da8:	d004      	beq.n	8005db4 <_strtod_l+0x5dc>
 8005daa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005dae:	f7fa fc43 	bl	8000638 <__aeabi_dmul>
 8005db2:	2301      	movs	r3, #1
 8005db4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005db8:	f109 0908 	add.w	r9, r9, #8
 8005dbc:	d1f2      	bne.n	8005da4 <_strtod_l+0x5cc>
 8005dbe:	b10b      	cbz	r3, 8005dc4 <_strtod_l+0x5ec>
 8005dc0:	4682      	mov	sl, r0
 8005dc2:	468b      	mov	fp, r1
 8005dc4:	9b04      	ldr	r3, [sp, #16]
 8005dc6:	b1bb      	cbz	r3, 8005df8 <_strtod_l+0x620>
 8005dc8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005dcc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	4659      	mov	r1, fp
 8005dd4:	dd10      	ble.n	8005df8 <_strtod_l+0x620>
 8005dd6:	2b1f      	cmp	r3, #31
 8005dd8:	f340 8128 	ble.w	800602c <_strtod_l+0x854>
 8005ddc:	2b34      	cmp	r3, #52	; 0x34
 8005dde:	bfde      	ittt	le
 8005de0:	3b20      	suble	r3, #32
 8005de2:	f04f 32ff 	movle.w	r2, #4294967295
 8005de6:	fa02 f303 	lslle.w	r3, r2, r3
 8005dea:	f04f 0a00 	mov.w	sl, #0
 8005dee:	bfcc      	ite	gt
 8005df0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005df4:	ea03 0b01 	andle.w	fp, r3, r1
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	4650      	mov	r0, sl
 8005dfe:	4659      	mov	r1, fp
 8005e00:	f7fa fe82 	bl	8000b08 <__aeabi_dcmpeq>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d1a4      	bne.n	8005d52 <_strtod_l+0x57a>
 8005e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e0e:	462b      	mov	r3, r5
 8005e10:	463a      	mov	r2, r7
 8005e12:	4620      	mov	r0, r4
 8005e14:	f001 fe38 	bl	8007a88 <__s2b>
 8005e18:	9009      	str	r0, [sp, #36]	; 0x24
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	f43f af24 	beq.w	8005c68 <_strtod_l+0x490>
 8005e20:	9b07      	ldr	r3, [sp, #28]
 8005e22:	1b9e      	subs	r6, r3, r6
 8005e24:	9b08      	ldr	r3, [sp, #32]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bfb4      	ite	lt
 8005e2a:	4633      	movlt	r3, r6
 8005e2c:	2300      	movge	r3, #0
 8005e2e:	9310      	str	r3, [sp, #64]	; 0x40
 8005e30:	9b08      	ldr	r3, [sp, #32]
 8005e32:	2500      	movs	r5, #0
 8005e34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005e38:	9318      	str	r3, [sp, #96]	; 0x60
 8005e3a:	462e      	mov	r6, r5
 8005e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3e:	4620      	mov	r0, r4
 8005e40:	6859      	ldr	r1, [r3, #4]
 8005e42:	f001 fd75 	bl	8007930 <_Balloc>
 8005e46:	9007      	str	r0, [sp, #28]
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	f43f af11 	beq.w	8005c70 <_strtod_l+0x498>
 8005e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	3202      	adds	r2, #2
 8005e54:	f103 010c 	add.w	r1, r3, #12
 8005e58:	0092      	lsls	r2, r2, #2
 8005e5a:	300c      	adds	r0, #12
 8005e5c:	f001 fd5a 	bl	8007914 <memcpy>
 8005e60:	ec4b ab10 	vmov	d0, sl, fp
 8005e64:	aa20      	add	r2, sp, #128	; 0x80
 8005e66:	a91f      	add	r1, sp, #124	; 0x7c
 8005e68:	4620      	mov	r0, r4
 8005e6a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005e6e:	f002 f947 	bl	8008100 <__d2b>
 8005e72:	901e      	str	r0, [sp, #120]	; 0x78
 8005e74:	2800      	cmp	r0, #0
 8005e76:	f43f aefb 	beq.w	8005c70 <_strtod_l+0x498>
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f001 fe9d 	bl	8007bbc <__i2b>
 8005e82:	4606      	mov	r6, r0
 8005e84:	2800      	cmp	r0, #0
 8005e86:	f43f aef3 	beq.w	8005c70 <_strtod_l+0x498>
 8005e8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e8c:	9904      	ldr	r1, [sp, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bfab      	itete	ge
 8005e92:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8005e94:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8005e96:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005e98:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8005e9c:	bfac      	ite	ge
 8005e9e:	eb03 0902 	addge.w	r9, r3, r2
 8005ea2:	1ad7      	sublt	r7, r2, r3
 8005ea4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005ea6:	eba3 0801 	sub.w	r8, r3, r1
 8005eaa:	4490      	add	r8, r2
 8005eac:	4ba3      	ldr	r3, [pc, #652]	; (800613c <_strtod_l+0x964>)
 8005eae:	f108 38ff 	add.w	r8, r8, #4294967295
 8005eb2:	4598      	cmp	r8, r3
 8005eb4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005eb8:	f280 80cc 	bge.w	8006054 <_strtod_l+0x87c>
 8005ebc:	eba3 0308 	sub.w	r3, r3, r8
 8005ec0:	2b1f      	cmp	r3, #31
 8005ec2:	eba2 0203 	sub.w	r2, r2, r3
 8005ec6:	f04f 0101 	mov.w	r1, #1
 8005eca:	f300 80b6 	bgt.w	800603a <_strtod_l+0x862>
 8005ece:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed2:	9311      	str	r3, [sp, #68]	; 0x44
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ed8:	eb09 0802 	add.w	r8, r9, r2
 8005edc:	9b04      	ldr	r3, [sp, #16]
 8005ede:	45c1      	cmp	r9, r8
 8005ee0:	4417      	add	r7, r2
 8005ee2:	441f      	add	r7, r3
 8005ee4:	464b      	mov	r3, r9
 8005ee6:	bfa8      	it	ge
 8005ee8:	4643      	movge	r3, r8
 8005eea:	42bb      	cmp	r3, r7
 8005eec:	bfa8      	it	ge
 8005eee:	463b      	movge	r3, r7
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	bfc2      	ittt	gt
 8005ef4:	eba8 0803 	subgt.w	r8, r8, r3
 8005ef8:	1aff      	subgt	r7, r7, r3
 8005efa:	eba9 0903 	subgt.w	r9, r9, r3
 8005efe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	dd17      	ble.n	8005f34 <_strtod_l+0x75c>
 8005f04:	4631      	mov	r1, r6
 8005f06:	461a      	mov	r2, r3
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f001 ff13 	bl	8007d34 <__pow5mult>
 8005f0e:	4606      	mov	r6, r0
 8005f10:	2800      	cmp	r0, #0
 8005f12:	f43f aead 	beq.w	8005c70 <_strtod_l+0x498>
 8005f16:	4601      	mov	r1, r0
 8005f18:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	f001 fe64 	bl	8007be8 <__multiply>
 8005f20:	900f      	str	r0, [sp, #60]	; 0x3c
 8005f22:	2800      	cmp	r0, #0
 8005f24:	f43f aea4 	beq.w	8005c70 <_strtod_l+0x498>
 8005f28:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f001 fd40 	bl	80079b0 <_Bfree>
 8005f30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f32:	931e      	str	r3, [sp, #120]	; 0x78
 8005f34:	f1b8 0f00 	cmp.w	r8, #0
 8005f38:	f300 8091 	bgt.w	800605e <_strtod_l+0x886>
 8005f3c:	9b08      	ldr	r3, [sp, #32]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	dd08      	ble.n	8005f54 <_strtod_l+0x77c>
 8005f42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005f44:	9907      	ldr	r1, [sp, #28]
 8005f46:	4620      	mov	r0, r4
 8005f48:	f001 fef4 	bl	8007d34 <__pow5mult>
 8005f4c:	9007      	str	r0, [sp, #28]
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	f43f ae8e 	beq.w	8005c70 <_strtod_l+0x498>
 8005f54:	2f00      	cmp	r7, #0
 8005f56:	dd08      	ble.n	8005f6a <_strtod_l+0x792>
 8005f58:	9907      	ldr	r1, [sp, #28]
 8005f5a:	463a      	mov	r2, r7
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f001 ff43 	bl	8007de8 <__lshift>
 8005f62:	9007      	str	r0, [sp, #28]
 8005f64:	2800      	cmp	r0, #0
 8005f66:	f43f ae83 	beq.w	8005c70 <_strtod_l+0x498>
 8005f6a:	f1b9 0f00 	cmp.w	r9, #0
 8005f6e:	dd08      	ble.n	8005f82 <_strtod_l+0x7aa>
 8005f70:	4631      	mov	r1, r6
 8005f72:	464a      	mov	r2, r9
 8005f74:	4620      	mov	r0, r4
 8005f76:	f001 ff37 	bl	8007de8 <__lshift>
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	f43f ae77 	beq.w	8005c70 <_strtod_l+0x498>
 8005f82:	9a07      	ldr	r2, [sp, #28]
 8005f84:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005f86:	4620      	mov	r0, r4
 8005f88:	f001 ffb6 	bl	8007ef8 <__mdiff>
 8005f8c:	4605      	mov	r5, r0
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	f43f ae6e 	beq.w	8005c70 <_strtod_l+0x498>
 8005f94:	68c3      	ldr	r3, [r0, #12]
 8005f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60c3      	str	r3, [r0, #12]
 8005f9c:	4631      	mov	r1, r6
 8005f9e:	f001 ff8f 	bl	8007ec0 <__mcmp>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	da65      	bge.n	8006072 <_strtod_l+0x89a>
 8005fa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fa8:	ea53 030a 	orrs.w	r3, r3, sl
 8005fac:	f040 8087 	bne.w	80060be <_strtod_l+0x8e6>
 8005fb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f040 8082 	bne.w	80060be <_strtod_l+0x8e6>
 8005fba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005fbe:	0d1b      	lsrs	r3, r3, #20
 8005fc0:	051b      	lsls	r3, r3, #20
 8005fc2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005fc6:	d97a      	bls.n	80060be <_strtod_l+0x8e6>
 8005fc8:	696b      	ldr	r3, [r5, #20]
 8005fca:	b913      	cbnz	r3, 8005fd2 <_strtod_l+0x7fa>
 8005fcc:	692b      	ldr	r3, [r5, #16]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	dd75      	ble.n	80060be <_strtod_l+0x8e6>
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f001 ff06 	bl	8007de8 <__lshift>
 8005fdc:	4631      	mov	r1, r6
 8005fde:	4605      	mov	r5, r0
 8005fe0:	f001 ff6e 	bl	8007ec0 <__mcmp>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	dd6a      	ble.n	80060be <_strtod_l+0x8e6>
 8005fe8:	9904      	ldr	r1, [sp, #16]
 8005fea:	4a55      	ldr	r2, [pc, #340]	; (8006140 <_strtod_l+0x968>)
 8005fec:	465b      	mov	r3, fp
 8005fee:	2900      	cmp	r1, #0
 8005ff0:	f000 8085 	beq.w	80060fe <_strtod_l+0x926>
 8005ff4:	ea02 010b 	and.w	r1, r2, fp
 8005ff8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005ffc:	dc7f      	bgt.n	80060fe <_strtod_l+0x926>
 8005ffe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006002:	f77f aeaa 	ble.w	8005d5a <_strtod_l+0x582>
 8006006:	4a4f      	ldr	r2, [pc, #316]	; (8006144 <_strtod_l+0x96c>)
 8006008:	2300      	movs	r3, #0
 800600a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800600e:	4650      	mov	r0, sl
 8006010:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006014:	4659      	mov	r1, fp
 8006016:	f7fa fb0f 	bl	8000638 <__aeabi_dmul>
 800601a:	460b      	mov	r3, r1
 800601c:	4303      	orrs	r3, r0
 800601e:	bf08      	it	eq
 8006020:	2322      	moveq	r3, #34	; 0x22
 8006022:	4682      	mov	sl, r0
 8006024:	468b      	mov	fp, r1
 8006026:	bf08      	it	eq
 8006028:	6023      	streq	r3, [r4, #0]
 800602a:	e62b      	b.n	8005c84 <_strtod_l+0x4ac>
 800602c:	f04f 32ff 	mov.w	r2, #4294967295
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	ea03 0a0a 	and.w	sl, r3, sl
 8006038:	e6de      	b.n	8005df8 <_strtod_l+0x620>
 800603a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800603e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006042:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006046:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800604a:	fa01 f308 	lsl.w	r3, r1, r8
 800604e:	930c      	str	r3, [sp, #48]	; 0x30
 8006050:	9111      	str	r1, [sp, #68]	; 0x44
 8006052:	e741      	b.n	8005ed8 <_strtod_l+0x700>
 8006054:	2300      	movs	r3, #0
 8006056:	930c      	str	r3, [sp, #48]	; 0x30
 8006058:	2301      	movs	r3, #1
 800605a:	9311      	str	r3, [sp, #68]	; 0x44
 800605c:	e73c      	b.n	8005ed8 <_strtod_l+0x700>
 800605e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006060:	4642      	mov	r2, r8
 8006062:	4620      	mov	r0, r4
 8006064:	f001 fec0 	bl	8007de8 <__lshift>
 8006068:	901e      	str	r0, [sp, #120]	; 0x78
 800606a:	2800      	cmp	r0, #0
 800606c:	f47f af66 	bne.w	8005f3c <_strtod_l+0x764>
 8006070:	e5fe      	b.n	8005c70 <_strtod_l+0x498>
 8006072:	465f      	mov	r7, fp
 8006074:	d16e      	bne.n	8006154 <_strtod_l+0x97c>
 8006076:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006078:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800607c:	b342      	cbz	r2, 80060d0 <_strtod_l+0x8f8>
 800607e:	4a32      	ldr	r2, [pc, #200]	; (8006148 <_strtod_l+0x970>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d128      	bne.n	80060d6 <_strtod_l+0x8fe>
 8006084:	9b04      	ldr	r3, [sp, #16]
 8006086:	4650      	mov	r0, sl
 8006088:	b1eb      	cbz	r3, 80060c6 <_strtod_l+0x8ee>
 800608a:	4a2d      	ldr	r2, [pc, #180]	; (8006140 <_strtod_l+0x968>)
 800608c:	403a      	ands	r2, r7
 800608e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006092:	f04f 31ff 	mov.w	r1, #4294967295
 8006096:	d819      	bhi.n	80060cc <_strtod_l+0x8f4>
 8006098:	0d12      	lsrs	r2, r2, #20
 800609a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800609e:	fa01 f303 	lsl.w	r3, r1, r3
 80060a2:	4298      	cmp	r0, r3
 80060a4:	d117      	bne.n	80060d6 <_strtod_l+0x8fe>
 80060a6:	4b29      	ldr	r3, [pc, #164]	; (800614c <_strtod_l+0x974>)
 80060a8:	429f      	cmp	r7, r3
 80060aa:	d102      	bne.n	80060b2 <_strtod_l+0x8da>
 80060ac:	3001      	adds	r0, #1
 80060ae:	f43f addf 	beq.w	8005c70 <_strtod_l+0x498>
 80060b2:	4b23      	ldr	r3, [pc, #140]	; (8006140 <_strtod_l+0x968>)
 80060b4:	403b      	ands	r3, r7
 80060b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80060ba:	f04f 0a00 	mov.w	sl, #0
 80060be:	9b04      	ldr	r3, [sp, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1a0      	bne.n	8006006 <_strtod_l+0x82e>
 80060c4:	e5de      	b.n	8005c84 <_strtod_l+0x4ac>
 80060c6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ca:	e7ea      	b.n	80060a2 <_strtod_l+0x8ca>
 80060cc:	460b      	mov	r3, r1
 80060ce:	e7e8      	b.n	80060a2 <_strtod_l+0x8ca>
 80060d0:	ea53 030a 	orrs.w	r3, r3, sl
 80060d4:	d088      	beq.n	8005fe8 <_strtod_l+0x810>
 80060d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060d8:	b1db      	cbz	r3, 8006112 <_strtod_l+0x93a>
 80060da:	423b      	tst	r3, r7
 80060dc:	d0ef      	beq.n	80060be <_strtod_l+0x8e6>
 80060de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060e0:	9a04      	ldr	r2, [sp, #16]
 80060e2:	4650      	mov	r0, sl
 80060e4:	4659      	mov	r1, fp
 80060e6:	b1c3      	cbz	r3, 800611a <_strtod_l+0x942>
 80060e8:	f7ff fb5a 	bl	80057a0 <sulp>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060f4:	f7fa f8ea 	bl	80002cc <__adddf3>
 80060f8:	4682      	mov	sl, r0
 80060fa:	468b      	mov	fp, r1
 80060fc:	e7df      	b.n	80060be <_strtod_l+0x8e6>
 80060fe:	4013      	ands	r3, r2
 8006100:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006104:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006108:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800610c:	f04f 3aff 	mov.w	sl, #4294967295
 8006110:	e7d5      	b.n	80060be <_strtod_l+0x8e6>
 8006112:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006114:	ea13 0f0a 	tst.w	r3, sl
 8006118:	e7e0      	b.n	80060dc <_strtod_l+0x904>
 800611a:	f7ff fb41 	bl	80057a0 <sulp>
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006126:	f7fa f8cf 	bl	80002c8 <__aeabi_dsub>
 800612a:	2200      	movs	r2, #0
 800612c:	2300      	movs	r3, #0
 800612e:	4682      	mov	sl, r0
 8006130:	468b      	mov	fp, r1
 8006132:	f7fa fce9 	bl	8000b08 <__aeabi_dcmpeq>
 8006136:	2800      	cmp	r0, #0
 8006138:	d0c1      	beq.n	80060be <_strtod_l+0x8e6>
 800613a:	e60e      	b.n	8005d5a <_strtod_l+0x582>
 800613c:	fffffc02 	.word	0xfffffc02
 8006140:	7ff00000 	.word	0x7ff00000
 8006144:	39500000 	.word	0x39500000
 8006148:	000fffff 	.word	0x000fffff
 800614c:	7fefffff 	.word	0x7fefffff
 8006150:	08009780 	.word	0x08009780
 8006154:	4631      	mov	r1, r6
 8006156:	4628      	mov	r0, r5
 8006158:	f002 f82e 	bl	80081b8 <__ratio>
 800615c:	ec59 8b10 	vmov	r8, r9, d0
 8006160:	ee10 0a10 	vmov	r0, s0
 8006164:	2200      	movs	r2, #0
 8006166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800616a:	4649      	mov	r1, r9
 800616c:	f7fa fce0 	bl	8000b30 <__aeabi_dcmple>
 8006170:	2800      	cmp	r0, #0
 8006172:	d07c      	beq.n	800626e <_strtod_l+0xa96>
 8006174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d04c      	beq.n	8006214 <_strtod_l+0xa3c>
 800617a:	4b95      	ldr	r3, [pc, #596]	; (80063d0 <_strtod_l+0xbf8>)
 800617c:	2200      	movs	r2, #0
 800617e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006182:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80063d0 <_strtod_l+0xbf8>
 8006186:	f04f 0800 	mov.w	r8, #0
 800618a:	4b92      	ldr	r3, [pc, #584]	; (80063d4 <_strtod_l+0xbfc>)
 800618c:	403b      	ands	r3, r7
 800618e:	9311      	str	r3, [sp, #68]	; 0x44
 8006190:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006192:	4b91      	ldr	r3, [pc, #580]	; (80063d8 <_strtod_l+0xc00>)
 8006194:	429a      	cmp	r2, r3
 8006196:	f040 80b2 	bne.w	80062fe <_strtod_l+0xb26>
 800619a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800619e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061a2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80061a6:	ec4b ab10 	vmov	d0, sl, fp
 80061aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80061ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80061b2:	f001 ff29 	bl	8008008 <__ulp>
 80061b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061ba:	ec53 2b10 	vmov	r2, r3, d0
 80061be:	f7fa fa3b 	bl	8000638 <__aeabi_dmul>
 80061c2:	4652      	mov	r2, sl
 80061c4:	465b      	mov	r3, fp
 80061c6:	f7fa f881 	bl	80002cc <__adddf3>
 80061ca:	460b      	mov	r3, r1
 80061cc:	4981      	ldr	r1, [pc, #516]	; (80063d4 <_strtod_l+0xbfc>)
 80061ce:	4a83      	ldr	r2, [pc, #524]	; (80063dc <_strtod_l+0xc04>)
 80061d0:	4019      	ands	r1, r3
 80061d2:	4291      	cmp	r1, r2
 80061d4:	4682      	mov	sl, r0
 80061d6:	d95e      	bls.n	8006296 <_strtod_l+0xabe>
 80061d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061da:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80061de:	4293      	cmp	r3, r2
 80061e0:	d103      	bne.n	80061ea <_strtod_l+0xa12>
 80061e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e4:	3301      	adds	r3, #1
 80061e6:	f43f ad43 	beq.w	8005c70 <_strtod_l+0x498>
 80061ea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80063e8 <_strtod_l+0xc10>
 80061ee:	f04f 3aff 	mov.w	sl, #4294967295
 80061f2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80061f4:	4620      	mov	r0, r4
 80061f6:	f001 fbdb 	bl	80079b0 <_Bfree>
 80061fa:	9907      	ldr	r1, [sp, #28]
 80061fc:	4620      	mov	r0, r4
 80061fe:	f001 fbd7 	bl	80079b0 <_Bfree>
 8006202:	4631      	mov	r1, r6
 8006204:	4620      	mov	r0, r4
 8006206:	f001 fbd3 	bl	80079b0 <_Bfree>
 800620a:	4629      	mov	r1, r5
 800620c:	4620      	mov	r0, r4
 800620e:	f001 fbcf 	bl	80079b0 <_Bfree>
 8006212:	e613      	b.n	8005e3c <_strtod_l+0x664>
 8006214:	f1ba 0f00 	cmp.w	sl, #0
 8006218:	d11b      	bne.n	8006252 <_strtod_l+0xa7a>
 800621a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800621e:	b9f3      	cbnz	r3, 800625e <_strtod_l+0xa86>
 8006220:	4b6b      	ldr	r3, [pc, #428]	; (80063d0 <_strtod_l+0xbf8>)
 8006222:	2200      	movs	r2, #0
 8006224:	4640      	mov	r0, r8
 8006226:	4649      	mov	r1, r9
 8006228:	f7fa fc78 	bl	8000b1c <__aeabi_dcmplt>
 800622c:	b9d0      	cbnz	r0, 8006264 <_strtod_l+0xa8c>
 800622e:	4640      	mov	r0, r8
 8006230:	4649      	mov	r1, r9
 8006232:	4b6b      	ldr	r3, [pc, #428]	; (80063e0 <_strtod_l+0xc08>)
 8006234:	2200      	movs	r2, #0
 8006236:	f7fa f9ff 	bl	8000638 <__aeabi_dmul>
 800623a:	4680      	mov	r8, r0
 800623c:	4689      	mov	r9, r1
 800623e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006242:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006246:	931b      	str	r3, [sp, #108]	; 0x6c
 8006248:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800624c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006250:	e79b      	b.n	800618a <_strtod_l+0x9b2>
 8006252:	f1ba 0f01 	cmp.w	sl, #1
 8006256:	d102      	bne.n	800625e <_strtod_l+0xa86>
 8006258:	2f00      	cmp	r7, #0
 800625a:	f43f ad7e 	beq.w	8005d5a <_strtod_l+0x582>
 800625e:	4b61      	ldr	r3, [pc, #388]	; (80063e4 <_strtod_l+0xc0c>)
 8006260:	2200      	movs	r2, #0
 8006262:	e78c      	b.n	800617e <_strtod_l+0x9a6>
 8006264:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80063e0 <_strtod_l+0xc08>
 8006268:	f04f 0800 	mov.w	r8, #0
 800626c:	e7e7      	b.n	800623e <_strtod_l+0xa66>
 800626e:	4b5c      	ldr	r3, [pc, #368]	; (80063e0 <_strtod_l+0xc08>)
 8006270:	4640      	mov	r0, r8
 8006272:	4649      	mov	r1, r9
 8006274:	2200      	movs	r2, #0
 8006276:	f7fa f9df 	bl	8000638 <__aeabi_dmul>
 800627a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800627c:	4680      	mov	r8, r0
 800627e:	4689      	mov	r9, r1
 8006280:	b933      	cbnz	r3, 8006290 <_strtod_l+0xab8>
 8006282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006286:	9012      	str	r0, [sp, #72]	; 0x48
 8006288:	9313      	str	r3, [sp, #76]	; 0x4c
 800628a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800628e:	e7dd      	b.n	800624c <_strtod_l+0xa74>
 8006290:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006294:	e7f9      	b.n	800628a <_strtod_l+0xab2>
 8006296:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800629a:	9b04      	ldr	r3, [sp, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1a8      	bne.n	80061f2 <_strtod_l+0xa1a>
 80062a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80062a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80062a6:	0d1b      	lsrs	r3, r3, #20
 80062a8:	051b      	lsls	r3, r3, #20
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d1a1      	bne.n	80061f2 <_strtod_l+0xa1a>
 80062ae:	4640      	mov	r0, r8
 80062b0:	4649      	mov	r1, r9
 80062b2:	f7fa fd21 	bl	8000cf8 <__aeabi_d2lz>
 80062b6:	f7fa f991 	bl	80005dc <__aeabi_l2d>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4640      	mov	r0, r8
 80062c0:	4649      	mov	r1, r9
 80062c2:	f7fa f801 	bl	80002c8 <__aeabi_dsub>
 80062c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062cc:	ea43 030a 	orr.w	r3, r3, sl
 80062d0:	4313      	orrs	r3, r2
 80062d2:	4680      	mov	r8, r0
 80062d4:	4689      	mov	r9, r1
 80062d6:	d053      	beq.n	8006380 <_strtod_l+0xba8>
 80062d8:	a335      	add	r3, pc, #212	; (adr r3, 80063b0 <_strtod_l+0xbd8>)
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	f7fa fc1d 	bl	8000b1c <__aeabi_dcmplt>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	f47f acce 	bne.w	8005c84 <_strtod_l+0x4ac>
 80062e8:	a333      	add	r3, pc, #204	; (adr r3, 80063b8 <_strtod_l+0xbe0>)
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	4640      	mov	r0, r8
 80062f0:	4649      	mov	r1, r9
 80062f2:	f7fa fc31 	bl	8000b58 <__aeabi_dcmpgt>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	f43f af7b 	beq.w	80061f2 <_strtod_l+0xa1a>
 80062fc:	e4c2      	b.n	8005c84 <_strtod_l+0x4ac>
 80062fe:	9b04      	ldr	r3, [sp, #16]
 8006300:	b333      	cbz	r3, 8006350 <_strtod_l+0xb78>
 8006302:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006304:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006308:	d822      	bhi.n	8006350 <_strtod_l+0xb78>
 800630a:	a32d      	add	r3, pc, #180	; (adr r3, 80063c0 <_strtod_l+0xbe8>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	4640      	mov	r0, r8
 8006312:	4649      	mov	r1, r9
 8006314:	f7fa fc0c 	bl	8000b30 <__aeabi_dcmple>
 8006318:	b1a0      	cbz	r0, 8006344 <_strtod_l+0xb6c>
 800631a:	4649      	mov	r1, r9
 800631c:	4640      	mov	r0, r8
 800631e:	f7fa fc63 	bl	8000be8 <__aeabi_d2uiz>
 8006322:	2801      	cmp	r0, #1
 8006324:	bf38      	it	cc
 8006326:	2001      	movcc	r0, #1
 8006328:	f7fa f90c 	bl	8000544 <__aeabi_ui2d>
 800632c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800632e:	4680      	mov	r8, r0
 8006330:	4689      	mov	r9, r1
 8006332:	bb13      	cbnz	r3, 800637a <_strtod_l+0xba2>
 8006334:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006338:	9014      	str	r0, [sp, #80]	; 0x50
 800633a:	9315      	str	r3, [sp, #84]	; 0x54
 800633c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006340:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006346:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006348:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	930d      	str	r3, [sp, #52]	; 0x34
 8006350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006354:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006358:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800635c:	f001 fe54 	bl	8008008 <__ulp>
 8006360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006364:	ec53 2b10 	vmov	r2, r3, d0
 8006368:	f7fa f966 	bl	8000638 <__aeabi_dmul>
 800636c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006370:	f7f9 ffac 	bl	80002cc <__adddf3>
 8006374:	4682      	mov	sl, r0
 8006376:	468b      	mov	fp, r1
 8006378:	e78f      	b.n	800629a <_strtod_l+0xac2>
 800637a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800637e:	e7dd      	b.n	800633c <_strtod_l+0xb64>
 8006380:	a311      	add	r3, pc, #68	; (adr r3, 80063c8 <_strtod_l+0xbf0>)
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	f7fa fbc9 	bl	8000b1c <__aeabi_dcmplt>
 800638a:	e7b4      	b.n	80062f6 <_strtod_l+0xb1e>
 800638c:	2300      	movs	r3, #0
 800638e:	930e      	str	r3, [sp, #56]	; 0x38
 8006390:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006392:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	f7ff ba65 	b.w	8005864 <_strtod_l+0x8c>
 800639a:	2b65      	cmp	r3, #101	; 0x65
 800639c:	f43f ab5d 	beq.w	8005a5a <_strtod_l+0x282>
 80063a0:	2b45      	cmp	r3, #69	; 0x45
 80063a2:	f43f ab5a 	beq.w	8005a5a <_strtod_l+0x282>
 80063a6:	2201      	movs	r2, #1
 80063a8:	f7ff bb92 	b.w	8005ad0 <_strtod_l+0x2f8>
 80063ac:	f3af 8000 	nop.w
 80063b0:	94a03595 	.word	0x94a03595
 80063b4:	3fdfffff 	.word	0x3fdfffff
 80063b8:	35afe535 	.word	0x35afe535
 80063bc:	3fe00000 	.word	0x3fe00000
 80063c0:	ffc00000 	.word	0xffc00000
 80063c4:	41dfffff 	.word	0x41dfffff
 80063c8:	94a03595 	.word	0x94a03595
 80063cc:	3fcfffff 	.word	0x3fcfffff
 80063d0:	3ff00000 	.word	0x3ff00000
 80063d4:	7ff00000 	.word	0x7ff00000
 80063d8:	7fe00000 	.word	0x7fe00000
 80063dc:	7c9fffff 	.word	0x7c9fffff
 80063e0:	3fe00000 	.word	0x3fe00000
 80063e4:	bff00000 	.word	0xbff00000
 80063e8:	7fefffff 	.word	0x7fefffff

080063ec <_strtod_r>:
 80063ec:	4b01      	ldr	r3, [pc, #4]	; (80063f4 <_strtod_r+0x8>)
 80063ee:	f7ff b9f3 	b.w	80057d8 <_strtod_l>
 80063f2:	bf00      	nop
 80063f4:	20000078 	.word	0x20000078

080063f8 <_strtol_l.isra.0>:
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063fe:	d001      	beq.n	8006404 <_strtol_l.isra.0+0xc>
 8006400:	2b24      	cmp	r3, #36	; 0x24
 8006402:	d906      	bls.n	8006412 <_strtol_l.isra.0+0x1a>
 8006404:	f7fe fafa 	bl	80049fc <__errno>
 8006408:	2316      	movs	r3, #22
 800640a:	6003      	str	r3, [r0, #0]
 800640c:	2000      	movs	r0, #0
 800640e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006412:	4f3a      	ldr	r7, [pc, #232]	; (80064fc <_strtol_l.isra.0+0x104>)
 8006414:	468e      	mov	lr, r1
 8006416:	4676      	mov	r6, lr
 8006418:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800641c:	5de5      	ldrb	r5, [r4, r7]
 800641e:	f015 0508 	ands.w	r5, r5, #8
 8006422:	d1f8      	bne.n	8006416 <_strtol_l.isra.0+0x1e>
 8006424:	2c2d      	cmp	r4, #45	; 0x2d
 8006426:	d134      	bne.n	8006492 <_strtol_l.isra.0+0x9a>
 8006428:	f89e 4000 	ldrb.w	r4, [lr]
 800642c:	f04f 0801 	mov.w	r8, #1
 8006430:	f106 0e02 	add.w	lr, r6, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d05c      	beq.n	80064f2 <_strtol_l.isra.0+0xfa>
 8006438:	2b10      	cmp	r3, #16
 800643a:	d10c      	bne.n	8006456 <_strtol_l.isra.0+0x5e>
 800643c:	2c30      	cmp	r4, #48	; 0x30
 800643e:	d10a      	bne.n	8006456 <_strtol_l.isra.0+0x5e>
 8006440:	f89e 4000 	ldrb.w	r4, [lr]
 8006444:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006448:	2c58      	cmp	r4, #88	; 0x58
 800644a:	d14d      	bne.n	80064e8 <_strtol_l.isra.0+0xf0>
 800644c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006450:	2310      	movs	r3, #16
 8006452:	f10e 0e02 	add.w	lr, lr, #2
 8006456:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800645a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800645e:	2600      	movs	r6, #0
 8006460:	fbbc f9f3 	udiv	r9, ip, r3
 8006464:	4635      	mov	r5, r6
 8006466:	fb03 ca19 	mls	sl, r3, r9, ip
 800646a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800646e:	2f09      	cmp	r7, #9
 8006470:	d818      	bhi.n	80064a4 <_strtol_l.isra.0+0xac>
 8006472:	463c      	mov	r4, r7
 8006474:	42a3      	cmp	r3, r4
 8006476:	dd24      	ble.n	80064c2 <_strtol_l.isra.0+0xca>
 8006478:	2e00      	cmp	r6, #0
 800647a:	db1f      	blt.n	80064bc <_strtol_l.isra.0+0xc4>
 800647c:	45a9      	cmp	r9, r5
 800647e:	d31d      	bcc.n	80064bc <_strtol_l.isra.0+0xc4>
 8006480:	d101      	bne.n	8006486 <_strtol_l.isra.0+0x8e>
 8006482:	45a2      	cmp	sl, r4
 8006484:	db1a      	blt.n	80064bc <_strtol_l.isra.0+0xc4>
 8006486:	fb05 4503 	mla	r5, r5, r3, r4
 800648a:	2601      	movs	r6, #1
 800648c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006490:	e7eb      	b.n	800646a <_strtol_l.isra.0+0x72>
 8006492:	2c2b      	cmp	r4, #43	; 0x2b
 8006494:	bf08      	it	eq
 8006496:	f89e 4000 	ldrbeq.w	r4, [lr]
 800649a:	46a8      	mov	r8, r5
 800649c:	bf08      	it	eq
 800649e:	f106 0e02 	addeq.w	lr, r6, #2
 80064a2:	e7c7      	b.n	8006434 <_strtol_l.isra.0+0x3c>
 80064a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80064a8:	2f19      	cmp	r7, #25
 80064aa:	d801      	bhi.n	80064b0 <_strtol_l.isra.0+0xb8>
 80064ac:	3c37      	subs	r4, #55	; 0x37
 80064ae:	e7e1      	b.n	8006474 <_strtol_l.isra.0+0x7c>
 80064b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80064b4:	2f19      	cmp	r7, #25
 80064b6:	d804      	bhi.n	80064c2 <_strtol_l.isra.0+0xca>
 80064b8:	3c57      	subs	r4, #87	; 0x57
 80064ba:	e7db      	b.n	8006474 <_strtol_l.isra.0+0x7c>
 80064bc:	f04f 36ff 	mov.w	r6, #4294967295
 80064c0:	e7e4      	b.n	800648c <_strtol_l.isra.0+0x94>
 80064c2:	2e00      	cmp	r6, #0
 80064c4:	da05      	bge.n	80064d2 <_strtol_l.isra.0+0xda>
 80064c6:	2322      	movs	r3, #34	; 0x22
 80064c8:	6003      	str	r3, [r0, #0]
 80064ca:	4665      	mov	r5, ip
 80064cc:	b942      	cbnz	r2, 80064e0 <_strtol_l.isra.0+0xe8>
 80064ce:	4628      	mov	r0, r5
 80064d0:	e79d      	b.n	800640e <_strtol_l.isra.0+0x16>
 80064d2:	f1b8 0f00 	cmp.w	r8, #0
 80064d6:	d000      	beq.n	80064da <_strtol_l.isra.0+0xe2>
 80064d8:	426d      	negs	r5, r5
 80064da:	2a00      	cmp	r2, #0
 80064dc:	d0f7      	beq.n	80064ce <_strtol_l.isra.0+0xd6>
 80064de:	b10e      	cbz	r6, 80064e4 <_strtol_l.isra.0+0xec>
 80064e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80064e4:	6011      	str	r1, [r2, #0]
 80064e6:	e7f2      	b.n	80064ce <_strtol_l.isra.0+0xd6>
 80064e8:	2430      	movs	r4, #48	; 0x30
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1b3      	bne.n	8006456 <_strtol_l.isra.0+0x5e>
 80064ee:	2308      	movs	r3, #8
 80064f0:	e7b1      	b.n	8006456 <_strtol_l.isra.0+0x5e>
 80064f2:	2c30      	cmp	r4, #48	; 0x30
 80064f4:	d0a4      	beq.n	8006440 <_strtol_l.isra.0+0x48>
 80064f6:	230a      	movs	r3, #10
 80064f8:	e7ad      	b.n	8006456 <_strtol_l.isra.0+0x5e>
 80064fa:	bf00      	nop
 80064fc:	080097a9 	.word	0x080097a9

08006500 <_strtol_r>:
 8006500:	f7ff bf7a 	b.w	80063f8 <_strtol_l.isra.0>

08006504 <quorem>:
 8006504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006508:	6903      	ldr	r3, [r0, #16]
 800650a:	690c      	ldr	r4, [r1, #16]
 800650c:	42a3      	cmp	r3, r4
 800650e:	4607      	mov	r7, r0
 8006510:	f2c0 8081 	blt.w	8006616 <quorem+0x112>
 8006514:	3c01      	subs	r4, #1
 8006516:	f101 0814 	add.w	r8, r1, #20
 800651a:	f100 0514 	add.w	r5, r0, #20
 800651e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006522:	9301      	str	r3, [sp, #4]
 8006524:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006528:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800652c:	3301      	adds	r3, #1
 800652e:	429a      	cmp	r2, r3
 8006530:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006534:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006538:	fbb2 f6f3 	udiv	r6, r2, r3
 800653c:	d331      	bcc.n	80065a2 <quorem+0x9e>
 800653e:	f04f 0e00 	mov.w	lr, #0
 8006542:	4640      	mov	r0, r8
 8006544:	46ac      	mov	ip, r5
 8006546:	46f2      	mov	sl, lr
 8006548:	f850 2b04 	ldr.w	r2, [r0], #4
 800654c:	b293      	uxth	r3, r2
 800654e:	fb06 e303 	mla	r3, r6, r3, lr
 8006552:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006556:	b29b      	uxth	r3, r3
 8006558:	ebaa 0303 	sub.w	r3, sl, r3
 800655c:	0c12      	lsrs	r2, r2, #16
 800655e:	f8dc a000 	ldr.w	sl, [ip]
 8006562:	fb06 e202 	mla	r2, r6, r2, lr
 8006566:	fa13 f38a 	uxtah	r3, r3, sl
 800656a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800656e:	fa1f fa82 	uxth.w	sl, r2
 8006572:	f8dc 2000 	ldr.w	r2, [ip]
 8006576:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800657a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800657e:	b29b      	uxth	r3, r3
 8006580:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006584:	4581      	cmp	r9, r0
 8006586:	f84c 3b04 	str.w	r3, [ip], #4
 800658a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800658e:	d2db      	bcs.n	8006548 <quorem+0x44>
 8006590:	f855 300b 	ldr.w	r3, [r5, fp]
 8006594:	b92b      	cbnz	r3, 80065a2 <quorem+0x9e>
 8006596:	9b01      	ldr	r3, [sp, #4]
 8006598:	3b04      	subs	r3, #4
 800659a:	429d      	cmp	r5, r3
 800659c:	461a      	mov	r2, r3
 800659e:	d32e      	bcc.n	80065fe <quorem+0xfa>
 80065a0:	613c      	str	r4, [r7, #16]
 80065a2:	4638      	mov	r0, r7
 80065a4:	f001 fc8c 	bl	8007ec0 <__mcmp>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	db24      	blt.n	80065f6 <quorem+0xf2>
 80065ac:	3601      	adds	r6, #1
 80065ae:	4628      	mov	r0, r5
 80065b0:	f04f 0c00 	mov.w	ip, #0
 80065b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80065b8:	f8d0 e000 	ldr.w	lr, [r0]
 80065bc:	b293      	uxth	r3, r2
 80065be:	ebac 0303 	sub.w	r3, ip, r3
 80065c2:	0c12      	lsrs	r2, r2, #16
 80065c4:	fa13 f38e 	uxtah	r3, r3, lr
 80065c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065d6:	45c1      	cmp	r9, r8
 80065d8:	f840 3b04 	str.w	r3, [r0], #4
 80065dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065e0:	d2e8      	bcs.n	80065b4 <quorem+0xb0>
 80065e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065ea:	b922      	cbnz	r2, 80065f6 <quorem+0xf2>
 80065ec:	3b04      	subs	r3, #4
 80065ee:	429d      	cmp	r5, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	d30a      	bcc.n	800660a <quorem+0x106>
 80065f4:	613c      	str	r4, [r7, #16]
 80065f6:	4630      	mov	r0, r6
 80065f8:	b003      	add	sp, #12
 80065fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	3b04      	subs	r3, #4
 8006602:	2a00      	cmp	r2, #0
 8006604:	d1cc      	bne.n	80065a0 <quorem+0x9c>
 8006606:	3c01      	subs	r4, #1
 8006608:	e7c7      	b.n	800659a <quorem+0x96>
 800660a:	6812      	ldr	r2, [r2, #0]
 800660c:	3b04      	subs	r3, #4
 800660e:	2a00      	cmp	r2, #0
 8006610:	d1f0      	bne.n	80065f4 <quorem+0xf0>
 8006612:	3c01      	subs	r4, #1
 8006614:	e7eb      	b.n	80065ee <quorem+0xea>
 8006616:	2000      	movs	r0, #0
 8006618:	e7ee      	b.n	80065f8 <quorem+0xf4>
 800661a:	0000      	movs	r0, r0
 800661c:	0000      	movs	r0, r0
	...

08006620 <_dtoa_r>:
 8006620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	ed2d 8b02 	vpush	{d8}
 8006628:	ec57 6b10 	vmov	r6, r7, d0
 800662c:	b095      	sub	sp, #84	; 0x54
 800662e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006630:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006634:	9105      	str	r1, [sp, #20]
 8006636:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800663a:	4604      	mov	r4, r0
 800663c:	9209      	str	r2, [sp, #36]	; 0x24
 800663e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006640:	b975      	cbnz	r5, 8006660 <_dtoa_r+0x40>
 8006642:	2010      	movs	r0, #16
 8006644:	f001 f94c 	bl	80078e0 <malloc>
 8006648:	4602      	mov	r2, r0
 800664a:	6260      	str	r0, [r4, #36]	; 0x24
 800664c:	b920      	cbnz	r0, 8006658 <_dtoa_r+0x38>
 800664e:	4bb2      	ldr	r3, [pc, #712]	; (8006918 <_dtoa_r+0x2f8>)
 8006650:	21ea      	movs	r1, #234	; 0xea
 8006652:	48b2      	ldr	r0, [pc, #712]	; (800691c <_dtoa_r+0x2fc>)
 8006654:	f002 f874 	bl	8008740 <__assert_func>
 8006658:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800665c:	6005      	str	r5, [r0, #0]
 800665e:	60c5      	str	r5, [r0, #12]
 8006660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006662:	6819      	ldr	r1, [r3, #0]
 8006664:	b151      	cbz	r1, 800667c <_dtoa_r+0x5c>
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	604a      	str	r2, [r1, #4]
 800666a:	2301      	movs	r3, #1
 800666c:	4093      	lsls	r3, r2
 800666e:	608b      	str	r3, [r1, #8]
 8006670:	4620      	mov	r0, r4
 8006672:	f001 f99d 	bl	80079b0 <_Bfree>
 8006676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	1e3b      	subs	r3, r7, #0
 800667e:	bfb9      	ittee	lt
 8006680:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006684:	9303      	strlt	r3, [sp, #12]
 8006686:	2300      	movge	r3, #0
 8006688:	f8c8 3000 	strge.w	r3, [r8]
 800668c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006690:	4ba3      	ldr	r3, [pc, #652]	; (8006920 <_dtoa_r+0x300>)
 8006692:	bfbc      	itt	lt
 8006694:	2201      	movlt	r2, #1
 8006696:	f8c8 2000 	strlt.w	r2, [r8]
 800669a:	ea33 0309 	bics.w	r3, r3, r9
 800669e:	d11b      	bne.n	80066d8 <_dtoa_r+0xb8>
 80066a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066ac:	4333      	orrs	r3, r6
 80066ae:	f000 857a 	beq.w	80071a6 <_dtoa_r+0xb86>
 80066b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066b4:	b963      	cbnz	r3, 80066d0 <_dtoa_r+0xb0>
 80066b6:	4b9b      	ldr	r3, [pc, #620]	; (8006924 <_dtoa_r+0x304>)
 80066b8:	e024      	b.n	8006704 <_dtoa_r+0xe4>
 80066ba:	4b9b      	ldr	r3, [pc, #620]	; (8006928 <_dtoa_r+0x308>)
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	3308      	adds	r3, #8
 80066c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	9800      	ldr	r0, [sp, #0]
 80066c6:	b015      	add	sp, #84	; 0x54
 80066c8:	ecbd 8b02 	vpop	{d8}
 80066cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d0:	4b94      	ldr	r3, [pc, #592]	; (8006924 <_dtoa_r+0x304>)
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	3303      	adds	r3, #3
 80066d6:	e7f3      	b.n	80066c0 <_dtoa_r+0xa0>
 80066d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066dc:	2200      	movs	r2, #0
 80066de:	ec51 0b17 	vmov	r0, r1, d7
 80066e2:	2300      	movs	r3, #0
 80066e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80066e8:	f7fa fa0e 	bl	8000b08 <__aeabi_dcmpeq>
 80066ec:	4680      	mov	r8, r0
 80066ee:	b158      	cbz	r0, 8006708 <_dtoa_r+0xe8>
 80066f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066f2:	2301      	movs	r3, #1
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 8551 	beq.w	80071a0 <_dtoa_r+0xb80>
 80066fe:	488b      	ldr	r0, [pc, #556]	; (800692c <_dtoa_r+0x30c>)
 8006700:	6018      	str	r0, [r3, #0]
 8006702:	1e43      	subs	r3, r0, #1
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	e7dd      	b.n	80066c4 <_dtoa_r+0xa4>
 8006708:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800670c:	aa12      	add	r2, sp, #72	; 0x48
 800670e:	a913      	add	r1, sp, #76	; 0x4c
 8006710:	4620      	mov	r0, r4
 8006712:	f001 fcf5 	bl	8008100 <__d2b>
 8006716:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800671a:	4683      	mov	fp, r0
 800671c:	2d00      	cmp	r5, #0
 800671e:	d07c      	beq.n	800681a <_dtoa_r+0x1fa>
 8006720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006722:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800672a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800672e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006732:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006736:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800673a:	4b7d      	ldr	r3, [pc, #500]	; (8006930 <_dtoa_r+0x310>)
 800673c:	2200      	movs	r2, #0
 800673e:	4630      	mov	r0, r6
 8006740:	4639      	mov	r1, r7
 8006742:	f7f9 fdc1 	bl	80002c8 <__aeabi_dsub>
 8006746:	a36e      	add	r3, pc, #440	; (adr r3, 8006900 <_dtoa_r+0x2e0>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7f9 ff74 	bl	8000638 <__aeabi_dmul>
 8006750:	a36d      	add	r3, pc, #436	; (adr r3, 8006908 <_dtoa_r+0x2e8>)
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	f7f9 fdb9 	bl	80002cc <__adddf3>
 800675a:	4606      	mov	r6, r0
 800675c:	4628      	mov	r0, r5
 800675e:	460f      	mov	r7, r1
 8006760:	f7f9 ff00 	bl	8000564 <__aeabi_i2d>
 8006764:	a36a      	add	r3, pc, #424	; (adr r3, 8006910 <_dtoa_r+0x2f0>)
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	f7f9 ff65 	bl	8000638 <__aeabi_dmul>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	4630      	mov	r0, r6
 8006774:	4639      	mov	r1, r7
 8006776:	f7f9 fda9 	bl	80002cc <__adddf3>
 800677a:	4606      	mov	r6, r0
 800677c:	460f      	mov	r7, r1
 800677e:	f7fa fa0b 	bl	8000b98 <__aeabi_d2iz>
 8006782:	2200      	movs	r2, #0
 8006784:	4682      	mov	sl, r0
 8006786:	2300      	movs	r3, #0
 8006788:	4630      	mov	r0, r6
 800678a:	4639      	mov	r1, r7
 800678c:	f7fa f9c6 	bl	8000b1c <__aeabi_dcmplt>
 8006790:	b148      	cbz	r0, 80067a6 <_dtoa_r+0x186>
 8006792:	4650      	mov	r0, sl
 8006794:	f7f9 fee6 	bl	8000564 <__aeabi_i2d>
 8006798:	4632      	mov	r2, r6
 800679a:	463b      	mov	r3, r7
 800679c:	f7fa f9b4 	bl	8000b08 <__aeabi_dcmpeq>
 80067a0:	b908      	cbnz	r0, 80067a6 <_dtoa_r+0x186>
 80067a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067a6:	f1ba 0f16 	cmp.w	sl, #22
 80067aa:	d854      	bhi.n	8006856 <_dtoa_r+0x236>
 80067ac:	4b61      	ldr	r3, [pc, #388]	; (8006934 <_dtoa_r+0x314>)
 80067ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80067b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067ba:	f7fa f9af 	bl	8000b1c <__aeabi_dcmplt>
 80067be:	2800      	cmp	r0, #0
 80067c0:	d04b      	beq.n	800685a <_dtoa_r+0x23a>
 80067c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067c6:	2300      	movs	r3, #0
 80067c8:	930e      	str	r3, [sp, #56]	; 0x38
 80067ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067cc:	1b5d      	subs	r5, r3, r5
 80067ce:	1e6b      	subs	r3, r5, #1
 80067d0:	9304      	str	r3, [sp, #16]
 80067d2:	bf43      	ittte	mi
 80067d4:	2300      	movmi	r3, #0
 80067d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80067da:	9304      	strmi	r3, [sp, #16]
 80067dc:	f04f 0800 	movpl.w	r8, #0
 80067e0:	f1ba 0f00 	cmp.w	sl, #0
 80067e4:	db3b      	blt.n	800685e <_dtoa_r+0x23e>
 80067e6:	9b04      	ldr	r3, [sp, #16]
 80067e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80067ec:	4453      	add	r3, sl
 80067ee:	9304      	str	r3, [sp, #16]
 80067f0:	2300      	movs	r3, #0
 80067f2:	9306      	str	r3, [sp, #24]
 80067f4:	9b05      	ldr	r3, [sp, #20]
 80067f6:	2b09      	cmp	r3, #9
 80067f8:	d869      	bhi.n	80068ce <_dtoa_r+0x2ae>
 80067fa:	2b05      	cmp	r3, #5
 80067fc:	bfc4      	itt	gt
 80067fe:	3b04      	subgt	r3, #4
 8006800:	9305      	strgt	r3, [sp, #20]
 8006802:	9b05      	ldr	r3, [sp, #20]
 8006804:	f1a3 0302 	sub.w	r3, r3, #2
 8006808:	bfcc      	ite	gt
 800680a:	2500      	movgt	r5, #0
 800680c:	2501      	movle	r5, #1
 800680e:	2b03      	cmp	r3, #3
 8006810:	d869      	bhi.n	80068e6 <_dtoa_r+0x2c6>
 8006812:	e8df f003 	tbb	[pc, r3]
 8006816:	4e2c      	.short	0x4e2c
 8006818:	5a4c      	.short	0x5a4c
 800681a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800681e:	441d      	add	r5, r3
 8006820:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006824:	2b20      	cmp	r3, #32
 8006826:	bfc1      	itttt	gt
 8006828:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800682c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006830:	fa09 f303 	lslgt.w	r3, r9, r3
 8006834:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006838:	bfda      	itte	le
 800683a:	f1c3 0320 	rsble	r3, r3, #32
 800683e:	fa06 f003 	lslle.w	r0, r6, r3
 8006842:	4318      	orrgt	r0, r3
 8006844:	f7f9 fe7e 	bl	8000544 <__aeabi_ui2d>
 8006848:	2301      	movs	r3, #1
 800684a:	4606      	mov	r6, r0
 800684c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006850:	3d01      	subs	r5, #1
 8006852:	9310      	str	r3, [sp, #64]	; 0x40
 8006854:	e771      	b.n	800673a <_dtoa_r+0x11a>
 8006856:	2301      	movs	r3, #1
 8006858:	e7b6      	b.n	80067c8 <_dtoa_r+0x1a8>
 800685a:	900e      	str	r0, [sp, #56]	; 0x38
 800685c:	e7b5      	b.n	80067ca <_dtoa_r+0x1aa>
 800685e:	f1ca 0300 	rsb	r3, sl, #0
 8006862:	9306      	str	r3, [sp, #24]
 8006864:	2300      	movs	r3, #0
 8006866:	eba8 080a 	sub.w	r8, r8, sl
 800686a:	930d      	str	r3, [sp, #52]	; 0x34
 800686c:	e7c2      	b.n	80067f4 <_dtoa_r+0x1d4>
 800686e:	2300      	movs	r3, #0
 8006870:	9308      	str	r3, [sp, #32]
 8006872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	dc39      	bgt.n	80068ec <_dtoa_r+0x2cc>
 8006878:	f04f 0901 	mov.w	r9, #1
 800687c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006880:	464b      	mov	r3, r9
 8006882:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006886:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006888:	2200      	movs	r2, #0
 800688a:	6042      	str	r2, [r0, #4]
 800688c:	2204      	movs	r2, #4
 800688e:	f102 0614 	add.w	r6, r2, #20
 8006892:	429e      	cmp	r6, r3
 8006894:	6841      	ldr	r1, [r0, #4]
 8006896:	d92f      	bls.n	80068f8 <_dtoa_r+0x2d8>
 8006898:	4620      	mov	r0, r4
 800689a:	f001 f849 	bl	8007930 <_Balloc>
 800689e:	9000      	str	r0, [sp, #0]
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d14b      	bne.n	800693c <_dtoa_r+0x31c>
 80068a4:	4b24      	ldr	r3, [pc, #144]	; (8006938 <_dtoa_r+0x318>)
 80068a6:	4602      	mov	r2, r0
 80068a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80068ac:	e6d1      	b.n	8006652 <_dtoa_r+0x32>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e7de      	b.n	8006870 <_dtoa_r+0x250>
 80068b2:	2300      	movs	r3, #0
 80068b4:	9308      	str	r3, [sp, #32]
 80068b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b8:	eb0a 0903 	add.w	r9, sl, r3
 80068bc:	f109 0301 	add.w	r3, r9, #1
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	9301      	str	r3, [sp, #4]
 80068c4:	bfb8      	it	lt
 80068c6:	2301      	movlt	r3, #1
 80068c8:	e7dd      	b.n	8006886 <_dtoa_r+0x266>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e7f2      	b.n	80068b4 <_dtoa_r+0x294>
 80068ce:	2501      	movs	r5, #1
 80068d0:	2300      	movs	r3, #0
 80068d2:	9305      	str	r3, [sp, #20]
 80068d4:	9508      	str	r5, [sp, #32]
 80068d6:	f04f 39ff 	mov.w	r9, #4294967295
 80068da:	2200      	movs	r2, #0
 80068dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80068e0:	2312      	movs	r3, #18
 80068e2:	9209      	str	r2, [sp, #36]	; 0x24
 80068e4:	e7cf      	b.n	8006886 <_dtoa_r+0x266>
 80068e6:	2301      	movs	r3, #1
 80068e8:	9308      	str	r3, [sp, #32]
 80068ea:	e7f4      	b.n	80068d6 <_dtoa_r+0x2b6>
 80068ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80068f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80068f4:	464b      	mov	r3, r9
 80068f6:	e7c6      	b.n	8006886 <_dtoa_r+0x266>
 80068f8:	3101      	adds	r1, #1
 80068fa:	6041      	str	r1, [r0, #4]
 80068fc:	0052      	lsls	r2, r2, #1
 80068fe:	e7c6      	b.n	800688e <_dtoa_r+0x26e>
 8006900:	636f4361 	.word	0x636f4361
 8006904:	3fd287a7 	.word	0x3fd287a7
 8006908:	8b60c8b3 	.word	0x8b60c8b3
 800690c:	3fc68a28 	.word	0x3fc68a28
 8006910:	509f79fb 	.word	0x509f79fb
 8006914:	3fd34413 	.word	0x3fd34413
 8006918:	080098b6 	.word	0x080098b6
 800691c:	080098cd 	.word	0x080098cd
 8006920:	7ff00000 	.word	0x7ff00000
 8006924:	080098b2 	.word	0x080098b2
 8006928:	080098a9 	.word	0x080098a9
 800692c:	0800972d 	.word	0x0800972d
 8006930:	3ff80000 	.word	0x3ff80000
 8006934:	08009a48 	.word	0x08009a48
 8006938:	0800992c 	.word	0x0800992c
 800693c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800693e:	9a00      	ldr	r2, [sp, #0]
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	9b01      	ldr	r3, [sp, #4]
 8006944:	2b0e      	cmp	r3, #14
 8006946:	f200 80ad 	bhi.w	8006aa4 <_dtoa_r+0x484>
 800694a:	2d00      	cmp	r5, #0
 800694c:	f000 80aa 	beq.w	8006aa4 <_dtoa_r+0x484>
 8006950:	f1ba 0f00 	cmp.w	sl, #0
 8006954:	dd36      	ble.n	80069c4 <_dtoa_r+0x3a4>
 8006956:	4ac3      	ldr	r2, [pc, #780]	; (8006c64 <_dtoa_r+0x644>)
 8006958:	f00a 030f 	and.w	r3, sl, #15
 800695c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006960:	ed93 7b00 	vldr	d7, [r3]
 8006964:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006968:	ea4f 172a 	mov.w	r7, sl, asr #4
 800696c:	eeb0 8a47 	vmov.f32	s16, s14
 8006970:	eef0 8a67 	vmov.f32	s17, s15
 8006974:	d016      	beq.n	80069a4 <_dtoa_r+0x384>
 8006976:	4bbc      	ldr	r3, [pc, #752]	; (8006c68 <_dtoa_r+0x648>)
 8006978:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800697c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006980:	f7f9 ff84 	bl	800088c <__aeabi_ddiv>
 8006984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006988:	f007 070f 	and.w	r7, r7, #15
 800698c:	2503      	movs	r5, #3
 800698e:	4eb6      	ldr	r6, [pc, #728]	; (8006c68 <_dtoa_r+0x648>)
 8006990:	b957      	cbnz	r7, 80069a8 <_dtoa_r+0x388>
 8006992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006996:	ec53 2b18 	vmov	r2, r3, d8
 800699a:	f7f9 ff77 	bl	800088c <__aeabi_ddiv>
 800699e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069a2:	e029      	b.n	80069f8 <_dtoa_r+0x3d8>
 80069a4:	2502      	movs	r5, #2
 80069a6:	e7f2      	b.n	800698e <_dtoa_r+0x36e>
 80069a8:	07f9      	lsls	r1, r7, #31
 80069aa:	d508      	bpl.n	80069be <_dtoa_r+0x39e>
 80069ac:	ec51 0b18 	vmov	r0, r1, d8
 80069b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069b4:	f7f9 fe40 	bl	8000638 <__aeabi_dmul>
 80069b8:	ec41 0b18 	vmov	d8, r0, r1
 80069bc:	3501      	adds	r5, #1
 80069be:	107f      	asrs	r7, r7, #1
 80069c0:	3608      	adds	r6, #8
 80069c2:	e7e5      	b.n	8006990 <_dtoa_r+0x370>
 80069c4:	f000 80a6 	beq.w	8006b14 <_dtoa_r+0x4f4>
 80069c8:	f1ca 0600 	rsb	r6, sl, #0
 80069cc:	4ba5      	ldr	r3, [pc, #660]	; (8006c64 <_dtoa_r+0x644>)
 80069ce:	4fa6      	ldr	r7, [pc, #664]	; (8006c68 <_dtoa_r+0x648>)
 80069d0:	f006 020f 	and.w	r2, r6, #15
 80069d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069e0:	f7f9 fe2a 	bl	8000638 <__aeabi_dmul>
 80069e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069e8:	1136      	asrs	r6, r6, #4
 80069ea:	2300      	movs	r3, #0
 80069ec:	2502      	movs	r5, #2
 80069ee:	2e00      	cmp	r6, #0
 80069f0:	f040 8085 	bne.w	8006afe <_dtoa_r+0x4de>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1d2      	bne.n	800699e <_dtoa_r+0x37e>
 80069f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 808c 	beq.w	8006b18 <_dtoa_r+0x4f8>
 8006a00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a04:	4b99      	ldr	r3, [pc, #612]	; (8006c6c <_dtoa_r+0x64c>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	4630      	mov	r0, r6
 8006a0a:	4639      	mov	r1, r7
 8006a0c:	f7fa f886 	bl	8000b1c <__aeabi_dcmplt>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	f000 8081 	beq.w	8006b18 <_dtoa_r+0x4f8>
 8006a16:	9b01      	ldr	r3, [sp, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d07d      	beq.n	8006b18 <_dtoa_r+0x4f8>
 8006a1c:	f1b9 0f00 	cmp.w	r9, #0
 8006a20:	dd3c      	ble.n	8006a9c <_dtoa_r+0x47c>
 8006a22:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006a26:	9307      	str	r3, [sp, #28]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4b91      	ldr	r3, [pc, #580]	; (8006c70 <_dtoa_r+0x650>)
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	4639      	mov	r1, r7
 8006a30:	f7f9 fe02 	bl	8000638 <__aeabi_dmul>
 8006a34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a38:	3501      	adds	r5, #1
 8006a3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006a3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a42:	4628      	mov	r0, r5
 8006a44:	f7f9 fd8e 	bl	8000564 <__aeabi_i2d>
 8006a48:	4632      	mov	r2, r6
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	f7f9 fdf4 	bl	8000638 <__aeabi_dmul>
 8006a50:	4b88      	ldr	r3, [pc, #544]	; (8006c74 <_dtoa_r+0x654>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	f7f9 fc3a 	bl	80002cc <__adddf3>
 8006a58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a60:	9303      	str	r3, [sp, #12]
 8006a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d15c      	bne.n	8006b22 <_dtoa_r+0x502>
 8006a68:	4b83      	ldr	r3, [pc, #524]	; (8006c78 <_dtoa_r+0x658>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	4639      	mov	r1, r7
 8006a70:	f7f9 fc2a 	bl	80002c8 <__aeabi_dsub>
 8006a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a78:	4606      	mov	r6, r0
 8006a7a:	460f      	mov	r7, r1
 8006a7c:	f7fa f86c 	bl	8000b58 <__aeabi_dcmpgt>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	f040 8296 	bne.w	8006fb2 <_dtoa_r+0x992>
 8006a86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a90:	4639      	mov	r1, r7
 8006a92:	f7fa f843 	bl	8000b1c <__aeabi_dcmplt>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	f040 8288 	bne.w	8006fac <_dtoa_r+0x98c>
 8006a9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006aa0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006aa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f2c0 8158 	blt.w	8006d5c <_dtoa_r+0x73c>
 8006aac:	f1ba 0f0e 	cmp.w	sl, #14
 8006ab0:	f300 8154 	bgt.w	8006d5c <_dtoa_r+0x73c>
 8006ab4:	4b6b      	ldr	r3, [pc, #428]	; (8006c64 <_dtoa_r+0x644>)
 8006ab6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006aba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f280 80e3 	bge.w	8006c8c <_dtoa_r+0x66c>
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f300 80df 	bgt.w	8006c8c <_dtoa_r+0x66c>
 8006ace:	f040 826d 	bne.w	8006fac <_dtoa_r+0x98c>
 8006ad2:	4b69      	ldr	r3, [pc, #420]	; (8006c78 <_dtoa_r+0x658>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	4649      	mov	r1, r9
 8006ada:	f7f9 fdad 	bl	8000638 <__aeabi_dmul>
 8006ade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ae2:	f7fa f82f 	bl	8000b44 <__aeabi_dcmpge>
 8006ae6:	9e01      	ldr	r6, [sp, #4]
 8006ae8:	4637      	mov	r7, r6
 8006aea:	2800      	cmp	r0, #0
 8006aec:	f040 8243 	bne.w	8006f76 <_dtoa_r+0x956>
 8006af0:	9d00      	ldr	r5, [sp, #0]
 8006af2:	2331      	movs	r3, #49	; 0x31
 8006af4:	f805 3b01 	strb.w	r3, [r5], #1
 8006af8:	f10a 0a01 	add.w	sl, sl, #1
 8006afc:	e23f      	b.n	8006f7e <_dtoa_r+0x95e>
 8006afe:	07f2      	lsls	r2, r6, #31
 8006b00:	d505      	bpl.n	8006b0e <_dtoa_r+0x4ee>
 8006b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b06:	f7f9 fd97 	bl	8000638 <__aeabi_dmul>
 8006b0a:	3501      	adds	r5, #1
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	1076      	asrs	r6, r6, #1
 8006b10:	3708      	adds	r7, #8
 8006b12:	e76c      	b.n	80069ee <_dtoa_r+0x3ce>
 8006b14:	2502      	movs	r5, #2
 8006b16:	e76f      	b.n	80069f8 <_dtoa_r+0x3d8>
 8006b18:	9b01      	ldr	r3, [sp, #4]
 8006b1a:	f8cd a01c 	str.w	sl, [sp, #28]
 8006b1e:	930c      	str	r3, [sp, #48]	; 0x30
 8006b20:	e78d      	b.n	8006a3e <_dtoa_r+0x41e>
 8006b22:	9900      	ldr	r1, [sp, #0]
 8006b24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006b26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b28:	4b4e      	ldr	r3, [pc, #312]	; (8006c64 <_dtoa_r+0x644>)
 8006b2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b2e:	4401      	add	r1, r0
 8006b30:	9102      	str	r1, [sp, #8]
 8006b32:	9908      	ldr	r1, [sp, #32]
 8006b34:	eeb0 8a47 	vmov.f32	s16, s14
 8006b38:	eef0 8a67 	vmov.f32	s17, s15
 8006b3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b44:	2900      	cmp	r1, #0
 8006b46:	d045      	beq.n	8006bd4 <_dtoa_r+0x5b4>
 8006b48:	494c      	ldr	r1, [pc, #304]	; (8006c7c <_dtoa_r+0x65c>)
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	f7f9 fe9e 	bl	800088c <__aeabi_ddiv>
 8006b50:	ec53 2b18 	vmov	r2, r3, d8
 8006b54:	f7f9 fbb8 	bl	80002c8 <__aeabi_dsub>
 8006b58:	9d00      	ldr	r5, [sp, #0]
 8006b5a:	ec41 0b18 	vmov	d8, r0, r1
 8006b5e:	4639      	mov	r1, r7
 8006b60:	4630      	mov	r0, r6
 8006b62:	f7fa f819 	bl	8000b98 <__aeabi_d2iz>
 8006b66:	900c      	str	r0, [sp, #48]	; 0x30
 8006b68:	f7f9 fcfc 	bl	8000564 <__aeabi_i2d>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4630      	mov	r0, r6
 8006b72:	4639      	mov	r1, r7
 8006b74:	f7f9 fba8 	bl	80002c8 <__aeabi_dsub>
 8006b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b7a:	3330      	adds	r3, #48	; 0x30
 8006b7c:	f805 3b01 	strb.w	r3, [r5], #1
 8006b80:	ec53 2b18 	vmov	r2, r3, d8
 8006b84:	4606      	mov	r6, r0
 8006b86:	460f      	mov	r7, r1
 8006b88:	f7f9 ffc8 	bl	8000b1c <__aeabi_dcmplt>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d165      	bne.n	8006c5c <_dtoa_r+0x63c>
 8006b90:	4632      	mov	r2, r6
 8006b92:	463b      	mov	r3, r7
 8006b94:	4935      	ldr	r1, [pc, #212]	; (8006c6c <_dtoa_r+0x64c>)
 8006b96:	2000      	movs	r0, #0
 8006b98:	f7f9 fb96 	bl	80002c8 <__aeabi_dsub>
 8006b9c:	ec53 2b18 	vmov	r2, r3, d8
 8006ba0:	f7f9 ffbc 	bl	8000b1c <__aeabi_dcmplt>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	f040 80b9 	bne.w	8006d1c <_dtoa_r+0x6fc>
 8006baa:	9b02      	ldr	r3, [sp, #8]
 8006bac:	429d      	cmp	r5, r3
 8006bae:	f43f af75 	beq.w	8006a9c <_dtoa_r+0x47c>
 8006bb2:	4b2f      	ldr	r3, [pc, #188]	; (8006c70 <_dtoa_r+0x650>)
 8006bb4:	ec51 0b18 	vmov	r0, r1, d8
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f7f9 fd3d 	bl	8000638 <__aeabi_dmul>
 8006bbe:	4b2c      	ldr	r3, [pc, #176]	; (8006c70 <_dtoa_r+0x650>)
 8006bc0:	ec41 0b18 	vmov	d8, r0, r1
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	4639      	mov	r1, r7
 8006bca:	f7f9 fd35 	bl	8000638 <__aeabi_dmul>
 8006bce:	4606      	mov	r6, r0
 8006bd0:	460f      	mov	r7, r1
 8006bd2:	e7c4      	b.n	8006b5e <_dtoa_r+0x53e>
 8006bd4:	ec51 0b17 	vmov	r0, r1, d7
 8006bd8:	f7f9 fd2e 	bl	8000638 <__aeabi_dmul>
 8006bdc:	9b02      	ldr	r3, [sp, #8]
 8006bde:	9d00      	ldr	r5, [sp, #0]
 8006be0:	930c      	str	r3, [sp, #48]	; 0x30
 8006be2:	ec41 0b18 	vmov	d8, r0, r1
 8006be6:	4639      	mov	r1, r7
 8006be8:	4630      	mov	r0, r6
 8006bea:	f7f9 ffd5 	bl	8000b98 <__aeabi_d2iz>
 8006bee:	9011      	str	r0, [sp, #68]	; 0x44
 8006bf0:	f7f9 fcb8 	bl	8000564 <__aeabi_i2d>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	4639      	mov	r1, r7
 8006bfc:	f7f9 fb64 	bl	80002c8 <__aeabi_dsub>
 8006c00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c02:	3330      	adds	r3, #48	; 0x30
 8006c04:	f805 3b01 	strb.w	r3, [r5], #1
 8006c08:	9b02      	ldr	r3, [sp, #8]
 8006c0a:	429d      	cmp	r5, r3
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	460f      	mov	r7, r1
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	d134      	bne.n	8006c80 <_dtoa_r+0x660>
 8006c16:	4b19      	ldr	r3, [pc, #100]	; (8006c7c <_dtoa_r+0x65c>)
 8006c18:	ec51 0b18 	vmov	r0, r1, d8
 8006c1c:	f7f9 fb56 	bl	80002cc <__adddf3>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4630      	mov	r0, r6
 8006c26:	4639      	mov	r1, r7
 8006c28:	f7f9 ff96 	bl	8000b58 <__aeabi_dcmpgt>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d175      	bne.n	8006d1c <_dtoa_r+0x6fc>
 8006c30:	ec53 2b18 	vmov	r2, r3, d8
 8006c34:	4911      	ldr	r1, [pc, #68]	; (8006c7c <_dtoa_r+0x65c>)
 8006c36:	2000      	movs	r0, #0
 8006c38:	f7f9 fb46 	bl	80002c8 <__aeabi_dsub>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4630      	mov	r0, r6
 8006c42:	4639      	mov	r1, r7
 8006c44:	f7f9 ff6a 	bl	8000b1c <__aeabi_dcmplt>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	f43f af27 	beq.w	8006a9c <_dtoa_r+0x47c>
 8006c4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c50:	1e6b      	subs	r3, r5, #1
 8006c52:	930c      	str	r3, [sp, #48]	; 0x30
 8006c54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c58:	2b30      	cmp	r3, #48	; 0x30
 8006c5a:	d0f8      	beq.n	8006c4e <_dtoa_r+0x62e>
 8006c5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c60:	e04a      	b.n	8006cf8 <_dtoa_r+0x6d8>
 8006c62:	bf00      	nop
 8006c64:	08009a48 	.word	0x08009a48
 8006c68:	08009a20 	.word	0x08009a20
 8006c6c:	3ff00000 	.word	0x3ff00000
 8006c70:	40240000 	.word	0x40240000
 8006c74:	401c0000 	.word	0x401c0000
 8006c78:	40140000 	.word	0x40140000
 8006c7c:	3fe00000 	.word	0x3fe00000
 8006c80:	4baf      	ldr	r3, [pc, #700]	; (8006f40 <_dtoa_r+0x920>)
 8006c82:	f7f9 fcd9 	bl	8000638 <__aeabi_dmul>
 8006c86:	4606      	mov	r6, r0
 8006c88:	460f      	mov	r7, r1
 8006c8a:	e7ac      	b.n	8006be6 <_dtoa_r+0x5c6>
 8006c8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c90:	9d00      	ldr	r5, [sp, #0]
 8006c92:	4642      	mov	r2, r8
 8006c94:	464b      	mov	r3, r9
 8006c96:	4630      	mov	r0, r6
 8006c98:	4639      	mov	r1, r7
 8006c9a:	f7f9 fdf7 	bl	800088c <__aeabi_ddiv>
 8006c9e:	f7f9 ff7b 	bl	8000b98 <__aeabi_d2iz>
 8006ca2:	9002      	str	r0, [sp, #8]
 8006ca4:	f7f9 fc5e 	bl	8000564 <__aeabi_i2d>
 8006ca8:	4642      	mov	r2, r8
 8006caa:	464b      	mov	r3, r9
 8006cac:	f7f9 fcc4 	bl	8000638 <__aeabi_dmul>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	4639      	mov	r1, r7
 8006cb8:	f7f9 fb06 	bl	80002c8 <__aeabi_dsub>
 8006cbc:	9e02      	ldr	r6, [sp, #8]
 8006cbe:	9f01      	ldr	r7, [sp, #4]
 8006cc0:	3630      	adds	r6, #48	; 0x30
 8006cc2:	f805 6b01 	strb.w	r6, [r5], #1
 8006cc6:	9e00      	ldr	r6, [sp, #0]
 8006cc8:	1bae      	subs	r6, r5, r6
 8006cca:	42b7      	cmp	r7, r6
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	d137      	bne.n	8006d42 <_dtoa_r+0x722>
 8006cd2:	f7f9 fafb 	bl	80002cc <__adddf3>
 8006cd6:	4642      	mov	r2, r8
 8006cd8:	464b      	mov	r3, r9
 8006cda:	4606      	mov	r6, r0
 8006cdc:	460f      	mov	r7, r1
 8006cde:	f7f9 ff3b 	bl	8000b58 <__aeabi_dcmpgt>
 8006ce2:	b9c8      	cbnz	r0, 8006d18 <_dtoa_r+0x6f8>
 8006ce4:	4642      	mov	r2, r8
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	4630      	mov	r0, r6
 8006cea:	4639      	mov	r1, r7
 8006cec:	f7f9 ff0c 	bl	8000b08 <__aeabi_dcmpeq>
 8006cf0:	b110      	cbz	r0, 8006cf8 <_dtoa_r+0x6d8>
 8006cf2:	9b02      	ldr	r3, [sp, #8]
 8006cf4:	07d9      	lsls	r1, r3, #31
 8006cf6:	d40f      	bmi.n	8006d18 <_dtoa_r+0x6f8>
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	4659      	mov	r1, fp
 8006cfc:	f000 fe58 	bl	80079b0 <_Bfree>
 8006d00:	2300      	movs	r3, #0
 8006d02:	702b      	strb	r3, [r5, #0]
 8006d04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d06:	f10a 0001 	add.w	r0, sl, #1
 8006d0a:	6018      	str	r0, [r3, #0]
 8006d0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f43f acd8 	beq.w	80066c4 <_dtoa_r+0xa4>
 8006d14:	601d      	str	r5, [r3, #0]
 8006d16:	e4d5      	b.n	80066c4 <_dtoa_r+0xa4>
 8006d18:	f8cd a01c 	str.w	sl, [sp, #28]
 8006d1c:	462b      	mov	r3, r5
 8006d1e:	461d      	mov	r5, r3
 8006d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d24:	2a39      	cmp	r2, #57	; 0x39
 8006d26:	d108      	bne.n	8006d3a <_dtoa_r+0x71a>
 8006d28:	9a00      	ldr	r2, [sp, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d1f7      	bne.n	8006d1e <_dtoa_r+0x6fe>
 8006d2e:	9a07      	ldr	r2, [sp, #28]
 8006d30:	9900      	ldr	r1, [sp, #0]
 8006d32:	3201      	adds	r2, #1
 8006d34:	9207      	str	r2, [sp, #28]
 8006d36:	2230      	movs	r2, #48	; 0x30
 8006d38:	700a      	strb	r2, [r1, #0]
 8006d3a:	781a      	ldrb	r2, [r3, #0]
 8006d3c:	3201      	adds	r2, #1
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	e78c      	b.n	8006c5c <_dtoa_r+0x63c>
 8006d42:	4b7f      	ldr	r3, [pc, #508]	; (8006f40 <_dtoa_r+0x920>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	f7f9 fc77 	bl	8000638 <__aeabi_dmul>
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4606      	mov	r6, r0
 8006d50:	460f      	mov	r7, r1
 8006d52:	f7f9 fed9 	bl	8000b08 <__aeabi_dcmpeq>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d09b      	beq.n	8006c92 <_dtoa_r+0x672>
 8006d5a:	e7cd      	b.n	8006cf8 <_dtoa_r+0x6d8>
 8006d5c:	9a08      	ldr	r2, [sp, #32]
 8006d5e:	2a00      	cmp	r2, #0
 8006d60:	f000 80c4 	beq.w	8006eec <_dtoa_r+0x8cc>
 8006d64:	9a05      	ldr	r2, [sp, #20]
 8006d66:	2a01      	cmp	r2, #1
 8006d68:	f300 80a8 	bgt.w	8006ebc <_dtoa_r+0x89c>
 8006d6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d6e:	2a00      	cmp	r2, #0
 8006d70:	f000 80a0 	beq.w	8006eb4 <_dtoa_r+0x894>
 8006d74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d78:	9e06      	ldr	r6, [sp, #24]
 8006d7a:	4645      	mov	r5, r8
 8006d7c:	9a04      	ldr	r2, [sp, #16]
 8006d7e:	2101      	movs	r1, #1
 8006d80:	441a      	add	r2, r3
 8006d82:	4620      	mov	r0, r4
 8006d84:	4498      	add	r8, r3
 8006d86:	9204      	str	r2, [sp, #16]
 8006d88:	f000 ff18 	bl	8007bbc <__i2b>
 8006d8c:	4607      	mov	r7, r0
 8006d8e:	2d00      	cmp	r5, #0
 8006d90:	dd0b      	ble.n	8006daa <_dtoa_r+0x78a>
 8006d92:	9b04      	ldr	r3, [sp, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dd08      	ble.n	8006daa <_dtoa_r+0x78a>
 8006d98:	42ab      	cmp	r3, r5
 8006d9a:	9a04      	ldr	r2, [sp, #16]
 8006d9c:	bfa8      	it	ge
 8006d9e:	462b      	movge	r3, r5
 8006da0:	eba8 0803 	sub.w	r8, r8, r3
 8006da4:	1aed      	subs	r5, r5, r3
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	9304      	str	r3, [sp, #16]
 8006daa:	9b06      	ldr	r3, [sp, #24]
 8006dac:	b1fb      	cbz	r3, 8006dee <_dtoa_r+0x7ce>
 8006dae:	9b08      	ldr	r3, [sp, #32]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 809f 	beq.w	8006ef4 <_dtoa_r+0x8d4>
 8006db6:	2e00      	cmp	r6, #0
 8006db8:	dd11      	ble.n	8006dde <_dtoa_r+0x7be>
 8006dba:	4639      	mov	r1, r7
 8006dbc:	4632      	mov	r2, r6
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f000 ffb8 	bl	8007d34 <__pow5mult>
 8006dc4:	465a      	mov	r2, fp
 8006dc6:	4601      	mov	r1, r0
 8006dc8:	4607      	mov	r7, r0
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f000 ff0c 	bl	8007be8 <__multiply>
 8006dd0:	4659      	mov	r1, fp
 8006dd2:	9007      	str	r0, [sp, #28]
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 fdeb 	bl	80079b0 <_Bfree>
 8006dda:	9b07      	ldr	r3, [sp, #28]
 8006ddc:	469b      	mov	fp, r3
 8006dde:	9b06      	ldr	r3, [sp, #24]
 8006de0:	1b9a      	subs	r2, r3, r6
 8006de2:	d004      	beq.n	8006dee <_dtoa_r+0x7ce>
 8006de4:	4659      	mov	r1, fp
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 ffa4 	bl	8007d34 <__pow5mult>
 8006dec:	4683      	mov	fp, r0
 8006dee:	2101      	movs	r1, #1
 8006df0:	4620      	mov	r0, r4
 8006df2:	f000 fee3 	bl	8007bbc <__i2b>
 8006df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	4606      	mov	r6, r0
 8006dfc:	dd7c      	ble.n	8006ef8 <_dtoa_r+0x8d8>
 8006dfe:	461a      	mov	r2, r3
 8006e00:	4601      	mov	r1, r0
 8006e02:	4620      	mov	r0, r4
 8006e04:	f000 ff96 	bl	8007d34 <__pow5mult>
 8006e08:	9b05      	ldr	r3, [sp, #20]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	4606      	mov	r6, r0
 8006e0e:	dd76      	ble.n	8006efe <_dtoa_r+0x8de>
 8006e10:	2300      	movs	r3, #0
 8006e12:	9306      	str	r3, [sp, #24]
 8006e14:	6933      	ldr	r3, [r6, #16]
 8006e16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e1a:	6918      	ldr	r0, [r3, #16]
 8006e1c:	f000 fe7e 	bl	8007b1c <__hi0bits>
 8006e20:	f1c0 0020 	rsb	r0, r0, #32
 8006e24:	9b04      	ldr	r3, [sp, #16]
 8006e26:	4418      	add	r0, r3
 8006e28:	f010 001f 	ands.w	r0, r0, #31
 8006e2c:	f000 8086 	beq.w	8006f3c <_dtoa_r+0x91c>
 8006e30:	f1c0 0320 	rsb	r3, r0, #32
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	dd7f      	ble.n	8006f38 <_dtoa_r+0x918>
 8006e38:	f1c0 001c 	rsb	r0, r0, #28
 8006e3c:	9b04      	ldr	r3, [sp, #16]
 8006e3e:	4403      	add	r3, r0
 8006e40:	4480      	add	r8, r0
 8006e42:	4405      	add	r5, r0
 8006e44:	9304      	str	r3, [sp, #16]
 8006e46:	f1b8 0f00 	cmp.w	r8, #0
 8006e4a:	dd05      	ble.n	8006e58 <_dtoa_r+0x838>
 8006e4c:	4659      	mov	r1, fp
 8006e4e:	4642      	mov	r2, r8
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 ffc9 	bl	8007de8 <__lshift>
 8006e56:	4683      	mov	fp, r0
 8006e58:	9b04      	ldr	r3, [sp, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	dd05      	ble.n	8006e6a <_dtoa_r+0x84a>
 8006e5e:	4631      	mov	r1, r6
 8006e60:	461a      	mov	r2, r3
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 ffc0 	bl	8007de8 <__lshift>
 8006e68:	4606      	mov	r6, r0
 8006e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d069      	beq.n	8006f44 <_dtoa_r+0x924>
 8006e70:	4631      	mov	r1, r6
 8006e72:	4658      	mov	r0, fp
 8006e74:	f001 f824 	bl	8007ec0 <__mcmp>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	da63      	bge.n	8006f44 <_dtoa_r+0x924>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	4659      	mov	r1, fp
 8006e80:	220a      	movs	r2, #10
 8006e82:	4620      	mov	r0, r4
 8006e84:	f000 fdb6 	bl	80079f4 <__multadd>
 8006e88:	9b08      	ldr	r3, [sp, #32]
 8006e8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e8e:	4683      	mov	fp, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 818f 	beq.w	80071b4 <_dtoa_r+0xb94>
 8006e96:	4639      	mov	r1, r7
 8006e98:	2300      	movs	r3, #0
 8006e9a:	220a      	movs	r2, #10
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f000 fda9 	bl	80079f4 <__multadd>
 8006ea2:	f1b9 0f00 	cmp.w	r9, #0
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	f300 808e 	bgt.w	8006fc8 <_dtoa_r+0x9a8>
 8006eac:	9b05      	ldr	r3, [sp, #20]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	dc50      	bgt.n	8006f54 <_dtoa_r+0x934>
 8006eb2:	e089      	b.n	8006fc8 <_dtoa_r+0x9a8>
 8006eb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006eb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006eba:	e75d      	b.n	8006d78 <_dtoa_r+0x758>
 8006ebc:	9b01      	ldr	r3, [sp, #4]
 8006ebe:	1e5e      	subs	r6, r3, #1
 8006ec0:	9b06      	ldr	r3, [sp, #24]
 8006ec2:	42b3      	cmp	r3, r6
 8006ec4:	bfbf      	itttt	lt
 8006ec6:	9b06      	ldrlt	r3, [sp, #24]
 8006ec8:	9606      	strlt	r6, [sp, #24]
 8006eca:	1af2      	sublt	r2, r6, r3
 8006ecc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006ece:	bfb6      	itet	lt
 8006ed0:	189b      	addlt	r3, r3, r2
 8006ed2:	1b9e      	subge	r6, r3, r6
 8006ed4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006ed6:	9b01      	ldr	r3, [sp, #4]
 8006ed8:	bfb8      	it	lt
 8006eda:	2600      	movlt	r6, #0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	bfb5      	itete	lt
 8006ee0:	eba8 0503 	sublt.w	r5, r8, r3
 8006ee4:	9b01      	ldrge	r3, [sp, #4]
 8006ee6:	2300      	movlt	r3, #0
 8006ee8:	4645      	movge	r5, r8
 8006eea:	e747      	b.n	8006d7c <_dtoa_r+0x75c>
 8006eec:	9e06      	ldr	r6, [sp, #24]
 8006eee:	9f08      	ldr	r7, [sp, #32]
 8006ef0:	4645      	mov	r5, r8
 8006ef2:	e74c      	b.n	8006d8e <_dtoa_r+0x76e>
 8006ef4:	9a06      	ldr	r2, [sp, #24]
 8006ef6:	e775      	b.n	8006de4 <_dtoa_r+0x7c4>
 8006ef8:	9b05      	ldr	r3, [sp, #20]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	dc18      	bgt.n	8006f30 <_dtoa_r+0x910>
 8006efe:	9b02      	ldr	r3, [sp, #8]
 8006f00:	b9b3      	cbnz	r3, 8006f30 <_dtoa_r+0x910>
 8006f02:	9b03      	ldr	r3, [sp, #12]
 8006f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f08:	b9a3      	cbnz	r3, 8006f34 <_dtoa_r+0x914>
 8006f0a:	9b03      	ldr	r3, [sp, #12]
 8006f0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f10:	0d1b      	lsrs	r3, r3, #20
 8006f12:	051b      	lsls	r3, r3, #20
 8006f14:	b12b      	cbz	r3, 8006f22 <_dtoa_r+0x902>
 8006f16:	9b04      	ldr	r3, [sp, #16]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	9304      	str	r3, [sp, #16]
 8006f1c:	f108 0801 	add.w	r8, r8, #1
 8006f20:	2301      	movs	r3, #1
 8006f22:	9306      	str	r3, [sp, #24]
 8006f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f47f af74 	bne.w	8006e14 <_dtoa_r+0x7f4>
 8006f2c:	2001      	movs	r0, #1
 8006f2e:	e779      	b.n	8006e24 <_dtoa_r+0x804>
 8006f30:	2300      	movs	r3, #0
 8006f32:	e7f6      	b.n	8006f22 <_dtoa_r+0x902>
 8006f34:	9b02      	ldr	r3, [sp, #8]
 8006f36:	e7f4      	b.n	8006f22 <_dtoa_r+0x902>
 8006f38:	d085      	beq.n	8006e46 <_dtoa_r+0x826>
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	301c      	adds	r0, #28
 8006f3e:	e77d      	b.n	8006e3c <_dtoa_r+0x81c>
 8006f40:	40240000 	.word	0x40240000
 8006f44:	9b01      	ldr	r3, [sp, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	dc38      	bgt.n	8006fbc <_dtoa_r+0x99c>
 8006f4a:	9b05      	ldr	r3, [sp, #20]
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	dd35      	ble.n	8006fbc <_dtoa_r+0x99c>
 8006f50:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006f54:	f1b9 0f00 	cmp.w	r9, #0
 8006f58:	d10d      	bne.n	8006f76 <_dtoa_r+0x956>
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	464b      	mov	r3, r9
 8006f5e:	2205      	movs	r2, #5
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fd47 	bl	80079f4 <__multadd>
 8006f66:	4601      	mov	r1, r0
 8006f68:	4606      	mov	r6, r0
 8006f6a:	4658      	mov	r0, fp
 8006f6c:	f000 ffa8 	bl	8007ec0 <__mcmp>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	f73f adbd 	bgt.w	8006af0 <_dtoa_r+0x4d0>
 8006f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f78:	9d00      	ldr	r5, [sp, #0]
 8006f7a:	ea6f 0a03 	mvn.w	sl, r3
 8006f7e:	f04f 0800 	mov.w	r8, #0
 8006f82:	4631      	mov	r1, r6
 8006f84:	4620      	mov	r0, r4
 8006f86:	f000 fd13 	bl	80079b0 <_Bfree>
 8006f8a:	2f00      	cmp	r7, #0
 8006f8c:	f43f aeb4 	beq.w	8006cf8 <_dtoa_r+0x6d8>
 8006f90:	f1b8 0f00 	cmp.w	r8, #0
 8006f94:	d005      	beq.n	8006fa2 <_dtoa_r+0x982>
 8006f96:	45b8      	cmp	r8, r7
 8006f98:	d003      	beq.n	8006fa2 <_dtoa_r+0x982>
 8006f9a:	4641      	mov	r1, r8
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 fd07 	bl	80079b0 <_Bfree>
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f000 fd03 	bl	80079b0 <_Bfree>
 8006faa:	e6a5      	b.n	8006cf8 <_dtoa_r+0x6d8>
 8006fac:	2600      	movs	r6, #0
 8006fae:	4637      	mov	r7, r6
 8006fb0:	e7e1      	b.n	8006f76 <_dtoa_r+0x956>
 8006fb2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006fb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006fb8:	4637      	mov	r7, r6
 8006fba:	e599      	b.n	8006af0 <_dtoa_r+0x4d0>
 8006fbc:	9b08      	ldr	r3, [sp, #32]
 8006fbe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 80fd 	beq.w	80071c2 <_dtoa_r+0xba2>
 8006fc8:	2d00      	cmp	r5, #0
 8006fca:	dd05      	ble.n	8006fd8 <_dtoa_r+0x9b8>
 8006fcc:	4639      	mov	r1, r7
 8006fce:	462a      	mov	r2, r5
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 ff09 	bl	8007de8 <__lshift>
 8006fd6:	4607      	mov	r7, r0
 8006fd8:	9b06      	ldr	r3, [sp, #24]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d05c      	beq.n	8007098 <_dtoa_r+0xa78>
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 fca5 	bl	8007930 <_Balloc>
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	b928      	cbnz	r0, 8006ff6 <_dtoa_r+0x9d6>
 8006fea:	4b80      	ldr	r3, [pc, #512]	; (80071ec <_dtoa_r+0xbcc>)
 8006fec:	4602      	mov	r2, r0
 8006fee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ff2:	f7ff bb2e 	b.w	8006652 <_dtoa_r+0x32>
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	3202      	adds	r2, #2
 8006ffa:	0092      	lsls	r2, r2, #2
 8006ffc:	f107 010c 	add.w	r1, r7, #12
 8007000:	300c      	adds	r0, #12
 8007002:	f000 fc87 	bl	8007914 <memcpy>
 8007006:	2201      	movs	r2, #1
 8007008:	4629      	mov	r1, r5
 800700a:	4620      	mov	r0, r4
 800700c:	f000 feec 	bl	8007de8 <__lshift>
 8007010:	9b00      	ldr	r3, [sp, #0]
 8007012:	3301      	adds	r3, #1
 8007014:	9301      	str	r3, [sp, #4]
 8007016:	9b00      	ldr	r3, [sp, #0]
 8007018:	444b      	add	r3, r9
 800701a:	9307      	str	r3, [sp, #28]
 800701c:	9b02      	ldr	r3, [sp, #8]
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	46b8      	mov	r8, r7
 8007024:	9306      	str	r3, [sp, #24]
 8007026:	4607      	mov	r7, r0
 8007028:	9b01      	ldr	r3, [sp, #4]
 800702a:	4631      	mov	r1, r6
 800702c:	3b01      	subs	r3, #1
 800702e:	4658      	mov	r0, fp
 8007030:	9302      	str	r3, [sp, #8]
 8007032:	f7ff fa67 	bl	8006504 <quorem>
 8007036:	4603      	mov	r3, r0
 8007038:	3330      	adds	r3, #48	; 0x30
 800703a:	9004      	str	r0, [sp, #16]
 800703c:	4641      	mov	r1, r8
 800703e:	4658      	mov	r0, fp
 8007040:	9308      	str	r3, [sp, #32]
 8007042:	f000 ff3d 	bl	8007ec0 <__mcmp>
 8007046:	463a      	mov	r2, r7
 8007048:	4681      	mov	r9, r0
 800704a:	4631      	mov	r1, r6
 800704c:	4620      	mov	r0, r4
 800704e:	f000 ff53 	bl	8007ef8 <__mdiff>
 8007052:	68c2      	ldr	r2, [r0, #12]
 8007054:	9b08      	ldr	r3, [sp, #32]
 8007056:	4605      	mov	r5, r0
 8007058:	bb02      	cbnz	r2, 800709c <_dtoa_r+0xa7c>
 800705a:	4601      	mov	r1, r0
 800705c:	4658      	mov	r0, fp
 800705e:	f000 ff2f 	bl	8007ec0 <__mcmp>
 8007062:	9b08      	ldr	r3, [sp, #32]
 8007064:	4602      	mov	r2, r0
 8007066:	4629      	mov	r1, r5
 8007068:	4620      	mov	r0, r4
 800706a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800706e:	f000 fc9f 	bl	80079b0 <_Bfree>
 8007072:	9b05      	ldr	r3, [sp, #20]
 8007074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007076:	9d01      	ldr	r5, [sp, #4]
 8007078:	ea43 0102 	orr.w	r1, r3, r2
 800707c:	9b06      	ldr	r3, [sp, #24]
 800707e:	430b      	orrs	r3, r1
 8007080:	9b08      	ldr	r3, [sp, #32]
 8007082:	d10d      	bne.n	80070a0 <_dtoa_r+0xa80>
 8007084:	2b39      	cmp	r3, #57	; 0x39
 8007086:	d029      	beq.n	80070dc <_dtoa_r+0xabc>
 8007088:	f1b9 0f00 	cmp.w	r9, #0
 800708c:	dd01      	ble.n	8007092 <_dtoa_r+0xa72>
 800708e:	9b04      	ldr	r3, [sp, #16]
 8007090:	3331      	adds	r3, #49	; 0x31
 8007092:	9a02      	ldr	r2, [sp, #8]
 8007094:	7013      	strb	r3, [r2, #0]
 8007096:	e774      	b.n	8006f82 <_dtoa_r+0x962>
 8007098:	4638      	mov	r0, r7
 800709a:	e7b9      	b.n	8007010 <_dtoa_r+0x9f0>
 800709c:	2201      	movs	r2, #1
 800709e:	e7e2      	b.n	8007066 <_dtoa_r+0xa46>
 80070a0:	f1b9 0f00 	cmp.w	r9, #0
 80070a4:	db06      	blt.n	80070b4 <_dtoa_r+0xa94>
 80070a6:	9905      	ldr	r1, [sp, #20]
 80070a8:	ea41 0909 	orr.w	r9, r1, r9
 80070ac:	9906      	ldr	r1, [sp, #24]
 80070ae:	ea59 0101 	orrs.w	r1, r9, r1
 80070b2:	d120      	bne.n	80070f6 <_dtoa_r+0xad6>
 80070b4:	2a00      	cmp	r2, #0
 80070b6:	ddec      	ble.n	8007092 <_dtoa_r+0xa72>
 80070b8:	4659      	mov	r1, fp
 80070ba:	2201      	movs	r2, #1
 80070bc:	4620      	mov	r0, r4
 80070be:	9301      	str	r3, [sp, #4]
 80070c0:	f000 fe92 	bl	8007de8 <__lshift>
 80070c4:	4631      	mov	r1, r6
 80070c6:	4683      	mov	fp, r0
 80070c8:	f000 fefa 	bl	8007ec0 <__mcmp>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	9b01      	ldr	r3, [sp, #4]
 80070d0:	dc02      	bgt.n	80070d8 <_dtoa_r+0xab8>
 80070d2:	d1de      	bne.n	8007092 <_dtoa_r+0xa72>
 80070d4:	07da      	lsls	r2, r3, #31
 80070d6:	d5dc      	bpl.n	8007092 <_dtoa_r+0xa72>
 80070d8:	2b39      	cmp	r3, #57	; 0x39
 80070da:	d1d8      	bne.n	800708e <_dtoa_r+0xa6e>
 80070dc:	9a02      	ldr	r2, [sp, #8]
 80070de:	2339      	movs	r3, #57	; 0x39
 80070e0:	7013      	strb	r3, [r2, #0]
 80070e2:	462b      	mov	r3, r5
 80070e4:	461d      	mov	r5, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070ec:	2a39      	cmp	r2, #57	; 0x39
 80070ee:	d050      	beq.n	8007192 <_dtoa_r+0xb72>
 80070f0:	3201      	adds	r2, #1
 80070f2:	701a      	strb	r2, [r3, #0]
 80070f4:	e745      	b.n	8006f82 <_dtoa_r+0x962>
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	dd03      	ble.n	8007102 <_dtoa_r+0xae2>
 80070fa:	2b39      	cmp	r3, #57	; 0x39
 80070fc:	d0ee      	beq.n	80070dc <_dtoa_r+0xabc>
 80070fe:	3301      	adds	r3, #1
 8007100:	e7c7      	b.n	8007092 <_dtoa_r+0xa72>
 8007102:	9a01      	ldr	r2, [sp, #4]
 8007104:	9907      	ldr	r1, [sp, #28]
 8007106:	f802 3c01 	strb.w	r3, [r2, #-1]
 800710a:	428a      	cmp	r2, r1
 800710c:	d02a      	beq.n	8007164 <_dtoa_r+0xb44>
 800710e:	4659      	mov	r1, fp
 8007110:	2300      	movs	r3, #0
 8007112:	220a      	movs	r2, #10
 8007114:	4620      	mov	r0, r4
 8007116:	f000 fc6d 	bl	80079f4 <__multadd>
 800711a:	45b8      	cmp	r8, r7
 800711c:	4683      	mov	fp, r0
 800711e:	f04f 0300 	mov.w	r3, #0
 8007122:	f04f 020a 	mov.w	r2, #10
 8007126:	4641      	mov	r1, r8
 8007128:	4620      	mov	r0, r4
 800712a:	d107      	bne.n	800713c <_dtoa_r+0xb1c>
 800712c:	f000 fc62 	bl	80079f4 <__multadd>
 8007130:	4680      	mov	r8, r0
 8007132:	4607      	mov	r7, r0
 8007134:	9b01      	ldr	r3, [sp, #4]
 8007136:	3301      	adds	r3, #1
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	e775      	b.n	8007028 <_dtoa_r+0xa08>
 800713c:	f000 fc5a 	bl	80079f4 <__multadd>
 8007140:	4639      	mov	r1, r7
 8007142:	4680      	mov	r8, r0
 8007144:	2300      	movs	r3, #0
 8007146:	220a      	movs	r2, #10
 8007148:	4620      	mov	r0, r4
 800714a:	f000 fc53 	bl	80079f4 <__multadd>
 800714e:	4607      	mov	r7, r0
 8007150:	e7f0      	b.n	8007134 <_dtoa_r+0xb14>
 8007152:	f1b9 0f00 	cmp.w	r9, #0
 8007156:	9a00      	ldr	r2, [sp, #0]
 8007158:	bfcc      	ite	gt
 800715a:	464d      	movgt	r5, r9
 800715c:	2501      	movle	r5, #1
 800715e:	4415      	add	r5, r2
 8007160:	f04f 0800 	mov.w	r8, #0
 8007164:	4659      	mov	r1, fp
 8007166:	2201      	movs	r2, #1
 8007168:	4620      	mov	r0, r4
 800716a:	9301      	str	r3, [sp, #4]
 800716c:	f000 fe3c 	bl	8007de8 <__lshift>
 8007170:	4631      	mov	r1, r6
 8007172:	4683      	mov	fp, r0
 8007174:	f000 fea4 	bl	8007ec0 <__mcmp>
 8007178:	2800      	cmp	r0, #0
 800717a:	dcb2      	bgt.n	80070e2 <_dtoa_r+0xac2>
 800717c:	d102      	bne.n	8007184 <_dtoa_r+0xb64>
 800717e:	9b01      	ldr	r3, [sp, #4]
 8007180:	07db      	lsls	r3, r3, #31
 8007182:	d4ae      	bmi.n	80070e2 <_dtoa_r+0xac2>
 8007184:	462b      	mov	r3, r5
 8007186:	461d      	mov	r5, r3
 8007188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800718c:	2a30      	cmp	r2, #48	; 0x30
 800718e:	d0fa      	beq.n	8007186 <_dtoa_r+0xb66>
 8007190:	e6f7      	b.n	8006f82 <_dtoa_r+0x962>
 8007192:	9a00      	ldr	r2, [sp, #0]
 8007194:	429a      	cmp	r2, r3
 8007196:	d1a5      	bne.n	80070e4 <_dtoa_r+0xac4>
 8007198:	f10a 0a01 	add.w	sl, sl, #1
 800719c:	2331      	movs	r3, #49	; 0x31
 800719e:	e779      	b.n	8007094 <_dtoa_r+0xa74>
 80071a0:	4b13      	ldr	r3, [pc, #76]	; (80071f0 <_dtoa_r+0xbd0>)
 80071a2:	f7ff baaf 	b.w	8006704 <_dtoa_r+0xe4>
 80071a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f47f aa86 	bne.w	80066ba <_dtoa_r+0x9a>
 80071ae:	4b11      	ldr	r3, [pc, #68]	; (80071f4 <_dtoa_r+0xbd4>)
 80071b0:	f7ff baa8 	b.w	8006704 <_dtoa_r+0xe4>
 80071b4:	f1b9 0f00 	cmp.w	r9, #0
 80071b8:	dc03      	bgt.n	80071c2 <_dtoa_r+0xba2>
 80071ba:	9b05      	ldr	r3, [sp, #20]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	f73f aec9 	bgt.w	8006f54 <_dtoa_r+0x934>
 80071c2:	9d00      	ldr	r5, [sp, #0]
 80071c4:	4631      	mov	r1, r6
 80071c6:	4658      	mov	r0, fp
 80071c8:	f7ff f99c 	bl	8006504 <quorem>
 80071cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80071d0:	f805 3b01 	strb.w	r3, [r5], #1
 80071d4:	9a00      	ldr	r2, [sp, #0]
 80071d6:	1aaa      	subs	r2, r5, r2
 80071d8:	4591      	cmp	r9, r2
 80071da:	ddba      	ble.n	8007152 <_dtoa_r+0xb32>
 80071dc:	4659      	mov	r1, fp
 80071de:	2300      	movs	r3, #0
 80071e0:	220a      	movs	r2, #10
 80071e2:	4620      	mov	r0, r4
 80071e4:	f000 fc06 	bl	80079f4 <__multadd>
 80071e8:	4683      	mov	fp, r0
 80071ea:	e7eb      	b.n	80071c4 <_dtoa_r+0xba4>
 80071ec:	0800992c 	.word	0x0800992c
 80071f0:	0800972c 	.word	0x0800972c
 80071f4:	080098a9 	.word	0x080098a9

080071f8 <rshift>:
 80071f8:	6903      	ldr	r3, [r0, #16]
 80071fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80071fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007202:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007206:	f100 0414 	add.w	r4, r0, #20
 800720a:	dd45      	ble.n	8007298 <rshift+0xa0>
 800720c:	f011 011f 	ands.w	r1, r1, #31
 8007210:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007214:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007218:	d10c      	bne.n	8007234 <rshift+0x3c>
 800721a:	f100 0710 	add.w	r7, r0, #16
 800721e:	4629      	mov	r1, r5
 8007220:	42b1      	cmp	r1, r6
 8007222:	d334      	bcc.n	800728e <rshift+0x96>
 8007224:	1a9b      	subs	r3, r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	1eea      	subs	r2, r5, #3
 800722a:	4296      	cmp	r6, r2
 800722c:	bf38      	it	cc
 800722e:	2300      	movcc	r3, #0
 8007230:	4423      	add	r3, r4
 8007232:	e015      	b.n	8007260 <rshift+0x68>
 8007234:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007238:	f1c1 0820 	rsb	r8, r1, #32
 800723c:	40cf      	lsrs	r7, r1
 800723e:	f105 0e04 	add.w	lr, r5, #4
 8007242:	46a1      	mov	r9, r4
 8007244:	4576      	cmp	r6, lr
 8007246:	46f4      	mov	ip, lr
 8007248:	d815      	bhi.n	8007276 <rshift+0x7e>
 800724a:	1a9b      	subs	r3, r3, r2
 800724c:	009a      	lsls	r2, r3, #2
 800724e:	3a04      	subs	r2, #4
 8007250:	3501      	adds	r5, #1
 8007252:	42ae      	cmp	r6, r5
 8007254:	bf38      	it	cc
 8007256:	2200      	movcc	r2, #0
 8007258:	18a3      	adds	r3, r4, r2
 800725a:	50a7      	str	r7, [r4, r2]
 800725c:	b107      	cbz	r7, 8007260 <rshift+0x68>
 800725e:	3304      	adds	r3, #4
 8007260:	1b1a      	subs	r2, r3, r4
 8007262:	42a3      	cmp	r3, r4
 8007264:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007268:	bf08      	it	eq
 800726a:	2300      	moveq	r3, #0
 800726c:	6102      	str	r2, [r0, #16]
 800726e:	bf08      	it	eq
 8007270:	6143      	streq	r3, [r0, #20]
 8007272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007276:	f8dc c000 	ldr.w	ip, [ip]
 800727a:	fa0c fc08 	lsl.w	ip, ip, r8
 800727e:	ea4c 0707 	orr.w	r7, ip, r7
 8007282:	f849 7b04 	str.w	r7, [r9], #4
 8007286:	f85e 7b04 	ldr.w	r7, [lr], #4
 800728a:	40cf      	lsrs	r7, r1
 800728c:	e7da      	b.n	8007244 <rshift+0x4c>
 800728e:	f851 cb04 	ldr.w	ip, [r1], #4
 8007292:	f847 cf04 	str.w	ip, [r7, #4]!
 8007296:	e7c3      	b.n	8007220 <rshift+0x28>
 8007298:	4623      	mov	r3, r4
 800729a:	e7e1      	b.n	8007260 <rshift+0x68>

0800729c <__hexdig_fun>:
 800729c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80072a0:	2b09      	cmp	r3, #9
 80072a2:	d802      	bhi.n	80072aa <__hexdig_fun+0xe>
 80072a4:	3820      	subs	r0, #32
 80072a6:	b2c0      	uxtb	r0, r0
 80072a8:	4770      	bx	lr
 80072aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80072ae:	2b05      	cmp	r3, #5
 80072b0:	d801      	bhi.n	80072b6 <__hexdig_fun+0x1a>
 80072b2:	3847      	subs	r0, #71	; 0x47
 80072b4:	e7f7      	b.n	80072a6 <__hexdig_fun+0xa>
 80072b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80072ba:	2b05      	cmp	r3, #5
 80072bc:	d801      	bhi.n	80072c2 <__hexdig_fun+0x26>
 80072be:	3827      	subs	r0, #39	; 0x27
 80072c0:	e7f1      	b.n	80072a6 <__hexdig_fun+0xa>
 80072c2:	2000      	movs	r0, #0
 80072c4:	4770      	bx	lr
	...

080072c8 <__gethex>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	ed2d 8b02 	vpush	{d8}
 80072d0:	b089      	sub	sp, #36	; 0x24
 80072d2:	ee08 0a10 	vmov	s16, r0
 80072d6:	9304      	str	r3, [sp, #16]
 80072d8:	4bbc      	ldr	r3, [pc, #752]	; (80075cc <__gethex+0x304>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	9301      	str	r3, [sp, #4]
 80072de:	4618      	mov	r0, r3
 80072e0:	468b      	mov	fp, r1
 80072e2:	4690      	mov	r8, r2
 80072e4:	f7f8 ff94 	bl	8000210 <strlen>
 80072e8:	9b01      	ldr	r3, [sp, #4]
 80072ea:	f8db 2000 	ldr.w	r2, [fp]
 80072ee:	4403      	add	r3, r0
 80072f0:	4682      	mov	sl, r0
 80072f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80072f6:	9305      	str	r3, [sp, #20]
 80072f8:	1c93      	adds	r3, r2, #2
 80072fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80072fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007302:	32fe      	adds	r2, #254	; 0xfe
 8007304:	18d1      	adds	r1, r2, r3
 8007306:	461f      	mov	r7, r3
 8007308:	f813 0b01 	ldrb.w	r0, [r3], #1
 800730c:	9100      	str	r1, [sp, #0]
 800730e:	2830      	cmp	r0, #48	; 0x30
 8007310:	d0f8      	beq.n	8007304 <__gethex+0x3c>
 8007312:	f7ff ffc3 	bl	800729c <__hexdig_fun>
 8007316:	4604      	mov	r4, r0
 8007318:	2800      	cmp	r0, #0
 800731a:	d13a      	bne.n	8007392 <__gethex+0xca>
 800731c:	9901      	ldr	r1, [sp, #4]
 800731e:	4652      	mov	r2, sl
 8007320:	4638      	mov	r0, r7
 8007322:	f001 f9ed 	bl	8008700 <strncmp>
 8007326:	4605      	mov	r5, r0
 8007328:	2800      	cmp	r0, #0
 800732a:	d168      	bne.n	80073fe <__gethex+0x136>
 800732c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007330:	eb07 060a 	add.w	r6, r7, sl
 8007334:	f7ff ffb2 	bl	800729c <__hexdig_fun>
 8007338:	2800      	cmp	r0, #0
 800733a:	d062      	beq.n	8007402 <__gethex+0x13a>
 800733c:	4633      	mov	r3, r6
 800733e:	7818      	ldrb	r0, [r3, #0]
 8007340:	2830      	cmp	r0, #48	; 0x30
 8007342:	461f      	mov	r7, r3
 8007344:	f103 0301 	add.w	r3, r3, #1
 8007348:	d0f9      	beq.n	800733e <__gethex+0x76>
 800734a:	f7ff ffa7 	bl	800729c <__hexdig_fun>
 800734e:	2301      	movs	r3, #1
 8007350:	fab0 f480 	clz	r4, r0
 8007354:	0964      	lsrs	r4, r4, #5
 8007356:	4635      	mov	r5, r6
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	463a      	mov	r2, r7
 800735c:	4616      	mov	r6, r2
 800735e:	3201      	adds	r2, #1
 8007360:	7830      	ldrb	r0, [r6, #0]
 8007362:	f7ff ff9b 	bl	800729c <__hexdig_fun>
 8007366:	2800      	cmp	r0, #0
 8007368:	d1f8      	bne.n	800735c <__gethex+0x94>
 800736a:	9901      	ldr	r1, [sp, #4]
 800736c:	4652      	mov	r2, sl
 800736e:	4630      	mov	r0, r6
 8007370:	f001 f9c6 	bl	8008700 <strncmp>
 8007374:	b980      	cbnz	r0, 8007398 <__gethex+0xd0>
 8007376:	b94d      	cbnz	r5, 800738c <__gethex+0xc4>
 8007378:	eb06 050a 	add.w	r5, r6, sl
 800737c:	462a      	mov	r2, r5
 800737e:	4616      	mov	r6, r2
 8007380:	3201      	adds	r2, #1
 8007382:	7830      	ldrb	r0, [r6, #0]
 8007384:	f7ff ff8a 	bl	800729c <__hexdig_fun>
 8007388:	2800      	cmp	r0, #0
 800738a:	d1f8      	bne.n	800737e <__gethex+0xb6>
 800738c:	1bad      	subs	r5, r5, r6
 800738e:	00ad      	lsls	r5, r5, #2
 8007390:	e004      	b.n	800739c <__gethex+0xd4>
 8007392:	2400      	movs	r4, #0
 8007394:	4625      	mov	r5, r4
 8007396:	e7e0      	b.n	800735a <__gethex+0x92>
 8007398:	2d00      	cmp	r5, #0
 800739a:	d1f7      	bne.n	800738c <__gethex+0xc4>
 800739c:	7833      	ldrb	r3, [r6, #0]
 800739e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80073a2:	2b50      	cmp	r3, #80	; 0x50
 80073a4:	d13b      	bne.n	800741e <__gethex+0x156>
 80073a6:	7873      	ldrb	r3, [r6, #1]
 80073a8:	2b2b      	cmp	r3, #43	; 0x2b
 80073aa:	d02c      	beq.n	8007406 <__gethex+0x13e>
 80073ac:	2b2d      	cmp	r3, #45	; 0x2d
 80073ae:	d02e      	beq.n	800740e <__gethex+0x146>
 80073b0:	1c71      	adds	r1, r6, #1
 80073b2:	f04f 0900 	mov.w	r9, #0
 80073b6:	7808      	ldrb	r0, [r1, #0]
 80073b8:	f7ff ff70 	bl	800729c <__hexdig_fun>
 80073bc:	1e43      	subs	r3, r0, #1
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b18      	cmp	r3, #24
 80073c2:	d82c      	bhi.n	800741e <__gethex+0x156>
 80073c4:	f1a0 0210 	sub.w	r2, r0, #16
 80073c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80073cc:	f7ff ff66 	bl	800729c <__hexdig_fun>
 80073d0:	1e43      	subs	r3, r0, #1
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b18      	cmp	r3, #24
 80073d6:	d91d      	bls.n	8007414 <__gethex+0x14c>
 80073d8:	f1b9 0f00 	cmp.w	r9, #0
 80073dc:	d000      	beq.n	80073e0 <__gethex+0x118>
 80073de:	4252      	negs	r2, r2
 80073e0:	4415      	add	r5, r2
 80073e2:	f8cb 1000 	str.w	r1, [fp]
 80073e6:	b1e4      	cbz	r4, 8007422 <__gethex+0x15a>
 80073e8:	9b00      	ldr	r3, [sp, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bf14      	ite	ne
 80073ee:	2700      	movne	r7, #0
 80073f0:	2706      	moveq	r7, #6
 80073f2:	4638      	mov	r0, r7
 80073f4:	b009      	add	sp, #36	; 0x24
 80073f6:	ecbd 8b02 	vpop	{d8}
 80073fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fe:	463e      	mov	r6, r7
 8007400:	4625      	mov	r5, r4
 8007402:	2401      	movs	r4, #1
 8007404:	e7ca      	b.n	800739c <__gethex+0xd4>
 8007406:	f04f 0900 	mov.w	r9, #0
 800740a:	1cb1      	adds	r1, r6, #2
 800740c:	e7d3      	b.n	80073b6 <__gethex+0xee>
 800740e:	f04f 0901 	mov.w	r9, #1
 8007412:	e7fa      	b.n	800740a <__gethex+0x142>
 8007414:	230a      	movs	r3, #10
 8007416:	fb03 0202 	mla	r2, r3, r2, r0
 800741a:	3a10      	subs	r2, #16
 800741c:	e7d4      	b.n	80073c8 <__gethex+0x100>
 800741e:	4631      	mov	r1, r6
 8007420:	e7df      	b.n	80073e2 <__gethex+0x11a>
 8007422:	1bf3      	subs	r3, r6, r7
 8007424:	3b01      	subs	r3, #1
 8007426:	4621      	mov	r1, r4
 8007428:	2b07      	cmp	r3, #7
 800742a:	dc0b      	bgt.n	8007444 <__gethex+0x17c>
 800742c:	ee18 0a10 	vmov	r0, s16
 8007430:	f000 fa7e 	bl	8007930 <_Balloc>
 8007434:	4604      	mov	r4, r0
 8007436:	b940      	cbnz	r0, 800744a <__gethex+0x182>
 8007438:	4b65      	ldr	r3, [pc, #404]	; (80075d0 <__gethex+0x308>)
 800743a:	4602      	mov	r2, r0
 800743c:	21de      	movs	r1, #222	; 0xde
 800743e:	4865      	ldr	r0, [pc, #404]	; (80075d4 <__gethex+0x30c>)
 8007440:	f001 f97e 	bl	8008740 <__assert_func>
 8007444:	3101      	adds	r1, #1
 8007446:	105b      	asrs	r3, r3, #1
 8007448:	e7ee      	b.n	8007428 <__gethex+0x160>
 800744a:	f100 0914 	add.w	r9, r0, #20
 800744e:	f04f 0b00 	mov.w	fp, #0
 8007452:	f1ca 0301 	rsb	r3, sl, #1
 8007456:	f8cd 9008 	str.w	r9, [sp, #8]
 800745a:	f8cd b000 	str.w	fp, [sp]
 800745e:	9306      	str	r3, [sp, #24]
 8007460:	42b7      	cmp	r7, r6
 8007462:	d340      	bcc.n	80074e6 <__gethex+0x21e>
 8007464:	9802      	ldr	r0, [sp, #8]
 8007466:	9b00      	ldr	r3, [sp, #0]
 8007468:	f840 3b04 	str.w	r3, [r0], #4
 800746c:	eba0 0009 	sub.w	r0, r0, r9
 8007470:	1080      	asrs	r0, r0, #2
 8007472:	0146      	lsls	r6, r0, #5
 8007474:	6120      	str	r0, [r4, #16]
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fb50 	bl	8007b1c <__hi0bits>
 800747c:	1a30      	subs	r0, r6, r0
 800747e:	f8d8 6000 	ldr.w	r6, [r8]
 8007482:	42b0      	cmp	r0, r6
 8007484:	dd63      	ble.n	800754e <__gethex+0x286>
 8007486:	1b87      	subs	r7, r0, r6
 8007488:	4639      	mov	r1, r7
 800748a:	4620      	mov	r0, r4
 800748c:	f000 feea 	bl	8008264 <__any_on>
 8007490:	4682      	mov	sl, r0
 8007492:	b1a8      	cbz	r0, 80074c0 <__gethex+0x1f8>
 8007494:	1e7b      	subs	r3, r7, #1
 8007496:	1159      	asrs	r1, r3, #5
 8007498:	f003 021f 	and.w	r2, r3, #31
 800749c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80074a0:	f04f 0a01 	mov.w	sl, #1
 80074a4:	fa0a f202 	lsl.w	r2, sl, r2
 80074a8:	420a      	tst	r2, r1
 80074aa:	d009      	beq.n	80074c0 <__gethex+0x1f8>
 80074ac:	4553      	cmp	r3, sl
 80074ae:	dd05      	ble.n	80074bc <__gethex+0x1f4>
 80074b0:	1eb9      	subs	r1, r7, #2
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 fed6 	bl	8008264 <__any_on>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d145      	bne.n	8007548 <__gethex+0x280>
 80074bc:	f04f 0a02 	mov.w	sl, #2
 80074c0:	4639      	mov	r1, r7
 80074c2:	4620      	mov	r0, r4
 80074c4:	f7ff fe98 	bl	80071f8 <rshift>
 80074c8:	443d      	add	r5, r7
 80074ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074ce:	42ab      	cmp	r3, r5
 80074d0:	da4c      	bge.n	800756c <__gethex+0x2a4>
 80074d2:	ee18 0a10 	vmov	r0, s16
 80074d6:	4621      	mov	r1, r4
 80074d8:	f000 fa6a 	bl	80079b0 <_Bfree>
 80074dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074de:	2300      	movs	r3, #0
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	27a3      	movs	r7, #163	; 0xa3
 80074e4:	e785      	b.n	80073f2 <__gethex+0x12a>
 80074e6:	1e73      	subs	r3, r6, #1
 80074e8:	9a05      	ldr	r2, [sp, #20]
 80074ea:	9303      	str	r3, [sp, #12]
 80074ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d019      	beq.n	8007528 <__gethex+0x260>
 80074f4:	f1bb 0f20 	cmp.w	fp, #32
 80074f8:	d107      	bne.n	800750a <__gethex+0x242>
 80074fa:	9b02      	ldr	r3, [sp, #8]
 80074fc:	9a00      	ldr	r2, [sp, #0]
 80074fe:	f843 2b04 	str.w	r2, [r3], #4
 8007502:	9302      	str	r3, [sp, #8]
 8007504:	2300      	movs	r3, #0
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	469b      	mov	fp, r3
 800750a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800750e:	f7ff fec5 	bl	800729c <__hexdig_fun>
 8007512:	9b00      	ldr	r3, [sp, #0]
 8007514:	f000 000f 	and.w	r0, r0, #15
 8007518:	fa00 f00b 	lsl.w	r0, r0, fp
 800751c:	4303      	orrs	r3, r0
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	f10b 0b04 	add.w	fp, fp, #4
 8007524:	9b03      	ldr	r3, [sp, #12]
 8007526:	e00d      	b.n	8007544 <__gethex+0x27c>
 8007528:	9b03      	ldr	r3, [sp, #12]
 800752a:	9a06      	ldr	r2, [sp, #24]
 800752c:	4413      	add	r3, r2
 800752e:	42bb      	cmp	r3, r7
 8007530:	d3e0      	bcc.n	80074f4 <__gethex+0x22c>
 8007532:	4618      	mov	r0, r3
 8007534:	9901      	ldr	r1, [sp, #4]
 8007536:	9307      	str	r3, [sp, #28]
 8007538:	4652      	mov	r2, sl
 800753a:	f001 f8e1 	bl	8008700 <strncmp>
 800753e:	9b07      	ldr	r3, [sp, #28]
 8007540:	2800      	cmp	r0, #0
 8007542:	d1d7      	bne.n	80074f4 <__gethex+0x22c>
 8007544:	461e      	mov	r6, r3
 8007546:	e78b      	b.n	8007460 <__gethex+0x198>
 8007548:	f04f 0a03 	mov.w	sl, #3
 800754c:	e7b8      	b.n	80074c0 <__gethex+0x1f8>
 800754e:	da0a      	bge.n	8007566 <__gethex+0x29e>
 8007550:	1a37      	subs	r7, r6, r0
 8007552:	4621      	mov	r1, r4
 8007554:	ee18 0a10 	vmov	r0, s16
 8007558:	463a      	mov	r2, r7
 800755a:	f000 fc45 	bl	8007de8 <__lshift>
 800755e:	1bed      	subs	r5, r5, r7
 8007560:	4604      	mov	r4, r0
 8007562:	f100 0914 	add.w	r9, r0, #20
 8007566:	f04f 0a00 	mov.w	sl, #0
 800756a:	e7ae      	b.n	80074ca <__gethex+0x202>
 800756c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007570:	42a8      	cmp	r0, r5
 8007572:	dd72      	ble.n	800765a <__gethex+0x392>
 8007574:	1b45      	subs	r5, r0, r5
 8007576:	42ae      	cmp	r6, r5
 8007578:	dc36      	bgt.n	80075e8 <__gethex+0x320>
 800757a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d02a      	beq.n	80075d8 <__gethex+0x310>
 8007582:	2b03      	cmp	r3, #3
 8007584:	d02c      	beq.n	80075e0 <__gethex+0x318>
 8007586:	2b01      	cmp	r3, #1
 8007588:	d115      	bne.n	80075b6 <__gethex+0x2ee>
 800758a:	42ae      	cmp	r6, r5
 800758c:	d113      	bne.n	80075b6 <__gethex+0x2ee>
 800758e:	2e01      	cmp	r6, #1
 8007590:	d10b      	bne.n	80075aa <__gethex+0x2e2>
 8007592:	9a04      	ldr	r2, [sp, #16]
 8007594:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	2301      	movs	r3, #1
 800759c:	6123      	str	r3, [r4, #16]
 800759e:	f8c9 3000 	str.w	r3, [r9]
 80075a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075a4:	2762      	movs	r7, #98	; 0x62
 80075a6:	601c      	str	r4, [r3, #0]
 80075a8:	e723      	b.n	80073f2 <__gethex+0x12a>
 80075aa:	1e71      	subs	r1, r6, #1
 80075ac:	4620      	mov	r0, r4
 80075ae:	f000 fe59 	bl	8008264 <__any_on>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d1ed      	bne.n	8007592 <__gethex+0x2ca>
 80075b6:	ee18 0a10 	vmov	r0, s16
 80075ba:	4621      	mov	r1, r4
 80075bc:	f000 f9f8 	bl	80079b0 <_Bfree>
 80075c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075c2:	2300      	movs	r3, #0
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	2750      	movs	r7, #80	; 0x50
 80075c8:	e713      	b.n	80073f2 <__gethex+0x12a>
 80075ca:	bf00      	nop
 80075cc:	080099a8 	.word	0x080099a8
 80075d0:	0800992c 	.word	0x0800992c
 80075d4:	0800993d 	.word	0x0800993d
 80075d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1eb      	bne.n	80075b6 <__gethex+0x2ee>
 80075de:	e7d8      	b.n	8007592 <__gethex+0x2ca>
 80075e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1d5      	bne.n	8007592 <__gethex+0x2ca>
 80075e6:	e7e6      	b.n	80075b6 <__gethex+0x2ee>
 80075e8:	1e6f      	subs	r7, r5, #1
 80075ea:	f1ba 0f00 	cmp.w	sl, #0
 80075ee:	d131      	bne.n	8007654 <__gethex+0x38c>
 80075f0:	b127      	cbz	r7, 80075fc <__gethex+0x334>
 80075f2:	4639      	mov	r1, r7
 80075f4:	4620      	mov	r0, r4
 80075f6:	f000 fe35 	bl	8008264 <__any_on>
 80075fa:	4682      	mov	sl, r0
 80075fc:	117b      	asrs	r3, r7, #5
 80075fe:	2101      	movs	r1, #1
 8007600:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007604:	f007 071f 	and.w	r7, r7, #31
 8007608:	fa01 f707 	lsl.w	r7, r1, r7
 800760c:	421f      	tst	r7, r3
 800760e:	4629      	mov	r1, r5
 8007610:	4620      	mov	r0, r4
 8007612:	bf18      	it	ne
 8007614:	f04a 0a02 	orrne.w	sl, sl, #2
 8007618:	1b76      	subs	r6, r6, r5
 800761a:	f7ff fded 	bl	80071f8 <rshift>
 800761e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007622:	2702      	movs	r7, #2
 8007624:	f1ba 0f00 	cmp.w	sl, #0
 8007628:	d048      	beq.n	80076bc <__gethex+0x3f4>
 800762a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d015      	beq.n	800765e <__gethex+0x396>
 8007632:	2b03      	cmp	r3, #3
 8007634:	d017      	beq.n	8007666 <__gethex+0x39e>
 8007636:	2b01      	cmp	r3, #1
 8007638:	d109      	bne.n	800764e <__gethex+0x386>
 800763a:	f01a 0f02 	tst.w	sl, #2
 800763e:	d006      	beq.n	800764e <__gethex+0x386>
 8007640:	f8d9 0000 	ldr.w	r0, [r9]
 8007644:	ea4a 0a00 	orr.w	sl, sl, r0
 8007648:	f01a 0f01 	tst.w	sl, #1
 800764c:	d10e      	bne.n	800766c <__gethex+0x3a4>
 800764e:	f047 0710 	orr.w	r7, r7, #16
 8007652:	e033      	b.n	80076bc <__gethex+0x3f4>
 8007654:	f04f 0a01 	mov.w	sl, #1
 8007658:	e7d0      	b.n	80075fc <__gethex+0x334>
 800765a:	2701      	movs	r7, #1
 800765c:	e7e2      	b.n	8007624 <__gethex+0x35c>
 800765e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007660:	f1c3 0301 	rsb	r3, r3, #1
 8007664:	9315      	str	r3, [sp, #84]	; 0x54
 8007666:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007668:	2b00      	cmp	r3, #0
 800766a:	d0f0      	beq.n	800764e <__gethex+0x386>
 800766c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007670:	f104 0314 	add.w	r3, r4, #20
 8007674:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007678:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800767c:	f04f 0c00 	mov.w	ip, #0
 8007680:	4618      	mov	r0, r3
 8007682:	f853 2b04 	ldr.w	r2, [r3], #4
 8007686:	f1b2 3fff 	cmp.w	r2, #4294967295
 800768a:	d01c      	beq.n	80076c6 <__gethex+0x3fe>
 800768c:	3201      	adds	r2, #1
 800768e:	6002      	str	r2, [r0, #0]
 8007690:	2f02      	cmp	r7, #2
 8007692:	f104 0314 	add.w	r3, r4, #20
 8007696:	d13f      	bne.n	8007718 <__gethex+0x450>
 8007698:	f8d8 2000 	ldr.w	r2, [r8]
 800769c:	3a01      	subs	r2, #1
 800769e:	42b2      	cmp	r2, r6
 80076a0:	d10a      	bne.n	80076b8 <__gethex+0x3f0>
 80076a2:	1171      	asrs	r1, r6, #5
 80076a4:	2201      	movs	r2, #1
 80076a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076aa:	f006 061f 	and.w	r6, r6, #31
 80076ae:	fa02 f606 	lsl.w	r6, r2, r6
 80076b2:	421e      	tst	r6, r3
 80076b4:	bf18      	it	ne
 80076b6:	4617      	movne	r7, r2
 80076b8:	f047 0720 	orr.w	r7, r7, #32
 80076bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076be:	601c      	str	r4, [r3, #0]
 80076c0:	9b04      	ldr	r3, [sp, #16]
 80076c2:	601d      	str	r5, [r3, #0]
 80076c4:	e695      	b.n	80073f2 <__gethex+0x12a>
 80076c6:	4299      	cmp	r1, r3
 80076c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80076cc:	d8d8      	bhi.n	8007680 <__gethex+0x3b8>
 80076ce:	68a3      	ldr	r3, [r4, #8]
 80076d0:	459b      	cmp	fp, r3
 80076d2:	db19      	blt.n	8007708 <__gethex+0x440>
 80076d4:	6861      	ldr	r1, [r4, #4]
 80076d6:	ee18 0a10 	vmov	r0, s16
 80076da:	3101      	adds	r1, #1
 80076dc:	f000 f928 	bl	8007930 <_Balloc>
 80076e0:	4681      	mov	r9, r0
 80076e2:	b918      	cbnz	r0, 80076ec <__gethex+0x424>
 80076e4:	4b1a      	ldr	r3, [pc, #104]	; (8007750 <__gethex+0x488>)
 80076e6:	4602      	mov	r2, r0
 80076e8:	2184      	movs	r1, #132	; 0x84
 80076ea:	e6a8      	b.n	800743e <__gethex+0x176>
 80076ec:	6922      	ldr	r2, [r4, #16]
 80076ee:	3202      	adds	r2, #2
 80076f0:	f104 010c 	add.w	r1, r4, #12
 80076f4:	0092      	lsls	r2, r2, #2
 80076f6:	300c      	adds	r0, #12
 80076f8:	f000 f90c 	bl	8007914 <memcpy>
 80076fc:	4621      	mov	r1, r4
 80076fe:	ee18 0a10 	vmov	r0, s16
 8007702:	f000 f955 	bl	80079b0 <_Bfree>
 8007706:	464c      	mov	r4, r9
 8007708:	6923      	ldr	r3, [r4, #16]
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007710:	6122      	str	r2, [r4, #16]
 8007712:	2201      	movs	r2, #1
 8007714:	615a      	str	r2, [r3, #20]
 8007716:	e7bb      	b.n	8007690 <__gethex+0x3c8>
 8007718:	6922      	ldr	r2, [r4, #16]
 800771a:	455a      	cmp	r2, fp
 800771c:	dd0b      	ble.n	8007736 <__gethex+0x46e>
 800771e:	2101      	movs	r1, #1
 8007720:	4620      	mov	r0, r4
 8007722:	f7ff fd69 	bl	80071f8 <rshift>
 8007726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800772a:	3501      	adds	r5, #1
 800772c:	42ab      	cmp	r3, r5
 800772e:	f6ff aed0 	blt.w	80074d2 <__gethex+0x20a>
 8007732:	2701      	movs	r7, #1
 8007734:	e7c0      	b.n	80076b8 <__gethex+0x3f0>
 8007736:	f016 061f 	ands.w	r6, r6, #31
 800773a:	d0fa      	beq.n	8007732 <__gethex+0x46a>
 800773c:	449a      	add	sl, r3
 800773e:	f1c6 0620 	rsb	r6, r6, #32
 8007742:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007746:	f000 f9e9 	bl	8007b1c <__hi0bits>
 800774a:	42b0      	cmp	r0, r6
 800774c:	dbe7      	blt.n	800771e <__gethex+0x456>
 800774e:	e7f0      	b.n	8007732 <__gethex+0x46a>
 8007750:	0800992c 	.word	0x0800992c

08007754 <L_shift>:
 8007754:	f1c2 0208 	rsb	r2, r2, #8
 8007758:	0092      	lsls	r2, r2, #2
 800775a:	b570      	push	{r4, r5, r6, lr}
 800775c:	f1c2 0620 	rsb	r6, r2, #32
 8007760:	6843      	ldr	r3, [r0, #4]
 8007762:	6804      	ldr	r4, [r0, #0]
 8007764:	fa03 f506 	lsl.w	r5, r3, r6
 8007768:	432c      	orrs	r4, r5
 800776a:	40d3      	lsrs	r3, r2
 800776c:	6004      	str	r4, [r0, #0]
 800776e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007772:	4288      	cmp	r0, r1
 8007774:	d3f4      	bcc.n	8007760 <L_shift+0xc>
 8007776:	bd70      	pop	{r4, r5, r6, pc}

08007778 <__match>:
 8007778:	b530      	push	{r4, r5, lr}
 800777a:	6803      	ldr	r3, [r0, #0]
 800777c:	3301      	adds	r3, #1
 800777e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007782:	b914      	cbnz	r4, 800778a <__match+0x12>
 8007784:	6003      	str	r3, [r0, #0]
 8007786:	2001      	movs	r0, #1
 8007788:	bd30      	pop	{r4, r5, pc}
 800778a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800778e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007792:	2d19      	cmp	r5, #25
 8007794:	bf98      	it	ls
 8007796:	3220      	addls	r2, #32
 8007798:	42a2      	cmp	r2, r4
 800779a:	d0f0      	beq.n	800777e <__match+0x6>
 800779c:	2000      	movs	r0, #0
 800779e:	e7f3      	b.n	8007788 <__match+0x10>

080077a0 <__hexnan>:
 80077a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	680b      	ldr	r3, [r1, #0]
 80077a6:	6801      	ldr	r1, [r0, #0]
 80077a8:	115e      	asrs	r6, r3, #5
 80077aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80077ae:	f013 031f 	ands.w	r3, r3, #31
 80077b2:	b087      	sub	sp, #28
 80077b4:	bf18      	it	ne
 80077b6:	3604      	addne	r6, #4
 80077b8:	2500      	movs	r5, #0
 80077ba:	1f37      	subs	r7, r6, #4
 80077bc:	4682      	mov	sl, r0
 80077be:	4690      	mov	r8, r2
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80077c6:	46b9      	mov	r9, r7
 80077c8:	463c      	mov	r4, r7
 80077ca:	9502      	str	r5, [sp, #8]
 80077cc:	46ab      	mov	fp, r5
 80077ce:	784a      	ldrb	r2, [r1, #1]
 80077d0:	1c4b      	adds	r3, r1, #1
 80077d2:	9303      	str	r3, [sp, #12]
 80077d4:	b342      	cbz	r2, 8007828 <__hexnan+0x88>
 80077d6:	4610      	mov	r0, r2
 80077d8:	9105      	str	r1, [sp, #20]
 80077da:	9204      	str	r2, [sp, #16]
 80077dc:	f7ff fd5e 	bl	800729c <__hexdig_fun>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d14f      	bne.n	8007884 <__hexnan+0xe4>
 80077e4:	9a04      	ldr	r2, [sp, #16]
 80077e6:	9905      	ldr	r1, [sp, #20]
 80077e8:	2a20      	cmp	r2, #32
 80077ea:	d818      	bhi.n	800781e <__hexnan+0x7e>
 80077ec:	9b02      	ldr	r3, [sp, #8]
 80077ee:	459b      	cmp	fp, r3
 80077f0:	dd13      	ble.n	800781a <__hexnan+0x7a>
 80077f2:	454c      	cmp	r4, r9
 80077f4:	d206      	bcs.n	8007804 <__hexnan+0x64>
 80077f6:	2d07      	cmp	r5, #7
 80077f8:	dc04      	bgt.n	8007804 <__hexnan+0x64>
 80077fa:	462a      	mov	r2, r5
 80077fc:	4649      	mov	r1, r9
 80077fe:	4620      	mov	r0, r4
 8007800:	f7ff ffa8 	bl	8007754 <L_shift>
 8007804:	4544      	cmp	r4, r8
 8007806:	d950      	bls.n	80078aa <__hexnan+0x10a>
 8007808:	2300      	movs	r3, #0
 800780a:	f1a4 0904 	sub.w	r9, r4, #4
 800780e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007812:	f8cd b008 	str.w	fp, [sp, #8]
 8007816:	464c      	mov	r4, r9
 8007818:	461d      	mov	r5, r3
 800781a:	9903      	ldr	r1, [sp, #12]
 800781c:	e7d7      	b.n	80077ce <__hexnan+0x2e>
 800781e:	2a29      	cmp	r2, #41	; 0x29
 8007820:	d156      	bne.n	80078d0 <__hexnan+0x130>
 8007822:	3102      	adds	r1, #2
 8007824:	f8ca 1000 	str.w	r1, [sl]
 8007828:	f1bb 0f00 	cmp.w	fp, #0
 800782c:	d050      	beq.n	80078d0 <__hexnan+0x130>
 800782e:	454c      	cmp	r4, r9
 8007830:	d206      	bcs.n	8007840 <__hexnan+0xa0>
 8007832:	2d07      	cmp	r5, #7
 8007834:	dc04      	bgt.n	8007840 <__hexnan+0xa0>
 8007836:	462a      	mov	r2, r5
 8007838:	4649      	mov	r1, r9
 800783a:	4620      	mov	r0, r4
 800783c:	f7ff ff8a 	bl	8007754 <L_shift>
 8007840:	4544      	cmp	r4, r8
 8007842:	d934      	bls.n	80078ae <__hexnan+0x10e>
 8007844:	f1a8 0204 	sub.w	r2, r8, #4
 8007848:	4623      	mov	r3, r4
 800784a:	f853 1b04 	ldr.w	r1, [r3], #4
 800784e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007852:	429f      	cmp	r7, r3
 8007854:	d2f9      	bcs.n	800784a <__hexnan+0xaa>
 8007856:	1b3b      	subs	r3, r7, r4
 8007858:	f023 0303 	bic.w	r3, r3, #3
 800785c:	3304      	adds	r3, #4
 800785e:	3401      	adds	r4, #1
 8007860:	3e03      	subs	r6, #3
 8007862:	42b4      	cmp	r4, r6
 8007864:	bf88      	it	hi
 8007866:	2304      	movhi	r3, #4
 8007868:	4443      	add	r3, r8
 800786a:	2200      	movs	r2, #0
 800786c:	f843 2b04 	str.w	r2, [r3], #4
 8007870:	429f      	cmp	r7, r3
 8007872:	d2fb      	bcs.n	800786c <__hexnan+0xcc>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	b91b      	cbnz	r3, 8007880 <__hexnan+0xe0>
 8007878:	4547      	cmp	r7, r8
 800787a:	d127      	bne.n	80078cc <__hexnan+0x12c>
 800787c:	2301      	movs	r3, #1
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	2005      	movs	r0, #5
 8007882:	e026      	b.n	80078d2 <__hexnan+0x132>
 8007884:	3501      	adds	r5, #1
 8007886:	2d08      	cmp	r5, #8
 8007888:	f10b 0b01 	add.w	fp, fp, #1
 800788c:	dd06      	ble.n	800789c <__hexnan+0xfc>
 800788e:	4544      	cmp	r4, r8
 8007890:	d9c3      	bls.n	800781a <__hexnan+0x7a>
 8007892:	2300      	movs	r3, #0
 8007894:	f844 3c04 	str.w	r3, [r4, #-4]
 8007898:	2501      	movs	r5, #1
 800789a:	3c04      	subs	r4, #4
 800789c:	6822      	ldr	r2, [r4, #0]
 800789e:	f000 000f 	and.w	r0, r0, #15
 80078a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80078a6:	6022      	str	r2, [r4, #0]
 80078a8:	e7b7      	b.n	800781a <__hexnan+0x7a>
 80078aa:	2508      	movs	r5, #8
 80078ac:	e7b5      	b.n	800781a <__hexnan+0x7a>
 80078ae:	9b01      	ldr	r3, [sp, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d0df      	beq.n	8007874 <__hexnan+0xd4>
 80078b4:	f04f 32ff 	mov.w	r2, #4294967295
 80078b8:	f1c3 0320 	rsb	r3, r3, #32
 80078bc:	fa22 f303 	lsr.w	r3, r2, r3
 80078c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80078c4:	401a      	ands	r2, r3
 80078c6:	f846 2c04 	str.w	r2, [r6, #-4]
 80078ca:	e7d3      	b.n	8007874 <__hexnan+0xd4>
 80078cc:	3f04      	subs	r7, #4
 80078ce:	e7d1      	b.n	8007874 <__hexnan+0xd4>
 80078d0:	2004      	movs	r0, #4
 80078d2:	b007      	add	sp, #28
 80078d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080078d8 <_localeconv_r>:
 80078d8:	4800      	ldr	r0, [pc, #0]	; (80078dc <_localeconv_r+0x4>)
 80078da:	4770      	bx	lr
 80078dc:	20000168 	.word	0x20000168

080078e0 <malloc>:
 80078e0:	4b02      	ldr	r3, [pc, #8]	; (80078ec <malloc+0xc>)
 80078e2:	4601      	mov	r1, r0
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	f000 bd3d 	b.w	8008364 <_malloc_r>
 80078ea:	bf00      	nop
 80078ec:	20000010 	.word	0x20000010

080078f0 <__ascii_mbtowc>:
 80078f0:	b082      	sub	sp, #8
 80078f2:	b901      	cbnz	r1, 80078f6 <__ascii_mbtowc+0x6>
 80078f4:	a901      	add	r1, sp, #4
 80078f6:	b142      	cbz	r2, 800790a <__ascii_mbtowc+0x1a>
 80078f8:	b14b      	cbz	r3, 800790e <__ascii_mbtowc+0x1e>
 80078fa:	7813      	ldrb	r3, [r2, #0]
 80078fc:	600b      	str	r3, [r1, #0]
 80078fe:	7812      	ldrb	r2, [r2, #0]
 8007900:	1e10      	subs	r0, r2, #0
 8007902:	bf18      	it	ne
 8007904:	2001      	movne	r0, #1
 8007906:	b002      	add	sp, #8
 8007908:	4770      	bx	lr
 800790a:	4610      	mov	r0, r2
 800790c:	e7fb      	b.n	8007906 <__ascii_mbtowc+0x16>
 800790e:	f06f 0001 	mvn.w	r0, #1
 8007912:	e7f8      	b.n	8007906 <__ascii_mbtowc+0x16>

08007914 <memcpy>:
 8007914:	440a      	add	r2, r1
 8007916:	4291      	cmp	r1, r2
 8007918:	f100 33ff 	add.w	r3, r0, #4294967295
 800791c:	d100      	bne.n	8007920 <memcpy+0xc>
 800791e:	4770      	bx	lr
 8007920:	b510      	push	{r4, lr}
 8007922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800792a:	4291      	cmp	r1, r2
 800792c:	d1f9      	bne.n	8007922 <memcpy+0xe>
 800792e:	bd10      	pop	{r4, pc}

08007930 <_Balloc>:
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007934:	4604      	mov	r4, r0
 8007936:	460d      	mov	r5, r1
 8007938:	b976      	cbnz	r6, 8007958 <_Balloc+0x28>
 800793a:	2010      	movs	r0, #16
 800793c:	f7ff ffd0 	bl	80078e0 <malloc>
 8007940:	4602      	mov	r2, r0
 8007942:	6260      	str	r0, [r4, #36]	; 0x24
 8007944:	b920      	cbnz	r0, 8007950 <_Balloc+0x20>
 8007946:	4b18      	ldr	r3, [pc, #96]	; (80079a8 <_Balloc+0x78>)
 8007948:	4818      	ldr	r0, [pc, #96]	; (80079ac <_Balloc+0x7c>)
 800794a:	2166      	movs	r1, #102	; 0x66
 800794c:	f000 fef8 	bl	8008740 <__assert_func>
 8007950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007954:	6006      	str	r6, [r0, #0]
 8007956:	60c6      	str	r6, [r0, #12]
 8007958:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800795a:	68f3      	ldr	r3, [r6, #12]
 800795c:	b183      	cbz	r3, 8007980 <_Balloc+0x50>
 800795e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007966:	b9b8      	cbnz	r0, 8007998 <_Balloc+0x68>
 8007968:	2101      	movs	r1, #1
 800796a:	fa01 f605 	lsl.w	r6, r1, r5
 800796e:	1d72      	adds	r2, r6, #5
 8007970:	0092      	lsls	r2, r2, #2
 8007972:	4620      	mov	r0, r4
 8007974:	f000 fc97 	bl	80082a6 <_calloc_r>
 8007978:	b160      	cbz	r0, 8007994 <_Balloc+0x64>
 800797a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800797e:	e00e      	b.n	800799e <_Balloc+0x6e>
 8007980:	2221      	movs	r2, #33	; 0x21
 8007982:	2104      	movs	r1, #4
 8007984:	4620      	mov	r0, r4
 8007986:	f000 fc8e 	bl	80082a6 <_calloc_r>
 800798a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800798c:	60f0      	str	r0, [r6, #12]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e4      	bne.n	800795e <_Balloc+0x2e>
 8007994:	2000      	movs	r0, #0
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	6802      	ldr	r2, [r0, #0]
 800799a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800799e:	2300      	movs	r3, #0
 80079a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079a4:	e7f7      	b.n	8007996 <_Balloc+0x66>
 80079a6:	bf00      	nop
 80079a8:	080098b6 	.word	0x080098b6
 80079ac:	080099bc 	.word	0x080099bc

080079b0 <_Bfree>:
 80079b0:	b570      	push	{r4, r5, r6, lr}
 80079b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079b4:	4605      	mov	r5, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	b976      	cbnz	r6, 80079d8 <_Bfree+0x28>
 80079ba:	2010      	movs	r0, #16
 80079bc:	f7ff ff90 	bl	80078e0 <malloc>
 80079c0:	4602      	mov	r2, r0
 80079c2:	6268      	str	r0, [r5, #36]	; 0x24
 80079c4:	b920      	cbnz	r0, 80079d0 <_Bfree+0x20>
 80079c6:	4b09      	ldr	r3, [pc, #36]	; (80079ec <_Bfree+0x3c>)
 80079c8:	4809      	ldr	r0, [pc, #36]	; (80079f0 <_Bfree+0x40>)
 80079ca:	218a      	movs	r1, #138	; 0x8a
 80079cc:	f000 feb8 	bl	8008740 <__assert_func>
 80079d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079d4:	6006      	str	r6, [r0, #0]
 80079d6:	60c6      	str	r6, [r0, #12]
 80079d8:	b13c      	cbz	r4, 80079ea <_Bfree+0x3a>
 80079da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079dc:	6862      	ldr	r2, [r4, #4]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079e4:	6021      	str	r1, [r4, #0]
 80079e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079ea:	bd70      	pop	{r4, r5, r6, pc}
 80079ec:	080098b6 	.word	0x080098b6
 80079f0:	080099bc 	.word	0x080099bc

080079f4 <__multadd>:
 80079f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f8:	690e      	ldr	r6, [r1, #16]
 80079fa:	4607      	mov	r7, r0
 80079fc:	4698      	mov	r8, r3
 80079fe:	460c      	mov	r4, r1
 8007a00:	f101 0014 	add.w	r0, r1, #20
 8007a04:	2300      	movs	r3, #0
 8007a06:	6805      	ldr	r5, [r0, #0]
 8007a08:	b2a9      	uxth	r1, r5
 8007a0a:	fb02 8101 	mla	r1, r2, r1, r8
 8007a0e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007a12:	0c2d      	lsrs	r5, r5, #16
 8007a14:	fb02 c505 	mla	r5, r2, r5, ip
 8007a18:	b289      	uxth	r1, r1
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007a20:	429e      	cmp	r6, r3
 8007a22:	f840 1b04 	str.w	r1, [r0], #4
 8007a26:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007a2a:	dcec      	bgt.n	8007a06 <__multadd+0x12>
 8007a2c:	f1b8 0f00 	cmp.w	r8, #0
 8007a30:	d022      	beq.n	8007a78 <__multadd+0x84>
 8007a32:	68a3      	ldr	r3, [r4, #8]
 8007a34:	42b3      	cmp	r3, r6
 8007a36:	dc19      	bgt.n	8007a6c <__multadd+0x78>
 8007a38:	6861      	ldr	r1, [r4, #4]
 8007a3a:	4638      	mov	r0, r7
 8007a3c:	3101      	adds	r1, #1
 8007a3e:	f7ff ff77 	bl	8007930 <_Balloc>
 8007a42:	4605      	mov	r5, r0
 8007a44:	b928      	cbnz	r0, 8007a52 <__multadd+0x5e>
 8007a46:	4602      	mov	r2, r0
 8007a48:	4b0d      	ldr	r3, [pc, #52]	; (8007a80 <__multadd+0x8c>)
 8007a4a:	480e      	ldr	r0, [pc, #56]	; (8007a84 <__multadd+0x90>)
 8007a4c:	21b5      	movs	r1, #181	; 0xb5
 8007a4e:	f000 fe77 	bl	8008740 <__assert_func>
 8007a52:	6922      	ldr	r2, [r4, #16]
 8007a54:	3202      	adds	r2, #2
 8007a56:	f104 010c 	add.w	r1, r4, #12
 8007a5a:	0092      	lsls	r2, r2, #2
 8007a5c:	300c      	adds	r0, #12
 8007a5e:	f7ff ff59 	bl	8007914 <memcpy>
 8007a62:	4621      	mov	r1, r4
 8007a64:	4638      	mov	r0, r7
 8007a66:	f7ff ffa3 	bl	80079b0 <_Bfree>
 8007a6a:	462c      	mov	r4, r5
 8007a6c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007a70:	3601      	adds	r6, #1
 8007a72:	f8c3 8014 	str.w	r8, [r3, #20]
 8007a76:	6126      	str	r6, [r4, #16]
 8007a78:	4620      	mov	r0, r4
 8007a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a7e:	bf00      	nop
 8007a80:	0800992c 	.word	0x0800992c
 8007a84:	080099bc 	.word	0x080099bc

08007a88 <__s2b>:
 8007a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	4615      	mov	r5, r2
 8007a90:	461f      	mov	r7, r3
 8007a92:	2209      	movs	r2, #9
 8007a94:	3308      	adds	r3, #8
 8007a96:	4606      	mov	r6, r0
 8007a98:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	db09      	blt.n	8007ab8 <__s2b+0x30>
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f7ff ff43 	bl	8007930 <_Balloc>
 8007aaa:	b940      	cbnz	r0, 8007abe <__s2b+0x36>
 8007aac:	4602      	mov	r2, r0
 8007aae:	4b19      	ldr	r3, [pc, #100]	; (8007b14 <__s2b+0x8c>)
 8007ab0:	4819      	ldr	r0, [pc, #100]	; (8007b18 <__s2b+0x90>)
 8007ab2:	21ce      	movs	r1, #206	; 0xce
 8007ab4:	f000 fe44 	bl	8008740 <__assert_func>
 8007ab8:	0052      	lsls	r2, r2, #1
 8007aba:	3101      	adds	r1, #1
 8007abc:	e7f0      	b.n	8007aa0 <__s2b+0x18>
 8007abe:	9b08      	ldr	r3, [sp, #32]
 8007ac0:	6143      	str	r3, [r0, #20]
 8007ac2:	2d09      	cmp	r5, #9
 8007ac4:	f04f 0301 	mov.w	r3, #1
 8007ac8:	6103      	str	r3, [r0, #16]
 8007aca:	dd16      	ble.n	8007afa <__s2b+0x72>
 8007acc:	f104 0909 	add.w	r9, r4, #9
 8007ad0:	46c8      	mov	r8, r9
 8007ad2:	442c      	add	r4, r5
 8007ad4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ad8:	4601      	mov	r1, r0
 8007ada:	3b30      	subs	r3, #48	; 0x30
 8007adc:	220a      	movs	r2, #10
 8007ade:	4630      	mov	r0, r6
 8007ae0:	f7ff ff88 	bl	80079f4 <__multadd>
 8007ae4:	45a0      	cmp	r8, r4
 8007ae6:	d1f5      	bne.n	8007ad4 <__s2b+0x4c>
 8007ae8:	f1a5 0408 	sub.w	r4, r5, #8
 8007aec:	444c      	add	r4, r9
 8007aee:	1b2d      	subs	r5, r5, r4
 8007af0:	1963      	adds	r3, r4, r5
 8007af2:	42bb      	cmp	r3, r7
 8007af4:	db04      	blt.n	8007b00 <__s2b+0x78>
 8007af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007afa:	340a      	adds	r4, #10
 8007afc:	2509      	movs	r5, #9
 8007afe:	e7f6      	b.n	8007aee <__s2b+0x66>
 8007b00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b04:	4601      	mov	r1, r0
 8007b06:	3b30      	subs	r3, #48	; 0x30
 8007b08:	220a      	movs	r2, #10
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f7ff ff72 	bl	80079f4 <__multadd>
 8007b10:	e7ee      	b.n	8007af0 <__s2b+0x68>
 8007b12:	bf00      	nop
 8007b14:	0800992c 	.word	0x0800992c
 8007b18:	080099bc 	.word	0x080099bc

08007b1c <__hi0bits>:
 8007b1c:	0c03      	lsrs	r3, r0, #16
 8007b1e:	041b      	lsls	r3, r3, #16
 8007b20:	b9d3      	cbnz	r3, 8007b58 <__hi0bits+0x3c>
 8007b22:	0400      	lsls	r0, r0, #16
 8007b24:	2310      	movs	r3, #16
 8007b26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b2a:	bf04      	itt	eq
 8007b2c:	0200      	lsleq	r0, r0, #8
 8007b2e:	3308      	addeq	r3, #8
 8007b30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b34:	bf04      	itt	eq
 8007b36:	0100      	lsleq	r0, r0, #4
 8007b38:	3304      	addeq	r3, #4
 8007b3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b3e:	bf04      	itt	eq
 8007b40:	0080      	lsleq	r0, r0, #2
 8007b42:	3302      	addeq	r3, #2
 8007b44:	2800      	cmp	r0, #0
 8007b46:	db05      	blt.n	8007b54 <__hi0bits+0x38>
 8007b48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b4c:	f103 0301 	add.w	r3, r3, #1
 8007b50:	bf08      	it	eq
 8007b52:	2320      	moveq	r3, #32
 8007b54:	4618      	mov	r0, r3
 8007b56:	4770      	bx	lr
 8007b58:	2300      	movs	r3, #0
 8007b5a:	e7e4      	b.n	8007b26 <__hi0bits+0xa>

08007b5c <__lo0bits>:
 8007b5c:	6803      	ldr	r3, [r0, #0]
 8007b5e:	f013 0207 	ands.w	r2, r3, #7
 8007b62:	4601      	mov	r1, r0
 8007b64:	d00b      	beq.n	8007b7e <__lo0bits+0x22>
 8007b66:	07da      	lsls	r2, r3, #31
 8007b68:	d424      	bmi.n	8007bb4 <__lo0bits+0x58>
 8007b6a:	0798      	lsls	r0, r3, #30
 8007b6c:	bf49      	itett	mi
 8007b6e:	085b      	lsrmi	r3, r3, #1
 8007b70:	089b      	lsrpl	r3, r3, #2
 8007b72:	2001      	movmi	r0, #1
 8007b74:	600b      	strmi	r3, [r1, #0]
 8007b76:	bf5c      	itt	pl
 8007b78:	600b      	strpl	r3, [r1, #0]
 8007b7a:	2002      	movpl	r0, #2
 8007b7c:	4770      	bx	lr
 8007b7e:	b298      	uxth	r0, r3
 8007b80:	b9b0      	cbnz	r0, 8007bb0 <__lo0bits+0x54>
 8007b82:	0c1b      	lsrs	r3, r3, #16
 8007b84:	2010      	movs	r0, #16
 8007b86:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b8a:	bf04      	itt	eq
 8007b8c:	0a1b      	lsreq	r3, r3, #8
 8007b8e:	3008      	addeq	r0, #8
 8007b90:	071a      	lsls	r2, r3, #28
 8007b92:	bf04      	itt	eq
 8007b94:	091b      	lsreq	r3, r3, #4
 8007b96:	3004      	addeq	r0, #4
 8007b98:	079a      	lsls	r2, r3, #30
 8007b9a:	bf04      	itt	eq
 8007b9c:	089b      	lsreq	r3, r3, #2
 8007b9e:	3002      	addeq	r0, #2
 8007ba0:	07da      	lsls	r2, r3, #31
 8007ba2:	d403      	bmi.n	8007bac <__lo0bits+0x50>
 8007ba4:	085b      	lsrs	r3, r3, #1
 8007ba6:	f100 0001 	add.w	r0, r0, #1
 8007baa:	d005      	beq.n	8007bb8 <__lo0bits+0x5c>
 8007bac:	600b      	str	r3, [r1, #0]
 8007bae:	4770      	bx	lr
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	e7e8      	b.n	8007b86 <__lo0bits+0x2a>
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	4770      	bx	lr
 8007bb8:	2020      	movs	r0, #32
 8007bba:	4770      	bx	lr

08007bbc <__i2b>:
 8007bbc:	b510      	push	{r4, lr}
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	f7ff feb5 	bl	8007930 <_Balloc>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	b928      	cbnz	r0, 8007bd6 <__i2b+0x1a>
 8007bca:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <__i2b+0x24>)
 8007bcc:	4805      	ldr	r0, [pc, #20]	; (8007be4 <__i2b+0x28>)
 8007bce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007bd2:	f000 fdb5 	bl	8008740 <__assert_func>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	6144      	str	r4, [r0, #20]
 8007bda:	6103      	str	r3, [r0, #16]
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	bf00      	nop
 8007be0:	0800992c 	.word	0x0800992c
 8007be4:	080099bc 	.word	0x080099bc

08007be8 <__multiply>:
 8007be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	4614      	mov	r4, r2
 8007bee:	690a      	ldr	r2, [r1, #16]
 8007bf0:	6923      	ldr	r3, [r4, #16]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	bfb8      	it	lt
 8007bf6:	460b      	movlt	r3, r1
 8007bf8:	460d      	mov	r5, r1
 8007bfa:	bfbc      	itt	lt
 8007bfc:	4625      	movlt	r5, r4
 8007bfe:	461c      	movlt	r4, r3
 8007c00:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007c04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007c08:	68ab      	ldr	r3, [r5, #8]
 8007c0a:	6869      	ldr	r1, [r5, #4]
 8007c0c:	eb0a 0709 	add.w	r7, sl, r9
 8007c10:	42bb      	cmp	r3, r7
 8007c12:	b085      	sub	sp, #20
 8007c14:	bfb8      	it	lt
 8007c16:	3101      	addlt	r1, #1
 8007c18:	f7ff fe8a 	bl	8007930 <_Balloc>
 8007c1c:	b930      	cbnz	r0, 8007c2c <__multiply+0x44>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	4b42      	ldr	r3, [pc, #264]	; (8007d2c <__multiply+0x144>)
 8007c22:	4843      	ldr	r0, [pc, #268]	; (8007d30 <__multiply+0x148>)
 8007c24:	f240 115d 	movw	r1, #349	; 0x15d
 8007c28:	f000 fd8a 	bl	8008740 <__assert_func>
 8007c2c:	f100 0614 	add.w	r6, r0, #20
 8007c30:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007c34:	4633      	mov	r3, r6
 8007c36:	2200      	movs	r2, #0
 8007c38:	4543      	cmp	r3, r8
 8007c3a:	d31e      	bcc.n	8007c7a <__multiply+0x92>
 8007c3c:	f105 0c14 	add.w	ip, r5, #20
 8007c40:	f104 0314 	add.w	r3, r4, #20
 8007c44:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007c48:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007c4c:	9202      	str	r2, [sp, #8]
 8007c4e:	ebac 0205 	sub.w	r2, ip, r5
 8007c52:	3a15      	subs	r2, #21
 8007c54:	f022 0203 	bic.w	r2, r2, #3
 8007c58:	3204      	adds	r2, #4
 8007c5a:	f105 0115 	add.w	r1, r5, #21
 8007c5e:	458c      	cmp	ip, r1
 8007c60:	bf38      	it	cc
 8007c62:	2204      	movcc	r2, #4
 8007c64:	9201      	str	r2, [sp, #4]
 8007c66:	9a02      	ldr	r2, [sp, #8]
 8007c68:	9303      	str	r3, [sp, #12]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d808      	bhi.n	8007c80 <__multiply+0x98>
 8007c6e:	2f00      	cmp	r7, #0
 8007c70:	dc55      	bgt.n	8007d1e <__multiply+0x136>
 8007c72:	6107      	str	r7, [r0, #16]
 8007c74:	b005      	add	sp, #20
 8007c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7a:	f843 2b04 	str.w	r2, [r3], #4
 8007c7e:	e7db      	b.n	8007c38 <__multiply+0x50>
 8007c80:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c84:	f1ba 0f00 	cmp.w	sl, #0
 8007c88:	d020      	beq.n	8007ccc <__multiply+0xe4>
 8007c8a:	f105 0e14 	add.w	lr, r5, #20
 8007c8e:	46b1      	mov	r9, r6
 8007c90:	2200      	movs	r2, #0
 8007c92:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007c96:	f8d9 b000 	ldr.w	fp, [r9]
 8007c9a:	b2a1      	uxth	r1, r4
 8007c9c:	fa1f fb8b 	uxth.w	fp, fp
 8007ca0:	fb0a b101 	mla	r1, sl, r1, fp
 8007ca4:	4411      	add	r1, r2
 8007ca6:	f8d9 2000 	ldr.w	r2, [r9]
 8007caa:	0c24      	lsrs	r4, r4, #16
 8007cac:	0c12      	lsrs	r2, r2, #16
 8007cae:	fb0a 2404 	mla	r4, sl, r4, r2
 8007cb2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007cb6:	b289      	uxth	r1, r1
 8007cb8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007cbc:	45f4      	cmp	ip, lr
 8007cbe:	f849 1b04 	str.w	r1, [r9], #4
 8007cc2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007cc6:	d8e4      	bhi.n	8007c92 <__multiply+0xaa>
 8007cc8:	9901      	ldr	r1, [sp, #4]
 8007cca:	5072      	str	r2, [r6, r1]
 8007ccc:	9a03      	ldr	r2, [sp, #12]
 8007cce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	f1b9 0f00 	cmp.w	r9, #0
 8007cd8:	d01f      	beq.n	8007d1a <__multiply+0x132>
 8007cda:	6834      	ldr	r4, [r6, #0]
 8007cdc:	f105 0114 	add.w	r1, r5, #20
 8007ce0:	46b6      	mov	lr, r6
 8007ce2:	f04f 0a00 	mov.w	sl, #0
 8007ce6:	880a      	ldrh	r2, [r1, #0]
 8007ce8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007cec:	fb09 b202 	mla	r2, r9, r2, fp
 8007cf0:	4492      	add	sl, r2
 8007cf2:	b2a4      	uxth	r4, r4
 8007cf4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007cf8:	f84e 4b04 	str.w	r4, [lr], #4
 8007cfc:	f851 4b04 	ldr.w	r4, [r1], #4
 8007d00:	f8be 2000 	ldrh.w	r2, [lr]
 8007d04:	0c24      	lsrs	r4, r4, #16
 8007d06:	fb09 2404 	mla	r4, r9, r4, r2
 8007d0a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007d0e:	458c      	cmp	ip, r1
 8007d10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d14:	d8e7      	bhi.n	8007ce6 <__multiply+0xfe>
 8007d16:	9a01      	ldr	r2, [sp, #4]
 8007d18:	50b4      	str	r4, [r6, r2]
 8007d1a:	3604      	adds	r6, #4
 8007d1c:	e7a3      	b.n	8007c66 <__multiply+0x7e>
 8007d1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1a5      	bne.n	8007c72 <__multiply+0x8a>
 8007d26:	3f01      	subs	r7, #1
 8007d28:	e7a1      	b.n	8007c6e <__multiply+0x86>
 8007d2a:	bf00      	nop
 8007d2c:	0800992c 	.word	0x0800992c
 8007d30:	080099bc 	.word	0x080099bc

08007d34 <__pow5mult>:
 8007d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d38:	4615      	mov	r5, r2
 8007d3a:	f012 0203 	ands.w	r2, r2, #3
 8007d3e:	4606      	mov	r6, r0
 8007d40:	460f      	mov	r7, r1
 8007d42:	d007      	beq.n	8007d54 <__pow5mult+0x20>
 8007d44:	4c25      	ldr	r4, [pc, #148]	; (8007ddc <__pow5mult+0xa8>)
 8007d46:	3a01      	subs	r2, #1
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d4e:	f7ff fe51 	bl	80079f4 <__multadd>
 8007d52:	4607      	mov	r7, r0
 8007d54:	10ad      	asrs	r5, r5, #2
 8007d56:	d03d      	beq.n	8007dd4 <__pow5mult+0xa0>
 8007d58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d5a:	b97c      	cbnz	r4, 8007d7c <__pow5mult+0x48>
 8007d5c:	2010      	movs	r0, #16
 8007d5e:	f7ff fdbf 	bl	80078e0 <malloc>
 8007d62:	4602      	mov	r2, r0
 8007d64:	6270      	str	r0, [r6, #36]	; 0x24
 8007d66:	b928      	cbnz	r0, 8007d74 <__pow5mult+0x40>
 8007d68:	4b1d      	ldr	r3, [pc, #116]	; (8007de0 <__pow5mult+0xac>)
 8007d6a:	481e      	ldr	r0, [pc, #120]	; (8007de4 <__pow5mult+0xb0>)
 8007d6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d70:	f000 fce6 	bl	8008740 <__assert_func>
 8007d74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d78:	6004      	str	r4, [r0, #0]
 8007d7a:	60c4      	str	r4, [r0, #12]
 8007d7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d84:	b94c      	cbnz	r4, 8007d9a <__pow5mult+0x66>
 8007d86:	f240 2171 	movw	r1, #625	; 0x271
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f7ff ff16 	bl	8007bbc <__i2b>
 8007d90:	2300      	movs	r3, #0
 8007d92:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d96:	4604      	mov	r4, r0
 8007d98:	6003      	str	r3, [r0, #0]
 8007d9a:	f04f 0900 	mov.w	r9, #0
 8007d9e:	07eb      	lsls	r3, r5, #31
 8007da0:	d50a      	bpl.n	8007db8 <__pow5mult+0x84>
 8007da2:	4639      	mov	r1, r7
 8007da4:	4622      	mov	r2, r4
 8007da6:	4630      	mov	r0, r6
 8007da8:	f7ff ff1e 	bl	8007be8 <__multiply>
 8007dac:	4639      	mov	r1, r7
 8007dae:	4680      	mov	r8, r0
 8007db0:	4630      	mov	r0, r6
 8007db2:	f7ff fdfd 	bl	80079b0 <_Bfree>
 8007db6:	4647      	mov	r7, r8
 8007db8:	106d      	asrs	r5, r5, #1
 8007dba:	d00b      	beq.n	8007dd4 <__pow5mult+0xa0>
 8007dbc:	6820      	ldr	r0, [r4, #0]
 8007dbe:	b938      	cbnz	r0, 8007dd0 <__pow5mult+0x9c>
 8007dc0:	4622      	mov	r2, r4
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f7ff ff0f 	bl	8007be8 <__multiply>
 8007dca:	6020      	str	r0, [r4, #0]
 8007dcc:	f8c0 9000 	str.w	r9, [r0]
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	e7e4      	b.n	8007d9e <__pow5mult+0x6a>
 8007dd4:	4638      	mov	r0, r7
 8007dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dda:	bf00      	nop
 8007ddc:	08009b10 	.word	0x08009b10
 8007de0:	080098b6 	.word	0x080098b6
 8007de4:	080099bc 	.word	0x080099bc

08007de8 <__lshift>:
 8007de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dec:	460c      	mov	r4, r1
 8007dee:	6849      	ldr	r1, [r1, #4]
 8007df0:	6923      	ldr	r3, [r4, #16]
 8007df2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007df6:	68a3      	ldr	r3, [r4, #8]
 8007df8:	4607      	mov	r7, r0
 8007dfa:	4691      	mov	r9, r2
 8007dfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e00:	f108 0601 	add.w	r6, r8, #1
 8007e04:	42b3      	cmp	r3, r6
 8007e06:	db0b      	blt.n	8007e20 <__lshift+0x38>
 8007e08:	4638      	mov	r0, r7
 8007e0a:	f7ff fd91 	bl	8007930 <_Balloc>
 8007e0e:	4605      	mov	r5, r0
 8007e10:	b948      	cbnz	r0, 8007e26 <__lshift+0x3e>
 8007e12:	4602      	mov	r2, r0
 8007e14:	4b28      	ldr	r3, [pc, #160]	; (8007eb8 <__lshift+0xd0>)
 8007e16:	4829      	ldr	r0, [pc, #164]	; (8007ebc <__lshift+0xd4>)
 8007e18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e1c:	f000 fc90 	bl	8008740 <__assert_func>
 8007e20:	3101      	adds	r1, #1
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	e7ee      	b.n	8007e04 <__lshift+0x1c>
 8007e26:	2300      	movs	r3, #0
 8007e28:	f100 0114 	add.w	r1, r0, #20
 8007e2c:	f100 0210 	add.w	r2, r0, #16
 8007e30:	4618      	mov	r0, r3
 8007e32:	4553      	cmp	r3, sl
 8007e34:	db33      	blt.n	8007e9e <__lshift+0xb6>
 8007e36:	6920      	ldr	r0, [r4, #16]
 8007e38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e3c:	f104 0314 	add.w	r3, r4, #20
 8007e40:	f019 091f 	ands.w	r9, r9, #31
 8007e44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e4c:	d02b      	beq.n	8007ea6 <__lshift+0xbe>
 8007e4e:	f1c9 0e20 	rsb	lr, r9, #32
 8007e52:	468a      	mov	sl, r1
 8007e54:	2200      	movs	r2, #0
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	fa00 f009 	lsl.w	r0, r0, r9
 8007e5c:	4302      	orrs	r2, r0
 8007e5e:	f84a 2b04 	str.w	r2, [sl], #4
 8007e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e66:	459c      	cmp	ip, r3
 8007e68:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e6c:	d8f3      	bhi.n	8007e56 <__lshift+0x6e>
 8007e6e:	ebac 0304 	sub.w	r3, ip, r4
 8007e72:	3b15      	subs	r3, #21
 8007e74:	f023 0303 	bic.w	r3, r3, #3
 8007e78:	3304      	adds	r3, #4
 8007e7a:	f104 0015 	add.w	r0, r4, #21
 8007e7e:	4584      	cmp	ip, r0
 8007e80:	bf38      	it	cc
 8007e82:	2304      	movcc	r3, #4
 8007e84:	50ca      	str	r2, [r1, r3]
 8007e86:	b10a      	cbz	r2, 8007e8c <__lshift+0xa4>
 8007e88:	f108 0602 	add.w	r6, r8, #2
 8007e8c:	3e01      	subs	r6, #1
 8007e8e:	4638      	mov	r0, r7
 8007e90:	612e      	str	r6, [r5, #16]
 8007e92:	4621      	mov	r1, r4
 8007e94:	f7ff fd8c 	bl	80079b0 <_Bfree>
 8007e98:	4628      	mov	r0, r5
 8007e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	e7c5      	b.n	8007e32 <__lshift+0x4a>
 8007ea6:	3904      	subs	r1, #4
 8007ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eac:	f841 2f04 	str.w	r2, [r1, #4]!
 8007eb0:	459c      	cmp	ip, r3
 8007eb2:	d8f9      	bhi.n	8007ea8 <__lshift+0xc0>
 8007eb4:	e7ea      	b.n	8007e8c <__lshift+0xa4>
 8007eb6:	bf00      	nop
 8007eb8:	0800992c 	.word	0x0800992c
 8007ebc:	080099bc 	.word	0x080099bc

08007ec0 <__mcmp>:
 8007ec0:	b530      	push	{r4, r5, lr}
 8007ec2:	6902      	ldr	r2, [r0, #16]
 8007ec4:	690c      	ldr	r4, [r1, #16]
 8007ec6:	1b12      	subs	r2, r2, r4
 8007ec8:	d10e      	bne.n	8007ee8 <__mcmp+0x28>
 8007eca:	f100 0314 	add.w	r3, r0, #20
 8007ece:	3114      	adds	r1, #20
 8007ed0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ed4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ed8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007edc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ee0:	42a5      	cmp	r5, r4
 8007ee2:	d003      	beq.n	8007eec <__mcmp+0x2c>
 8007ee4:	d305      	bcc.n	8007ef2 <__mcmp+0x32>
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	4610      	mov	r0, r2
 8007eea:	bd30      	pop	{r4, r5, pc}
 8007eec:	4283      	cmp	r3, r0
 8007eee:	d3f3      	bcc.n	8007ed8 <__mcmp+0x18>
 8007ef0:	e7fa      	b.n	8007ee8 <__mcmp+0x28>
 8007ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef6:	e7f7      	b.n	8007ee8 <__mcmp+0x28>

08007ef8 <__mdiff>:
 8007ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efc:	460c      	mov	r4, r1
 8007efe:	4606      	mov	r6, r0
 8007f00:	4611      	mov	r1, r2
 8007f02:	4620      	mov	r0, r4
 8007f04:	4617      	mov	r7, r2
 8007f06:	f7ff ffdb 	bl	8007ec0 <__mcmp>
 8007f0a:	1e05      	subs	r5, r0, #0
 8007f0c:	d110      	bne.n	8007f30 <__mdiff+0x38>
 8007f0e:	4629      	mov	r1, r5
 8007f10:	4630      	mov	r0, r6
 8007f12:	f7ff fd0d 	bl	8007930 <_Balloc>
 8007f16:	b930      	cbnz	r0, 8007f26 <__mdiff+0x2e>
 8007f18:	4b39      	ldr	r3, [pc, #228]	; (8008000 <__mdiff+0x108>)
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	f240 2132 	movw	r1, #562	; 0x232
 8007f20:	4838      	ldr	r0, [pc, #224]	; (8008004 <__mdiff+0x10c>)
 8007f22:	f000 fc0d 	bl	8008740 <__assert_func>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f30:	bfa4      	itt	ge
 8007f32:	463b      	movge	r3, r7
 8007f34:	4627      	movge	r7, r4
 8007f36:	4630      	mov	r0, r6
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	bfa6      	itte	ge
 8007f3c:	461c      	movge	r4, r3
 8007f3e:	2500      	movge	r5, #0
 8007f40:	2501      	movlt	r5, #1
 8007f42:	f7ff fcf5 	bl	8007930 <_Balloc>
 8007f46:	b920      	cbnz	r0, 8007f52 <__mdiff+0x5a>
 8007f48:	4b2d      	ldr	r3, [pc, #180]	; (8008000 <__mdiff+0x108>)
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f50:	e7e6      	b.n	8007f20 <__mdiff+0x28>
 8007f52:	693e      	ldr	r6, [r7, #16]
 8007f54:	60c5      	str	r5, [r0, #12]
 8007f56:	6925      	ldr	r5, [r4, #16]
 8007f58:	f107 0114 	add.w	r1, r7, #20
 8007f5c:	f104 0914 	add.w	r9, r4, #20
 8007f60:	f100 0e14 	add.w	lr, r0, #20
 8007f64:	f107 0210 	add.w	r2, r7, #16
 8007f68:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007f6c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007f70:	46f2      	mov	sl, lr
 8007f72:	2700      	movs	r7, #0
 8007f74:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f7c:	fa1f f883 	uxth.w	r8, r3
 8007f80:	fa17 f78b 	uxtah	r7, r7, fp
 8007f84:	0c1b      	lsrs	r3, r3, #16
 8007f86:	eba7 0808 	sub.w	r8, r7, r8
 8007f8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f92:	fa1f f888 	uxth.w	r8, r8
 8007f96:	141f      	asrs	r7, r3, #16
 8007f98:	454d      	cmp	r5, r9
 8007f9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f9e:	f84a 3b04 	str.w	r3, [sl], #4
 8007fa2:	d8e7      	bhi.n	8007f74 <__mdiff+0x7c>
 8007fa4:	1b2b      	subs	r3, r5, r4
 8007fa6:	3b15      	subs	r3, #21
 8007fa8:	f023 0303 	bic.w	r3, r3, #3
 8007fac:	3304      	adds	r3, #4
 8007fae:	3415      	adds	r4, #21
 8007fb0:	42a5      	cmp	r5, r4
 8007fb2:	bf38      	it	cc
 8007fb4:	2304      	movcc	r3, #4
 8007fb6:	4419      	add	r1, r3
 8007fb8:	4473      	add	r3, lr
 8007fba:	469e      	mov	lr, r3
 8007fbc:	460d      	mov	r5, r1
 8007fbe:	4565      	cmp	r5, ip
 8007fc0:	d30e      	bcc.n	8007fe0 <__mdiff+0xe8>
 8007fc2:	f10c 0203 	add.w	r2, ip, #3
 8007fc6:	1a52      	subs	r2, r2, r1
 8007fc8:	f022 0203 	bic.w	r2, r2, #3
 8007fcc:	3903      	subs	r1, #3
 8007fce:	458c      	cmp	ip, r1
 8007fd0:	bf38      	it	cc
 8007fd2:	2200      	movcc	r2, #0
 8007fd4:	441a      	add	r2, r3
 8007fd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007fda:	b17b      	cbz	r3, 8007ffc <__mdiff+0x104>
 8007fdc:	6106      	str	r6, [r0, #16]
 8007fde:	e7a5      	b.n	8007f2c <__mdiff+0x34>
 8007fe0:	f855 8b04 	ldr.w	r8, [r5], #4
 8007fe4:	fa17 f488 	uxtah	r4, r7, r8
 8007fe8:	1422      	asrs	r2, r4, #16
 8007fea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007fee:	b2a4      	uxth	r4, r4
 8007ff0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007ff4:	f84e 4b04 	str.w	r4, [lr], #4
 8007ff8:	1417      	asrs	r7, r2, #16
 8007ffa:	e7e0      	b.n	8007fbe <__mdiff+0xc6>
 8007ffc:	3e01      	subs	r6, #1
 8007ffe:	e7ea      	b.n	8007fd6 <__mdiff+0xde>
 8008000:	0800992c 	.word	0x0800992c
 8008004:	080099bc 	.word	0x080099bc

08008008 <__ulp>:
 8008008:	b082      	sub	sp, #8
 800800a:	ed8d 0b00 	vstr	d0, [sp]
 800800e:	9b01      	ldr	r3, [sp, #4]
 8008010:	4912      	ldr	r1, [pc, #72]	; (800805c <__ulp+0x54>)
 8008012:	4019      	ands	r1, r3
 8008014:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008018:	2900      	cmp	r1, #0
 800801a:	dd05      	ble.n	8008028 <__ulp+0x20>
 800801c:	2200      	movs	r2, #0
 800801e:	460b      	mov	r3, r1
 8008020:	ec43 2b10 	vmov	d0, r2, r3
 8008024:	b002      	add	sp, #8
 8008026:	4770      	bx	lr
 8008028:	4249      	negs	r1, r1
 800802a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800802e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008032:	f04f 0200 	mov.w	r2, #0
 8008036:	f04f 0300 	mov.w	r3, #0
 800803a:	da04      	bge.n	8008046 <__ulp+0x3e>
 800803c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008040:	fa41 f300 	asr.w	r3, r1, r0
 8008044:	e7ec      	b.n	8008020 <__ulp+0x18>
 8008046:	f1a0 0114 	sub.w	r1, r0, #20
 800804a:	291e      	cmp	r1, #30
 800804c:	bfda      	itte	le
 800804e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008052:	fa20 f101 	lsrle.w	r1, r0, r1
 8008056:	2101      	movgt	r1, #1
 8008058:	460a      	mov	r2, r1
 800805a:	e7e1      	b.n	8008020 <__ulp+0x18>
 800805c:	7ff00000 	.word	0x7ff00000

08008060 <__b2d>:
 8008060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008062:	6905      	ldr	r5, [r0, #16]
 8008064:	f100 0714 	add.w	r7, r0, #20
 8008068:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800806c:	1f2e      	subs	r6, r5, #4
 800806e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008072:	4620      	mov	r0, r4
 8008074:	f7ff fd52 	bl	8007b1c <__hi0bits>
 8008078:	f1c0 0320 	rsb	r3, r0, #32
 800807c:	280a      	cmp	r0, #10
 800807e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80080fc <__b2d+0x9c>
 8008082:	600b      	str	r3, [r1, #0]
 8008084:	dc14      	bgt.n	80080b0 <__b2d+0x50>
 8008086:	f1c0 0e0b 	rsb	lr, r0, #11
 800808a:	fa24 f10e 	lsr.w	r1, r4, lr
 800808e:	42b7      	cmp	r7, r6
 8008090:	ea41 030c 	orr.w	r3, r1, ip
 8008094:	bf34      	ite	cc
 8008096:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800809a:	2100      	movcs	r1, #0
 800809c:	3015      	adds	r0, #21
 800809e:	fa04 f000 	lsl.w	r0, r4, r0
 80080a2:	fa21 f10e 	lsr.w	r1, r1, lr
 80080a6:	ea40 0201 	orr.w	r2, r0, r1
 80080aa:	ec43 2b10 	vmov	d0, r2, r3
 80080ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080b0:	42b7      	cmp	r7, r6
 80080b2:	bf3a      	itte	cc
 80080b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80080b8:	f1a5 0608 	subcc.w	r6, r5, #8
 80080bc:	2100      	movcs	r1, #0
 80080be:	380b      	subs	r0, #11
 80080c0:	d017      	beq.n	80080f2 <__b2d+0x92>
 80080c2:	f1c0 0c20 	rsb	ip, r0, #32
 80080c6:	fa04 f500 	lsl.w	r5, r4, r0
 80080ca:	42be      	cmp	r6, r7
 80080cc:	fa21 f40c 	lsr.w	r4, r1, ip
 80080d0:	ea45 0504 	orr.w	r5, r5, r4
 80080d4:	bf8c      	ite	hi
 80080d6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80080da:	2400      	movls	r4, #0
 80080dc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80080e0:	fa01 f000 	lsl.w	r0, r1, r0
 80080e4:	fa24 f40c 	lsr.w	r4, r4, ip
 80080e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80080ec:	ea40 0204 	orr.w	r2, r0, r4
 80080f0:	e7db      	b.n	80080aa <__b2d+0x4a>
 80080f2:	ea44 030c 	orr.w	r3, r4, ip
 80080f6:	460a      	mov	r2, r1
 80080f8:	e7d7      	b.n	80080aa <__b2d+0x4a>
 80080fa:	bf00      	nop
 80080fc:	3ff00000 	.word	0x3ff00000

08008100 <__d2b>:
 8008100:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008104:	4689      	mov	r9, r1
 8008106:	2101      	movs	r1, #1
 8008108:	ec57 6b10 	vmov	r6, r7, d0
 800810c:	4690      	mov	r8, r2
 800810e:	f7ff fc0f 	bl	8007930 <_Balloc>
 8008112:	4604      	mov	r4, r0
 8008114:	b930      	cbnz	r0, 8008124 <__d2b+0x24>
 8008116:	4602      	mov	r2, r0
 8008118:	4b25      	ldr	r3, [pc, #148]	; (80081b0 <__d2b+0xb0>)
 800811a:	4826      	ldr	r0, [pc, #152]	; (80081b4 <__d2b+0xb4>)
 800811c:	f240 310a 	movw	r1, #778	; 0x30a
 8008120:	f000 fb0e 	bl	8008740 <__assert_func>
 8008124:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800812c:	bb35      	cbnz	r5, 800817c <__d2b+0x7c>
 800812e:	2e00      	cmp	r6, #0
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	d028      	beq.n	8008186 <__d2b+0x86>
 8008134:	4668      	mov	r0, sp
 8008136:	9600      	str	r6, [sp, #0]
 8008138:	f7ff fd10 	bl	8007b5c <__lo0bits>
 800813c:	9900      	ldr	r1, [sp, #0]
 800813e:	b300      	cbz	r0, 8008182 <__d2b+0x82>
 8008140:	9a01      	ldr	r2, [sp, #4]
 8008142:	f1c0 0320 	rsb	r3, r0, #32
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	430b      	orrs	r3, r1
 800814c:	40c2      	lsrs	r2, r0
 800814e:	6163      	str	r3, [r4, #20]
 8008150:	9201      	str	r2, [sp, #4]
 8008152:	9b01      	ldr	r3, [sp, #4]
 8008154:	61a3      	str	r3, [r4, #24]
 8008156:	2b00      	cmp	r3, #0
 8008158:	bf14      	ite	ne
 800815a:	2202      	movne	r2, #2
 800815c:	2201      	moveq	r2, #1
 800815e:	6122      	str	r2, [r4, #16]
 8008160:	b1d5      	cbz	r5, 8008198 <__d2b+0x98>
 8008162:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008166:	4405      	add	r5, r0
 8008168:	f8c9 5000 	str.w	r5, [r9]
 800816c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008170:	f8c8 0000 	str.w	r0, [r8]
 8008174:	4620      	mov	r0, r4
 8008176:	b003      	add	sp, #12
 8008178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800817c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008180:	e7d5      	b.n	800812e <__d2b+0x2e>
 8008182:	6161      	str	r1, [r4, #20]
 8008184:	e7e5      	b.n	8008152 <__d2b+0x52>
 8008186:	a801      	add	r0, sp, #4
 8008188:	f7ff fce8 	bl	8007b5c <__lo0bits>
 800818c:	9b01      	ldr	r3, [sp, #4]
 800818e:	6163      	str	r3, [r4, #20]
 8008190:	2201      	movs	r2, #1
 8008192:	6122      	str	r2, [r4, #16]
 8008194:	3020      	adds	r0, #32
 8008196:	e7e3      	b.n	8008160 <__d2b+0x60>
 8008198:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800819c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081a0:	f8c9 0000 	str.w	r0, [r9]
 80081a4:	6918      	ldr	r0, [r3, #16]
 80081a6:	f7ff fcb9 	bl	8007b1c <__hi0bits>
 80081aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081ae:	e7df      	b.n	8008170 <__d2b+0x70>
 80081b0:	0800992c 	.word	0x0800992c
 80081b4:	080099bc 	.word	0x080099bc

080081b8 <__ratio>:
 80081b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	4688      	mov	r8, r1
 80081be:	4669      	mov	r1, sp
 80081c0:	4681      	mov	r9, r0
 80081c2:	f7ff ff4d 	bl	8008060 <__b2d>
 80081c6:	a901      	add	r1, sp, #4
 80081c8:	4640      	mov	r0, r8
 80081ca:	ec55 4b10 	vmov	r4, r5, d0
 80081ce:	f7ff ff47 	bl	8008060 <__b2d>
 80081d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80081da:	eba3 0c02 	sub.w	ip, r3, r2
 80081de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80081e2:	1a9b      	subs	r3, r3, r2
 80081e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80081e8:	ec51 0b10 	vmov	r0, r1, d0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	bfd6      	itet	le
 80081f0:	460a      	movle	r2, r1
 80081f2:	462a      	movgt	r2, r5
 80081f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80081f8:	468b      	mov	fp, r1
 80081fa:	462f      	mov	r7, r5
 80081fc:	bfd4      	ite	le
 80081fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008202:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008206:	4620      	mov	r0, r4
 8008208:	ee10 2a10 	vmov	r2, s0
 800820c:	465b      	mov	r3, fp
 800820e:	4639      	mov	r1, r7
 8008210:	f7f8 fb3c 	bl	800088c <__aeabi_ddiv>
 8008214:	ec41 0b10 	vmov	d0, r0, r1
 8008218:	b003      	add	sp, #12
 800821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800821e <__copybits>:
 800821e:	3901      	subs	r1, #1
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	1149      	asrs	r1, r1, #5
 8008224:	6914      	ldr	r4, [r2, #16]
 8008226:	3101      	adds	r1, #1
 8008228:	f102 0314 	add.w	r3, r2, #20
 800822c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008230:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008234:	1f05      	subs	r5, r0, #4
 8008236:	42a3      	cmp	r3, r4
 8008238:	d30c      	bcc.n	8008254 <__copybits+0x36>
 800823a:	1aa3      	subs	r3, r4, r2
 800823c:	3b11      	subs	r3, #17
 800823e:	f023 0303 	bic.w	r3, r3, #3
 8008242:	3211      	adds	r2, #17
 8008244:	42a2      	cmp	r2, r4
 8008246:	bf88      	it	hi
 8008248:	2300      	movhi	r3, #0
 800824a:	4418      	add	r0, r3
 800824c:	2300      	movs	r3, #0
 800824e:	4288      	cmp	r0, r1
 8008250:	d305      	bcc.n	800825e <__copybits+0x40>
 8008252:	bd70      	pop	{r4, r5, r6, pc}
 8008254:	f853 6b04 	ldr.w	r6, [r3], #4
 8008258:	f845 6f04 	str.w	r6, [r5, #4]!
 800825c:	e7eb      	b.n	8008236 <__copybits+0x18>
 800825e:	f840 3b04 	str.w	r3, [r0], #4
 8008262:	e7f4      	b.n	800824e <__copybits+0x30>

08008264 <__any_on>:
 8008264:	f100 0214 	add.w	r2, r0, #20
 8008268:	6900      	ldr	r0, [r0, #16]
 800826a:	114b      	asrs	r3, r1, #5
 800826c:	4298      	cmp	r0, r3
 800826e:	b510      	push	{r4, lr}
 8008270:	db11      	blt.n	8008296 <__any_on+0x32>
 8008272:	dd0a      	ble.n	800828a <__any_on+0x26>
 8008274:	f011 011f 	ands.w	r1, r1, #31
 8008278:	d007      	beq.n	800828a <__any_on+0x26>
 800827a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800827e:	fa24 f001 	lsr.w	r0, r4, r1
 8008282:	fa00 f101 	lsl.w	r1, r0, r1
 8008286:	428c      	cmp	r4, r1
 8008288:	d10b      	bne.n	80082a2 <__any_on+0x3e>
 800828a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800828e:	4293      	cmp	r3, r2
 8008290:	d803      	bhi.n	800829a <__any_on+0x36>
 8008292:	2000      	movs	r0, #0
 8008294:	bd10      	pop	{r4, pc}
 8008296:	4603      	mov	r3, r0
 8008298:	e7f7      	b.n	800828a <__any_on+0x26>
 800829a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800829e:	2900      	cmp	r1, #0
 80082a0:	d0f5      	beq.n	800828e <__any_on+0x2a>
 80082a2:	2001      	movs	r0, #1
 80082a4:	e7f6      	b.n	8008294 <__any_on+0x30>

080082a6 <_calloc_r>:
 80082a6:	b513      	push	{r0, r1, r4, lr}
 80082a8:	434a      	muls	r2, r1
 80082aa:	4611      	mov	r1, r2
 80082ac:	9201      	str	r2, [sp, #4]
 80082ae:	f000 f859 	bl	8008364 <_malloc_r>
 80082b2:	4604      	mov	r4, r0
 80082b4:	b118      	cbz	r0, 80082be <_calloc_r+0x18>
 80082b6:	9a01      	ldr	r2, [sp, #4]
 80082b8:	2100      	movs	r1, #0
 80082ba:	f7fc fbc9 	bl	8004a50 <memset>
 80082be:	4620      	mov	r0, r4
 80082c0:	b002      	add	sp, #8
 80082c2:	bd10      	pop	{r4, pc}

080082c4 <_free_r>:
 80082c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082c6:	2900      	cmp	r1, #0
 80082c8:	d048      	beq.n	800835c <_free_r+0x98>
 80082ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ce:	9001      	str	r0, [sp, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f1a1 0404 	sub.w	r4, r1, #4
 80082d6:	bfb8      	it	lt
 80082d8:	18e4      	addlt	r4, r4, r3
 80082da:	f000 fa7b 	bl	80087d4 <__malloc_lock>
 80082de:	4a20      	ldr	r2, [pc, #128]	; (8008360 <_free_r+0x9c>)
 80082e0:	9801      	ldr	r0, [sp, #4]
 80082e2:	6813      	ldr	r3, [r2, #0]
 80082e4:	4615      	mov	r5, r2
 80082e6:	b933      	cbnz	r3, 80082f6 <_free_r+0x32>
 80082e8:	6063      	str	r3, [r4, #4]
 80082ea:	6014      	str	r4, [r2, #0]
 80082ec:	b003      	add	sp, #12
 80082ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082f2:	f000 ba75 	b.w	80087e0 <__malloc_unlock>
 80082f6:	42a3      	cmp	r3, r4
 80082f8:	d90b      	bls.n	8008312 <_free_r+0x4e>
 80082fa:	6821      	ldr	r1, [r4, #0]
 80082fc:	1862      	adds	r2, r4, r1
 80082fe:	4293      	cmp	r3, r2
 8008300:	bf04      	itt	eq
 8008302:	681a      	ldreq	r2, [r3, #0]
 8008304:	685b      	ldreq	r3, [r3, #4]
 8008306:	6063      	str	r3, [r4, #4]
 8008308:	bf04      	itt	eq
 800830a:	1852      	addeq	r2, r2, r1
 800830c:	6022      	streq	r2, [r4, #0]
 800830e:	602c      	str	r4, [r5, #0]
 8008310:	e7ec      	b.n	80082ec <_free_r+0x28>
 8008312:	461a      	mov	r2, r3
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	b10b      	cbz	r3, 800831c <_free_r+0x58>
 8008318:	42a3      	cmp	r3, r4
 800831a:	d9fa      	bls.n	8008312 <_free_r+0x4e>
 800831c:	6811      	ldr	r1, [r2, #0]
 800831e:	1855      	adds	r5, r2, r1
 8008320:	42a5      	cmp	r5, r4
 8008322:	d10b      	bne.n	800833c <_free_r+0x78>
 8008324:	6824      	ldr	r4, [r4, #0]
 8008326:	4421      	add	r1, r4
 8008328:	1854      	adds	r4, r2, r1
 800832a:	42a3      	cmp	r3, r4
 800832c:	6011      	str	r1, [r2, #0]
 800832e:	d1dd      	bne.n	80082ec <_free_r+0x28>
 8008330:	681c      	ldr	r4, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	6053      	str	r3, [r2, #4]
 8008336:	4421      	add	r1, r4
 8008338:	6011      	str	r1, [r2, #0]
 800833a:	e7d7      	b.n	80082ec <_free_r+0x28>
 800833c:	d902      	bls.n	8008344 <_free_r+0x80>
 800833e:	230c      	movs	r3, #12
 8008340:	6003      	str	r3, [r0, #0]
 8008342:	e7d3      	b.n	80082ec <_free_r+0x28>
 8008344:	6825      	ldr	r5, [r4, #0]
 8008346:	1961      	adds	r1, r4, r5
 8008348:	428b      	cmp	r3, r1
 800834a:	bf04      	itt	eq
 800834c:	6819      	ldreq	r1, [r3, #0]
 800834e:	685b      	ldreq	r3, [r3, #4]
 8008350:	6063      	str	r3, [r4, #4]
 8008352:	bf04      	itt	eq
 8008354:	1949      	addeq	r1, r1, r5
 8008356:	6021      	streq	r1, [r4, #0]
 8008358:	6054      	str	r4, [r2, #4]
 800835a:	e7c7      	b.n	80082ec <_free_r+0x28>
 800835c:	b003      	add	sp, #12
 800835e:	bd30      	pop	{r4, r5, pc}
 8008360:	20000210 	.word	0x20000210

08008364 <_malloc_r>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	1ccd      	adds	r5, r1, #3
 8008368:	f025 0503 	bic.w	r5, r5, #3
 800836c:	3508      	adds	r5, #8
 800836e:	2d0c      	cmp	r5, #12
 8008370:	bf38      	it	cc
 8008372:	250c      	movcc	r5, #12
 8008374:	2d00      	cmp	r5, #0
 8008376:	4606      	mov	r6, r0
 8008378:	db01      	blt.n	800837e <_malloc_r+0x1a>
 800837a:	42a9      	cmp	r1, r5
 800837c:	d903      	bls.n	8008386 <_malloc_r+0x22>
 800837e:	230c      	movs	r3, #12
 8008380:	6033      	str	r3, [r6, #0]
 8008382:	2000      	movs	r0, #0
 8008384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008386:	f000 fa25 	bl	80087d4 <__malloc_lock>
 800838a:	4921      	ldr	r1, [pc, #132]	; (8008410 <_malloc_r+0xac>)
 800838c:	680a      	ldr	r2, [r1, #0]
 800838e:	4614      	mov	r4, r2
 8008390:	b99c      	cbnz	r4, 80083ba <_malloc_r+0x56>
 8008392:	4f20      	ldr	r7, [pc, #128]	; (8008414 <_malloc_r+0xb0>)
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	b923      	cbnz	r3, 80083a2 <_malloc_r+0x3e>
 8008398:	4621      	mov	r1, r4
 800839a:	4630      	mov	r0, r6
 800839c:	f000 f9a0 	bl	80086e0 <_sbrk_r>
 80083a0:	6038      	str	r0, [r7, #0]
 80083a2:	4629      	mov	r1, r5
 80083a4:	4630      	mov	r0, r6
 80083a6:	f000 f99b 	bl	80086e0 <_sbrk_r>
 80083aa:	1c43      	adds	r3, r0, #1
 80083ac:	d123      	bne.n	80083f6 <_malloc_r+0x92>
 80083ae:	230c      	movs	r3, #12
 80083b0:	6033      	str	r3, [r6, #0]
 80083b2:	4630      	mov	r0, r6
 80083b4:	f000 fa14 	bl	80087e0 <__malloc_unlock>
 80083b8:	e7e3      	b.n	8008382 <_malloc_r+0x1e>
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	1b5b      	subs	r3, r3, r5
 80083be:	d417      	bmi.n	80083f0 <_malloc_r+0x8c>
 80083c0:	2b0b      	cmp	r3, #11
 80083c2:	d903      	bls.n	80083cc <_malloc_r+0x68>
 80083c4:	6023      	str	r3, [r4, #0]
 80083c6:	441c      	add	r4, r3
 80083c8:	6025      	str	r5, [r4, #0]
 80083ca:	e004      	b.n	80083d6 <_malloc_r+0x72>
 80083cc:	6863      	ldr	r3, [r4, #4]
 80083ce:	42a2      	cmp	r2, r4
 80083d0:	bf0c      	ite	eq
 80083d2:	600b      	streq	r3, [r1, #0]
 80083d4:	6053      	strne	r3, [r2, #4]
 80083d6:	4630      	mov	r0, r6
 80083d8:	f000 fa02 	bl	80087e0 <__malloc_unlock>
 80083dc:	f104 000b 	add.w	r0, r4, #11
 80083e0:	1d23      	adds	r3, r4, #4
 80083e2:	f020 0007 	bic.w	r0, r0, #7
 80083e6:	1ac2      	subs	r2, r0, r3
 80083e8:	d0cc      	beq.n	8008384 <_malloc_r+0x20>
 80083ea:	1a1b      	subs	r3, r3, r0
 80083ec:	50a3      	str	r3, [r4, r2]
 80083ee:	e7c9      	b.n	8008384 <_malloc_r+0x20>
 80083f0:	4622      	mov	r2, r4
 80083f2:	6864      	ldr	r4, [r4, #4]
 80083f4:	e7cc      	b.n	8008390 <_malloc_r+0x2c>
 80083f6:	1cc4      	adds	r4, r0, #3
 80083f8:	f024 0403 	bic.w	r4, r4, #3
 80083fc:	42a0      	cmp	r0, r4
 80083fe:	d0e3      	beq.n	80083c8 <_malloc_r+0x64>
 8008400:	1a21      	subs	r1, r4, r0
 8008402:	4630      	mov	r0, r6
 8008404:	f000 f96c 	bl	80086e0 <_sbrk_r>
 8008408:	3001      	adds	r0, #1
 800840a:	d1dd      	bne.n	80083c8 <_malloc_r+0x64>
 800840c:	e7cf      	b.n	80083ae <_malloc_r+0x4a>
 800840e:	bf00      	nop
 8008410:	20000210 	.word	0x20000210
 8008414:	20000214 	.word	0x20000214

08008418 <__ssputs_r>:
 8008418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800841c:	688e      	ldr	r6, [r1, #8]
 800841e:	429e      	cmp	r6, r3
 8008420:	4682      	mov	sl, r0
 8008422:	460c      	mov	r4, r1
 8008424:	4690      	mov	r8, r2
 8008426:	461f      	mov	r7, r3
 8008428:	d838      	bhi.n	800849c <__ssputs_r+0x84>
 800842a:	898a      	ldrh	r2, [r1, #12]
 800842c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008430:	d032      	beq.n	8008498 <__ssputs_r+0x80>
 8008432:	6825      	ldr	r5, [r4, #0]
 8008434:	6909      	ldr	r1, [r1, #16]
 8008436:	eba5 0901 	sub.w	r9, r5, r1
 800843a:	6965      	ldr	r5, [r4, #20]
 800843c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008440:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008444:	3301      	adds	r3, #1
 8008446:	444b      	add	r3, r9
 8008448:	106d      	asrs	r5, r5, #1
 800844a:	429d      	cmp	r5, r3
 800844c:	bf38      	it	cc
 800844e:	461d      	movcc	r5, r3
 8008450:	0553      	lsls	r3, r2, #21
 8008452:	d531      	bpl.n	80084b8 <__ssputs_r+0xa0>
 8008454:	4629      	mov	r1, r5
 8008456:	f7ff ff85 	bl	8008364 <_malloc_r>
 800845a:	4606      	mov	r6, r0
 800845c:	b950      	cbnz	r0, 8008474 <__ssputs_r+0x5c>
 800845e:	230c      	movs	r3, #12
 8008460:	f8ca 3000 	str.w	r3, [sl]
 8008464:	89a3      	ldrh	r3, [r4, #12]
 8008466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800846a:	81a3      	strh	r3, [r4, #12]
 800846c:	f04f 30ff 	mov.w	r0, #4294967295
 8008470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008474:	6921      	ldr	r1, [r4, #16]
 8008476:	464a      	mov	r2, r9
 8008478:	f7ff fa4c 	bl	8007914 <memcpy>
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008486:	81a3      	strh	r3, [r4, #12]
 8008488:	6126      	str	r6, [r4, #16]
 800848a:	6165      	str	r5, [r4, #20]
 800848c:	444e      	add	r6, r9
 800848e:	eba5 0509 	sub.w	r5, r5, r9
 8008492:	6026      	str	r6, [r4, #0]
 8008494:	60a5      	str	r5, [r4, #8]
 8008496:	463e      	mov	r6, r7
 8008498:	42be      	cmp	r6, r7
 800849a:	d900      	bls.n	800849e <__ssputs_r+0x86>
 800849c:	463e      	mov	r6, r7
 800849e:	4632      	mov	r2, r6
 80084a0:	6820      	ldr	r0, [r4, #0]
 80084a2:	4641      	mov	r1, r8
 80084a4:	f000 f97c 	bl	80087a0 <memmove>
 80084a8:	68a3      	ldr	r3, [r4, #8]
 80084aa:	6822      	ldr	r2, [r4, #0]
 80084ac:	1b9b      	subs	r3, r3, r6
 80084ae:	4432      	add	r2, r6
 80084b0:	60a3      	str	r3, [r4, #8]
 80084b2:	6022      	str	r2, [r4, #0]
 80084b4:	2000      	movs	r0, #0
 80084b6:	e7db      	b.n	8008470 <__ssputs_r+0x58>
 80084b8:	462a      	mov	r2, r5
 80084ba:	f000 f997 	bl	80087ec <_realloc_r>
 80084be:	4606      	mov	r6, r0
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d1e1      	bne.n	8008488 <__ssputs_r+0x70>
 80084c4:	6921      	ldr	r1, [r4, #16]
 80084c6:	4650      	mov	r0, sl
 80084c8:	f7ff fefc 	bl	80082c4 <_free_r>
 80084cc:	e7c7      	b.n	800845e <__ssputs_r+0x46>
	...

080084d0 <_svfiprintf_r>:
 80084d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	4698      	mov	r8, r3
 80084d6:	898b      	ldrh	r3, [r1, #12]
 80084d8:	061b      	lsls	r3, r3, #24
 80084da:	b09d      	sub	sp, #116	; 0x74
 80084dc:	4607      	mov	r7, r0
 80084de:	460d      	mov	r5, r1
 80084e0:	4614      	mov	r4, r2
 80084e2:	d50e      	bpl.n	8008502 <_svfiprintf_r+0x32>
 80084e4:	690b      	ldr	r3, [r1, #16]
 80084e6:	b963      	cbnz	r3, 8008502 <_svfiprintf_r+0x32>
 80084e8:	2140      	movs	r1, #64	; 0x40
 80084ea:	f7ff ff3b 	bl	8008364 <_malloc_r>
 80084ee:	6028      	str	r0, [r5, #0]
 80084f0:	6128      	str	r0, [r5, #16]
 80084f2:	b920      	cbnz	r0, 80084fe <_svfiprintf_r+0x2e>
 80084f4:	230c      	movs	r3, #12
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	f04f 30ff 	mov.w	r0, #4294967295
 80084fc:	e0d1      	b.n	80086a2 <_svfiprintf_r+0x1d2>
 80084fe:	2340      	movs	r3, #64	; 0x40
 8008500:	616b      	str	r3, [r5, #20]
 8008502:	2300      	movs	r3, #0
 8008504:	9309      	str	r3, [sp, #36]	; 0x24
 8008506:	2320      	movs	r3, #32
 8008508:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800850c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008510:	2330      	movs	r3, #48	; 0x30
 8008512:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086bc <_svfiprintf_r+0x1ec>
 8008516:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800851a:	f04f 0901 	mov.w	r9, #1
 800851e:	4623      	mov	r3, r4
 8008520:	469a      	mov	sl, r3
 8008522:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008526:	b10a      	cbz	r2, 800852c <_svfiprintf_r+0x5c>
 8008528:	2a25      	cmp	r2, #37	; 0x25
 800852a:	d1f9      	bne.n	8008520 <_svfiprintf_r+0x50>
 800852c:	ebba 0b04 	subs.w	fp, sl, r4
 8008530:	d00b      	beq.n	800854a <_svfiprintf_r+0x7a>
 8008532:	465b      	mov	r3, fp
 8008534:	4622      	mov	r2, r4
 8008536:	4629      	mov	r1, r5
 8008538:	4638      	mov	r0, r7
 800853a:	f7ff ff6d 	bl	8008418 <__ssputs_r>
 800853e:	3001      	adds	r0, #1
 8008540:	f000 80aa 	beq.w	8008698 <_svfiprintf_r+0x1c8>
 8008544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008546:	445a      	add	r2, fp
 8008548:	9209      	str	r2, [sp, #36]	; 0x24
 800854a:	f89a 3000 	ldrb.w	r3, [sl]
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 80a2 	beq.w	8008698 <_svfiprintf_r+0x1c8>
 8008554:	2300      	movs	r3, #0
 8008556:	f04f 32ff 	mov.w	r2, #4294967295
 800855a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800855e:	f10a 0a01 	add.w	sl, sl, #1
 8008562:	9304      	str	r3, [sp, #16]
 8008564:	9307      	str	r3, [sp, #28]
 8008566:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800856a:	931a      	str	r3, [sp, #104]	; 0x68
 800856c:	4654      	mov	r4, sl
 800856e:	2205      	movs	r2, #5
 8008570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008574:	4851      	ldr	r0, [pc, #324]	; (80086bc <_svfiprintf_r+0x1ec>)
 8008576:	f7f7 fe53 	bl	8000220 <memchr>
 800857a:	9a04      	ldr	r2, [sp, #16]
 800857c:	b9d8      	cbnz	r0, 80085b6 <_svfiprintf_r+0xe6>
 800857e:	06d0      	lsls	r0, r2, #27
 8008580:	bf44      	itt	mi
 8008582:	2320      	movmi	r3, #32
 8008584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008588:	0711      	lsls	r1, r2, #28
 800858a:	bf44      	itt	mi
 800858c:	232b      	movmi	r3, #43	; 0x2b
 800858e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008592:	f89a 3000 	ldrb.w	r3, [sl]
 8008596:	2b2a      	cmp	r3, #42	; 0x2a
 8008598:	d015      	beq.n	80085c6 <_svfiprintf_r+0xf6>
 800859a:	9a07      	ldr	r2, [sp, #28]
 800859c:	4654      	mov	r4, sl
 800859e:	2000      	movs	r0, #0
 80085a0:	f04f 0c0a 	mov.w	ip, #10
 80085a4:	4621      	mov	r1, r4
 80085a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085aa:	3b30      	subs	r3, #48	; 0x30
 80085ac:	2b09      	cmp	r3, #9
 80085ae:	d94e      	bls.n	800864e <_svfiprintf_r+0x17e>
 80085b0:	b1b0      	cbz	r0, 80085e0 <_svfiprintf_r+0x110>
 80085b2:	9207      	str	r2, [sp, #28]
 80085b4:	e014      	b.n	80085e0 <_svfiprintf_r+0x110>
 80085b6:	eba0 0308 	sub.w	r3, r0, r8
 80085ba:	fa09 f303 	lsl.w	r3, r9, r3
 80085be:	4313      	orrs	r3, r2
 80085c0:	9304      	str	r3, [sp, #16]
 80085c2:	46a2      	mov	sl, r4
 80085c4:	e7d2      	b.n	800856c <_svfiprintf_r+0x9c>
 80085c6:	9b03      	ldr	r3, [sp, #12]
 80085c8:	1d19      	adds	r1, r3, #4
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	9103      	str	r1, [sp, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	bfbb      	ittet	lt
 80085d2:	425b      	neglt	r3, r3
 80085d4:	f042 0202 	orrlt.w	r2, r2, #2
 80085d8:	9307      	strge	r3, [sp, #28]
 80085da:	9307      	strlt	r3, [sp, #28]
 80085dc:	bfb8      	it	lt
 80085de:	9204      	strlt	r2, [sp, #16]
 80085e0:	7823      	ldrb	r3, [r4, #0]
 80085e2:	2b2e      	cmp	r3, #46	; 0x2e
 80085e4:	d10c      	bne.n	8008600 <_svfiprintf_r+0x130>
 80085e6:	7863      	ldrb	r3, [r4, #1]
 80085e8:	2b2a      	cmp	r3, #42	; 0x2a
 80085ea:	d135      	bne.n	8008658 <_svfiprintf_r+0x188>
 80085ec:	9b03      	ldr	r3, [sp, #12]
 80085ee:	1d1a      	adds	r2, r3, #4
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	9203      	str	r2, [sp, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	bfb8      	it	lt
 80085f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80085fc:	3402      	adds	r4, #2
 80085fe:	9305      	str	r3, [sp, #20]
 8008600:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086cc <_svfiprintf_r+0x1fc>
 8008604:	7821      	ldrb	r1, [r4, #0]
 8008606:	2203      	movs	r2, #3
 8008608:	4650      	mov	r0, sl
 800860a:	f7f7 fe09 	bl	8000220 <memchr>
 800860e:	b140      	cbz	r0, 8008622 <_svfiprintf_r+0x152>
 8008610:	2340      	movs	r3, #64	; 0x40
 8008612:	eba0 000a 	sub.w	r0, r0, sl
 8008616:	fa03 f000 	lsl.w	r0, r3, r0
 800861a:	9b04      	ldr	r3, [sp, #16]
 800861c:	4303      	orrs	r3, r0
 800861e:	3401      	adds	r4, #1
 8008620:	9304      	str	r3, [sp, #16]
 8008622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008626:	4826      	ldr	r0, [pc, #152]	; (80086c0 <_svfiprintf_r+0x1f0>)
 8008628:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800862c:	2206      	movs	r2, #6
 800862e:	f7f7 fdf7 	bl	8000220 <memchr>
 8008632:	2800      	cmp	r0, #0
 8008634:	d038      	beq.n	80086a8 <_svfiprintf_r+0x1d8>
 8008636:	4b23      	ldr	r3, [pc, #140]	; (80086c4 <_svfiprintf_r+0x1f4>)
 8008638:	bb1b      	cbnz	r3, 8008682 <_svfiprintf_r+0x1b2>
 800863a:	9b03      	ldr	r3, [sp, #12]
 800863c:	3307      	adds	r3, #7
 800863e:	f023 0307 	bic.w	r3, r3, #7
 8008642:	3308      	adds	r3, #8
 8008644:	9303      	str	r3, [sp, #12]
 8008646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008648:	4433      	add	r3, r6
 800864a:	9309      	str	r3, [sp, #36]	; 0x24
 800864c:	e767      	b.n	800851e <_svfiprintf_r+0x4e>
 800864e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008652:	460c      	mov	r4, r1
 8008654:	2001      	movs	r0, #1
 8008656:	e7a5      	b.n	80085a4 <_svfiprintf_r+0xd4>
 8008658:	2300      	movs	r3, #0
 800865a:	3401      	adds	r4, #1
 800865c:	9305      	str	r3, [sp, #20]
 800865e:	4619      	mov	r1, r3
 8008660:	f04f 0c0a 	mov.w	ip, #10
 8008664:	4620      	mov	r0, r4
 8008666:	f810 2b01 	ldrb.w	r2, [r0], #1
 800866a:	3a30      	subs	r2, #48	; 0x30
 800866c:	2a09      	cmp	r2, #9
 800866e:	d903      	bls.n	8008678 <_svfiprintf_r+0x1a8>
 8008670:	2b00      	cmp	r3, #0
 8008672:	d0c5      	beq.n	8008600 <_svfiprintf_r+0x130>
 8008674:	9105      	str	r1, [sp, #20]
 8008676:	e7c3      	b.n	8008600 <_svfiprintf_r+0x130>
 8008678:	fb0c 2101 	mla	r1, ip, r1, r2
 800867c:	4604      	mov	r4, r0
 800867e:	2301      	movs	r3, #1
 8008680:	e7f0      	b.n	8008664 <_svfiprintf_r+0x194>
 8008682:	ab03      	add	r3, sp, #12
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	462a      	mov	r2, r5
 8008688:	4b0f      	ldr	r3, [pc, #60]	; (80086c8 <_svfiprintf_r+0x1f8>)
 800868a:	a904      	add	r1, sp, #16
 800868c:	4638      	mov	r0, r7
 800868e:	f7fc fa87 	bl	8004ba0 <_printf_float>
 8008692:	1c42      	adds	r2, r0, #1
 8008694:	4606      	mov	r6, r0
 8008696:	d1d6      	bne.n	8008646 <_svfiprintf_r+0x176>
 8008698:	89ab      	ldrh	r3, [r5, #12]
 800869a:	065b      	lsls	r3, r3, #25
 800869c:	f53f af2c 	bmi.w	80084f8 <_svfiprintf_r+0x28>
 80086a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086a2:	b01d      	add	sp, #116	; 0x74
 80086a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a8:	ab03      	add	r3, sp, #12
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	462a      	mov	r2, r5
 80086ae:	4b06      	ldr	r3, [pc, #24]	; (80086c8 <_svfiprintf_r+0x1f8>)
 80086b0:	a904      	add	r1, sp, #16
 80086b2:	4638      	mov	r0, r7
 80086b4:	f7fc fd18 	bl	80050e8 <_printf_i>
 80086b8:	e7eb      	b.n	8008692 <_svfiprintf_r+0x1c2>
 80086ba:	bf00      	nop
 80086bc:	08009b1c 	.word	0x08009b1c
 80086c0:	08009b26 	.word	0x08009b26
 80086c4:	08004ba1 	.word	0x08004ba1
 80086c8:	08008419 	.word	0x08008419
 80086cc:	08009b22 	.word	0x08009b22

080086d0 <nan>:
 80086d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80086d8 <nan+0x8>
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	00000000 	.word	0x00000000
 80086dc:	7ff80000 	.word	0x7ff80000

080086e0 <_sbrk_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4d06      	ldr	r5, [pc, #24]	; (80086fc <_sbrk_r+0x1c>)
 80086e4:	2300      	movs	r3, #0
 80086e6:	4604      	mov	r4, r0
 80086e8:	4608      	mov	r0, r1
 80086ea:	602b      	str	r3, [r5, #0]
 80086ec:	f7f9 fca4 	bl	8002038 <_sbrk>
 80086f0:	1c43      	adds	r3, r0, #1
 80086f2:	d102      	bne.n	80086fa <_sbrk_r+0x1a>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	b103      	cbz	r3, 80086fa <_sbrk_r+0x1a>
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	20000464 	.word	0x20000464

08008700 <strncmp>:
 8008700:	b510      	push	{r4, lr}
 8008702:	b16a      	cbz	r2, 8008720 <strncmp+0x20>
 8008704:	3901      	subs	r1, #1
 8008706:	1884      	adds	r4, r0, r2
 8008708:	f810 3b01 	ldrb.w	r3, [r0], #1
 800870c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008710:	4293      	cmp	r3, r2
 8008712:	d103      	bne.n	800871c <strncmp+0x1c>
 8008714:	42a0      	cmp	r0, r4
 8008716:	d001      	beq.n	800871c <strncmp+0x1c>
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1f5      	bne.n	8008708 <strncmp+0x8>
 800871c:	1a98      	subs	r0, r3, r2
 800871e:	bd10      	pop	{r4, pc}
 8008720:	4610      	mov	r0, r2
 8008722:	e7fc      	b.n	800871e <strncmp+0x1e>

08008724 <__ascii_wctomb>:
 8008724:	b149      	cbz	r1, 800873a <__ascii_wctomb+0x16>
 8008726:	2aff      	cmp	r2, #255	; 0xff
 8008728:	bf85      	ittet	hi
 800872a:	238a      	movhi	r3, #138	; 0x8a
 800872c:	6003      	strhi	r3, [r0, #0]
 800872e:	700a      	strbls	r2, [r1, #0]
 8008730:	f04f 30ff 	movhi.w	r0, #4294967295
 8008734:	bf98      	it	ls
 8008736:	2001      	movls	r0, #1
 8008738:	4770      	bx	lr
 800873a:	4608      	mov	r0, r1
 800873c:	4770      	bx	lr
	...

08008740 <__assert_func>:
 8008740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008742:	4614      	mov	r4, r2
 8008744:	461a      	mov	r2, r3
 8008746:	4b09      	ldr	r3, [pc, #36]	; (800876c <__assert_func+0x2c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4605      	mov	r5, r0
 800874c:	68d8      	ldr	r0, [r3, #12]
 800874e:	b14c      	cbz	r4, 8008764 <__assert_func+0x24>
 8008750:	4b07      	ldr	r3, [pc, #28]	; (8008770 <__assert_func+0x30>)
 8008752:	9100      	str	r1, [sp, #0]
 8008754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008758:	4906      	ldr	r1, [pc, #24]	; (8008774 <__assert_func+0x34>)
 800875a:	462b      	mov	r3, r5
 800875c:	f000 f80e 	bl	800877c <fiprintf>
 8008760:	f000 fa84 	bl	8008c6c <abort>
 8008764:	4b04      	ldr	r3, [pc, #16]	; (8008778 <__assert_func+0x38>)
 8008766:	461c      	mov	r4, r3
 8008768:	e7f3      	b.n	8008752 <__assert_func+0x12>
 800876a:	bf00      	nop
 800876c:	20000010 	.word	0x20000010
 8008770:	08009b2d 	.word	0x08009b2d
 8008774:	08009b3a 	.word	0x08009b3a
 8008778:	08009b68 	.word	0x08009b68

0800877c <fiprintf>:
 800877c:	b40e      	push	{r1, r2, r3}
 800877e:	b503      	push	{r0, r1, lr}
 8008780:	4601      	mov	r1, r0
 8008782:	ab03      	add	r3, sp, #12
 8008784:	4805      	ldr	r0, [pc, #20]	; (800879c <fiprintf+0x20>)
 8008786:	f853 2b04 	ldr.w	r2, [r3], #4
 800878a:	6800      	ldr	r0, [r0, #0]
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	f000 f87d 	bl	800888c <_vfiprintf_r>
 8008792:	b002      	add	sp, #8
 8008794:	f85d eb04 	ldr.w	lr, [sp], #4
 8008798:	b003      	add	sp, #12
 800879a:	4770      	bx	lr
 800879c:	20000010 	.word	0x20000010

080087a0 <memmove>:
 80087a0:	4288      	cmp	r0, r1
 80087a2:	b510      	push	{r4, lr}
 80087a4:	eb01 0402 	add.w	r4, r1, r2
 80087a8:	d902      	bls.n	80087b0 <memmove+0x10>
 80087aa:	4284      	cmp	r4, r0
 80087ac:	4623      	mov	r3, r4
 80087ae:	d807      	bhi.n	80087c0 <memmove+0x20>
 80087b0:	1e43      	subs	r3, r0, #1
 80087b2:	42a1      	cmp	r1, r4
 80087b4:	d008      	beq.n	80087c8 <memmove+0x28>
 80087b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087be:	e7f8      	b.n	80087b2 <memmove+0x12>
 80087c0:	4402      	add	r2, r0
 80087c2:	4601      	mov	r1, r0
 80087c4:	428a      	cmp	r2, r1
 80087c6:	d100      	bne.n	80087ca <memmove+0x2a>
 80087c8:	bd10      	pop	{r4, pc}
 80087ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087d2:	e7f7      	b.n	80087c4 <memmove+0x24>

080087d4 <__malloc_lock>:
 80087d4:	4801      	ldr	r0, [pc, #4]	; (80087dc <__malloc_lock+0x8>)
 80087d6:	f000 bc09 	b.w	8008fec <__retarget_lock_acquire_recursive>
 80087da:	bf00      	nop
 80087dc:	2000046c 	.word	0x2000046c

080087e0 <__malloc_unlock>:
 80087e0:	4801      	ldr	r0, [pc, #4]	; (80087e8 <__malloc_unlock+0x8>)
 80087e2:	f000 bc04 	b.w	8008fee <__retarget_lock_release_recursive>
 80087e6:	bf00      	nop
 80087e8:	2000046c 	.word	0x2000046c

080087ec <_realloc_r>:
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ee:	4607      	mov	r7, r0
 80087f0:	4614      	mov	r4, r2
 80087f2:	460e      	mov	r6, r1
 80087f4:	b921      	cbnz	r1, 8008800 <_realloc_r+0x14>
 80087f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087fa:	4611      	mov	r1, r2
 80087fc:	f7ff bdb2 	b.w	8008364 <_malloc_r>
 8008800:	b922      	cbnz	r2, 800880c <_realloc_r+0x20>
 8008802:	f7ff fd5f 	bl	80082c4 <_free_r>
 8008806:	4625      	mov	r5, r4
 8008808:	4628      	mov	r0, r5
 800880a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800880c:	f000 fc54 	bl	80090b8 <_malloc_usable_size_r>
 8008810:	42a0      	cmp	r0, r4
 8008812:	d20f      	bcs.n	8008834 <_realloc_r+0x48>
 8008814:	4621      	mov	r1, r4
 8008816:	4638      	mov	r0, r7
 8008818:	f7ff fda4 	bl	8008364 <_malloc_r>
 800881c:	4605      	mov	r5, r0
 800881e:	2800      	cmp	r0, #0
 8008820:	d0f2      	beq.n	8008808 <_realloc_r+0x1c>
 8008822:	4631      	mov	r1, r6
 8008824:	4622      	mov	r2, r4
 8008826:	f7ff f875 	bl	8007914 <memcpy>
 800882a:	4631      	mov	r1, r6
 800882c:	4638      	mov	r0, r7
 800882e:	f7ff fd49 	bl	80082c4 <_free_r>
 8008832:	e7e9      	b.n	8008808 <_realloc_r+0x1c>
 8008834:	4635      	mov	r5, r6
 8008836:	e7e7      	b.n	8008808 <_realloc_r+0x1c>

08008838 <__sfputc_r>:
 8008838:	6893      	ldr	r3, [r2, #8]
 800883a:	3b01      	subs	r3, #1
 800883c:	2b00      	cmp	r3, #0
 800883e:	b410      	push	{r4}
 8008840:	6093      	str	r3, [r2, #8]
 8008842:	da08      	bge.n	8008856 <__sfputc_r+0x1e>
 8008844:	6994      	ldr	r4, [r2, #24]
 8008846:	42a3      	cmp	r3, r4
 8008848:	db01      	blt.n	800884e <__sfputc_r+0x16>
 800884a:	290a      	cmp	r1, #10
 800884c:	d103      	bne.n	8008856 <__sfputc_r+0x1e>
 800884e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008852:	f000 b94b 	b.w	8008aec <__swbuf_r>
 8008856:	6813      	ldr	r3, [r2, #0]
 8008858:	1c58      	adds	r0, r3, #1
 800885a:	6010      	str	r0, [r2, #0]
 800885c:	7019      	strb	r1, [r3, #0]
 800885e:	4608      	mov	r0, r1
 8008860:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008864:	4770      	bx	lr

08008866 <__sfputs_r>:
 8008866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008868:	4606      	mov	r6, r0
 800886a:	460f      	mov	r7, r1
 800886c:	4614      	mov	r4, r2
 800886e:	18d5      	adds	r5, r2, r3
 8008870:	42ac      	cmp	r4, r5
 8008872:	d101      	bne.n	8008878 <__sfputs_r+0x12>
 8008874:	2000      	movs	r0, #0
 8008876:	e007      	b.n	8008888 <__sfputs_r+0x22>
 8008878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887c:	463a      	mov	r2, r7
 800887e:	4630      	mov	r0, r6
 8008880:	f7ff ffda 	bl	8008838 <__sfputc_r>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	d1f3      	bne.n	8008870 <__sfputs_r+0xa>
 8008888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800888c <_vfiprintf_r>:
 800888c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008890:	460d      	mov	r5, r1
 8008892:	b09d      	sub	sp, #116	; 0x74
 8008894:	4614      	mov	r4, r2
 8008896:	4698      	mov	r8, r3
 8008898:	4606      	mov	r6, r0
 800889a:	b118      	cbz	r0, 80088a4 <_vfiprintf_r+0x18>
 800889c:	6983      	ldr	r3, [r0, #24]
 800889e:	b90b      	cbnz	r3, 80088a4 <_vfiprintf_r+0x18>
 80088a0:	f000 fb06 	bl	8008eb0 <__sinit>
 80088a4:	4b89      	ldr	r3, [pc, #548]	; (8008acc <_vfiprintf_r+0x240>)
 80088a6:	429d      	cmp	r5, r3
 80088a8:	d11b      	bne.n	80088e2 <_vfiprintf_r+0x56>
 80088aa:	6875      	ldr	r5, [r6, #4]
 80088ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088ae:	07d9      	lsls	r1, r3, #31
 80088b0:	d405      	bmi.n	80088be <_vfiprintf_r+0x32>
 80088b2:	89ab      	ldrh	r3, [r5, #12]
 80088b4:	059a      	lsls	r2, r3, #22
 80088b6:	d402      	bmi.n	80088be <_vfiprintf_r+0x32>
 80088b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088ba:	f000 fb97 	bl	8008fec <__retarget_lock_acquire_recursive>
 80088be:	89ab      	ldrh	r3, [r5, #12]
 80088c0:	071b      	lsls	r3, r3, #28
 80088c2:	d501      	bpl.n	80088c8 <_vfiprintf_r+0x3c>
 80088c4:	692b      	ldr	r3, [r5, #16]
 80088c6:	b9eb      	cbnz	r3, 8008904 <_vfiprintf_r+0x78>
 80088c8:	4629      	mov	r1, r5
 80088ca:	4630      	mov	r0, r6
 80088cc:	f000 f960 	bl	8008b90 <__swsetup_r>
 80088d0:	b1c0      	cbz	r0, 8008904 <_vfiprintf_r+0x78>
 80088d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088d4:	07dc      	lsls	r4, r3, #31
 80088d6:	d50e      	bpl.n	80088f6 <_vfiprintf_r+0x6a>
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295
 80088dc:	b01d      	add	sp, #116	; 0x74
 80088de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e2:	4b7b      	ldr	r3, [pc, #492]	; (8008ad0 <_vfiprintf_r+0x244>)
 80088e4:	429d      	cmp	r5, r3
 80088e6:	d101      	bne.n	80088ec <_vfiprintf_r+0x60>
 80088e8:	68b5      	ldr	r5, [r6, #8]
 80088ea:	e7df      	b.n	80088ac <_vfiprintf_r+0x20>
 80088ec:	4b79      	ldr	r3, [pc, #484]	; (8008ad4 <_vfiprintf_r+0x248>)
 80088ee:	429d      	cmp	r5, r3
 80088f0:	bf08      	it	eq
 80088f2:	68f5      	ldreq	r5, [r6, #12]
 80088f4:	e7da      	b.n	80088ac <_vfiprintf_r+0x20>
 80088f6:	89ab      	ldrh	r3, [r5, #12]
 80088f8:	0598      	lsls	r0, r3, #22
 80088fa:	d4ed      	bmi.n	80088d8 <_vfiprintf_r+0x4c>
 80088fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088fe:	f000 fb76 	bl	8008fee <__retarget_lock_release_recursive>
 8008902:	e7e9      	b.n	80088d8 <_vfiprintf_r+0x4c>
 8008904:	2300      	movs	r3, #0
 8008906:	9309      	str	r3, [sp, #36]	; 0x24
 8008908:	2320      	movs	r3, #32
 800890a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800890e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008912:	2330      	movs	r3, #48	; 0x30
 8008914:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ad8 <_vfiprintf_r+0x24c>
 8008918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800891c:	f04f 0901 	mov.w	r9, #1
 8008920:	4623      	mov	r3, r4
 8008922:	469a      	mov	sl, r3
 8008924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008928:	b10a      	cbz	r2, 800892e <_vfiprintf_r+0xa2>
 800892a:	2a25      	cmp	r2, #37	; 0x25
 800892c:	d1f9      	bne.n	8008922 <_vfiprintf_r+0x96>
 800892e:	ebba 0b04 	subs.w	fp, sl, r4
 8008932:	d00b      	beq.n	800894c <_vfiprintf_r+0xc0>
 8008934:	465b      	mov	r3, fp
 8008936:	4622      	mov	r2, r4
 8008938:	4629      	mov	r1, r5
 800893a:	4630      	mov	r0, r6
 800893c:	f7ff ff93 	bl	8008866 <__sfputs_r>
 8008940:	3001      	adds	r0, #1
 8008942:	f000 80aa 	beq.w	8008a9a <_vfiprintf_r+0x20e>
 8008946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008948:	445a      	add	r2, fp
 800894a:	9209      	str	r2, [sp, #36]	; 0x24
 800894c:	f89a 3000 	ldrb.w	r3, [sl]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 80a2 	beq.w	8008a9a <_vfiprintf_r+0x20e>
 8008956:	2300      	movs	r3, #0
 8008958:	f04f 32ff 	mov.w	r2, #4294967295
 800895c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008960:	f10a 0a01 	add.w	sl, sl, #1
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	9307      	str	r3, [sp, #28]
 8008968:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800896c:	931a      	str	r3, [sp, #104]	; 0x68
 800896e:	4654      	mov	r4, sl
 8008970:	2205      	movs	r2, #5
 8008972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008976:	4858      	ldr	r0, [pc, #352]	; (8008ad8 <_vfiprintf_r+0x24c>)
 8008978:	f7f7 fc52 	bl	8000220 <memchr>
 800897c:	9a04      	ldr	r2, [sp, #16]
 800897e:	b9d8      	cbnz	r0, 80089b8 <_vfiprintf_r+0x12c>
 8008980:	06d1      	lsls	r1, r2, #27
 8008982:	bf44      	itt	mi
 8008984:	2320      	movmi	r3, #32
 8008986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800898a:	0713      	lsls	r3, r2, #28
 800898c:	bf44      	itt	mi
 800898e:	232b      	movmi	r3, #43	; 0x2b
 8008990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008994:	f89a 3000 	ldrb.w	r3, [sl]
 8008998:	2b2a      	cmp	r3, #42	; 0x2a
 800899a:	d015      	beq.n	80089c8 <_vfiprintf_r+0x13c>
 800899c:	9a07      	ldr	r2, [sp, #28]
 800899e:	4654      	mov	r4, sl
 80089a0:	2000      	movs	r0, #0
 80089a2:	f04f 0c0a 	mov.w	ip, #10
 80089a6:	4621      	mov	r1, r4
 80089a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ac:	3b30      	subs	r3, #48	; 0x30
 80089ae:	2b09      	cmp	r3, #9
 80089b0:	d94e      	bls.n	8008a50 <_vfiprintf_r+0x1c4>
 80089b2:	b1b0      	cbz	r0, 80089e2 <_vfiprintf_r+0x156>
 80089b4:	9207      	str	r2, [sp, #28]
 80089b6:	e014      	b.n	80089e2 <_vfiprintf_r+0x156>
 80089b8:	eba0 0308 	sub.w	r3, r0, r8
 80089bc:	fa09 f303 	lsl.w	r3, r9, r3
 80089c0:	4313      	orrs	r3, r2
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	46a2      	mov	sl, r4
 80089c6:	e7d2      	b.n	800896e <_vfiprintf_r+0xe2>
 80089c8:	9b03      	ldr	r3, [sp, #12]
 80089ca:	1d19      	adds	r1, r3, #4
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	9103      	str	r1, [sp, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfbb      	ittet	lt
 80089d4:	425b      	neglt	r3, r3
 80089d6:	f042 0202 	orrlt.w	r2, r2, #2
 80089da:	9307      	strge	r3, [sp, #28]
 80089dc:	9307      	strlt	r3, [sp, #28]
 80089de:	bfb8      	it	lt
 80089e0:	9204      	strlt	r2, [sp, #16]
 80089e2:	7823      	ldrb	r3, [r4, #0]
 80089e4:	2b2e      	cmp	r3, #46	; 0x2e
 80089e6:	d10c      	bne.n	8008a02 <_vfiprintf_r+0x176>
 80089e8:	7863      	ldrb	r3, [r4, #1]
 80089ea:	2b2a      	cmp	r3, #42	; 0x2a
 80089ec:	d135      	bne.n	8008a5a <_vfiprintf_r+0x1ce>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	1d1a      	adds	r2, r3, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	9203      	str	r2, [sp, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	bfb8      	it	lt
 80089fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80089fe:	3402      	adds	r4, #2
 8008a00:	9305      	str	r3, [sp, #20]
 8008a02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ae8 <_vfiprintf_r+0x25c>
 8008a06:	7821      	ldrb	r1, [r4, #0]
 8008a08:	2203      	movs	r2, #3
 8008a0a:	4650      	mov	r0, sl
 8008a0c:	f7f7 fc08 	bl	8000220 <memchr>
 8008a10:	b140      	cbz	r0, 8008a24 <_vfiprintf_r+0x198>
 8008a12:	2340      	movs	r3, #64	; 0x40
 8008a14:	eba0 000a 	sub.w	r0, r0, sl
 8008a18:	fa03 f000 	lsl.w	r0, r3, r0
 8008a1c:	9b04      	ldr	r3, [sp, #16]
 8008a1e:	4303      	orrs	r3, r0
 8008a20:	3401      	adds	r4, #1
 8008a22:	9304      	str	r3, [sp, #16]
 8008a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a28:	482c      	ldr	r0, [pc, #176]	; (8008adc <_vfiprintf_r+0x250>)
 8008a2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a2e:	2206      	movs	r2, #6
 8008a30:	f7f7 fbf6 	bl	8000220 <memchr>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d03f      	beq.n	8008ab8 <_vfiprintf_r+0x22c>
 8008a38:	4b29      	ldr	r3, [pc, #164]	; (8008ae0 <_vfiprintf_r+0x254>)
 8008a3a:	bb1b      	cbnz	r3, 8008a84 <_vfiprintf_r+0x1f8>
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	3307      	adds	r3, #7
 8008a40:	f023 0307 	bic.w	r3, r3, #7
 8008a44:	3308      	adds	r3, #8
 8008a46:	9303      	str	r3, [sp, #12]
 8008a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a4a:	443b      	add	r3, r7
 8008a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a4e:	e767      	b.n	8008920 <_vfiprintf_r+0x94>
 8008a50:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a54:	460c      	mov	r4, r1
 8008a56:	2001      	movs	r0, #1
 8008a58:	e7a5      	b.n	80089a6 <_vfiprintf_r+0x11a>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	3401      	adds	r4, #1
 8008a5e:	9305      	str	r3, [sp, #20]
 8008a60:	4619      	mov	r1, r3
 8008a62:	f04f 0c0a 	mov.w	ip, #10
 8008a66:	4620      	mov	r0, r4
 8008a68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a6c:	3a30      	subs	r2, #48	; 0x30
 8008a6e:	2a09      	cmp	r2, #9
 8008a70:	d903      	bls.n	8008a7a <_vfiprintf_r+0x1ee>
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0c5      	beq.n	8008a02 <_vfiprintf_r+0x176>
 8008a76:	9105      	str	r1, [sp, #20]
 8008a78:	e7c3      	b.n	8008a02 <_vfiprintf_r+0x176>
 8008a7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a7e:	4604      	mov	r4, r0
 8008a80:	2301      	movs	r3, #1
 8008a82:	e7f0      	b.n	8008a66 <_vfiprintf_r+0x1da>
 8008a84:	ab03      	add	r3, sp, #12
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	462a      	mov	r2, r5
 8008a8a:	4b16      	ldr	r3, [pc, #88]	; (8008ae4 <_vfiprintf_r+0x258>)
 8008a8c:	a904      	add	r1, sp, #16
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f7fc f886 	bl	8004ba0 <_printf_float>
 8008a94:	4607      	mov	r7, r0
 8008a96:	1c78      	adds	r0, r7, #1
 8008a98:	d1d6      	bne.n	8008a48 <_vfiprintf_r+0x1bc>
 8008a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a9c:	07d9      	lsls	r1, r3, #31
 8008a9e:	d405      	bmi.n	8008aac <_vfiprintf_r+0x220>
 8008aa0:	89ab      	ldrh	r3, [r5, #12]
 8008aa2:	059a      	lsls	r2, r3, #22
 8008aa4:	d402      	bmi.n	8008aac <_vfiprintf_r+0x220>
 8008aa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aa8:	f000 faa1 	bl	8008fee <__retarget_lock_release_recursive>
 8008aac:	89ab      	ldrh	r3, [r5, #12]
 8008aae:	065b      	lsls	r3, r3, #25
 8008ab0:	f53f af12 	bmi.w	80088d8 <_vfiprintf_r+0x4c>
 8008ab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ab6:	e711      	b.n	80088dc <_vfiprintf_r+0x50>
 8008ab8:	ab03      	add	r3, sp, #12
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	462a      	mov	r2, r5
 8008abe:	4b09      	ldr	r3, [pc, #36]	; (8008ae4 <_vfiprintf_r+0x258>)
 8008ac0:	a904      	add	r1, sp, #16
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f7fc fb10 	bl	80050e8 <_printf_i>
 8008ac8:	e7e4      	b.n	8008a94 <_vfiprintf_r+0x208>
 8008aca:	bf00      	nop
 8008acc:	08009b8c 	.word	0x08009b8c
 8008ad0:	08009bac 	.word	0x08009bac
 8008ad4:	08009b6c 	.word	0x08009b6c
 8008ad8:	08009b1c 	.word	0x08009b1c
 8008adc:	08009b26 	.word	0x08009b26
 8008ae0:	08004ba1 	.word	0x08004ba1
 8008ae4:	08008867 	.word	0x08008867
 8008ae8:	08009b22 	.word	0x08009b22

08008aec <__swbuf_r>:
 8008aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aee:	460e      	mov	r6, r1
 8008af0:	4614      	mov	r4, r2
 8008af2:	4605      	mov	r5, r0
 8008af4:	b118      	cbz	r0, 8008afe <__swbuf_r+0x12>
 8008af6:	6983      	ldr	r3, [r0, #24]
 8008af8:	b90b      	cbnz	r3, 8008afe <__swbuf_r+0x12>
 8008afa:	f000 f9d9 	bl	8008eb0 <__sinit>
 8008afe:	4b21      	ldr	r3, [pc, #132]	; (8008b84 <__swbuf_r+0x98>)
 8008b00:	429c      	cmp	r4, r3
 8008b02:	d12b      	bne.n	8008b5c <__swbuf_r+0x70>
 8008b04:	686c      	ldr	r4, [r5, #4]
 8008b06:	69a3      	ldr	r3, [r4, #24]
 8008b08:	60a3      	str	r3, [r4, #8]
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	071a      	lsls	r2, r3, #28
 8008b0e:	d52f      	bpl.n	8008b70 <__swbuf_r+0x84>
 8008b10:	6923      	ldr	r3, [r4, #16]
 8008b12:	b36b      	cbz	r3, 8008b70 <__swbuf_r+0x84>
 8008b14:	6923      	ldr	r3, [r4, #16]
 8008b16:	6820      	ldr	r0, [r4, #0]
 8008b18:	1ac0      	subs	r0, r0, r3
 8008b1a:	6963      	ldr	r3, [r4, #20]
 8008b1c:	b2f6      	uxtb	r6, r6
 8008b1e:	4283      	cmp	r3, r0
 8008b20:	4637      	mov	r7, r6
 8008b22:	dc04      	bgt.n	8008b2e <__swbuf_r+0x42>
 8008b24:	4621      	mov	r1, r4
 8008b26:	4628      	mov	r0, r5
 8008b28:	f000 f92e 	bl	8008d88 <_fflush_r>
 8008b2c:	bb30      	cbnz	r0, 8008b7c <__swbuf_r+0x90>
 8008b2e:	68a3      	ldr	r3, [r4, #8]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	60a3      	str	r3, [r4, #8]
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	6022      	str	r2, [r4, #0]
 8008b3a:	701e      	strb	r6, [r3, #0]
 8008b3c:	6963      	ldr	r3, [r4, #20]
 8008b3e:	3001      	adds	r0, #1
 8008b40:	4283      	cmp	r3, r0
 8008b42:	d004      	beq.n	8008b4e <__swbuf_r+0x62>
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	07db      	lsls	r3, r3, #31
 8008b48:	d506      	bpl.n	8008b58 <__swbuf_r+0x6c>
 8008b4a:	2e0a      	cmp	r6, #10
 8008b4c:	d104      	bne.n	8008b58 <__swbuf_r+0x6c>
 8008b4e:	4621      	mov	r1, r4
 8008b50:	4628      	mov	r0, r5
 8008b52:	f000 f919 	bl	8008d88 <_fflush_r>
 8008b56:	b988      	cbnz	r0, 8008b7c <__swbuf_r+0x90>
 8008b58:	4638      	mov	r0, r7
 8008b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b5c:	4b0a      	ldr	r3, [pc, #40]	; (8008b88 <__swbuf_r+0x9c>)
 8008b5e:	429c      	cmp	r4, r3
 8008b60:	d101      	bne.n	8008b66 <__swbuf_r+0x7a>
 8008b62:	68ac      	ldr	r4, [r5, #8]
 8008b64:	e7cf      	b.n	8008b06 <__swbuf_r+0x1a>
 8008b66:	4b09      	ldr	r3, [pc, #36]	; (8008b8c <__swbuf_r+0xa0>)
 8008b68:	429c      	cmp	r4, r3
 8008b6a:	bf08      	it	eq
 8008b6c:	68ec      	ldreq	r4, [r5, #12]
 8008b6e:	e7ca      	b.n	8008b06 <__swbuf_r+0x1a>
 8008b70:	4621      	mov	r1, r4
 8008b72:	4628      	mov	r0, r5
 8008b74:	f000 f80c 	bl	8008b90 <__swsetup_r>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d0cb      	beq.n	8008b14 <__swbuf_r+0x28>
 8008b7c:	f04f 37ff 	mov.w	r7, #4294967295
 8008b80:	e7ea      	b.n	8008b58 <__swbuf_r+0x6c>
 8008b82:	bf00      	nop
 8008b84:	08009b8c 	.word	0x08009b8c
 8008b88:	08009bac 	.word	0x08009bac
 8008b8c:	08009b6c 	.word	0x08009b6c

08008b90 <__swsetup_r>:
 8008b90:	4b32      	ldr	r3, [pc, #200]	; (8008c5c <__swsetup_r+0xcc>)
 8008b92:	b570      	push	{r4, r5, r6, lr}
 8008b94:	681d      	ldr	r5, [r3, #0]
 8008b96:	4606      	mov	r6, r0
 8008b98:	460c      	mov	r4, r1
 8008b9a:	b125      	cbz	r5, 8008ba6 <__swsetup_r+0x16>
 8008b9c:	69ab      	ldr	r3, [r5, #24]
 8008b9e:	b913      	cbnz	r3, 8008ba6 <__swsetup_r+0x16>
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	f000 f985 	bl	8008eb0 <__sinit>
 8008ba6:	4b2e      	ldr	r3, [pc, #184]	; (8008c60 <__swsetup_r+0xd0>)
 8008ba8:	429c      	cmp	r4, r3
 8008baa:	d10f      	bne.n	8008bcc <__swsetup_r+0x3c>
 8008bac:	686c      	ldr	r4, [r5, #4]
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bb4:	0719      	lsls	r1, r3, #28
 8008bb6:	d42c      	bmi.n	8008c12 <__swsetup_r+0x82>
 8008bb8:	06dd      	lsls	r5, r3, #27
 8008bba:	d411      	bmi.n	8008be0 <__swsetup_r+0x50>
 8008bbc:	2309      	movs	r3, #9
 8008bbe:	6033      	str	r3, [r6, #0]
 8008bc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bc4:	81a3      	strh	r3, [r4, #12]
 8008bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bca:	e03e      	b.n	8008c4a <__swsetup_r+0xba>
 8008bcc:	4b25      	ldr	r3, [pc, #148]	; (8008c64 <__swsetup_r+0xd4>)
 8008bce:	429c      	cmp	r4, r3
 8008bd0:	d101      	bne.n	8008bd6 <__swsetup_r+0x46>
 8008bd2:	68ac      	ldr	r4, [r5, #8]
 8008bd4:	e7eb      	b.n	8008bae <__swsetup_r+0x1e>
 8008bd6:	4b24      	ldr	r3, [pc, #144]	; (8008c68 <__swsetup_r+0xd8>)
 8008bd8:	429c      	cmp	r4, r3
 8008bda:	bf08      	it	eq
 8008bdc:	68ec      	ldreq	r4, [r5, #12]
 8008bde:	e7e6      	b.n	8008bae <__swsetup_r+0x1e>
 8008be0:	0758      	lsls	r0, r3, #29
 8008be2:	d512      	bpl.n	8008c0a <__swsetup_r+0x7a>
 8008be4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008be6:	b141      	cbz	r1, 8008bfa <__swsetup_r+0x6a>
 8008be8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bec:	4299      	cmp	r1, r3
 8008bee:	d002      	beq.n	8008bf6 <__swsetup_r+0x66>
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f7ff fb67 	bl	80082c4 <_free_r>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	6363      	str	r3, [r4, #52]	; 0x34
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c00:	81a3      	strh	r3, [r4, #12]
 8008c02:	2300      	movs	r3, #0
 8008c04:	6063      	str	r3, [r4, #4]
 8008c06:	6923      	ldr	r3, [r4, #16]
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	89a3      	ldrh	r3, [r4, #12]
 8008c0c:	f043 0308 	orr.w	r3, r3, #8
 8008c10:	81a3      	strh	r3, [r4, #12]
 8008c12:	6923      	ldr	r3, [r4, #16]
 8008c14:	b94b      	cbnz	r3, 8008c2a <__swsetup_r+0x9a>
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c20:	d003      	beq.n	8008c2a <__swsetup_r+0x9a>
 8008c22:	4621      	mov	r1, r4
 8008c24:	4630      	mov	r0, r6
 8008c26:	f000 fa07 	bl	8009038 <__smakebuf_r>
 8008c2a:	89a0      	ldrh	r0, [r4, #12]
 8008c2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c30:	f010 0301 	ands.w	r3, r0, #1
 8008c34:	d00a      	beq.n	8008c4c <__swsetup_r+0xbc>
 8008c36:	2300      	movs	r3, #0
 8008c38:	60a3      	str	r3, [r4, #8]
 8008c3a:	6963      	ldr	r3, [r4, #20]
 8008c3c:	425b      	negs	r3, r3
 8008c3e:	61a3      	str	r3, [r4, #24]
 8008c40:	6923      	ldr	r3, [r4, #16]
 8008c42:	b943      	cbnz	r3, 8008c56 <__swsetup_r+0xc6>
 8008c44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c48:	d1ba      	bne.n	8008bc0 <__swsetup_r+0x30>
 8008c4a:	bd70      	pop	{r4, r5, r6, pc}
 8008c4c:	0781      	lsls	r1, r0, #30
 8008c4e:	bf58      	it	pl
 8008c50:	6963      	ldrpl	r3, [r4, #20]
 8008c52:	60a3      	str	r3, [r4, #8]
 8008c54:	e7f4      	b.n	8008c40 <__swsetup_r+0xb0>
 8008c56:	2000      	movs	r0, #0
 8008c58:	e7f7      	b.n	8008c4a <__swsetup_r+0xba>
 8008c5a:	bf00      	nop
 8008c5c:	20000010 	.word	0x20000010
 8008c60:	08009b8c 	.word	0x08009b8c
 8008c64:	08009bac 	.word	0x08009bac
 8008c68:	08009b6c 	.word	0x08009b6c

08008c6c <abort>:
 8008c6c:	b508      	push	{r3, lr}
 8008c6e:	2006      	movs	r0, #6
 8008c70:	f000 fa52 	bl	8009118 <raise>
 8008c74:	2001      	movs	r0, #1
 8008c76:	f7f9 f967 	bl	8001f48 <_exit>
	...

08008c7c <__sflush_r>:
 8008c7c:	898a      	ldrh	r2, [r1, #12]
 8008c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c82:	4605      	mov	r5, r0
 8008c84:	0710      	lsls	r0, r2, #28
 8008c86:	460c      	mov	r4, r1
 8008c88:	d458      	bmi.n	8008d3c <__sflush_r+0xc0>
 8008c8a:	684b      	ldr	r3, [r1, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	dc05      	bgt.n	8008c9c <__sflush_r+0x20>
 8008c90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	dc02      	bgt.n	8008c9c <__sflush_r+0x20>
 8008c96:	2000      	movs	r0, #0
 8008c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c9e:	2e00      	cmp	r6, #0
 8008ca0:	d0f9      	beq.n	8008c96 <__sflush_r+0x1a>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ca8:	682f      	ldr	r7, [r5, #0]
 8008caa:	602b      	str	r3, [r5, #0]
 8008cac:	d032      	beq.n	8008d14 <__sflush_r+0x98>
 8008cae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	075a      	lsls	r2, r3, #29
 8008cb4:	d505      	bpl.n	8008cc2 <__sflush_r+0x46>
 8008cb6:	6863      	ldr	r3, [r4, #4]
 8008cb8:	1ac0      	subs	r0, r0, r3
 8008cba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cbc:	b10b      	cbz	r3, 8008cc2 <__sflush_r+0x46>
 8008cbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cc0:	1ac0      	subs	r0, r0, r3
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cc8:	6a21      	ldr	r1, [r4, #32]
 8008cca:	4628      	mov	r0, r5
 8008ccc:	47b0      	blx	r6
 8008cce:	1c43      	adds	r3, r0, #1
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	d106      	bne.n	8008ce2 <__sflush_r+0x66>
 8008cd4:	6829      	ldr	r1, [r5, #0]
 8008cd6:	291d      	cmp	r1, #29
 8008cd8:	d82c      	bhi.n	8008d34 <__sflush_r+0xb8>
 8008cda:	4a2a      	ldr	r2, [pc, #168]	; (8008d84 <__sflush_r+0x108>)
 8008cdc:	40ca      	lsrs	r2, r1
 8008cde:	07d6      	lsls	r6, r2, #31
 8008ce0:	d528      	bpl.n	8008d34 <__sflush_r+0xb8>
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	6062      	str	r2, [r4, #4]
 8008ce6:	04d9      	lsls	r1, r3, #19
 8008ce8:	6922      	ldr	r2, [r4, #16]
 8008cea:	6022      	str	r2, [r4, #0]
 8008cec:	d504      	bpl.n	8008cf8 <__sflush_r+0x7c>
 8008cee:	1c42      	adds	r2, r0, #1
 8008cf0:	d101      	bne.n	8008cf6 <__sflush_r+0x7a>
 8008cf2:	682b      	ldr	r3, [r5, #0]
 8008cf4:	b903      	cbnz	r3, 8008cf8 <__sflush_r+0x7c>
 8008cf6:	6560      	str	r0, [r4, #84]	; 0x54
 8008cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cfa:	602f      	str	r7, [r5, #0]
 8008cfc:	2900      	cmp	r1, #0
 8008cfe:	d0ca      	beq.n	8008c96 <__sflush_r+0x1a>
 8008d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d04:	4299      	cmp	r1, r3
 8008d06:	d002      	beq.n	8008d0e <__sflush_r+0x92>
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f7ff fadb 	bl	80082c4 <_free_r>
 8008d0e:	2000      	movs	r0, #0
 8008d10:	6360      	str	r0, [r4, #52]	; 0x34
 8008d12:	e7c1      	b.n	8008c98 <__sflush_r+0x1c>
 8008d14:	6a21      	ldr	r1, [r4, #32]
 8008d16:	2301      	movs	r3, #1
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b0      	blx	r6
 8008d1c:	1c41      	adds	r1, r0, #1
 8008d1e:	d1c7      	bne.n	8008cb0 <__sflush_r+0x34>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0c4      	beq.n	8008cb0 <__sflush_r+0x34>
 8008d26:	2b1d      	cmp	r3, #29
 8008d28:	d001      	beq.n	8008d2e <__sflush_r+0xb2>
 8008d2a:	2b16      	cmp	r3, #22
 8008d2c:	d101      	bne.n	8008d32 <__sflush_r+0xb6>
 8008d2e:	602f      	str	r7, [r5, #0]
 8008d30:	e7b1      	b.n	8008c96 <__sflush_r+0x1a>
 8008d32:	89a3      	ldrh	r3, [r4, #12]
 8008d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d38:	81a3      	strh	r3, [r4, #12]
 8008d3a:	e7ad      	b.n	8008c98 <__sflush_r+0x1c>
 8008d3c:	690f      	ldr	r7, [r1, #16]
 8008d3e:	2f00      	cmp	r7, #0
 8008d40:	d0a9      	beq.n	8008c96 <__sflush_r+0x1a>
 8008d42:	0793      	lsls	r3, r2, #30
 8008d44:	680e      	ldr	r6, [r1, #0]
 8008d46:	bf08      	it	eq
 8008d48:	694b      	ldreq	r3, [r1, #20]
 8008d4a:	600f      	str	r7, [r1, #0]
 8008d4c:	bf18      	it	ne
 8008d4e:	2300      	movne	r3, #0
 8008d50:	eba6 0807 	sub.w	r8, r6, r7
 8008d54:	608b      	str	r3, [r1, #8]
 8008d56:	f1b8 0f00 	cmp.w	r8, #0
 8008d5a:	dd9c      	ble.n	8008c96 <__sflush_r+0x1a>
 8008d5c:	6a21      	ldr	r1, [r4, #32]
 8008d5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d60:	4643      	mov	r3, r8
 8008d62:	463a      	mov	r2, r7
 8008d64:	4628      	mov	r0, r5
 8008d66:	47b0      	blx	r6
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	dc06      	bgt.n	8008d7a <__sflush_r+0xfe>
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d72:	81a3      	strh	r3, [r4, #12]
 8008d74:	f04f 30ff 	mov.w	r0, #4294967295
 8008d78:	e78e      	b.n	8008c98 <__sflush_r+0x1c>
 8008d7a:	4407      	add	r7, r0
 8008d7c:	eba8 0800 	sub.w	r8, r8, r0
 8008d80:	e7e9      	b.n	8008d56 <__sflush_r+0xda>
 8008d82:	bf00      	nop
 8008d84:	20400001 	.word	0x20400001

08008d88 <_fflush_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	690b      	ldr	r3, [r1, #16]
 8008d8c:	4605      	mov	r5, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	b913      	cbnz	r3, 8008d98 <_fflush_r+0x10>
 8008d92:	2500      	movs	r5, #0
 8008d94:	4628      	mov	r0, r5
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	b118      	cbz	r0, 8008da2 <_fflush_r+0x1a>
 8008d9a:	6983      	ldr	r3, [r0, #24]
 8008d9c:	b90b      	cbnz	r3, 8008da2 <_fflush_r+0x1a>
 8008d9e:	f000 f887 	bl	8008eb0 <__sinit>
 8008da2:	4b14      	ldr	r3, [pc, #80]	; (8008df4 <_fflush_r+0x6c>)
 8008da4:	429c      	cmp	r4, r3
 8008da6:	d11b      	bne.n	8008de0 <_fflush_r+0x58>
 8008da8:	686c      	ldr	r4, [r5, #4]
 8008daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0ef      	beq.n	8008d92 <_fflush_r+0xa>
 8008db2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008db4:	07d0      	lsls	r0, r2, #31
 8008db6:	d404      	bmi.n	8008dc2 <_fflush_r+0x3a>
 8008db8:	0599      	lsls	r1, r3, #22
 8008dba:	d402      	bmi.n	8008dc2 <_fflush_r+0x3a>
 8008dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dbe:	f000 f915 	bl	8008fec <__retarget_lock_acquire_recursive>
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	f7ff ff59 	bl	8008c7c <__sflush_r>
 8008dca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dcc:	07da      	lsls	r2, r3, #31
 8008dce:	4605      	mov	r5, r0
 8008dd0:	d4e0      	bmi.n	8008d94 <_fflush_r+0xc>
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	059b      	lsls	r3, r3, #22
 8008dd6:	d4dd      	bmi.n	8008d94 <_fflush_r+0xc>
 8008dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dda:	f000 f908 	bl	8008fee <__retarget_lock_release_recursive>
 8008dde:	e7d9      	b.n	8008d94 <_fflush_r+0xc>
 8008de0:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <_fflush_r+0x70>)
 8008de2:	429c      	cmp	r4, r3
 8008de4:	d101      	bne.n	8008dea <_fflush_r+0x62>
 8008de6:	68ac      	ldr	r4, [r5, #8]
 8008de8:	e7df      	b.n	8008daa <_fflush_r+0x22>
 8008dea:	4b04      	ldr	r3, [pc, #16]	; (8008dfc <_fflush_r+0x74>)
 8008dec:	429c      	cmp	r4, r3
 8008dee:	bf08      	it	eq
 8008df0:	68ec      	ldreq	r4, [r5, #12]
 8008df2:	e7da      	b.n	8008daa <_fflush_r+0x22>
 8008df4:	08009b8c 	.word	0x08009b8c
 8008df8:	08009bac 	.word	0x08009bac
 8008dfc:	08009b6c 	.word	0x08009b6c

08008e00 <std>:
 8008e00:	2300      	movs	r3, #0
 8008e02:	b510      	push	{r4, lr}
 8008e04:	4604      	mov	r4, r0
 8008e06:	e9c0 3300 	strd	r3, r3, [r0]
 8008e0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e0e:	6083      	str	r3, [r0, #8]
 8008e10:	8181      	strh	r1, [r0, #12]
 8008e12:	6643      	str	r3, [r0, #100]	; 0x64
 8008e14:	81c2      	strh	r2, [r0, #14]
 8008e16:	6183      	str	r3, [r0, #24]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	2208      	movs	r2, #8
 8008e1c:	305c      	adds	r0, #92	; 0x5c
 8008e1e:	f7fb fe17 	bl	8004a50 <memset>
 8008e22:	4b05      	ldr	r3, [pc, #20]	; (8008e38 <std+0x38>)
 8008e24:	6263      	str	r3, [r4, #36]	; 0x24
 8008e26:	4b05      	ldr	r3, [pc, #20]	; (8008e3c <std+0x3c>)
 8008e28:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e2a:	4b05      	ldr	r3, [pc, #20]	; (8008e40 <std+0x40>)
 8008e2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e2e:	4b05      	ldr	r3, [pc, #20]	; (8008e44 <std+0x44>)
 8008e30:	6224      	str	r4, [r4, #32]
 8008e32:	6323      	str	r3, [r4, #48]	; 0x30
 8008e34:	bd10      	pop	{r4, pc}
 8008e36:	bf00      	nop
 8008e38:	08009151 	.word	0x08009151
 8008e3c:	08009173 	.word	0x08009173
 8008e40:	080091ab 	.word	0x080091ab
 8008e44:	080091cf 	.word	0x080091cf

08008e48 <_cleanup_r>:
 8008e48:	4901      	ldr	r1, [pc, #4]	; (8008e50 <_cleanup_r+0x8>)
 8008e4a:	f000 b8af 	b.w	8008fac <_fwalk_reent>
 8008e4e:	bf00      	nop
 8008e50:	08008d89 	.word	0x08008d89

08008e54 <__sfmoreglue>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	1e4a      	subs	r2, r1, #1
 8008e58:	2568      	movs	r5, #104	; 0x68
 8008e5a:	4355      	muls	r5, r2
 8008e5c:	460e      	mov	r6, r1
 8008e5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e62:	f7ff fa7f 	bl	8008364 <_malloc_r>
 8008e66:	4604      	mov	r4, r0
 8008e68:	b140      	cbz	r0, 8008e7c <__sfmoreglue+0x28>
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	e9c0 1600 	strd	r1, r6, [r0]
 8008e70:	300c      	adds	r0, #12
 8008e72:	60a0      	str	r0, [r4, #8]
 8008e74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e78:	f7fb fdea 	bl	8004a50 <memset>
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}

08008e80 <__sfp_lock_acquire>:
 8008e80:	4801      	ldr	r0, [pc, #4]	; (8008e88 <__sfp_lock_acquire+0x8>)
 8008e82:	f000 b8b3 	b.w	8008fec <__retarget_lock_acquire_recursive>
 8008e86:	bf00      	nop
 8008e88:	20000470 	.word	0x20000470

08008e8c <__sfp_lock_release>:
 8008e8c:	4801      	ldr	r0, [pc, #4]	; (8008e94 <__sfp_lock_release+0x8>)
 8008e8e:	f000 b8ae 	b.w	8008fee <__retarget_lock_release_recursive>
 8008e92:	bf00      	nop
 8008e94:	20000470 	.word	0x20000470

08008e98 <__sinit_lock_acquire>:
 8008e98:	4801      	ldr	r0, [pc, #4]	; (8008ea0 <__sinit_lock_acquire+0x8>)
 8008e9a:	f000 b8a7 	b.w	8008fec <__retarget_lock_acquire_recursive>
 8008e9e:	bf00      	nop
 8008ea0:	2000046b 	.word	0x2000046b

08008ea4 <__sinit_lock_release>:
 8008ea4:	4801      	ldr	r0, [pc, #4]	; (8008eac <__sinit_lock_release+0x8>)
 8008ea6:	f000 b8a2 	b.w	8008fee <__retarget_lock_release_recursive>
 8008eaa:	bf00      	nop
 8008eac:	2000046b 	.word	0x2000046b

08008eb0 <__sinit>:
 8008eb0:	b510      	push	{r4, lr}
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	f7ff fff0 	bl	8008e98 <__sinit_lock_acquire>
 8008eb8:	69a3      	ldr	r3, [r4, #24]
 8008eba:	b11b      	cbz	r3, 8008ec4 <__sinit+0x14>
 8008ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ec0:	f7ff bff0 	b.w	8008ea4 <__sinit_lock_release>
 8008ec4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ec8:	6523      	str	r3, [r4, #80]	; 0x50
 8008eca:	4b13      	ldr	r3, [pc, #76]	; (8008f18 <__sinit+0x68>)
 8008ecc:	4a13      	ldr	r2, [pc, #76]	; (8008f1c <__sinit+0x6c>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ed2:	42a3      	cmp	r3, r4
 8008ed4:	bf04      	itt	eq
 8008ed6:	2301      	moveq	r3, #1
 8008ed8:	61a3      	streq	r3, [r4, #24]
 8008eda:	4620      	mov	r0, r4
 8008edc:	f000 f820 	bl	8008f20 <__sfp>
 8008ee0:	6060      	str	r0, [r4, #4]
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f000 f81c 	bl	8008f20 <__sfp>
 8008ee8:	60a0      	str	r0, [r4, #8]
 8008eea:	4620      	mov	r0, r4
 8008eec:	f000 f818 	bl	8008f20 <__sfp>
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	60e0      	str	r0, [r4, #12]
 8008ef4:	2104      	movs	r1, #4
 8008ef6:	6860      	ldr	r0, [r4, #4]
 8008ef8:	f7ff ff82 	bl	8008e00 <std>
 8008efc:	68a0      	ldr	r0, [r4, #8]
 8008efe:	2201      	movs	r2, #1
 8008f00:	2109      	movs	r1, #9
 8008f02:	f7ff ff7d 	bl	8008e00 <std>
 8008f06:	68e0      	ldr	r0, [r4, #12]
 8008f08:	2202      	movs	r2, #2
 8008f0a:	2112      	movs	r1, #18
 8008f0c:	f7ff ff78 	bl	8008e00 <std>
 8008f10:	2301      	movs	r3, #1
 8008f12:	61a3      	str	r3, [r4, #24]
 8008f14:	e7d2      	b.n	8008ebc <__sinit+0xc>
 8008f16:	bf00      	nop
 8008f18:	08009718 	.word	0x08009718
 8008f1c:	08008e49 	.word	0x08008e49

08008f20 <__sfp>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	4607      	mov	r7, r0
 8008f24:	f7ff ffac 	bl	8008e80 <__sfp_lock_acquire>
 8008f28:	4b1e      	ldr	r3, [pc, #120]	; (8008fa4 <__sfp+0x84>)
 8008f2a:	681e      	ldr	r6, [r3, #0]
 8008f2c:	69b3      	ldr	r3, [r6, #24]
 8008f2e:	b913      	cbnz	r3, 8008f36 <__sfp+0x16>
 8008f30:	4630      	mov	r0, r6
 8008f32:	f7ff ffbd 	bl	8008eb0 <__sinit>
 8008f36:	3648      	adds	r6, #72	; 0x48
 8008f38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	d503      	bpl.n	8008f48 <__sfp+0x28>
 8008f40:	6833      	ldr	r3, [r6, #0]
 8008f42:	b30b      	cbz	r3, 8008f88 <__sfp+0x68>
 8008f44:	6836      	ldr	r6, [r6, #0]
 8008f46:	e7f7      	b.n	8008f38 <__sfp+0x18>
 8008f48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f4c:	b9d5      	cbnz	r5, 8008f84 <__sfp+0x64>
 8008f4e:	4b16      	ldr	r3, [pc, #88]	; (8008fa8 <__sfp+0x88>)
 8008f50:	60e3      	str	r3, [r4, #12]
 8008f52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f56:	6665      	str	r5, [r4, #100]	; 0x64
 8008f58:	f000 f847 	bl	8008fea <__retarget_lock_init_recursive>
 8008f5c:	f7ff ff96 	bl	8008e8c <__sfp_lock_release>
 8008f60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f68:	6025      	str	r5, [r4, #0]
 8008f6a:	61a5      	str	r5, [r4, #24]
 8008f6c:	2208      	movs	r2, #8
 8008f6e:	4629      	mov	r1, r5
 8008f70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f74:	f7fb fd6c 	bl	8004a50 <memset>
 8008f78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f80:	4620      	mov	r0, r4
 8008f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f84:	3468      	adds	r4, #104	; 0x68
 8008f86:	e7d9      	b.n	8008f3c <__sfp+0x1c>
 8008f88:	2104      	movs	r1, #4
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	f7ff ff62 	bl	8008e54 <__sfmoreglue>
 8008f90:	4604      	mov	r4, r0
 8008f92:	6030      	str	r0, [r6, #0]
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d1d5      	bne.n	8008f44 <__sfp+0x24>
 8008f98:	f7ff ff78 	bl	8008e8c <__sfp_lock_release>
 8008f9c:	230c      	movs	r3, #12
 8008f9e:	603b      	str	r3, [r7, #0]
 8008fa0:	e7ee      	b.n	8008f80 <__sfp+0x60>
 8008fa2:	bf00      	nop
 8008fa4:	08009718 	.word	0x08009718
 8008fa8:	ffff0001 	.word	0xffff0001

08008fac <_fwalk_reent>:
 8008fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb0:	4606      	mov	r6, r0
 8008fb2:	4688      	mov	r8, r1
 8008fb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008fb8:	2700      	movs	r7, #0
 8008fba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fbe:	f1b9 0901 	subs.w	r9, r9, #1
 8008fc2:	d505      	bpl.n	8008fd0 <_fwalk_reent+0x24>
 8008fc4:	6824      	ldr	r4, [r4, #0]
 8008fc6:	2c00      	cmp	r4, #0
 8008fc8:	d1f7      	bne.n	8008fba <_fwalk_reent+0xe>
 8008fca:	4638      	mov	r0, r7
 8008fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fd0:	89ab      	ldrh	r3, [r5, #12]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d907      	bls.n	8008fe6 <_fwalk_reent+0x3a>
 8008fd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	d003      	beq.n	8008fe6 <_fwalk_reent+0x3a>
 8008fde:	4629      	mov	r1, r5
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	47c0      	blx	r8
 8008fe4:	4307      	orrs	r7, r0
 8008fe6:	3568      	adds	r5, #104	; 0x68
 8008fe8:	e7e9      	b.n	8008fbe <_fwalk_reent+0x12>

08008fea <__retarget_lock_init_recursive>:
 8008fea:	4770      	bx	lr

08008fec <__retarget_lock_acquire_recursive>:
 8008fec:	4770      	bx	lr

08008fee <__retarget_lock_release_recursive>:
 8008fee:	4770      	bx	lr

08008ff0 <__swhatbuf_r>:
 8008ff0:	b570      	push	{r4, r5, r6, lr}
 8008ff2:	460e      	mov	r6, r1
 8008ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ff8:	2900      	cmp	r1, #0
 8008ffa:	b096      	sub	sp, #88	; 0x58
 8008ffc:	4614      	mov	r4, r2
 8008ffe:	461d      	mov	r5, r3
 8009000:	da07      	bge.n	8009012 <__swhatbuf_r+0x22>
 8009002:	2300      	movs	r3, #0
 8009004:	602b      	str	r3, [r5, #0]
 8009006:	89b3      	ldrh	r3, [r6, #12]
 8009008:	061a      	lsls	r2, r3, #24
 800900a:	d410      	bmi.n	800902e <__swhatbuf_r+0x3e>
 800900c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009010:	e00e      	b.n	8009030 <__swhatbuf_r+0x40>
 8009012:	466a      	mov	r2, sp
 8009014:	f000 f902 	bl	800921c <_fstat_r>
 8009018:	2800      	cmp	r0, #0
 800901a:	dbf2      	blt.n	8009002 <__swhatbuf_r+0x12>
 800901c:	9a01      	ldr	r2, [sp, #4]
 800901e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009022:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009026:	425a      	negs	r2, r3
 8009028:	415a      	adcs	r2, r3
 800902a:	602a      	str	r2, [r5, #0]
 800902c:	e7ee      	b.n	800900c <__swhatbuf_r+0x1c>
 800902e:	2340      	movs	r3, #64	; 0x40
 8009030:	2000      	movs	r0, #0
 8009032:	6023      	str	r3, [r4, #0]
 8009034:	b016      	add	sp, #88	; 0x58
 8009036:	bd70      	pop	{r4, r5, r6, pc}

08009038 <__smakebuf_r>:
 8009038:	898b      	ldrh	r3, [r1, #12]
 800903a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800903c:	079d      	lsls	r5, r3, #30
 800903e:	4606      	mov	r6, r0
 8009040:	460c      	mov	r4, r1
 8009042:	d507      	bpl.n	8009054 <__smakebuf_r+0x1c>
 8009044:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	6123      	str	r3, [r4, #16]
 800904c:	2301      	movs	r3, #1
 800904e:	6163      	str	r3, [r4, #20]
 8009050:	b002      	add	sp, #8
 8009052:	bd70      	pop	{r4, r5, r6, pc}
 8009054:	ab01      	add	r3, sp, #4
 8009056:	466a      	mov	r2, sp
 8009058:	f7ff ffca 	bl	8008ff0 <__swhatbuf_r>
 800905c:	9900      	ldr	r1, [sp, #0]
 800905e:	4605      	mov	r5, r0
 8009060:	4630      	mov	r0, r6
 8009062:	f7ff f97f 	bl	8008364 <_malloc_r>
 8009066:	b948      	cbnz	r0, 800907c <__smakebuf_r+0x44>
 8009068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800906c:	059a      	lsls	r2, r3, #22
 800906e:	d4ef      	bmi.n	8009050 <__smakebuf_r+0x18>
 8009070:	f023 0303 	bic.w	r3, r3, #3
 8009074:	f043 0302 	orr.w	r3, r3, #2
 8009078:	81a3      	strh	r3, [r4, #12]
 800907a:	e7e3      	b.n	8009044 <__smakebuf_r+0xc>
 800907c:	4b0d      	ldr	r3, [pc, #52]	; (80090b4 <__smakebuf_r+0x7c>)
 800907e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	6020      	str	r0, [r4, #0]
 8009084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009088:	81a3      	strh	r3, [r4, #12]
 800908a:	9b00      	ldr	r3, [sp, #0]
 800908c:	6163      	str	r3, [r4, #20]
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	6120      	str	r0, [r4, #16]
 8009092:	b15b      	cbz	r3, 80090ac <__smakebuf_r+0x74>
 8009094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009098:	4630      	mov	r0, r6
 800909a:	f000 f8d1 	bl	8009240 <_isatty_r>
 800909e:	b128      	cbz	r0, 80090ac <__smakebuf_r+0x74>
 80090a0:	89a3      	ldrh	r3, [r4, #12]
 80090a2:	f023 0303 	bic.w	r3, r3, #3
 80090a6:	f043 0301 	orr.w	r3, r3, #1
 80090aa:	81a3      	strh	r3, [r4, #12]
 80090ac:	89a0      	ldrh	r0, [r4, #12]
 80090ae:	4305      	orrs	r5, r0
 80090b0:	81a5      	strh	r5, [r4, #12]
 80090b2:	e7cd      	b.n	8009050 <__smakebuf_r+0x18>
 80090b4:	08008e49 	.word	0x08008e49

080090b8 <_malloc_usable_size_r>:
 80090b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090bc:	1f18      	subs	r0, r3, #4
 80090be:	2b00      	cmp	r3, #0
 80090c0:	bfbc      	itt	lt
 80090c2:	580b      	ldrlt	r3, [r1, r0]
 80090c4:	18c0      	addlt	r0, r0, r3
 80090c6:	4770      	bx	lr

080090c8 <_raise_r>:
 80090c8:	291f      	cmp	r1, #31
 80090ca:	b538      	push	{r3, r4, r5, lr}
 80090cc:	4604      	mov	r4, r0
 80090ce:	460d      	mov	r5, r1
 80090d0:	d904      	bls.n	80090dc <_raise_r+0x14>
 80090d2:	2316      	movs	r3, #22
 80090d4:	6003      	str	r3, [r0, #0]
 80090d6:	f04f 30ff 	mov.w	r0, #4294967295
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090de:	b112      	cbz	r2, 80090e6 <_raise_r+0x1e>
 80090e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090e4:	b94b      	cbnz	r3, 80090fa <_raise_r+0x32>
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 f830 	bl	800914c <_getpid_r>
 80090ec:	462a      	mov	r2, r5
 80090ee:	4601      	mov	r1, r0
 80090f0:	4620      	mov	r0, r4
 80090f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090f6:	f000 b817 	b.w	8009128 <_kill_r>
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d00a      	beq.n	8009114 <_raise_r+0x4c>
 80090fe:	1c59      	adds	r1, r3, #1
 8009100:	d103      	bne.n	800910a <_raise_r+0x42>
 8009102:	2316      	movs	r3, #22
 8009104:	6003      	str	r3, [r0, #0]
 8009106:	2001      	movs	r0, #1
 8009108:	e7e7      	b.n	80090da <_raise_r+0x12>
 800910a:	2400      	movs	r4, #0
 800910c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009110:	4628      	mov	r0, r5
 8009112:	4798      	blx	r3
 8009114:	2000      	movs	r0, #0
 8009116:	e7e0      	b.n	80090da <_raise_r+0x12>

08009118 <raise>:
 8009118:	4b02      	ldr	r3, [pc, #8]	; (8009124 <raise+0xc>)
 800911a:	4601      	mov	r1, r0
 800911c:	6818      	ldr	r0, [r3, #0]
 800911e:	f7ff bfd3 	b.w	80090c8 <_raise_r>
 8009122:	bf00      	nop
 8009124:	20000010 	.word	0x20000010

08009128 <_kill_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4d07      	ldr	r5, [pc, #28]	; (8009148 <_kill_r+0x20>)
 800912c:	2300      	movs	r3, #0
 800912e:	4604      	mov	r4, r0
 8009130:	4608      	mov	r0, r1
 8009132:	4611      	mov	r1, r2
 8009134:	602b      	str	r3, [r5, #0]
 8009136:	f7f8 fef7 	bl	8001f28 <_kill>
 800913a:	1c43      	adds	r3, r0, #1
 800913c:	d102      	bne.n	8009144 <_kill_r+0x1c>
 800913e:	682b      	ldr	r3, [r5, #0]
 8009140:	b103      	cbz	r3, 8009144 <_kill_r+0x1c>
 8009142:	6023      	str	r3, [r4, #0]
 8009144:	bd38      	pop	{r3, r4, r5, pc}
 8009146:	bf00      	nop
 8009148:	20000464 	.word	0x20000464

0800914c <_getpid_r>:
 800914c:	f7f8 bee4 	b.w	8001f18 <_getpid>

08009150 <__sread>:
 8009150:	b510      	push	{r4, lr}
 8009152:	460c      	mov	r4, r1
 8009154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009158:	f000 f894 	bl	8009284 <_read_r>
 800915c:	2800      	cmp	r0, #0
 800915e:	bfab      	itete	ge
 8009160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009162:	89a3      	ldrhlt	r3, [r4, #12]
 8009164:	181b      	addge	r3, r3, r0
 8009166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800916a:	bfac      	ite	ge
 800916c:	6563      	strge	r3, [r4, #84]	; 0x54
 800916e:	81a3      	strhlt	r3, [r4, #12]
 8009170:	bd10      	pop	{r4, pc}

08009172 <__swrite>:
 8009172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009176:	461f      	mov	r7, r3
 8009178:	898b      	ldrh	r3, [r1, #12]
 800917a:	05db      	lsls	r3, r3, #23
 800917c:	4605      	mov	r5, r0
 800917e:	460c      	mov	r4, r1
 8009180:	4616      	mov	r6, r2
 8009182:	d505      	bpl.n	8009190 <__swrite+0x1e>
 8009184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009188:	2302      	movs	r3, #2
 800918a:	2200      	movs	r2, #0
 800918c:	f000 f868 	bl	8009260 <_lseek_r>
 8009190:	89a3      	ldrh	r3, [r4, #12]
 8009192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800919a:	81a3      	strh	r3, [r4, #12]
 800919c:	4632      	mov	r2, r6
 800919e:	463b      	mov	r3, r7
 80091a0:	4628      	mov	r0, r5
 80091a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091a6:	f000 b817 	b.w	80091d8 <_write_r>

080091aa <__sseek>:
 80091aa:	b510      	push	{r4, lr}
 80091ac:	460c      	mov	r4, r1
 80091ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b2:	f000 f855 	bl	8009260 <_lseek_r>
 80091b6:	1c43      	adds	r3, r0, #1
 80091b8:	89a3      	ldrh	r3, [r4, #12]
 80091ba:	bf15      	itete	ne
 80091bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80091be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091c6:	81a3      	strheq	r3, [r4, #12]
 80091c8:	bf18      	it	ne
 80091ca:	81a3      	strhne	r3, [r4, #12]
 80091cc:	bd10      	pop	{r4, pc}

080091ce <__sclose>:
 80091ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d2:	f000 b813 	b.w	80091fc <_close_r>
	...

080091d8 <_write_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	4d07      	ldr	r5, [pc, #28]	; (80091f8 <_write_r+0x20>)
 80091dc:	4604      	mov	r4, r0
 80091de:	4608      	mov	r0, r1
 80091e0:	4611      	mov	r1, r2
 80091e2:	2200      	movs	r2, #0
 80091e4:	602a      	str	r2, [r5, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	f7f8 fed5 	bl	8001f96 <_write>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	d102      	bne.n	80091f6 <_write_r+0x1e>
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	b103      	cbz	r3, 80091f6 <_write_r+0x1e>
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	20000464 	.word	0x20000464

080091fc <_close_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d06      	ldr	r5, [pc, #24]	; (8009218 <_close_r+0x1c>)
 8009200:	2300      	movs	r3, #0
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	602b      	str	r3, [r5, #0]
 8009208:	f7f8 fee1 	bl	8001fce <_close>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_close_r+0x1a>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_close_r+0x1a>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	20000464 	.word	0x20000464

0800921c <_fstat_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4d07      	ldr	r5, [pc, #28]	; (800923c <_fstat_r+0x20>)
 8009220:	2300      	movs	r3, #0
 8009222:	4604      	mov	r4, r0
 8009224:	4608      	mov	r0, r1
 8009226:	4611      	mov	r1, r2
 8009228:	602b      	str	r3, [r5, #0]
 800922a:	f7f8 fedc 	bl	8001fe6 <_fstat>
 800922e:	1c43      	adds	r3, r0, #1
 8009230:	d102      	bne.n	8009238 <_fstat_r+0x1c>
 8009232:	682b      	ldr	r3, [r5, #0]
 8009234:	b103      	cbz	r3, 8009238 <_fstat_r+0x1c>
 8009236:	6023      	str	r3, [r4, #0]
 8009238:	bd38      	pop	{r3, r4, r5, pc}
 800923a:	bf00      	nop
 800923c:	20000464 	.word	0x20000464

08009240 <_isatty_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4d06      	ldr	r5, [pc, #24]	; (800925c <_isatty_r+0x1c>)
 8009244:	2300      	movs	r3, #0
 8009246:	4604      	mov	r4, r0
 8009248:	4608      	mov	r0, r1
 800924a:	602b      	str	r3, [r5, #0]
 800924c:	f7f8 fedb 	bl	8002006 <_isatty>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d102      	bne.n	800925a <_isatty_r+0x1a>
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	b103      	cbz	r3, 800925a <_isatty_r+0x1a>
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	20000464 	.word	0x20000464

08009260 <_lseek_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	4d07      	ldr	r5, [pc, #28]	; (8009280 <_lseek_r+0x20>)
 8009264:	4604      	mov	r4, r0
 8009266:	4608      	mov	r0, r1
 8009268:	4611      	mov	r1, r2
 800926a:	2200      	movs	r2, #0
 800926c:	602a      	str	r2, [r5, #0]
 800926e:	461a      	mov	r2, r3
 8009270:	f7f8 fed4 	bl	800201c <_lseek>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	d102      	bne.n	800927e <_lseek_r+0x1e>
 8009278:	682b      	ldr	r3, [r5, #0]
 800927a:	b103      	cbz	r3, 800927e <_lseek_r+0x1e>
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	bd38      	pop	{r3, r4, r5, pc}
 8009280:	20000464 	.word	0x20000464

08009284 <_read_r>:
 8009284:	b538      	push	{r3, r4, r5, lr}
 8009286:	4d07      	ldr	r5, [pc, #28]	; (80092a4 <_read_r+0x20>)
 8009288:	4604      	mov	r4, r0
 800928a:	4608      	mov	r0, r1
 800928c:	4611      	mov	r1, r2
 800928e:	2200      	movs	r2, #0
 8009290:	602a      	str	r2, [r5, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	f7f8 fe62 	bl	8001f5c <_read>
 8009298:	1c43      	adds	r3, r0, #1
 800929a:	d102      	bne.n	80092a2 <_read_r+0x1e>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	b103      	cbz	r3, 80092a2 <_read_r+0x1e>
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	20000464 	.word	0x20000464

080092a8 <log>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	ed2d 8b02 	vpush	{d8}
 80092ae:	ec55 4b10 	vmov	r4, r5, d0
 80092b2:	f000 f841 	bl	8009338 <__ieee754_log>
 80092b6:	4b1e      	ldr	r3, [pc, #120]	; (8009330 <log+0x88>)
 80092b8:	eeb0 8a40 	vmov.f32	s16, s0
 80092bc:	eef0 8a60 	vmov.f32	s17, s1
 80092c0:	f993 3000 	ldrsb.w	r3, [r3]
 80092c4:	3301      	adds	r3, #1
 80092c6:	d01a      	beq.n	80092fe <log+0x56>
 80092c8:	4622      	mov	r2, r4
 80092ca:	462b      	mov	r3, r5
 80092cc:	4620      	mov	r0, r4
 80092ce:	4629      	mov	r1, r5
 80092d0:	f7f7 fc4c 	bl	8000b6c <__aeabi_dcmpun>
 80092d4:	b998      	cbnz	r0, 80092fe <log+0x56>
 80092d6:	2200      	movs	r2, #0
 80092d8:	2300      	movs	r3, #0
 80092da:	4620      	mov	r0, r4
 80092dc:	4629      	mov	r1, r5
 80092de:	f7f7 fc3b 	bl	8000b58 <__aeabi_dcmpgt>
 80092e2:	b960      	cbnz	r0, 80092fe <log+0x56>
 80092e4:	2200      	movs	r2, #0
 80092e6:	2300      	movs	r3, #0
 80092e8:	4620      	mov	r0, r4
 80092ea:	4629      	mov	r1, r5
 80092ec:	f7f7 fc0c 	bl	8000b08 <__aeabi_dcmpeq>
 80092f0:	b160      	cbz	r0, 800930c <log+0x64>
 80092f2:	f7fb fb83 	bl	80049fc <__errno>
 80092f6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8009328 <log+0x80>
 80092fa:	2322      	movs	r3, #34	; 0x22
 80092fc:	6003      	str	r3, [r0, #0]
 80092fe:	eeb0 0a48 	vmov.f32	s0, s16
 8009302:	eef0 0a68 	vmov.f32	s1, s17
 8009306:	ecbd 8b02 	vpop	{d8}
 800930a:	bd38      	pop	{r3, r4, r5, pc}
 800930c:	f7fb fb76 	bl	80049fc <__errno>
 8009310:	ecbd 8b02 	vpop	{d8}
 8009314:	2321      	movs	r3, #33	; 0x21
 8009316:	6003      	str	r3, [r0, #0]
 8009318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800931c:	4805      	ldr	r0, [pc, #20]	; (8009334 <log+0x8c>)
 800931e:	f7ff b9d7 	b.w	80086d0 <nan>
 8009322:	bf00      	nop
 8009324:	f3af 8000 	nop.w
 8009328:	00000000 	.word	0x00000000
 800932c:	fff00000 	.word	0xfff00000
 8009330:	200001e4 	.word	0x200001e4
 8009334:	08009b68 	.word	0x08009b68

08009338 <__ieee754_log>:
 8009338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	ec51 0b10 	vmov	r0, r1, d0
 8009340:	ed2d 8b04 	vpush	{d8-d9}
 8009344:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009348:	b083      	sub	sp, #12
 800934a:	460d      	mov	r5, r1
 800934c:	da29      	bge.n	80093a2 <__ieee754_log+0x6a>
 800934e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009352:	4303      	orrs	r3, r0
 8009354:	ee10 2a10 	vmov	r2, s0
 8009358:	d10c      	bne.n	8009374 <__ieee754_log+0x3c>
 800935a:	49cf      	ldr	r1, [pc, #828]	; (8009698 <__ieee754_log+0x360>)
 800935c:	2200      	movs	r2, #0
 800935e:	2300      	movs	r3, #0
 8009360:	2000      	movs	r0, #0
 8009362:	f7f7 fa93 	bl	800088c <__aeabi_ddiv>
 8009366:	ec41 0b10 	vmov	d0, r0, r1
 800936a:	b003      	add	sp, #12
 800936c:	ecbd 8b04 	vpop	{d8-d9}
 8009370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009374:	2900      	cmp	r1, #0
 8009376:	da05      	bge.n	8009384 <__ieee754_log+0x4c>
 8009378:	460b      	mov	r3, r1
 800937a:	f7f6 ffa5 	bl	80002c8 <__aeabi_dsub>
 800937e:	2200      	movs	r2, #0
 8009380:	2300      	movs	r3, #0
 8009382:	e7ee      	b.n	8009362 <__ieee754_log+0x2a>
 8009384:	4bc5      	ldr	r3, [pc, #788]	; (800969c <__ieee754_log+0x364>)
 8009386:	2200      	movs	r2, #0
 8009388:	f7f7 f956 	bl	8000638 <__aeabi_dmul>
 800938c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8009390:	460d      	mov	r5, r1
 8009392:	4ac3      	ldr	r2, [pc, #780]	; (80096a0 <__ieee754_log+0x368>)
 8009394:	4295      	cmp	r5, r2
 8009396:	dd06      	ble.n	80093a6 <__ieee754_log+0x6e>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	f7f6 ff96 	bl	80002cc <__adddf3>
 80093a0:	e7e1      	b.n	8009366 <__ieee754_log+0x2e>
 80093a2:	2300      	movs	r3, #0
 80093a4:	e7f5      	b.n	8009392 <__ieee754_log+0x5a>
 80093a6:	152c      	asrs	r4, r5, #20
 80093a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80093ac:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80093b0:	441c      	add	r4, r3
 80093b2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80093b6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80093ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093be:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80093c2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80093c6:	ea42 0105 	orr.w	r1, r2, r5
 80093ca:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80093ce:	2200      	movs	r2, #0
 80093d0:	4bb4      	ldr	r3, [pc, #720]	; (80096a4 <__ieee754_log+0x36c>)
 80093d2:	f7f6 ff79 	bl	80002c8 <__aeabi_dsub>
 80093d6:	1cab      	adds	r3, r5, #2
 80093d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093dc:	2b02      	cmp	r3, #2
 80093de:	4682      	mov	sl, r0
 80093e0:	468b      	mov	fp, r1
 80093e2:	f04f 0200 	mov.w	r2, #0
 80093e6:	dc53      	bgt.n	8009490 <__ieee754_log+0x158>
 80093e8:	2300      	movs	r3, #0
 80093ea:	f7f7 fb8d 	bl	8000b08 <__aeabi_dcmpeq>
 80093ee:	b1d0      	cbz	r0, 8009426 <__ieee754_log+0xee>
 80093f0:	2c00      	cmp	r4, #0
 80093f2:	f000 8122 	beq.w	800963a <__ieee754_log+0x302>
 80093f6:	4620      	mov	r0, r4
 80093f8:	f7f7 f8b4 	bl	8000564 <__aeabi_i2d>
 80093fc:	a390      	add	r3, pc, #576	; (adr r3, 8009640 <__ieee754_log+0x308>)
 80093fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009402:	4606      	mov	r6, r0
 8009404:	460f      	mov	r7, r1
 8009406:	f7f7 f917 	bl	8000638 <__aeabi_dmul>
 800940a:	a38f      	add	r3, pc, #572	; (adr r3, 8009648 <__ieee754_log+0x310>)
 800940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009410:	4604      	mov	r4, r0
 8009412:	460d      	mov	r5, r1
 8009414:	4630      	mov	r0, r6
 8009416:	4639      	mov	r1, r7
 8009418:	f7f7 f90e 	bl	8000638 <__aeabi_dmul>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4620      	mov	r0, r4
 8009422:	4629      	mov	r1, r5
 8009424:	e7ba      	b.n	800939c <__ieee754_log+0x64>
 8009426:	a38a      	add	r3, pc, #552	; (adr r3, 8009650 <__ieee754_log+0x318>)
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	4650      	mov	r0, sl
 800942e:	4659      	mov	r1, fp
 8009430:	f7f7 f902 	bl	8000638 <__aeabi_dmul>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	2000      	movs	r0, #0
 800943a:	499b      	ldr	r1, [pc, #620]	; (80096a8 <__ieee754_log+0x370>)
 800943c:	f7f6 ff44 	bl	80002c8 <__aeabi_dsub>
 8009440:	4652      	mov	r2, sl
 8009442:	4606      	mov	r6, r0
 8009444:	460f      	mov	r7, r1
 8009446:	465b      	mov	r3, fp
 8009448:	4650      	mov	r0, sl
 800944a:	4659      	mov	r1, fp
 800944c:	f7f7 f8f4 	bl	8000638 <__aeabi_dmul>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	4630      	mov	r0, r6
 8009456:	4639      	mov	r1, r7
 8009458:	f7f7 f8ee 	bl	8000638 <__aeabi_dmul>
 800945c:	4606      	mov	r6, r0
 800945e:	460f      	mov	r7, r1
 8009460:	b914      	cbnz	r4, 8009468 <__ieee754_log+0x130>
 8009462:	4632      	mov	r2, r6
 8009464:	463b      	mov	r3, r7
 8009466:	e0a2      	b.n	80095ae <__ieee754_log+0x276>
 8009468:	4620      	mov	r0, r4
 800946a:	f7f7 f87b 	bl	8000564 <__aeabi_i2d>
 800946e:	a374      	add	r3, pc, #464	; (adr r3, 8009640 <__ieee754_log+0x308>)
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	4680      	mov	r8, r0
 8009476:	4689      	mov	r9, r1
 8009478:	f7f7 f8de 	bl	8000638 <__aeabi_dmul>
 800947c:	a372      	add	r3, pc, #456	; (adr r3, 8009648 <__ieee754_log+0x310>)
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	4604      	mov	r4, r0
 8009484:	460d      	mov	r5, r1
 8009486:	4640      	mov	r0, r8
 8009488:	4649      	mov	r1, r9
 800948a:	f7f7 f8d5 	bl	8000638 <__aeabi_dmul>
 800948e:	e0a7      	b.n	80095e0 <__ieee754_log+0x2a8>
 8009490:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009494:	f7f6 ff1a 	bl	80002cc <__adddf3>
 8009498:	4602      	mov	r2, r0
 800949a:	460b      	mov	r3, r1
 800949c:	4650      	mov	r0, sl
 800949e:	4659      	mov	r1, fp
 80094a0:	f7f7 f9f4 	bl	800088c <__aeabi_ddiv>
 80094a4:	ec41 0b18 	vmov	d8, r0, r1
 80094a8:	4620      	mov	r0, r4
 80094aa:	f7f7 f85b 	bl	8000564 <__aeabi_i2d>
 80094ae:	ec53 2b18 	vmov	r2, r3, d8
 80094b2:	ec41 0b19 	vmov	d9, r0, r1
 80094b6:	ec51 0b18 	vmov	r0, r1, d8
 80094ba:	f7f7 f8bd 	bl	8000638 <__aeabi_dmul>
 80094be:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80094c2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	4680      	mov	r8, r0
 80094ce:	4689      	mov	r9, r1
 80094d0:	f7f7 f8b2 	bl	8000638 <__aeabi_dmul>
 80094d4:	a360      	add	r3, pc, #384	; (adr r3, 8009658 <__ieee754_log+0x320>)
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	4606      	mov	r6, r0
 80094dc:	460f      	mov	r7, r1
 80094de:	f7f7 f8ab 	bl	8000638 <__aeabi_dmul>
 80094e2:	a35f      	add	r3, pc, #380	; (adr r3, 8009660 <__ieee754_log+0x328>)
 80094e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e8:	f7f6 fef0 	bl	80002cc <__adddf3>
 80094ec:	4632      	mov	r2, r6
 80094ee:	463b      	mov	r3, r7
 80094f0:	f7f7 f8a2 	bl	8000638 <__aeabi_dmul>
 80094f4:	a35c      	add	r3, pc, #368	; (adr r3, 8009668 <__ieee754_log+0x330>)
 80094f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fa:	f7f6 fee7 	bl	80002cc <__adddf3>
 80094fe:	4632      	mov	r2, r6
 8009500:	463b      	mov	r3, r7
 8009502:	f7f7 f899 	bl	8000638 <__aeabi_dmul>
 8009506:	a35a      	add	r3, pc, #360	; (adr r3, 8009670 <__ieee754_log+0x338>)
 8009508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950c:	f7f6 fede 	bl	80002cc <__adddf3>
 8009510:	4642      	mov	r2, r8
 8009512:	464b      	mov	r3, r9
 8009514:	f7f7 f890 	bl	8000638 <__aeabi_dmul>
 8009518:	a357      	add	r3, pc, #348	; (adr r3, 8009678 <__ieee754_log+0x340>)
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	4680      	mov	r8, r0
 8009520:	4689      	mov	r9, r1
 8009522:	4630      	mov	r0, r6
 8009524:	4639      	mov	r1, r7
 8009526:	f7f7 f887 	bl	8000638 <__aeabi_dmul>
 800952a:	a355      	add	r3, pc, #340	; (adr r3, 8009680 <__ieee754_log+0x348>)
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	f7f6 fecc 	bl	80002cc <__adddf3>
 8009534:	4632      	mov	r2, r6
 8009536:	463b      	mov	r3, r7
 8009538:	f7f7 f87e 	bl	8000638 <__aeabi_dmul>
 800953c:	a352      	add	r3, pc, #328	; (adr r3, 8009688 <__ieee754_log+0x350>)
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	f7f6 fec3 	bl	80002cc <__adddf3>
 8009546:	4632      	mov	r2, r6
 8009548:	463b      	mov	r3, r7
 800954a:	f7f7 f875 	bl	8000638 <__aeabi_dmul>
 800954e:	460b      	mov	r3, r1
 8009550:	4602      	mov	r2, r0
 8009552:	4649      	mov	r1, r9
 8009554:	4640      	mov	r0, r8
 8009556:	f7f6 feb9 	bl	80002cc <__adddf3>
 800955a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800955e:	9b01      	ldr	r3, [sp, #4]
 8009560:	3551      	adds	r5, #81	; 0x51
 8009562:	431d      	orrs	r5, r3
 8009564:	2d00      	cmp	r5, #0
 8009566:	4680      	mov	r8, r0
 8009568:	4689      	mov	r9, r1
 800956a:	dd48      	ble.n	80095fe <__ieee754_log+0x2c6>
 800956c:	4b4e      	ldr	r3, [pc, #312]	; (80096a8 <__ieee754_log+0x370>)
 800956e:	2200      	movs	r2, #0
 8009570:	4650      	mov	r0, sl
 8009572:	4659      	mov	r1, fp
 8009574:	f7f7 f860 	bl	8000638 <__aeabi_dmul>
 8009578:	4652      	mov	r2, sl
 800957a:	465b      	mov	r3, fp
 800957c:	f7f7 f85c 	bl	8000638 <__aeabi_dmul>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4606      	mov	r6, r0
 8009586:	460f      	mov	r7, r1
 8009588:	4640      	mov	r0, r8
 800958a:	4649      	mov	r1, r9
 800958c:	f7f6 fe9e 	bl	80002cc <__adddf3>
 8009590:	ec53 2b18 	vmov	r2, r3, d8
 8009594:	f7f7 f850 	bl	8000638 <__aeabi_dmul>
 8009598:	4680      	mov	r8, r0
 800959a:	4689      	mov	r9, r1
 800959c:	b964      	cbnz	r4, 80095b8 <__ieee754_log+0x280>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4630      	mov	r0, r6
 80095a4:	4639      	mov	r1, r7
 80095a6:	f7f6 fe8f 	bl	80002c8 <__aeabi_dsub>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	4650      	mov	r0, sl
 80095b0:	4659      	mov	r1, fp
 80095b2:	f7f6 fe89 	bl	80002c8 <__aeabi_dsub>
 80095b6:	e6d6      	b.n	8009366 <__ieee754_log+0x2e>
 80095b8:	a321      	add	r3, pc, #132	; (adr r3, 8009640 <__ieee754_log+0x308>)
 80095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095be:	ec51 0b19 	vmov	r0, r1, d9
 80095c2:	f7f7 f839 	bl	8000638 <__aeabi_dmul>
 80095c6:	a320      	add	r3, pc, #128	; (adr r3, 8009648 <__ieee754_log+0x310>)
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	4604      	mov	r4, r0
 80095ce:	460d      	mov	r5, r1
 80095d0:	ec51 0b19 	vmov	r0, r1, d9
 80095d4:	f7f7 f830 	bl	8000638 <__aeabi_dmul>
 80095d8:	4642      	mov	r2, r8
 80095da:	464b      	mov	r3, r9
 80095dc:	f7f6 fe76 	bl	80002cc <__adddf3>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4630      	mov	r0, r6
 80095e6:	4639      	mov	r1, r7
 80095e8:	f7f6 fe6e 	bl	80002c8 <__aeabi_dsub>
 80095ec:	4652      	mov	r2, sl
 80095ee:	465b      	mov	r3, fp
 80095f0:	f7f6 fe6a 	bl	80002c8 <__aeabi_dsub>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4620      	mov	r0, r4
 80095fa:	4629      	mov	r1, r5
 80095fc:	e7d9      	b.n	80095b2 <__ieee754_log+0x27a>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	4650      	mov	r0, sl
 8009604:	4659      	mov	r1, fp
 8009606:	f7f6 fe5f 	bl	80002c8 <__aeabi_dsub>
 800960a:	ec53 2b18 	vmov	r2, r3, d8
 800960e:	f7f7 f813 	bl	8000638 <__aeabi_dmul>
 8009612:	4606      	mov	r6, r0
 8009614:	460f      	mov	r7, r1
 8009616:	2c00      	cmp	r4, #0
 8009618:	f43f af23 	beq.w	8009462 <__ieee754_log+0x12a>
 800961c:	a308      	add	r3, pc, #32	; (adr r3, 8009640 <__ieee754_log+0x308>)
 800961e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009622:	ec51 0b19 	vmov	r0, r1, d9
 8009626:	f7f7 f807 	bl	8000638 <__aeabi_dmul>
 800962a:	a307      	add	r3, pc, #28	; (adr r3, 8009648 <__ieee754_log+0x310>)
 800962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009630:	4604      	mov	r4, r0
 8009632:	460d      	mov	r5, r1
 8009634:	ec51 0b19 	vmov	r0, r1, d9
 8009638:	e727      	b.n	800948a <__ieee754_log+0x152>
 800963a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8009690 <__ieee754_log+0x358>
 800963e:	e694      	b.n	800936a <__ieee754_log+0x32>
 8009640:	fee00000 	.word	0xfee00000
 8009644:	3fe62e42 	.word	0x3fe62e42
 8009648:	35793c76 	.word	0x35793c76
 800964c:	3dea39ef 	.word	0x3dea39ef
 8009650:	55555555 	.word	0x55555555
 8009654:	3fd55555 	.word	0x3fd55555
 8009658:	df3e5244 	.word	0xdf3e5244
 800965c:	3fc2f112 	.word	0x3fc2f112
 8009660:	96cb03de 	.word	0x96cb03de
 8009664:	3fc74664 	.word	0x3fc74664
 8009668:	94229359 	.word	0x94229359
 800966c:	3fd24924 	.word	0x3fd24924
 8009670:	55555593 	.word	0x55555593
 8009674:	3fe55555 	.word	0x3fe55555
 8009678:	d078c69f 	.word	0xd078c69f
 800967c:	3fc39a09 	.word	0x3fc39a09
 8009680:	1d8e78af 	.word	0x1d8e78af
 8009684:	3fcc71c5 	.word	0x3fcc71c5
 8009688:	9997fa04 	.word	0x9997fa04
 800968c:	3fd99999 	.word	0x3fd99999
	...
 8009698:	c3500000 	.word	0xc3500000
 800969c:	43500000 	.word	0x43500000
 80096a0:	7fefffff 	.word	0x7fefffff
 80096a4:	3ff00000 	.word	0x3ff00000
 80096a8:	3fe00000 	.word	0x3fe00000

080096ac <_init>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	bf00      	nop
 80096b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b2:	bc08      	pop	{r3}
 80096b4:	469e      	mov	lr, r3
 80096b6:	4770      	bx	lr

080096b8 <_fini>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	bf00      	nop
 80096bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096be:	bc08      	pop	{r3}
 80096c0:	469e      	mov	lr, r3
 80096c2:	4770      	bx	lr
